{"version":3,"file":"static/chunks/8878-d4b10477d58d2701.js","mappings":"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","sources":["webpack://_N_E/./src/utils/wallet.ts","webpack://_N_E/./src/components/AddToWallet/AddToWalletButton.tsx","webpack://_N_E/./src/components/CurrencyInputPanel/index.tsx","webpack://_N_E/./src/components/TransactionConfirmationModal/index.tsx","webpack://_N_E/./src/hooks/limitOrders/useGelatoLimitOrdersLib.ts","webpack://_N_E/./src/hooks/useTokenAllowance.ts","webpack://_N_E/./src/hooks/useApproveCallback.ts","webpack://_N_E/./src/hooks/useCallWithGasPrice.ts","webpack://_N_E/../../packages/uikit/src/components/Spinner/Spinner.tsx","webpack://_N_E/../../packages/uikit/src/widgets/Swap/ConfirmationPendingContent.tsx","webpack://_N_E/../../packages/uikit/src/widgets/Swap/TransactionErrorContent.tsx","webpack://_N_E/<anon>"],"sourcesContent":["// Set of helper functions to facilitate wallet setup\nimport { Address } from 'wagmi'\nimport { BAD_SRCS } from '../components/Logo/constants'\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (\n  tokenAddress: string,\n  tokenSymbol: string,\n  tokenDecimals: number,\n  tokenLogo?: string,\n) => {\n  // better leave this undefined for default image instead of broken image url\n  const image = tokenLogo ? (BAD_SRCS[tokenLogo] ? undefined : tokenLogo) : undefined\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress as Address,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n\nexport const canRegisterToken = () =>\n  typeof window !== 'undefined' &&\n  // @ts-ignore\n  !window?.ethereum?.isSafePal &&\n  (window?.ethereum?.isMetaMask ||\n    window?.ethereum?.isTrust ||\n    window?.ethereum?.isCoinbaseWallet ||\n    window?.ethereum?.isTokenPocket)\n","import { useTranslation } from '@pancakeswap/localization'\nimport {\n  BinanceChainIcon,\n  Button,\n  ButtonProps,\n  CoinbaseWalletIcon,\n  MetamaskIcon,\n  OperaIcon,\n  TokenPocketIcon,\n  TrustWalletIcon,\n} from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { canRegisterToken } from '../../utils/wallet'\nimport { BAD_SRCS } from '../Logo/constants'\n\nexport enum AddToWalletTextOptions {\n  NO_TEXT,\n  TEXT,\n  TEXT_WITH_ASSET,\n}\n\nexport interface AddToWalletButtonProps {\n  tokenAddress: string\n  tokenSymbol: string\n  tokenDecimals: number\n  tokenLogo: string\n  textOptions?: AddToWalletTextOptions\n  marginTextBetweenLogo?: string\n}\n\nconst Icons = {\n  // TODO: Brave\n  Binance: BinanceChainIcon,\n  'Coinbase Wallet': CoinbaseWalletIcon,\n  Opera: OperaIcon,\n  TokenPocket: TokenPocketIcon,\n  'Trust Wallet': TrustWalletIcon,\n  MetaMask: MetamaskIcon,\n}\n\nconst getWalletText = (textOptions: AddToWalletTextOptions, tokenSymbol: string, t: any) => {\n  return (\n    textOptions !== AddToWalletTextOptions.NO_TEXT &&\n    (textOptions === AddToWalletTextOptions.TEXT\n      ? t('Add to Wallet')\n      : t('Add %asset% to Wallet', { asset: tokenSymbol }))\n  )\n}\n\nconst getWalletIcon = (marginTextBetweenLogo: string, name?: string) => {\n  const iconProps = {\n    width: '16px',\n    ...(marginTextBetweenLogo && { ml: marginTextBetweenLogo }),\n  }\n  if (name && Icons[name]) {\n    const Icon = Icons[name]\n    return <Icon {...iconProps} />\n  }\n  if (window?.ethereum?.isTrust) {\n    return <TrustWalletIcon {...iconProps} />\n  }\n  if (window?.ethereum?.isCoinbaseWallet) {\n    return <CoinbaseWalletIcon {...iconProps} />\n  }\n  if (window?.ethereum?.isTokenPocket) {\n    return <TokenPocketIcon {...iconProps} />\n  }\n  if (window?.ethereum?.isMetaMask) {\n    return <MetamaskIcon {...iconProps} />\n  }\n  return <MetamaskIcon {...iconProps} />\n}\n\nconst AddToWalletButton: React.FC<AddToWalletButtonProps & ButtonProps> = ({\n  tokenAddress,\n  tokenSymbol,\n  tokenDecimals,\n  tokenLogo,\n  textOptions = AddToWalletTextOptions.NO_TEXT,\n  marginTextBetweenLogo = '0px',\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const { connector, isConnected } = useAccount()\n  const isCanRegisterToken = canRegisterToken()\n\n  if (connector && connector.name === 'Binance') return null\n  if (!(connector && connector.watchAsset && isConnected)) return null\n  if (!isCanRegisterToken) return null\n\n  return (\n    <Button\n      {...props}\n      onClick={() => {\n        const image = tokenLogo ? (BAD_SRCS[tokenLogo] ? undefined : tokenLogo) : undefined\n        connector.watchAsset?.({\n          address: tokenAddress,\n          symbol: tokenSymbol,\n          image,\n          // @ts-ignore\n          decimals: tokenDecimals,\n        })\n      }}\n    >\n      {getWalletText(textOptions, tokenSymbol, t)}\n      {getWalletIcon(marginTextBetweenLogo, connector?.name)}\n    </Button>\n  )\n}\n\nexport default AddToWalletButton\n","import { useMemo, useState } from 'react'\nimport { Currency, Pair, Token, Percent, CurrencyAmount } from '@pancakeswap/sdk'\nimport { Button, ChevronDownIcon, Text, useModal, Flex, Box, NumericalInput, CopyButton } from '@pancakeswap/uikit'\nimport styled, { css } from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { WrappedTokenInfo } from '@pancakeswap/token-lists'\n\nimport { useBUSDCurrencyAmount } from 'hooks/useBUSDPrice'\nimport { formatNumber } from '@pancakeswap/utils/formatBalance'\nimport { StablePair } from 'views/AddLiquidity/AddStableLiquidity/hooks/useStableLPDerivedMintInfo'\n\nimport { useAccount } from 'wagmi'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../Logo'\n\nimport AddToWalletButton from '../AddToWallet/AddToWalletButton'\n\nconst InputRow = styled.div<{ selected: boolean }>`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  justify-content: flex-end;\n  padding: ${({ selected }) => (selected ? '0.75rem 0.5rem 0.75rem 1rem' : '0.75rem 0.75rem 0.75rem 1rem')};\n`\nconst CurrencySelectButton = styled(Button).attrs({ variant: 'text', scale: 'sm' })<{ zapStyle?: ZapStyle }>`\n  padding: 0 0.5rem;\n  ${({ zapStyle, theme }) =>\n    zapStyle &&\n    css`\n      padding: 8px;\n      background: ${theme.colors.background};\n      border: 1px solid ${theme.colors.cardBorder};\n      border-radius: ${zapStyle === 'zap' ? '0px' : '8px'} 8px 0px 0px;\n      height: auto;\n    `};\n`\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 0.75rem;\n  line-height: 1rem;\n  padding: 0.75rem 1rem 0 1rem;\n`\nconst InputPanel = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  z-index: 1;\n`\nconst Container = styled.div<{ zapStyle?: ZapStyle; error?: boolean }>`\n  border-radius: 16px;\n  background-color: ${({ theme }) => theme.colors.input};\n  box-shadow: ${({ theme, error }) => theme.shadows[error ? 'warning' : 'inset']};\n  ${({ zapStyle }) =>\n    !!zapStyle &&\n    css`\n      border-radius: 0px 16px 16px 16px;\n    `};\n`\n\nconst Overlay = styled.div`\n  position: absolute;\n  inset: 0;\n  opacity: 0.6;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\ntype ZapStyle = 'noZap' | 'zap'\n\ninterface CurrencyInputPanelProps {\n  value: string\n  onUserInput: (value: string) => void\n  onInputBlur?: () => void\n  onPercentInput?: (percent: number) => void\n  onMax?: () => void\n  showQuickInputButton?: boolean\n  showMaxButton: boolean\n  maxAmount?: CurrencyAmount<Currency>\n  lpPercent?: string\n  label?: string\n  onCurrencySelect?: (currency: Currency) => void\n  currency?: Currency | null\n  disableCurrencySelect?: boolean\n  hideBalance?: boolean\n  pair?: Pair | StablePair | null\n  otherCurrency?: Currency | null\n  id: string\n  showCommonBases?: boolean\n  commonBasesType?: string\n  showSearchInput?: boolean\n  zapStyle?: ZapStyle\n  beforeButton?: React.ReactNode\n  disabled?: boolean\n  error?: boolean\n  showUSDPrice?: boolean\n  tokensToShow?: Token[]\n}\nexport default function CurrencyInputPanel({\n  value,\n  onUserInput,\n  onInputBlur,\n  onPercentInput,\n  onMax,\n  showQuickInputButton = false,\n  showMaxButton,\n  maxAmount,\n  lpPercent,\n  label,\n  onCurrencySelect,\n  currency,\n  disableCurrencySelect = false,\n  hideBalance = false,\n  zapStyle,\n  beforeButton,\n  pair = null, // used for double token logo\n  otherCurrency,\n  id,\n  showCommonBases,\n  commonBasesType,\n  showSearchInput,\n  disabled,\n  error,\n  showUSDPrice,\n  tokensToShow,\n}: CurrencyInputPanelProps) {\n  const { address: account } = useAccount()\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\n  const { t } = useTranslation()\n\n  const token = pair ? pair.liquidityToken : currency?.isToken ? currency : null\n  const tokenAddress = token ? isAddress(token.address) : null\n\n  const amountInDollar = useBUSDCurrencyAmount(\n    showUSDPrice ? currency : undefined,\n    Number.isFinite(+value) ? +value : undefined,\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={currency}\n      otherSelectedCurrency={otherCurrency}\n      showCommonBases={showCommonBases}\n      commonBasesType={commonBasesType}\n      showSearchInput={showSearchInput}\n      tokensToShow={tokensToShow}\n    />,\n  )\n\n  const percentAmount = useMemo(\n    () => ({\n      25: maxAmount ? maxAmount.multiply(new Percent(25, 100)).toExact() : undefined,\n      50: maxAmount ? maxAmount.multiply(new Percent(50, 100)).toExact() : undefined,\n      75: maxAmount ? maxAmount.multiply(new Percent(75, 100)).toExact() : undefined,\n    }),\n    [maxAmount],\n  )\n\n  const [currentClickedPercent, setCurrentClickedPercent] = useState('')\n\n  const isAtPercentMax = (maxAmount && value === maxAmount.toExact()) || (lpPercent && lpPercent === '100')\n\n  return (\n    <Box position=\"relative\" id={id}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex>\n          {beforeButton}\n          <CurrencySelectButton\n            zapStyle={zapStyle}\n            className=\"open-currency-select-button\"\n            selected={!!currency}\n            onClick={() => {\n              if (!disableCurrencySelect) {\n                onPresentCurrencyModal()\n              }\n            }}\n          >\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n              {pair ? (\n                <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={16} margin />\n              ) : currency ? (\n                <CurrencyLogo currency={currency} size=\"24px\" style={{ marginRight: '8px' }} />\n              ) : null}\n              {pair ? (\n                <Text id=\"pair\" bold>\n                  {pair?.token0.symbol}:{pair?.token1.symbol}\n                </Text>\n              ) : (\n                <Text id=\"pair\" bold>\n                  {(currency && currency.symbol && currency.symbol.length > 10\n                    ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                        currency.symbol.length - 5,\n                        currency.symbol.length,\n                      )}`\n                    : currency?.symbol) || t('Select a currency')}\n                </Text>\n              )}\n              {!disableCurrencySelect && <ChevronDownIcon />}\n            </Flex>\n          </CurrencySelectButton>\n          {token && tokenAddress ? (\n            <Flex style={{ gap: '4px' }} ml=\"4px\" alignItems=\"center\">\n              <CopyButton\n                width=\"16px\"\n                buttonColor=\"textSubtle\"\n                text={tokenAddress}\n                tooltipMessage={t('Token address copied')}\n              />\n              <AddToWalletButton\n                variant=\"text\"\n                p=\"0\"\n                height=\"auto\"\n                width=\"fit-content\"\n                tokenAddress={tokenAddress}\n                tokenSymbol={token.symbol}\n                tokenDecimals={token.decimals}\n                tokenLogo={token instanceof WrappedTokenInfo ? token.logoURI : undefined}\n              />\n            </Flex>\n          ) : null}\n        </Flex>\n        {account && (\n          <Text\n            onClick={!disabled && onMax}\n            color=\"textSubtle\"\n            fontSize=\"14px\"\n            style={{ display: 'inline', cursor: 'pointer' }}\n          >\n            {!hideBalance && !!currency\n              ? t('Balance: %balance%', { balance: selectedCurrencyBalance?.toSignificant(6) ?? t('Loading') })\n              : ' -'}\n          </Text>\n        )}\n      </Flex>\n      <InputPanel>\n        <Container as=\"label\" zapStyle={zapStyle} error={error}>\n          <LabelRow>\n            <NumericalInput\n              error={error}\n              disabled={disabled}\n              className=\"token-amount-input\"\n              value={value}\n              onBlur={onInputBlur}\n              onUserInput={(val) => {\n                onUserInput(val)\n                setCurrentClickedPercent('')\n              }}\n            />\n          </LabelRow>\n          {!!currency && showUSDPrice && (\n            <Flex justifyContent=\"flex-end\" mr=\"1rem\">\n              <Flex maxWidth=\"200px\">\n                {Number.isFinite(amountInDollar) ? (\n                  <Text fontSize=\"12px\" color=\"textSubtle\">\n                    ~{formatNumber(amountInDollar)} USD\n                  </Text>\n                ) : (\n                  <Box height=\"18px\" />\n                )}\n              </Flex>\n            </Flex>\n          )}\n          <InputRow selected={disableCurrencySelect}>\n            {account && currency && selectedCurrencyBalance?.greaterThan(0) && !disabled && label !== 'To' && (\n              <Flex alignItems=\"right\" justifyContent=\"right\">\n                {maxAmount?.greaterThan(0) &&\n                  showQuickInputButton &&\n                  onPercentInput &&\n                  [25, 50, 75].map((percent) => {\n                    const isAtClickedPercent = currentClickedPercent === percent.toString()\n                    const isAtCurrentPercent =\n                      (maxAmount && value !== '0' && value === percentAmount[percent]) ||\n                      (lpPercent && lpPercent === percent.toString())\n\n                    return (\n                      <Button\n                        key={`btn_quickCurrency${percent}`}\n                        onClick={() => {\n                          onPercentInput(percent)\n                          setCurrentClickedPercent(percent.toString())\n                        }}\n                        scale=\"xs\"\n                        mr=\"5px\"\n                        variant={isAtClickedPercent || isAtCurrentPercent ? 'primary' : 'secondary'}\n                        style={{ textTransform: 'uppercase' }}\n                      >\n                        {percent}%\n                      </Button>\n                    )\n                  })}\n                {maxAmount?.greaterThan(0) && showMaxButton && (\n                  <Button\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      e.preventDefault()\n                      onMax?.()\n                      setCurrentClickedPercent('MAX')\n                    }}\n                    scale=\"xs\"\n                    variant={isAtPercentMax ? 'primary' : 'secondary'}\n                    style={{ textTransform: 'uppercase' }}\n                  >\n                    {t('Max')}\n                  </Button>\n                )}\n              </Flex>\n            )}\n          </InputRow>\n        </Container>\n        {disabled && <Overlay />}\n      </InputPanel>\n    </Box>\n  )\n}\n","import { useCallback } from 'react'\nimport { ChainId, Currency, Token } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Text,\n  ArrowUpIcon,\n  Link,\n  ConfirmationPendingContent,\n  Modal,\n  InjectedModalProps,\n  ModalProps,\n  BscScanIcon,\n  AutoColumn,\n  ColumnCenter,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { WrappedTokenInfo } from '@pancakeswap/token-lists'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { getBlockExploreLink, getBlockExploreName } from '../../utils'\nimport AddToWalletButton, { AddToWalletTextOptions } from '../AddToWallet/AddToWalletButton'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\nconst Section = styled(AutoColumn)`\n  padding: 24px;\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 24px 0;\n`\n\nexport function TransactionSubmittedContent({\n  onDismiss,\n  chainId,\n  hash,\n  currencyToAdd,\n}: {\n  onDismiss: () => void\n  hash: string | undefined\n  chainId: ChainId\n  currencyToAdd?: Currency | undefined\n}) {\n  const { t } = useTranslation()\n\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\n\n  return (\n    <Wrapper>\n      <Section>\n        <ConfirmedIcon>\n          <ArrowUpIcon strokeWidth={0.5} width=\"90px\" color=\"primary\" />\n        </ConfirmedIcon>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text fontSize=\"20px\">{t('Transaction Submitted')}</Text>\n          {chainId && hash && (\n            <Link external small href={getBlockExploreLink(hash, 'transaction', chainId)}>\n              {t('View on %site%', {\n                site: getBlockExploreName(chainId),\n              })}\n              {chainId === ChainId.BSC && <BscScanIcon color=\"primary\" ml=\"4px\" />}\n            </Link>\n          )}\n          {currencyToAdd && (\n            <AddToWalletButton\n              variant=\"tertiary\"\n              mt=\"12px\"\n              width=\"fit-content\"\n              marginTextBetweenLogo=\"6px\"\n              textOptions={AddToWalletTextOptions.TEXT_WITH_ASSET}\n              tokenAddress={token.address}\n              tokenSymbol={currencyToAdd.symbol}\n              tokenDecimals={token.decimals}\n              tokenLogo={token instanceof WrappedTokenInfo ? token.logoURI : undefined}\n            />\n          )}\n          <Button onClick={onDismiss} mt=\"20px\">\n            {t('Close')}\n          </Button>\n        </AutoColumn>\n      </Section>\n    </Wrapper>\n  )\n}\n\ninterface ConfirmationModalProps {\n  title: string\n  customOnDismiss?: () => void\n  hash: string | undefined\n  content: () => React.ReactNode\n  attemptingTxn: boolean\n  pendingText: string\n  currencyToAdd?: Currency | undefined\n}\n\nconst TransactionConfirmationModal: React.FC<\n  React.PropsWithChildren<InjectedModalProps & ConfirmationModalProps & ModalProps>\n> = ({ title, onDismiss, customOnDismiss, attemptingTxn, hash, pendingText, content, currencyToAdd, ...props }) => {\n  const { chainId } = useActiveChainId()\n\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss?.()\n  }, [customOnDismiss, onDismiss])\n\n  if (!chainId) return null\n\n  return (\n    <Modal title={title} headerBackground=\"gradientCardHeader\" {...props} onDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : hash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={hash}\n          onDismiss={handleDismiss}\n          currencyToAdd={currencyToAdd}\n        />\n      ) : (\n        content()\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionConfirmationModal\n","import { useMemo } from 'react'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { ChainId as ChainIdType, GelatoLimitOrders } from '@gelatonetwork/limit-orders-lib'\nimport { GELATO_HANDLER } from 'config/constants/exchange'\nimport { useProviderOrSigner } from 'hooks/useProviderOrSigner'\nimport { useActiveChainId } from '../useActiveChainId'\n\nconst useGelatoLimitOrdersLib = (): GelatoLimitOrders | undefined => {\n  const { chainId } = useActiveChainId()\n  const providerOrSigner = useProviderOrSigner(true, true)\n\n  return useMemo(() => {\n    if (!chainId || !providerOrSigner) {\n      console.error('Could not instantiate GelatoLimitOrders: missing chainId or library')\n      return undefined\n    }\n    if (chainId !== ChainId.BSC) return undefined\n    try {\n      return new GelatoLimitOrders(chainId as ChainIdType, providerOrSigner, GELATO_HANDLER, false)\n    } catch (error: any) {\n      console.error(`Could not instantiate GelatoLimitOrders: ${error.message}`)\n      return undefined\n    }\n  }, [chainId, providerOrSigner])\n}\n\nexport default useGelatoLimitOrdersLib\n","import { Token, CurrencyAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\n\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nfunction useTokenAllowance(token?: Token, owner?: string, spender?: string): CurrencyAmount<Token> | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(\n    () => (token && allowance ? CurrencyAmount.fromRawAmount(token, allowance.toString()) : undefined),\n    [token, allowance],\n  )\n}\n\nexport default useTokenAllowance\n","import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, Trade, TradeType } from '@pancakeswap/sdk'\nimport { useToast } from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { ROUTER_ADDRESS } from 'config/constants/exchange'\nimport { useCallback, useMemo } from 'react'\nimport { logError } from 'utils/sentry'\nimport { Field } from '../state/swap/actions'\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin } from '../utils'\nimport { computeSlippageAdjustedAmounts } from '../utils/exchange'\nimport useGelatoLimitOrdersLib from './limitOrders/useGelatoLimitOrdersLib'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\nimport { useTokenContract } from './useContract'\nimport useTokenAllowance from './useTokenAllowance'\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount<Currency>,\n  spender?: string,\n): [ApprovalState, () => Promise<void>] {\n  const { address: account } = useAccount()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const token = amountToApprove?.currency?.isToken ? amountToApprove.currency : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency?.isNative) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      toastError(t('Error'), t('Approve was called unnecessarily'))\n      console.error('approve was called unnecessarily')\n      return undefined\n    }\n    if (!token) {\n      toastError(t('Error'), t('No token'))\n      console.error('no token')\n      return undefined\n    }\n\n    if (!tokenContract) {\n      toastError(t('Error'), t('Cannot find contract of the token %tokenAddress%', { tokenAddress: token?.address }))\n      console.error('tokenContract is null')\n      return undefined\n    }\n\n    if (!amountToApprove) {\n      toastError(t('Error'), t('Missing amount to approve'))\n      console.error('missing amount to approve')\n      return undefined\n    }\n\n    if (!spender) {\n      toastError(t('Error'), t('No spender'))\n      console.error('no spender')\n      return undefined\n    }\n\n    let useExact = false\n\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.quotient.toString()).catch(() => {\n        console.error('estimate gas failure')\n        toastError(t('Error'), t('Unexpected error. Could not estimate gas for the approve.'))\n        return null\n      })\n    })\n\n    if (!estimatedGas) return undefined\n\n    return callWithGasPrice(\n      tokenContract,\n      'approve',\n      [spender, useExact ? amountToApprove.quotient.toString() : MaxUint256],\n      {\n        gasLimit: calculateGasMargin(estimatedGas),\n      },\n    )\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: `Approve ${amountToApprove.currency.symbol}`,\n          translatableSummary: { text: 'Approve %symbol%', data: { symbol: amountToApprove.currency.symbol } },\n          approval: { tokenAddress: token.address, spender },\n          type: 'approve',\n        })\n      })\n      .catch((error: any) => {\n        logError(error)\n        console.error('Failed to approve token', error)\n        if (error?.code !== 4001) {\n          toastError(t('Error'), error.message)\n        }\n        throw error\n      })\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction, callWithGasPrice, t, toastError])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(\n  trade?: Trade<Currency, Currency, TradeType>,\n  allowedSlippage = 0,\n  chainId?: number,\n) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage],\n  )\n\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS[chainId])\n}\n\n// Wraps useApproveCallback in the context of a Gelato Limit Orders\nexport function useApproveCallbackFromInputCurrencyAmount(currencyAmountIn: CurrencyAmount<Currency> | undefined) {\n  const gelatoLibrary = useGelatoLimitOrdersLib()\n\n  return useApproveCallback(currencyAmountIn, gelatoLibrary?.erc20OrderRouter.address ?? undefined)\n}\n","import { AppState } from 'state'\nimport { useSelector } from 'react-redux'\nimport { useCallback } from 'react'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Contract, CallOverrides } from '@ethersproject/contracts'\nimport { useGasPrice } from 'state/user/hooks'\nimport get from 'lodash/get'\nimport { addBreadcrumb } from '@sentry/nextjs'\nimport { GAS_PRICE_GWEI } from '../state/types'\n\nexport function useCallWithGasPrice() {\n  const gasPrice = useGasPrice()\n  const userGasPrice = useSelector<AppState, AppState['user']['gasPrice']>((state) => state.user.gasPrice)\n\n  /**\n   * Perform a contract call with a gas price returned from useGasPrice\n   * @param contract Used to perform the call\n   * @param methodName The name of the method called\n   * @param methodArgs An array of arguments to pass to the method\n   * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n   * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n   */\n  const callWithGasPrice = useCallback(\n    async (\n      contract: Contract,\n      methodName: string,\n      methodArgs: any[] = [],\n      overrides: CallOverrides = null,\n    ): Promise<TransactionResponse> => {\n      addBreadcrumb({\n        type: 'Transaction',\n        message:\n          userGasPrice === GAS_PRICE_GWEI.rpcDefault\n            ? `Call with market gas price`\n            : `Call with gas price: ${gasPrice}`,\n        data: {\n          contractAddress: contract.address,\n          methodName,\n          methodArgs,\n          overrides,\n        },\n      })\n\n      const contractMethod = get(contract, methodName)\n      const hasManualGasPriceOverride = overrides?.gasPrice\n      const tx = await contractMethod(\n        ...methodArgs,\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\n      )\n\n      if (tx) {\n        addBreadcrumb({\n          type: 'Transaction',\n          message: `Transaction sent: ${tx.hash}`,\n          data: {\n            hash: tx.hash,\n            from: tx.from,\n            gasLimit: tx.gasLimit?.toString(),\n            nonce: tx.nonce,\n          },\n        })\n      }\n\n      return tx\n    },\n    [gasPrice, userGasPrice],\n  )\n\n  return { callWithGasPrice }\n}\n","import React from \"react\";\nimport { Image, Box } from \"@pancakeswap/uikit\";\nimport { SpinnerProps } from \"./types\";\n\nconst Spinner: React.FC<React.PropsWithChildren<SpinnerProps>> = ({ size = 128 }) => {\n  return (\n    <Box width={size} height={size * 1.197} position=\"relative\">\n      <Image\n        width={size}\n        height={size * 1.197}\n        src=\"https://assets.pancakeswap.finance/web/pancake-3d-spinner-v2.gif\"\n        alt=\"pancake-3d-spinner\"\n      />\n    </Box>\n  );\n};\n\nexport default Spinner;\n","import { useTranslation } from \"@pancakeswap/localization\";\nimport styled from \"styled-components\";\nimport { AutoColumn, ColumnCenter } from \"../../components/Column\";\nimport { Spinner, Text } from \"../../components\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 24px 0;\n`;\n\nexport function ConfirmationPendingContent({ pendingText }: { pendingText?: string }) {\n  const { t } = useTranslation();\n  return (\n    <Wrapper>\n      <ConfirmedIcon>\n        <Spinner />\n      </ConfirmedIcon>\n      <AutoColumn gap=\"12px\" justify=\"center\">\n        {pendingText ? (\n          <>\n            <Text fontSize=\"20px\">{t(\"Waiting For Confirmation\")}</Text>\n            <AutoColumn gap=\"12px\" justify=\"center\">\n              <Text bold small textAlign=\"center\">\n                {pendingText}\n              </Text>\n            </AutoColumn>\n          </>\n        ) : null}\n        <Text small color=\"textSubtle\" textAlign=\"center\">\n          {t(\"Confirm this transaction in your wallet\")}\n        </Text>\n      </AutoColumn>\n    </Wrapper>\n  );\n}\n","import { ReactElement } from \"react\";\nimport { useTranslation } from \"@pancakeswap/localization\";\nimport styled from \"styled-components\";\nimport { AutoColumn, ErrorIcon, Text, Flex, Button } from \"../../components\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport function TransactionErrorContent({\n  message,\n  onDismiss,\n}: {\n  message: ReactElement | string;\n  onDismiss?: () => void;\n}) {\n  const { t } = useTranslation();\n  return (\n    <Wrapper>\n      <AutoColumn justify=\"center\">\n        <ErrorIcon color=\"failure\" width=\"64px\" />\n        <Text color=\"failure\" style={{ textAlign: \"center\", width: \"85%\", wordBreak: \"break-word\" }}>\n          {message}\n        </Text>\n      </AutoColumn>\n\n      {onDismiss ? (\n        <Flex justifyContent=\"center\" pt=\"24px\">\n          <Button onClick={onDismiss}>{t(\"Dismiss\")}</Button>\n        </Flex>\n      ) : null}\n    </Wrapper>\n  );\n}\n"],"names":["AddToWalletTextOptions","_async_to_generator","Z","tokenAddress","tokenSymbol","tokenDecimals","tokenLogo","image","BAD_SRCS","undefined","window","ethereum","request","method","params","type","options","address","symbol","decimals","_state","sent","canRegisterToken","isSafePal","isMetaMask","isTrust","isCoinbaseWallet","isTokenPocket","NO_TEXT","TEXT","TEXT_WITH_ASSET","Icons","Binance","BinanceChainIcon","CoinbaseWalletIcon","Opera","OperaIcon","TokenPocket","TokenPocketIcon","TrustWalletIcon","MetaMask","MetamaskIcon","getWalletIcon","marginTextBetweenLogo","name","iconProps","_object_spread","width","ml","Icon","jsx_runtime","jsx","AddToWallet_AddToWalletButton","_param","textOptions","_param_textOptions","_param_marginTextBetweenLogo","props","t","useTranslation","useAccount","connector","isConnected","isCanRegisterToken","watchAsset","jsxs","Button","onClick","asset","InputRow","styled","param","selected","CurrencySelectButton","attrs","variant","scale","withConfig","zapStyle","theme","css","colors","background","cardBorder","LabelRow","text","InputPanel","backgroundAlt","Container","input","error","shadows","Overlay","CurrencyInputPanel","selectedCurrencyBalance","value","onUserInput","onInputBlur","onPercentInput","onMax","showQuickInputButton","showMaxButton","maxAmount","lpPercent","label","onCurrencySelect","currency","disableCurrencySelect","_param_disableCurrencySelect","_param_hideBalance","hideBalance","beforeButton","pair","_param_pair","otherCurrency","id","showCommonBases","commonBasesType","showSearchInput","disabled","showUSDPrice","tokensToShow","useCurrencyBalance","account","token","liquidityToken","isToken","isAddress","amountInDollar","useBUSDCurrencyAmount","Number","isFinite","onPresentCurrencyModal","useModal","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","CurrencySearchModal","selectedCurrency","otherSelectedCurrency","percentAmount","useMemo","multiply","Percent","toExact","useState","currentClickedPercent","setCurrentClickedPercent","isAtPercentMax","Box","position","Flex","alignItems","justifyContent","className","DoubleCurrencyLogo","currency0","token0","currency1","token1","size","margin","CurrencyLogo","style","marginRight","Text","bold","length","slice","concat","ChevronDownIcon","gap","CopyButton","buttonColor","tooltipMessage","AddToWalletButton","p","height","WrappedTokenInfo","logoURI","color","fontSize","display","cursor","balance","toSignificant","as","NumericalInput","onBlur","val","mr","maxWidth","formatNumber","greaterThan","_param_showQuickInputButton","map","percent","isAtClickedPercent","toString","isAtCurrentPercent","textTransform","e","stopPropagation","preventDefault","Wrapper","Section","AutoColumn","ConfirmedIcon","ColumnCenter","TransactionSubmittedContent","onDismiss","chainId","hash","currencyToAdd","wrappedCurrency","ArrowUpIcon","strokeWidth","justify","Link","external","small","href","getBlockExploreLink","site","getBlockExploreName","ChainId","BscScanIcon","mt","__webpack_exports__","title","customOnDismiss","attemptingTxn","pendingText","content","useActiveChainId","handleDismiss","useCallback","Modal","headerBackground","ConfirmationPendingContent","providerOrSigner","useProviderOrSigner","console","GelatoLimitOrders","GELATO_HANDLER","message","ApprovalState","hooks_useTokenAllowance","owner","spender","contract","useTokenContract","inputs","allowance","useSingleCallResult","result","CurrencyAmount","useApproveCallback","amountToApprove","callWithGasPrice","useCallWithGasPrice","toastError","useToast","currentAllowance","useTokenAllowance","pendingApproval","useHasPendingApproval","approvalState","isNative","APPROVED","lessThan","PENDING","NOT_APPROVED","UNKNOWN","tokenContract","addTransaction","useTransactionAdder","approve","useExact","estimatedGas","estimateGas","MaxUint256","catch","quotient","gasLimit","calculateGasMargin","then","response","summary","translatableSummary","data","approval","logError","code","useApproveCallbackFromInputCurrencyAmount","currencyAmountIn","gelatoLibrary","useGelatoLimitOrdersLib","erc20OrderRouter","gasPrice","useGasPrice","userGasPrice","useSelector","state","user","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__","methodName","methodArgs","overrides","contractMethod","hasManualGasPriceOverride","tx","addBreadcrumb","GAS_PRICE_GWEI","contractAddress","get","_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_9__","_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_10__","from","nonce","_param_size","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Image","src","alt","Spinner","Fragment","textAlign","TransactionErrorContent","ErrorIcon","wordBreak","pt"],"sourceRoot":""}