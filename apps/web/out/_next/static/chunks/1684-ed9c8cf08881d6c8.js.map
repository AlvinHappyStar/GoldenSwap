{"version":3,"file":"static/chunks/1684-ed9c8cf08881d6c8.js","mappings":"4JA2BAA,CAAAA,EAAA,EAjB0E,SAAAC,CAAA,CAAqC,KAAlCC,EAAAA,EAAAA,MAAAA,CAAQC,EAAAA,EAAAA,SAAAA,CAAWC,EAAAA,EAAAA,QAAAA,CACxFC,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACR,MACE,GAAAE,EAAAC,GAAA,EAACC,EAAAA,EAAKA,CAAAA,CACJC,MAAOL,EAAE,gBACTF,UAAW,UAAM,CACfA,MAAAA,GAAAA,IACAC,GACF,WAEA,GAAAG,EAAAC,GAAA,EAACG,EAAAA,EAAGA,CAAAA,CAACC,SAAS,iBACZ,GAAAL,EAAAC,GAAA,EAACK,EAAAA,CAAWA,CAAAA,CAACX,OAAQA,EAAQY,qBAAsBX,OAI3D,uSCrBA,IAAMY,EAAgB,CACpBC,SAAU,WACVC,iBAAkB,KAClBC,eAAgB,EAClB,EASMC,EAAYC,CAAAA,EAAAA,EAAAA,EAAAA,EAAOC,EAAAA,CAAIA,EAAAA,UAAAA,CAAAA,mCAIzB,SAAApB,CAAA,SAAeqB,EAAZA,KAAAA,CAAkBC,YAAY,CAACC,EAAE,EAgCxCxB,CAAAA,EAAA,EA3B+E,SAAAyB,CAAA,CAOzE,KANJC,EAAAA,EAAAA,KAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACAC,EAAAA,EAAAA,YAAAA,CACAC,EAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EACAC,MAAAA,CACGC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CALHL,QACAC,cACAC,eACAC,WACAC,WAGA,OAAOJ,EACL,GAAAM,EAAAC,IAAA,EAACC,EAAAA,CAAOA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,WAAW,YAAeJ,GAAAA,WACjC,GAAAC,EAAAC,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CAACD,WAAW,oBACf,GAAAH,EAAAxB,GAAA,EAACW,EAAAA,CAAUkB,GAAG,MAAMC,KAAI,YACrBR,KAPTA,IAAAA,GAAaS,EAOKC,CAAAA,EAAAA,EAAAA,CAAAA,EAAa,iBAAOd,EAAqBe,WAAWf,GAASA,CAAK,CAAEX,GAAiBW,CAAK,GAErGC,GAAeC,GACd,GAAAI,EAAAxB,GAAA,EAACa,EAAAA,CAAIA,CAAAA,CAACqB,MAAM,aAAaC,SAAS,OAAOL,KAAI,GAACM,WAAY,aACvD,GAAkBhB,MAAAA,CAAfD,EAAY,KAAgBkB,MAAA,CAAbjB,QAIxBC,MAGH,GAAAG,EAAAxB,GAAA,EAACsC,EAAAA,CAAQA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,OAAO,OAAOC,MAAM,SAAYjB,GAC3C,yKM/C8EkB,EAQEC,ukBLC5E,IAAMC,EAAmC,SAACC,CAAAA,CAAyB,CACxE,MAAOC,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,IAEFD,EAGV,aCPME,KAA4B,GAAAC,EAAAC,CAAA,WAAOC,CAAAA,CAAsBC,CAAAA,CAAiBC,CAAAA,CAA6B,KACrGC,EAYAC,EAKAC,kEAjB6B,SAAMC,CAAAA,EAAAA,EAAAA,CAAAA,EACvCZ,EDTFO,EAAOM,GAAG,CACR,SAACC,CAAAA,CAAAA,OAAU,UACqBR,MAAAA,CAA7BQ,EAAMC,SAAS,CAAC,eAAgDD,MAAAA,CCQlDR,EDR4B,wBAAmCZ,MAAA,CAAboB,EAAME,MAAM,CAAC,6CCShFR,EAAiBS,EAAAA,EAA0BA,CAAGC,EAAAA,EAAW,CACzD,aAGF,GAAI,CAPET,CAAAA,EAA6BU,EAAAC,IAAA,IASjC,OADAC,QAAQC,KAAK,CAAC,6BACd,GAAO,IAAI,CACZ,CAyBD,OAvBMZ,EAASa,IAAUd,EAAW,SAAClC,CAAAA,CAAU,CAC7C,OAAOA,EAAMiD,UAAU,GAInBb,EAAAA,EAAAA,CAONc,OAAOC,IAAI,CAAChB,GAAQiB,OAAO,CAAC,SAACC,CAAAA,CAAa,CACxC,IAAMb,EAAYa,EAASC,KAAK,CAAC,IAAI,CAAC,EAAE,CACpCd,GACFJ,EAAYmB,IAAI,CAAC,CACfxB,aAAAA,EACAS,UAAAA,EACAS,WAAYd,CAAM,CAACkB,EAAS,CAAGtC,WAAWoB,CAAM,CAACkB,EAAS,EAAI,CAAC,EAGrE,GAEA,GAAOG,IAAQpB,EAAa,SAACqB,CAAAA,CAAAA,QAAeC,SAASD,EAAWjB,SAAS,CAAE,SAC7E,YArCyCT,CAAAA,CAAsBC,CAAAA,CAAiBC,CAAAA,CAAAA,kCAuC1E0B,GAAc,SAACC,CAAAA,CAAuC,CAC1D,OAAQA,GACN,KAAKC,EAAAA,CAAAA,CAAAA,GAA0B,CAC7B,OAAOC,EAAAA,EAAgBA,MACpBD,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,OAAOC,EAAAA,EAAAA,EAAgBA,MACpBD,EAAAA,CAAAA,CAAAA,KAA4B,CAC/B,OAAOE,EAAAA,EAAYA,MAChBF,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,OAAOE,GAAAA,EAAAA,EAAYA,SAEnB,OAAOD,EAAAA,EAAAA,EAAgBA,CAE7B,EAEME,GAAqB,SAACJ,CAAAA,CAAuC,CACjE,OAAQA,GACN,KAAKC,EAAAA,CAAAA,CAAAA,GAA0B,CAC7B,OAAO,CACT,MAAKA,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,OAAO,CACT,MAAKA,EAAAA,CAAAA,CAAAA,KAA4B,CAC/B,OAAO,EACT,MAAKA,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,OAAO,GACT,SACE,OAAO,CACX,CACF,EAIMI,MAAwB,GAAApC,EAAAC,CAAA,WAC5BoC,CAAAA,CACAC,CAAAA,CACAP,CAAAA,CAEAQ,CAAAA,CAEAC,CAAAA,CACG,KACGC,EACAC,EACAC,EACAC,EACFC,EAOI1C,EAMuC2C,kEAZ/C,IALML,EAAWX,GAAYC,GACvBW,EAAeK,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,IAAIC,MAC/BL,EAAiBI,CAAAA,EAAAA,EAAAA,CAAAA,EAAYE,CAAAA,EAAAA,EAAAA,CAAAA,EAAYC,CAAAA,EAAAA,EAAAA,CAAAA,EAAIR,IAAAA,EAAqB,CAAES,KAAMhB,GAAmBJ,EAAY,KACzGa,EAAAA,EAAAA,CACFC,EAAOF,EACJE,GAAQH,GACbE,EAAWlB,IAAI,CAACmB,GAChBA,GAAQJ,mBAIO,gCAAMW,CAAAA,EAAAA,EAAAA,CAAAA,EAAwBR,EAAY,MAAO,aAChE,GAAI,CADEzC,CAAAA,EAASY,EAAAC,IAAA,KACAb,IAAAA,EAAOkD,MAAM,CAE1B,OADApC,QAAQC,KAAK,CAAC,uCAAwC0B,GACtD,GAAO,IAAI,CACZ,CAE4C,OAD7CzC,EAAOmD,GAAG,GACmC,GAAMC,QAAQC,GAAG,EAC5DzD,EAA0BsC,EAAelC,EAAQoC,GACjDxC,EAA0BuC,EAAenC,EAAQqC,aAEnD,SAAO,CAAEiB,iBAJoCX,CAAAA,EAAAY,EAAAzD,CAAA,CAAA0D,KAAA,SAAA5C,EAAAC,IAAA,WAIlB4C,iBAJkBd,CAAA,aAO7C,OADA7B,QAAQC,KAAK,CAAC,iDADPA,EAAAA,IAAAA,IAEP,GAAO,IAAI,qBAEf,YAlCEmB,CAAAA,CACAC,CAAAA,CACAP,CAAAA,CAEAQ,CAAAA,CAEAC,CAAAA,CAAAA,kSCvFF,IAAMqB,GAAgB/D,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,0qBCAzB,IAAMgE,GAAgBhE,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,MAeZiE,GAA0BjE,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,kmBCf1C,IAAMkE,GAAyBlE,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,MAerBmE,GAAmCnE,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,MCdtCoE,GAAoExE,CAAAA,EAAA,GAC/E,GAAAyE,EAAAlE,CAAA,EAD+EP,EAC9EsC,EAAAA,CAAAA,CAAAA,GAA0B,CAAG,IAC9B,GAAAmC,EAAAlE,CAAA,EAF+EP,EAE9EsC,EAAAA,CAAAA,CAAAA,IAA2B,CAAG,IAC/B,GAAAmC,EAAAlE,CAAA,EAH+EP,EAG9EsC,EAAAA,CAAAA,CAAAA,KAA4B,CAAG,IAChC,GAAAmC,EAAAlE,CAAA,EAJ+EP,EAI9EsC,EAAAA,CAAAA,CAAAA,IAA2B,CAAG,IAJgDtC,CAAA,EAQpE0E,GAAsEzE,CAAAA,EAAA,GACjF,GAAAwE,EAAAlE,CAAA,EADiFN,EAChFqC,EAAAA,CAAAA,CAAAA,GAA0B,CAAG,IAAI,EAClC,GAAAmC,EAAAlE,CAAA,EAFiFN,EAEhFqC,EAAAA,CAAAA,CAAAA,IAA2B,CAAG,GAC/B,GAAAmC,EAAAlE,CAAA,EAHiFN,EAGhFqC,EAAAA,CAAAA,CAAAA,KAA4B,CAAG,GAChC,GAAAmC,EAAAlE,CAAA,EAJiFN,EAIhFqC,EAAAA,CAAAA,CAAAA,IAA2B,CAAG,IAJkDrC,CAAA,yBCFtE0E,GAAsB,SAAA3H,CAAA,MAAG4H,EAAAA,EAAAA,EAAAA,CAAIC,EAAAA,EAAAA,MAAAA,QAAwCD,EAAGE,OAAO,CAAC,GAAUlF,MAAA,CAAPiF,EAAO,KAAI,KAS9FE,GAAqB,SAAA/H,CAAA,CAKO,KAJvCgI,EAAAA,EAAAA,WAAAA,CACAC,EAAAA,EAAAA,UAAAA,CACA5C,EAAAA,EAAAA,UAAAA,CACA6C,EAAAA,EAAAA,QAAAA,CAEMC,EAAqBC,OAAOH,UAClC,IAAmB3C,EAAAA,CAAAA,CAAAA,GAA0B,CACpC,EAAE,CAEJ+C,KAAMH,EAAU,SAACzG,CAAAA,CAAAA,OAAU,GAAkB0G,MAAAA,CAAfH,EAAY,KAAiEpF,MAAA,CAA9DuF,EAAqB1G,EAAQiG,EAAoB,CAACrC,EAAW,GADhH,EAIUiD,GAAyB,SACpCC,CAAAA,CACAlD,CAAAA,CACG,CAEH,OAAQA,GACN,KAAKC,EAAAA,CAAAA,CAAAA,GAA0B,CAC/B,KAAKA,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,IAA2BkD,EACVC,EADUC,EAArBC,EAAqB,IAA+C,GAA/CD,CAAAA,EAAAH,MAAAA,EAAA,WAA+C,GAA/CC,CAAAA,EAAAD,EAAkCnB,aAAa,GAA/CoB,KAAA,IAAAA,EAAA,OAAAA,EAAiD7B,MAAF,GAA/C+B,KAAA,IAAAA,EAAAA,EAA2D,CAAC,CAIvF,MAAOE,CAHUL,MAAAA,EAAA,WAA+C,GAA/CE,CAAAA,EAAAF,EAAkCnB,aAAa,GAA/CqB,KAAA,IAAAA,EAAA,OAAAA,EAAiDI,MAAAA,CAAO,SAACC,CAAAA,CAAgBC,CAAAA,CAAmB,CAC3G,OAAOD,EAAiBtG,WAAWuG,EAAeC,UAAU,CAC9D,EAAG,IACeL,EARK,GAUzB,MAAKrD,EAAAA,CAAAA,CAAAA,KAA4B,CACjC,KAAKA,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,IAA2B2D,EACVC,EADUC,EAArBR,EAAqB,IAA4C,GAA5CQ,CAAAA,EAAAZ,MAAAA,EAAA,WAA4C,GAA5CU,CAAAA,EAAAV,EAAgCa,YAAY,GAA5CH,KAAA,IAAAA,EAAA,OAAAA,EAA8CtC,MAAF,GAA5CwC,KAAA,IAAAA,EAAAA,EAAwD,CAAC,CAIpF,MAAOP,CAHUL,MAAAA,EAAA,WAA4C,GAA5CW,CAAAA,EAAAX,EAAgCa,YAAY,GAA5CF,KAAA,IAAAA,EAAA,OAAAA,EAA8CL,MAAAA,CAAO,SAACC,CAAAA,CAAgBC,CAAAA,CAAmB,CACxG,OAAOD,EAAiBtG,WAAWuG,EAAeC,UAAU,CAC9D,EAAG,IACeL,EAhBK,GAkBzB,SACE,OAAO,IAAI,CAEjB,0oBCtDA,IAAMS,GAAehG,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,MAYXiG,GAAyBjG,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,goBCZzC,IAAMkG,GAAqBlG,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,MAejBmG,GAA+BnG,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,mPCf/C,IAAMoG,GAAiBpG,CAAAA,EAAAA,EAAAA,GAAAA,EAAGA,MCiBpBqG,MAAqB,GAAAnG,EAAAC,CAAA,WAAAvD,CAAA,CAAqE,KAA5D6H,EAAQxC,EAAYqE,EAChDC,EAiBmDC,EAD7CA,EACAC,EAIAC,EACAC,EA6B2CC,EAD3CA,EACAH,EAIA5B,EACAgC,kEAzDsBpC,EAAAA,EAAAA,MAAAA,CAAQxC,EAAAA,EAAAA,UAAAA,CACpCsE,EAASD,CADuCA,EAAAA,EAAAA,YAAAA,EACxBQ,GAAAA,EAAgBA,CAAGC,GAAAA,EAAU,iDAGjD9E,QACDC,EAAAA,CAAAA,CAAAA,GAA0B,CAA1BA,MAAAA,WAWAA,EAAAA,CAAAA,CAAAA,IAA2B,CAA3BA,MAAAA,WAuBAA,EAAAA,CAAAA,CAAAA,KAA4B,CAA5BA,MAAAA,WAWAA,EAAAA,CAAAA,CAAAA,IAA2B,CAA3BA,MAAAA,0BA5CU,SAAM8E,CAAAA,EAAAA,GAAAA,CAAAA,EACjBT,EACAD,EAAerC,GPCVD,EODiD,CACtD,CACES,OAAAA,EACAwC,MAAO7C,EAAyB,CAACnC,EAAW,iCAGhD,SAAO,CAAEkD,KARIlE,EAAAC,IAAA,GAQEE,MAAO,EAAM,UAGD,SAAM4F,CAAAA,EAAAA,GAAAA,CAAAA,EAA2CT,ED3BrEH,GC2B6F,CAAE3B,OAAAA,CAAO,WAE7G,GAAI,CADEgC,CAAAA,EAASD,CAAAA,MADTA,CAAAA,EAAqBvF,EAAAC,IAAA,IACZsF,KAAAA,EAAAA,EAAoBxC,aAAa,EAAGwC,IAAmC,GAAnCA,CAAAA,EAAAA,EAAmBxC,aAAa,CAAC,EAAE,GAAnCwC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAqChC,EAAE,CAAG,IAAI,EAE/F,SAAO,CAAEW,KAAM,CAAEnB,cAAa,IAAQ5C,MAAO,EAAM,EACpD,CASqB,OARhBsF,EAAanC,GAAoB,CAAEC,GAAIiC,EAAQhC,OAAAA,CAAO,GACtDkC,EAAchC,GAAmB,CACrCC,YAAaH,EACbI,WAAY6B,EACZzE,WAAAA,EACA6C,SAAUV,EAAyB,CAACnC,EAAW,GAG3B,GAAM+E,CAAAA,EAAAA,GAAAA,CAAAA,EAC1BT,EACAD,EAAeH,GFvBVD,EEuB2D,CAChE,CACEgB,QAASP,CACX,WAKW,SAAMK,CAAAA,EAAAA,GAAAA,CAAAA,EACjBT,EACAD,EAAeL,GHpCVD,EGoC+C,CACpD,CACEvB,OAAAA,EACAwC,MAAO7C,EAAyB,CAACnC,EAAW,WAMtB,SAAM+E,CAAAA,EAAAA,GAAAA,CAAAA,EAA0CT,ER7DnExC,GQ6D0F,CAAEU,OAAAA,CAAO,YAE1G,GAAI,CADEgC,CAAAA,EAASG,CAAAA,MADTA,CAAAA,EAAoB3F,EAAAC,IAAA,IACX0F,KAAAA,EAAAA,EAAmBZ,YAAY,EAAGY,IAAiC,GAAjCA,CAAAA,EAAAA,EAAkBZ,YAAY,CAAC,EAAE,GAAjCY,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmCpC,EAAE,CAAG,IAAI,EAE3F,SAAO,CAAEW,KAAM,CAAEa,aAAY,IAAQ5E,MAAO,EAAM,EACnD,CAQmB,OAPdyD,EAAaN,GAAoB,CAAEC,GAAIiC,EAAQhC,OAAAA,CAAO,GACtDoC,EAAalC,GAAmB,CACpCC,YAAaH,EACbI,WAAAA,EACA5C,WAAAA,EACA6C,SAAUV,EAAyB,CAACnC,EAAW,GAE7B,GAAM+E,CAAAA,EAAAA,GAAAA,CAAAA,EACxBT,EACAD,EAAenC,GNxDVD,EMwDmE,CACxE,CACEgD,QAASL,CACX,YAKF,SAAO,CAAE1B,KAAM,IAAI,CAAE/D,MAAO,EAAM,gCAItC,OADAD,QAAQC,KAAK,CAAC,mCADPA,EAAAA,IAAAA,IAEP,GAAO,CAAEA,MAAO,EAAK,uBAEzB,YA/EMiF,CAAAA,CAAAA,qECdOc,GAAqB,SAChChC,CAAAA,CACA5C,CAAAA,CACAC,CAAAA,CACAP,CAAAA,CACG,KAIQmD,EASAS,EAZX,OAAQ5D,GACN,KAAKC,EAAAA,CAAAA,CAAAA,GAA0B,CAC/B,KAAKA,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,OAAOiD,MAAAA,EAAA,WAA+C,GAA/CC,CAAAA,EAAAD,EAAkCnB,aAAa,GAA/CoB,KAAA,IAAAA,EAAA,OAAAA,EAAiDzE,GAAAA,CAAI,SAACgF,CAAAA,CAAAA,OAAoB,CAC/E5C,KAAM4C,EAAeyB,aAAa,CAClCC,SAAU9E,EACV+E,SAAU9E,EACV+E,SAAUnI,WAAWuG,EAAe4B,QAAQ,EAC5CC,SAAUpI,WAAWuG,EAAe6B,QAAQ,CAC9C,GACF,MAAKtF,EAAAA,CAAAA,CAAAA,KAA4B,CACjC,KAAKA,EAAAA,CAAAA,CAAAA,IAA2B,CAC9B,OAAOiD,MAAAA,EAAA,WAA4C,GAA5CU,CAAAA,EAAAV,EAAgCa,YAAY,GAA5CH,KAAA,IAAAA,EAAA,OAAAA,EAA8ClF,GAAAA,CAAI,SAACgF,CAAAA,CAAAA,OAAoB,CAC5E5C,KAAM4C,EAAe8B,IAAI,CACzBJ,SAAU9E,EACV+E,SAAU9E,EACV+E,SAAUnI,WAAWuG,EAAe4B,QAAQ,EAC5CC,SAAUpI,WAAWuG,EAAe6B,QAAQ,CAC9C,GACF,SACE,OAAO,IAAI,CAEjB,EAEaE,GAA4B,SAACvC,CAAAA,CAAc,CACtD,GAAI,CAACA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMxB,gBAAgB,GAAIwB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMxB,gBAAgB,CAACJ,MAAM,IAAK,EAC/D,MAAO,EAAE,CAGX,IACE4B,EAAAA,EADIwC,EAAgCC,KACpCzC,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAsB,GAAtBA,CAAAA,EAAAA,EAAMrB,gBAAgB,GAAtBqB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwBxE,GAAAA,CAAI,SAACkH,CAAAA,CAAAA,OAAU,CAACA,EAAMhH,SAAS,CAAEgH,EAAM,KAA/D1C,KAAAA,IAAAA,EAAAA,EAAoE,EAAE,EAGxE,OAAOA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMxB,gBAAgB,CAAC8B,MAAM,CAAC,SAACqC,CAAAA,CAAKC,CAAAA,CAA0B,CACnE,IAAMC,EAAwBL,CAAwB,CAACI,EAAsBlH,SAAS,CAAC,CAUvF,OATImH,GACFF,EAAIlG,IAAI,CAAC,CACPmB,KAAMhB,SAASgG,EAAsBlH,SAAS,CAAE,IAChDwG,SAAUU,EAAsB3H,YAAY,CAC5CkH,SAAUU,EAAsB5H,YAAY,CAC5CuD,iBAAkBoE,EAAsBzG,UAAU,CAClDwC,iBAAkBkE,EAAsB1G,UAAU,GAG/CwG,CACT,EAAG,EAAE,CAAC,EAQKG,GAAiC,SAAArL,CAAA,MAC5CsL,EAAAA,EAAAA,QAAAA,CACAC,EAAAA,EAAAA,WAAAA,CAEAD,OAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EACIvH,GAAG,CAAC,SAACyH,CAAAA,CAAAA,CAAe,OACpBrF,KAAMsF,CAAAA,EAAAA,GAAAA,CAAAA,EAAaD,EAAUrF,IAAI,EACjC1E,MACE8J,IAAgBC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWf,QAAQ,EAC/Be,EAAUZ,QAAQ,CAAGY,EAAUb,QAAQ,CACvCa,EAAUb,QAAQ,CAAGa,EAAUZ,QAAQ,IAE9Cc,OAAO,EAAE,EAODC,GAAwC,SAAA3L,CAAA,MACnDsL,EAAAA,EAAAA,QAAAA,CACAC,EAAAA,EAAAA,WAAAA,CAEAD,OAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAUvH,GAAG,CAAC,SAACyH,CAAAA,CAAAA,CAAe,OAC5BrF,KAAMsF,CAAAA,EAAAA,GAAAA,CAAAA,EAAaD,EAAUrF,IAAI,EACjC1E,MACE8J,IAAgBC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWf,QAAQ,EAC/Be,EAAUzE,gBAAgB,CAAGyE,EAAUtE,gBAAgB,CACvDsE,EAAUtE,gBAAgB,CAAGsE,EAAUzE,gBAAgB,4BCnFpD6E,GACX,SAAA5L,CAAA,MAAG6H,EAAAA,EAAAA,MAAAA,CAAQxC,EAAAA,EAAAA,UAAAA,QACX,SAACwG,CAAAA,CAAAA,QACCC,KAAID,EAAO,CAAC,OAAQ,eAAgBhE,EAAQxC,EAAW,IAE9C0G,GACX,SAAA/L,CAAA,MAAG6H,EAAAA,EAAAA,MAAAA,CAAQxC,EAAAA,EAAAA,UAAAA,QACX,SAACwG,CAAAA,CAAAA,QACCC,KAAID,EAAO,CAAC,OAAQ,sBAAuBhE,EAAQxC,EAAW,gBEsB3D,SAAS2G,IAAiC,CAC/C,MAAOC,CAAAA,EAAAA,EAAAA,EAAAA,EAAwC,SAACJ,CAAAA,CAAAA,QAAUA,EAAMK,IAAI,EACtE,CAGA,IAAMC,GAAoC,CACxC,6CACA,6CACA,6CACD,CAOD,SAASC,GAAgBC,CAA2C,CAAEC,CAA0B,CAAW,CACzG,OACED,EAAME,KAAK,CAACC,IAAI,CAACC,IAAI,CAAC,SAACC,CAAAA,CAAAA,QAAUA,EAAMC,OAAO,GAAKL,KACnDD,EAAME,KAAK,CAACK,KAAK,CAACH,IAAI,CAAC,SAACI,CAAAA,CAAAA,QAASA,EAAKC,cAAc,CAACH,OAAO,GAAKL,GAErE,CAGO,SAASS,GACdC,CAAmC,CACnCC,CAAmC,CACnCC,CAAoC,CACpCC,CAAoC,CACT,CAC3B,IAUIC,EAgBGpK,EA1BD2C,EAAgB0H,CAAAA,EAAAA,EAAAA,CAAAA,EAAgBL,GAChCpH,EAAgByH,CAAAA,EAAAA,EAAAA,CAAAA,EAAgBH,GAEhCI,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,EAAe,IAAKN,MAAAA,EAAAA,EAAiBO,KAAAA,CAAS,EAE7DC,EAAmBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAaJ,EAAcH,MAAAA,EAAAA,EAAkBK,KAAAA,CAAS,CAAEG,EAAAA,EAAAA,CAAAA,WAAqB,EACtG,GAAI,CAACV,GAAiB,CAACE,GAAkB,CAACM,EACxC,OAAO,IAAI,CAIb,GAAI,CACFL,EAAkB5K,WAChB,IAAIoL,EAAAA,EAAKA,CAAC,CACRC,WAAYJ,EAAiBK,WAAW,CACxCC,YAAaN,EAAiBO,YAAY,GACzCC,aAAa,CAAC,GAErB,CAAE,MAAOzJ,EAAO,CAEhB,CACA,GAAI,CAAC4I,EACH,OAAO,IAAI,CAEb,IAAMc,EAAmB,EAAId,EAE7B,OAAOpK,EAAA,GACL,GAAAyE,EAAAlE,CAAA,EADKP,EACJ2C,EAAgByH,GACjB,GAAA3F,EAAAlE,CAAA,EAFKP,EAEJ4C,EAAgBsI,GAFZlL,CAAA,CAOF,SAASmL,GACdC,CAAuB,CACvBC,CAAkB,CAClBpB,CAAmC,CACnCE,CAAoC,CACpCmB,CAAiB,CAOjB,CACA,IAG2BA,EAQsBC,EAOxBvL,EAK2BC,EAKhDuL,EA5BI7B,EAAqB8B,CAAAA,EAAAA,EAAAA,EAAAA,IAArB9B,OAAAA,CACFvM,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CAEFsO,EAAoB,IAA4D,GAA3DJ,CAAAA,EAAAA,IAAkB,GAAlBA,EAAqBK,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,EAAUN,IAAc,IAAI,GAA3DA,KAAAA,IAAAA,EAAAA,EAAgE,IAAI,CAEzFO,EAAwBC,CAAAA,EAAAA,EAAAA,EAAAA,EAC5BH,MAAAA,EAAAA,EAAWnB,KAAAA,CAAS,CACpBuB,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,iBAAM,CAAC9B,MAAAA,EAAAA,EAAiBO,KAAAA,CAAS,CAAEL,MAAAA,EAAAA,EAAkBK,KAAAA,CAAS,CAAC,EAAE,CAACP,EAAeE,EAAe,GAGpGoB,EAAqBH,IAAqBY,EAAAA,EAAAA,CAAAA,KAAW,CACrD1B,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,EAAec,EAAY,IAA2C,GAA1CE,CAAAA,EAAAA,EAAYtB,EAAgBE,CAAc,GAA1CoB,KAAAA,IAAAA,EAAAA,EAA+Cf,KAAAA,CAAS,EAEnGC,EAAmBwB,CAAAA,EAAAA,EAAAA,EAAAA,EAAgBV,EAAYjB,EAAeE,KAAAA,CAAS,CAAEL,MAAAA,EAAAA,EAAkBK,KAAAA,CAAS,EACpG0B,EAAoBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBlC,MAAAA,EAAAA,EAAiBO,KAAAA,CAAS,CAAE,EAA4BA,KAAAA,EAAfF,CAAwB,EAEtG8B,EAAUb,EAAYd,EAAmByB,CAAiB,CAE1DG,EAAmBrM,CAAAA,EAAA,GACvB,GAAAyE,EAAAlE,CAAA,EADuBP,EACtBgM,EAAAA,EAAAA,CAAAA,KAAW,CAAGH,CAAqB,CAAC,EAAE,EACvC,GAAApH,EAAAlE,CAAA,EAFuBP,EAEtBgM,EAAAA,EAAAA,CAAAA,MAAY,CAAGH,CAAqB,CAAC,EAAE,EAFjB7L,CAAA,EAKnBsM,EAA8CrM,CAAAA,EAAA,GAClD,GAAAwE,EAAAlE,CAAA,EADkDN,EACjD+L,EAAAA,EAAAA,CAAAA,KAAW,CAAG/B,MAAAA,EAAAA,EAAiBO,KAAAA,CAAS,EACzC,GAAA/F,EAAAlE,CAAA,EAFkDN,EAEjD+L,EAAAA,EAAAA,CAAAA,MAAY,CAAG7B,MAAAA,EAAAA,EAAkBK,KAAAA,CAAS,EAFOvK,CAAA,EAM/C0L,GACHH,CAAAA,EAAapO,EAAE,mBAGZkN,GACHkB,CAAAA,EAAaA,MAAAA,EAAAA,EAAcpO,EAAE,kBAAkB,EAG5CkP,CAAU,CAACN,EAAAA,EAAAA,CAAAA,KAAW,CAAC,EAAKM,CAAU,CAACN,EAAAA,EAAAA,CAAAA,MAAY,CAAC,EACvDR,CAAAA,EAAaA,MAAAA,EAAAA,EAAcpO,EAAE,iBAAiB,EAGhD,IAAMmP,EAAcX,CAAAA,EAAAA,EAAAA,EAAAA,EAAUF,EAC1B,CAACA,GAAOa,EAGVpD,CAAAA,KAAAA,GAAwBqD,OAAO,CAACD,IAC/B9B,GAAoBrB,GAAgBqB,EAAkB8B,IACtDL,GAAqB9C,GAAgB8C,EAAmBK,EAAAA,GAEzDf,CAAAA,EAAaA,MAAAA,EAAAA,EAAcpO,EAAE,oBAAoB,EANjDoO,EAAaA,MAAAA,EAAAA,EAAcpO,EAAE,oBAAoB,CASnD,IAAOqP,EAAmBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,IAAwBA,EAAxBA,CAAAA,EAAAA,CAEpBC,EAA0BP,GAAWK,GAAmBG,CAAAA,EAAAA,EAAAA,EAAAA,EAA+BR,EAASK,GAGxEI,EAAA,CAC5BR,CAAgB,CAACL,EAAAA,EAAAA,CAAAA,KAAW,CAAC,CAC7BW,EAA0BA,CAAuB,CAACX,EAAAA,EAAAA,CAAAA,KAAW,CAAC,CAAG,IAAI,CACtE,CAHMc,EAAuBD,CAAA,IAAZE,EAAYF,CAAA,IAS9B,OAJIC,GAAaC,GAAYD,EAAUE,QAAQ,CAACD,IAC9CvB,CAAAA,EAAapO,EAAE,gCAAiC,CAAE6P,OAAQF,EAASG,QAAQ,CAACD,MAAM,EAAC,EAG9E,CACLX,WAAAA,EACAD,iBAAAA,EACA/B,aAAAA,EACA8B,QAASA,MAAAA,EAAAA,EAAW5B,KAAAA,CAAS,CAC7BgB,WAAAA,CACF,CACF,CAUA,IAAM2B,GAAgB,sBA6Cf,SAASC,IAEF,CACZ,IAAMC,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,IAAZD,OAAAA,CACFE,EAAWC,CAAAA,EAAAA,EAAAA,EAAAA,IACXC,EAASC,CAAAA,EAAAA,EAAAA,CAAAA,IACTC,EAAYC,CAAAA,EAAAA,EAAAA,SAAAA,IAAVD,KAAAA,CACoBE,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,IAAQA,GAA7BC,EAAqBD,CAAAA,CAAAA,EAAAA,CAAbE,EAAaF,CAAAA,CAAAA,EAAAA,CAqB5B,MAjBAG,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CACd,GAAI,GAAaP,GACjB,IAzDwBnC,EAU1B2C,EACAC,EAiBOlO,EAfHiK,EACAE,EAYEmB,EAnC8B6C,EAIKA,EA8DyBC,EAA0BC,EAA1BD,EAA1DE,GA/CRL,EA+CmDR,EAAOR,MAAM,CA9ChEiB,EA8CkEE,IAAsB,GAAtBA,CAAAA,EAAAA,IAAa,GAAbA,CAAAA,EAAAA,EAAAA,EAAI,CAACf,EAAQ,GAAbe,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAezE,OAAO,GAAtByE,KAAAA,IAAAA,EAAAA,EAA0BC,IAAa,GAAbA,CAAAA,EAAAA,EAAAA,EAAI,CAAChB,EAAQ,GAAbgB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAe1E,OAAO,EA5C9GM,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU2C,EAAStE,aAAa,GAAMgE,CAAAA,MAAAA,EAAAA,EAAgBO,EAAAA,EAAsB,MAC5FrE,EACF,iBAAOoE,EAASpE,cAAc,CAC1ByB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU2C,EAASpE,cAAc,GAAK8D,EACtCC,MAAAA,EAAAA,EAAyBO,EAAAA,EAAuB,IAEhD,iBAAOF,EAASpE,cAAc,CAChCF,EAAgB,GAEhBE,EAAiB,IAIfmB,EAzBN,UAAI,OADsBA,EA0BWiD,EAASjD,SAAS,EAzBb,IAAI,CAE9C,CADgBM,EAAAA,EAAAA,EAAAA,EAAUN,KAEtB6B,GAAcuB,IAAI,CAACpD,GAAmBA,EACnC,IAAI,CAJmC,CA2BvCtL,EAAA,GACL,GAAAyE,EAAAlE,CAAA,EADKP,EACJgM,EAAAA,EAAAA,CAAAA,KAAW,CAAG,CACb2C,WAAY1E,CACd,GACA,GAAAxF,EAAAlE,CAAA,EAJKP,EAIJgM,EAAAA,EAAAA,CAAAA,MAAY,CAAG,CACd2C,WAAYxE,CACd,GACAkB,CAAAA,EAAAA,EAAAA,CAAAA,EAPKrL,EAOLqL,aA3CK,iBAD6B8C,EA4COI,EAASK,WAAW,GA3CvBxJ,OAAOyJ,KAAK,CAACrP,WAAW2O,IAAwB,GAAXA,CAAa,EA4CxF/C,CAAAA,EAAAA,EAAAA,CAAAA,EARKpL,EAQLoL,mBAxCK,iBADkC+C,EAyCaI,EAASO,UAAU,GAxClCX,WAAAA,EAASY,WAAW,GAAkB/C,EAAAA,EAAAA,CAAAA,MAAY,CAAGA,EAAAA,EAAAA,CAAAA,KAAW,EAyCrGV,CAAAA,EAAAA,EAAAA,CAAAA,EATKtL,EASLsL,YAAAA,GACA0D,CAAAA,EAAAA,EAAAA,CAAAA,EAVKhP,EAULgP,eAAc,CAAC,GACfC,CAAAA,EAAAA,EAAAA,CAAAA,EAXKjP,EAWLiP,sBAAqB,CAAC,GAXjBjP,GA+BLuN,EACE2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,CACf7D,WAAYiD,EAAOjD,UAAU,CAC7B8D,MAAOb,EAAOlD,gBAAgB,CAC9BpB,gBAAiBsE,CAAM,CAACtC,EAAAA,EAAAA,CAAAA,KAAW,CAAC,CAAC2C,UAAU,CAC/CzE,iBAAkBoE,CAAM,CAACtC,EAAAA,EAAAA,CAAAA,MAAY,CAAC,CAAC2C,UAAU,CACjDrD,UAAW,IAAI,IAInByC,EAAU,CAAE/D,gBAAiBsE,CAAM,CAACtC,EAAAA,EAAAA,CAAAA,KAAW,CAAC,CAAC2C,UAAU,CAAEzE,iBAAkBoE,CAAM,CAACtC,EAAAA,EAAAA,CAAAA,MAAY,CAAC,CAAC2C,UAAU,GAbrF,EAcxB,CAACpB,EAAUF,EAASM,EAAOF,EAAO,EAE9BK,CACT,CAWO,IAAMsB,GAAqB,SAAApS,CAAA,CAKF,KD3RxBqQ,ECuRN1K,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,aAAAA,CACAP,EAAAA,EAAAA,UAAAA,CACAgN,EAAAA,EAAAA,gBAAAA,CAE4BxB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAAI,KAAlChJ,EAAqBgJ,CAAAA,CAAAA,EAAAA,CAAbyB,EAAazB,CAAAA,CAAAA,EAAAA,CACMA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAAK,GAAzC0B,EAA2B1B,CAAAA,CAAAA,EAAAA,CAAhB2B,EAAgB3B,CAAAA,CAAAA,EAAAA,CAC5BvF,EAAWW,CAAAA,EAAAA,EAAAA,EAAAA,EAAYL,GAAqB,CAAE/D,OAAAA,EAAQxC,WAAAA,CAAW,IACjEoN,EAAkBxG,CAAAA,EAAAA,EAAAA,EAAAA,EAAYF,GAA4B,CAAElE,OAAAA,EAAQxC,WAAAA,CAAW,IAC/EkL,EAAWmC,CAAAA,EAAAA,EAAAA,EAAAA,IAEXC,GDlSAtC,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,IAAZD,OAAAA,CAEDtB,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,kBAAM6D,GAAAA,EAAwB,CAACvC,EAAQ,EAAE,CAACA,EAAQ,GCiS3DwC,EAAiB9D,CAAAA,EAAAA,EAAAA,OAAAA,EACrB,kBACE4D,EAAgBG,IAAI,CAClB,SAACjG,CAAAA,CAAAA,QACCA,EAAKkG,MAAM,CAACC,OAAO,EACnBnG,EAAKoG,MAAM,CAACD,OAAO,EAClBE,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBrG,EAAKkG,MAAM,CAACpG,OAAO,CAAEhH,IACrCuN,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBrG,EAAKkG,MAAM,CAACpG,OAAO,CAAE/G,EAAAA,GACvCsN,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBrG,EAAKoG,MAAM,CAACtG,OAAO,CAAEhH,IACrCuN,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBrG,EAAKoG,MAAM,CAACtG,OAAO,CAAE/G,EAAAA,KAE9C,CAAC+M,EAAiBhN,EAAeC,EAAc,EAE3C8D,EAAe,CAAC,CAACmJ,EAEvB7B,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CACd,QAAMmC,KAAmB,GAAA7P,EAAAC,CAAA,YAAY,KAQ3B6P,EAgBEC,kEAvBV9O,QAAQ+O,IAAI,CACV,wHAMoB,iCAAM5N,GACxBC,EACAC,EACAP,EACAsN,EAAgBlG,IAAI,CAClB,SAAC8G,CAAAA,CAAAA,OACCL,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBK,EAAER,MAAM,CAACS,OAAO,CAAC7G,OAAO,CAAEhH,IAC3CuN,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBK,EAAEN,MAAM,CAACO,OAAO,CAAC7G,OAAO,CAAEhH,KAE/CgN,EAAgBlG,IAAI,CAClB,SAAC8G,CAAAA,CAAAA,OACCL,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBK,EAAER,MAAM,CAACS,OAAO,CAAC7G,OAAO,CAAE/G,IAC3CsN,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBK,EAAEN,MAAM,CAACO,OAAO,CAAC7G,OAAO,CAAE/G,oBAZ3CwN,CAAAA,EAAc/O,EAAAC,IAAA,KAgBZ+O,EAAwBvI,GAA0BsI,GACxD7C,EAASkD,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAAEnI,SAAU+H,EAAuBxL,OAAAA,EAAQxC,WAAAA,CAAW,KAErFkL,EAASkD,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAAEnI,SAAQ,GAAMzD,OAAAA,EAAQxC,WAAAA,CAAW,wBAGpEd,QAAQC,KAAK,CAAC,2CADPA,EAAAA,IAAAA,IAEP+L,EAASkD,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAAEnI,SAAQ,GAAMzD,OAAAA,EAAQxC,WAAAA,CAAW,wBAElEmN,EAAa,2BAEjB,aAnCMW,kCAqCAO,KAA0B,GAAApQ,EAAAC,CAAA,YAAY,KAElCgF,EA+BFoL,EACAA,EA3BEC,EACFD,EAuBEE,kEA7BS,OADjBrB,EAAa,IACI,GAAM/I,GAAmB,CAAE5B,OAAAA,EAAQxC,WAAAA,EAAYqE,aAAAA,CAAa,eAArEnB,CAAAA,EAASlE,EAAAC,IAAA,GAATiE,IAAAA,EACJA,MAAAA,SAIIqL,EAAqBtL,GAAuBC,EAAMlD,IAEpDqE,EAAAA,MAAAA,aACFiK,EAAmB,CAAC,CAACd,EAAeE,MAAM,CAACS,OAAO,CAAC7G,OAAO,CAAC,CAAE,CAACkG,EAAeI,MAAM,CAACO,OAAO,CAAC7G,OAAO,CAAC,CAAC,cAGhF,gCAAMmH,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CACnCC,IAAKC,EACLC,MAAK,CACH,CACEtH,QAAS9E,EACTqM,KAAM,QACR,EACA,CACEvH,QAAS9E,EACTqM,KAAM,QACR,GAEFC,QAAS,CAAEC,eAAgB,EAAM,CACnC,kBAbAT,EAAmBtP,EAAAC,IAAA,uBAcZE,EAAAA,IAAAA,GACPD,QAAQ+O,IAAI,CAAC,wDAebO,CAZEA,EACJF,GACEA,CAAAA,IAAmB,GAAnBA,CAAAA,EAAAA,CAAgB,CAAC,EAAE,GAAnBA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,CAAqB,CAAC,EAAE,GACxBA,CAAAA,IAAmB,GAAnBA,CAAAA,EAAAA,CAAgB,CAAC,EAAE,GAAnBA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,CAAqB,CAAC,EAAE,GACxBpJ,GACEhC,EACAoL,CAAgB,CAAC,EAAE,CAAC,EAAE,CAAC5B,WAAW,GAClC4B,CAAgB,CAAC,EAAE,CAAC,EAAE,CAAC5B,WAAW,GAClC1M,IAAAA,EAAAA,EAIUsB,MAAM,CAAG,GAAKiN,GAC5BrD,EAAS8D,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAAE/I,SAAUuI,EAAahM,OAAAA,EAAQxC,WAAAA,CAAW,IACpEmN,EAAa,MAEbjO,QAAQ+O,IAAI,CAAC,wCAA+C1Q,MAAA,CAAPiF,IACrD0I,EAAS8D,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAAE/I,SAAQ,GAAMzD,OAAAA,EAAQxC,WAAAA,CAAW,IAC3D8N,kBAGF5C,EAAS8D,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAAE/I,SAAQ,GAAMzD,OAAAA,EAAQxC,WAAAA,CAAW,IAC3D8N,iCAEJ,aAvDMO,kCAyDDpI,GAAamH,IAAmB5K,GAAW0K,GAC9CmB,GAEJ,EAAG,CACD7L,EACAxC,EACAiG,EACA+G,EACA1M,EACAC,EACA6M,EACAlC,EACAgC,EACA7I,EACAmJ,EACAF,EACD,EAED3B,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,EAcdsD,UAb2B,CACzB,GAAI,CACF,IACIzB,EACA0B,EAFEvM,EAAc0B,EAChBmJ,MAAAA,EAAAA,KAAAA,EAAAA,IAAiC,GAAjCA,CAAAA,EAAAA,EAAgB2B,iBAAiB,GAAjC3B,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmCd,WAAAA,EAAAA,CACnCwC,IAA4B3O,GAA5B2O,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAa5O,EAAeC,EAAAA,GAA5B2O,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4CxC,WAAAA,EAAa,CACzD/J,IAAgBH,GAClByK,EAAUtK,EAEd,CAAE,MAAOxD,EAAO,CACd8N,EAAU,IAAI,CAChB,CACF,GAGF,EAAG,CAAC3M,EAAeC,EAAeiC,EAAQ6B,EAAcmJ,EAAe,EAEvE,IAAM4B,EAAqB1F,CAAAA,EAAAA,EAAAA,OAAAA,EACzB,kBAAM1D,GAA+B,CAAEE,YAAa5F,EAAe2F,SAAAA,CAAS,IAC5E,CAAC3F,EAAe2F,EAAS,EAGrBoJ,EAA4B3F,CAAAA,EAAAA,EAAAA,OAAAA,EAChC,kBAAMpD,GAAsC,CAAEJ,YAAa5F,EAAe2F,SAAUmH,CAAgB,IACpG,CAAC9M,EAAe8M,EAAgB,EAG5BkC,EAAetC,GAAoBA,CAAgB,CAAC1M,EAAc,CAAG,EAErEiP,EACJH,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAoB9N,MAAM,EAAG,GAAKgO,EAC9B,GAAAE,EAAAtR,CAAA,EAAIkR,GAAAA,MAAAA,CAAJ,CAAwB,CAAEtO,KAAM,IAAIG,KAAQ7E,MAAO4Q,CAAgB,CAAC1M,EAAc,EAAG,EACrF8O,CAAkB,CAElBK,EACJJ,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAA2B/N,MAAM,EAAG,GAAKgO,EACrC,GAAAE,EAAAtR,CAAA,EAAImR,GAAAA,MAAAA,CAAJ,CAA+B,CAAEvO,KAAM,IAAIG,KAAQ7E,MAAO4Q,CAAgB,CAAC1M,EAAc,EAAG,EAC5F+O,CAAyB,CAEzBK,EAAkBH,GAA0CA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAwCjO,MAAM,IAAK,EAC/GqO,EACJF,GAAiDA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAA+CnO,MAAM,IAAK,EAGzGsO,EAAaF,GAAmBC,EAAmB,EAAE,CAAGxH,KAAAA,CAAS,CASrE,OARIoH,GAA0CA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAwCjO,MAAM,EAAG,EAC7FsO,EAAaL,EAEbE,GACAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAA+CnO,MAAM,EAAG,GAExDsO,CAAAA,EAAaH,CAAAA,EAER,CAAEG,WAAAA,EAAYpN,OAAAA,CAAO,CAC9B,6BCzcOvC,EAAKA,kCAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EACV4P,GAAAA,CAAAA,EAAAA,CAAAA,MADU5P,CAAAA,CAAAA,EAEV6P,IAAAA,CAAAA,EAAAA,CAAAA,OAFU7P,CAAAA,CAAAA,EAGV8P,KAAAA,CAAAA,EAAAA,CAAAA,QAHU9P,CAAAA,CAAAA,EAIV+P,IAAAA,CAAAA,EAAAA,CAAAA,wMCoBIC,EAAU,CACd,eAAgB,mBAChBC,OAAQ,kBACV,ECrCMC,EAA0BC,CAAAA,EAAAA,EAAAA,UAAAA,EAAW,8CAe3C,SAASC,EAAsBC,CAAW,CAAEC,CAAmD,CAAE,CAC/F,OAAO,SACLC,CAA4C,CAC5C3F,CAAkB,CAClB4F,CAAoB,CAEV,KADV1P,EAAA2P,UAAApP,MAAA,IAAAoP,KAAA,IAAAA,SAAA,IAAAA,SAAA,IAAmC,CAAC,CAAC,CAAAC,EAArC5P,EAAE6P,OAAAA,CAAAA,EAAAA,KAAAA,IAAAA,EAAU,EAAAD,CAAA,CAENE,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBN,MAAAA,EAAAA,KAAAA,EAAAA,EAAQ3F,QAAQ,CAAEA,GACrDkG,EAAgBC,CAAAA,EAAAA,EAAAA,gBAAAA,EAAiBR,MAAAA,EAAAA,KAAAA,EAAAA,EAAQS,QAAQ,CAACC,QAAQ,EAAE,EAsBlE,MApBwBC,CAAAA,EAAAA,EAAAA,EAAAA,EACtBX,GAAUA,EAAO3F,QAAQ,EAAIA,EACzB,CACEyF,EACA,OACAG,EACAD,EAAO3F,QAAQ,CAACG,OAAO,CACvBwF,EAAO3F,QAAQ,CAACD,MAAM,CACtBC,EAASD,MAAM,CACfmG,EACAH,EACAC,EACD,CACD,IAAI,CAER,kBAAMN,EAAa,CAAEC,OAAAA,EAAQ3F,SAAAA,EAAU4F,UAAAA,EAAWI,eAAAA,EAAgBO,OAAQ,GAAIR,QAAAA,CAAQ,IACtF,CACES,iBAAkB,EACpB,GAlBMnO,IAAAA,CAsBZ,CAEA,SAASoO,EAAcb,CAAoB,CAAE,CAC3C,OAAO,SAAiBD,CAAgC,CAAE3F,CAAkB,CAAEuG,CAAc,CAAE,CAC5F,IDZmCG,ECY7B3J,EAAgB6I,IAAcnI,EAAAA,EAAAA,CAAAA,WAAqB,CAAGkI,EAAO3F,QAAQ,CAAGA,CAAQ,CAChF/C,EAAiB2I,IAAcnI,EAAAA,EAAAA,CAAAA,WAAqB,CAAGuC,EAAW2F,EAAO3F,QAAQ,CACjF2G,EAAYhB,EAAOS,QAAQ,CAACC,QAAQ,GAa1C,OD3BmCK,ECeF,CAC/BE,UAAW7J,EAAcoD,OAAO,CAChC0G,UAAW9J,EAAc+F,OAAO,CAAG/F,EAAcN,OAAO,CAAG6I,CAAuB,CAClFwB,cAAe/J,MAAAA,EAAAA,KAAAA,EAAAA,EAAeiH,IAAI,CAClC+C,gBAAiBnB,IAAcnI,EAAAA,EAAAA,CAAAA,WAAqB,CAAGkJ,EAAYrJ,KAAAA,CAAS,CAC5E0J,qBAAsBjK,MAAAA,EAAAA,KAAAA,EAAAA,EAAekK,QAAQ,CAC7CC,WAAYjK,EAAe6F,OAAO,CAAG7F,EAAeR,OAAO,CAAG6I,CAAuB,CACrF6B,iBAAkBvB,IAAcnI,EAAAA,EAAAA,CAAAA,YAAsB,CAAGkJ,EAAYrJ,KAAAA,CAAS,CAC9E8J,eAAgBnK,MAAAA,EAAAA,KAAAA,EAAAA,EAAgB+G,IAAI,CACpCqD,sBAAuBpK,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBgK,QAAQ,CAC/CV,OAAAA,CACF,EDzBFe,MAAM,eAAgB,CACpBC,OAAQ,OACRnC,QAAAA,EACAoC,KAAMC,KAAKC,SAAS,CAAChB,EACvB,GAAGiB,IAAI,CAAC,SAACC,CAAAA,CAAAA,QAAaA,EAASC,IAAI,ICuBnC,CACF,CAEA,IAAMC,EAA6BrB,EAAchJ,EAAAA,EAAAA,CAAAA,WAAqB,EAEhEsK,EAA8BtB,EAAchJ,EAAAA,EAAAA,CAAAA,YAAsB,EAE3DuK,EAAwBxC,EACnC,oBACA,GAAApS,EAAAC,CAAA,WAAAvD,CAAA,CAAoE,KAA3D6V,EAAQ3F,EAAU4F,EAAWI,EAAgBD,2CAEpD,OAFOJ,EAAAA,EAAAA,MAAAA,CAAQ3F,EAAAA,EAAAA,QAAAA,CAAU4F,EAAAA,EAAAA,SAAAA,CAAWI,EAAAA,EAAAA,cAAAA,CAAgBD,EAAAA,EAAAA,OAAAA,CAEpD,GAAOkC,CADWrC,IAAcnI,EAAAA,EAAAA,CAAAA,WAAqB,CAAGyK,EAAAA,EAAmBA,CAAGC,EAAAA,EAAoB,EACjFxC,EAAQ3F,EAAU,CAAEoI,SAAAA,EAAAA,EAAQA,CAAEpC,eAAAA,EAAgBD,QAAAA,CAAQ,KACzE,iDAoCK,SAASvI,EACdmI,CAAgC,CAChC3F,CAAkB,CAClB4F,CAAoB,CACpB3B,CAAyB,CACzB,CAMA,OAL2B+D,EAAsBrC,EAAQ3F,EAAU4F,EAAW3B,EAMhF,CA7CmCuB,EACjC,kBACA,GAAApS,EAAAC,CAAA,WAAAvD,CAAA,CAAmD,KAA1C6V,EAAQ3F,EAAU4F,EAAWW,EAE9BlO,EAKAgQ,EACAC,kEANO,OAFN3C,EAAAA,EAAAA,MAAAA,CAAQ3F,EAAAA,EAAAA,QAAAA,CAAU4F,EAAAA,EAAAA,SAAAA,CAAWW,EAAAA,EAAAA,MAAAA,CAEvB,GAAM0B,CADDrC,IAAcnI,EAAAA,EAAAA,CAAAA,WAAqB,CAAGqK,EAA6BC,CAA2B,EACnFpC,EAAQ3F,EAAUuG,WAC/C,GAAI,CADElO,CAAAA,EAAOlE,EAAAC,IAAA,IAEX,SAAO,IAAI,CACZ,CAID,OAFMiU,EAAQE,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBlQ,EAAKgE,KAAK,CAACgM,KAAK,EACzCC,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBlQ,EAAKgE,KAAK,CAACiM,MAAM,EACjD,GAAO,CACL1C,UAAWvN,EAAKuN,SAAS,CACzBvJ,MAAO,GAAAmM,EAAAnV,CAAA,KAAAoV,EAAApV,CAAA,KACFgF,EAAKgE,KAAK,GACbgM,MAAAA,EACAC,OAAAA,EACA5L,MAAOrE,EAAKgE,KAAK,CAACK,KAAK,CAAC7I,GAAG,CAAC,SAACwP,CAAAA,CAAM,CACjC,IAAMR,EAAS0F,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBlF,EAAER,MAAM,EAClCE,EAASwF,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBlF,EAAEN,MAAM,EAClCtI,EAAWiO,EAAAA,EAAAA,CAAAA,aAA4B,CAAC7F,EAAQQ,EAAE5I,QAAQ,EAC1DC,EAAWgO,EAAAA,EAAAA,CAAAA,aAA4B,CAAC3F,EAAQM,EAAE3I,QAAQ,EAC1DiC,EAAO,IAAIgM,EAAAA,EAAIA,CAAClO,EAAUC,GAChC,OAAO2I,EAAEiB,iBAAiB,CAAGsE,CAAAA,EAAAA,EAAAA,EAAAA,EAAqBjM,EAAM0G,EAAEiB,iBAAiB,EAAI3H,CAAI,GAErFL,KAAMjE,EAAKgE,KAAK,CAACC,IAAI,CAACzI,GAAG,CAAC,SAAC3D,CAAAA,CAAAA,OAAMqY,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBrY,OAEpD0N,YAAa8K,EAAAA,EAAAA,CAAAA,aAA4B,CAACL,EAAOhQ,EAAKuF,WAAW,EACjEE,aAAc4K,EAAAA,EAAAA,CAAAA,aAA4B,CAACJ,EAAQjQ,EAAKyF,YAAY,CACtE,KACF,weCxHK,IAAM+K,EAAmB5X,CAAAA,EAAAA,QAAAA,EAAAA,EAAOT,EAAAA,EAAGA,EAAAA,UAAAA,CAAAA,mCAStC,SAAAV,CAAA,SAAeqB,EAAZA,KAAAA,CAAkBC,YAAY,CAAC0X,EAAE,EAEtB,SAAAhZ,CAAA,SAAkBiZ,EAAfA,OAAAA,CAAyB,wBAA0B,0BAA0B,EACpF,SAAAjZ,CAAA,MAAGqB,EAAAA,EAAAA,KAAAA,OAAY,aAAqCuB,MAAA,CAAxBvB,EAAM6X,MAAM,CAACC,UAAU,GAC5C,SAAAnZ,CAAA,SAAsBoZ,EAAnBA,WAAAA,CAAiC,IAAM,MAAM,EACxD,SAAApZ,CAAA,MAAGoZ,EAAAA,EAAAA,WAAAA,QAA0CC,EAA7BA,qBAAAA,EAAsDD,EAAc,OAAS,KAAK,EACjG,SAAApZ,CAAA,SAAsBoZ,EAAnBA,WAAAA,CAAiC,OAAS,OAAO,EAIlEL,CAAAA,EAAiBO,YAAY,CAAG,CAC9BxW,OAAQ,KACV,ECEA,IAAAyW,EAhB6E,SAAAvZ,CAAA,CAAiC,KAA9BwZ,EAAAA,EAAAA,MAAAA,CAAQC,EAAAA,EAAAA,eAAAA,CAChFrZ,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACR,MACE,GAAAsZ,EAAAnZ,GAAA,EAACwY,EAAgBA,CAACE,QAASO,EAAQJ,YAAaK,EAAiBlG,EAAE,gBACjE,GAAAmG,EAAA1X,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CAACwX,eAAe,SAASzX,WAAW,SAASY,OAAO,OAAO8W,cAAc,mBAC5E,GAAAF,EAAAnZ,GAAA,EAACa,EAAAA,CAAIA,CAAAA,CAACyY,GAAI,CAAC,MAAO,MAAO,MAAM,CAAEC,UAAU,kBACxC1Z,EAAE,sEAEL,GAAAsZ,EAAAnZ,GAAA,EAACa,EAAAA,CAAIA,CAAAA,CAACyY,GAAI,CAAC,MAAO,MAAO,MAAM,CAAEC,UAAU,kBACxC1Z,EAAE,yCAKb,8IC6BA2Z,EA3CmF,SAAA/Z,CAAA,CAK7E,KAJJ2F,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,aAAAA,CACAoC,EAAAA,EAAAA,WAAAA,CACAgS,EAAAA,EAAAA,QAAAA,CAEM5Z,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACR,MACE,GAAAsZ,EAAAnZ,GAAA,EAAAmZ,EAAAO,QAAA,WACE,GAAAP,EAAA1X,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CAACwX,eAAe,SAASzX,WAAW,SAASY,OAAO,OAAO8W,cAAc,mBAC5E,GAAAF,EAAAnZ,GAAA,EAACa,EAAAA,CAAIA,CAAAA,CAACyY,GAAI,CAAC,MAAO,MAAO,MAAM,UAAGzZ,EAAE,8CACpC,GAAAsZ,EAAA1X,IAAA,EAACZ,EAAAA,CAAIA,CAAAA,CACH0Y,UAAWE,EAAW,SAAW,MAAM,CACvCH,GAAI,CAAC,MAAO,MAAO,MAAM,CACzBpX,MAAM,aACNyX,MAAK,GACLC,MAAOH,GAAY,CAAEI,YAAa,OAAQ,YAC3C,WACUzU,MAAAA,EAAAA,EAAiB,MAAM,IAElC,GAAA+T,EAAA1X,IAAA,EAACZ,EAAAA,CAAIA,CAAAA,CACH0Y,UAAWE,EAAW,SAAW,MAAM,CACvCH,GAAI,CAAC,MAAO,MAAO,MAAM,CACzBpX,MAAM,aACNyX,MAAK,GACLC,MAAOH,GAAY,CAAEI,YAAa,OAAQ,YAC3C,WACUxU,MAAAA,EAAAA,EAAiB,MAAM,IAElC,GAAA8T,EAAA1X,IAAA,EAACZ,EAAAA,CAAIA,CAAAA,CACH0Y,UAAWE,EAAW,SAAW,MAAM,CACvCH,GAAI,CAAC,MAAO,MAAO,MAAM,CACzBpX,MAAM,aACNyX,MAAK,GACLC,MAAOH,GAAY,CAAEI,YAAa,OAAQ,YAC3C,SACQpS,MAAAA,EAAAA,EAAe,MAAM,QAKtC,wBCzCMqS,EAAgBC,IAAQ,kBAAMzT,QAAAC,GAAA,EAAAyT,EAAAC,CAAA,OAAAD,EAAAC,CAAA,OAAAD,EAAAC,CAAA,MAAAD,EAAAC,CAAA,SAAA3C,IAAA,CAAA0C,EAAAE,IAAA,CAAAF,EAAA,gEAClCG,IAAK,KAwGPC,EAAeC,CAAAA,EAAAA,EAAAA,IAAAA,EArGI,SAAA5a,CAAA,CAQb,KAWiCiV,EAlBrCtP,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,aAAAA,CACA6T,EAAAA,EAAAA,eAAAA,CACAxM,EAAAA,EAAAA,aAAAA,CACAE,EAAAA,EAAAA,cAAAA,CACA6M,EAAAA,EAAAA,QAAAA,CACA3H,EAAAA,EAAAA,gBAAAA,CAEoCxB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAiC,MAA9DxL,EAA6BwL,CAAAA,CAAAA,EAAAA,CAAjBgK,EAAiBhK,CAAAA,CAAAA,EAAAA,CAEAuB,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAmB,CACrDzM,cAAAA,EACAC,cAAAA,EACAP,WAAAA,EACAgN,iBAAAA,CACF,GAAAyI,EALoC1I,EAA5B6C,UAAAA,CAAAA,EAAAA,KAAAA,IAAAA,EAAa,EAAE,CAAA6F,CAAA,CAAEjT,EAAWuK,EAAXvK,MAAAA,CAMWgJ,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,IAAQA,GAArCkK,EAA6BlK,CAAAA,CAAAA,EAAAA,CAAjBmK,EAAiBnK,CAAAA,CAAAA,EAAAA,CACFA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,IAAQA,GAAnCoK,EAA2BpK,CAAAA,CAAAA,EAAAA,CAAhBqK,EAAgBrK,CAAAA,CAAAA,EAAAA,CAC5BsK,EAAiBJ,GAAc9F,CAAAA,IAAiC,GAAjCA,CAAAA,EAAAA,CAAU,CAACA,EAAWtO,MAAM,CAAG,EAAE,GAAjCsO,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmCxT,KAAK,EACnC2Z,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAoBnG,GAAtDoG,EAAkCD,EAAlCC,gBAAAA,CAAkBC,EAAgBF,EAAhBE,WAAAA,CACpBC,EAAmBD,GAAe,EAKpCjb,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,IAFFD,EAEEC,EAFFD,CAAAA,CACAob,EACEnb,EADFmb,eAAAA,CAAmBC,MAAAA,CAEfC,EAAc,IAAIpV,OAAOqV,cAAc,CAACF,EAAQ,CACpDG,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,SACV,UAWA,GALE/G,EAAWtO,MAAM,CAAG,GACpBsO,EAAWgH,KAAK,CACd,SAACC,CAAAA,CAAAA,OAAU,CAACA,EAAMza,KAAK,EAAIya,IAAAA,EAAMza,KAAK,EAAUya,EAAMza,KAAK,GAAK0a,KAAY/T,OAAOyJ,KAAK,CAACqK,EAAMza,KAAK,IAKpG,GAAAiY,EAAAnZ,GAAA,EAAC6b,EAAgBA,CACfzW,cAAeA,EACfC,cAAeA,EACfoC,YAAaH,EACbmS,SAAUA,IAMd,GAAAN,EAAA1X,IAAA,EAAA0X,EAAAO,QAAA,YACE,GAAAP,EAAA1X,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CACHyX,cAAe,CAAC,SAAU,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,MAAM,CAC9D1X,WAAY,CAAC,aAAc,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,SAAS,CAClEyX,eAAe,gBACf0C,GAAG,OACHC,SAAS,iBAET,GAAA5C,EAAA1X,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CAACyX,cAAc,SAAS2C,GAAG,iBAC9B,GAAA7C,EAAAnZ,GAAA,EAACic,EAAAA,CAAgBA,CAAAA,CACf/a,MAAOwT,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAYtO,MAAM,EAAG,GAAKwU,EACjCzZ,YAAauL,MAAAA,EAAAA,KAAAA,EAAAA,EAAegD,MAAM,CAClCtO,aAAcwL,MAAAA,EAAAA,KAAAA,EAAAA,EAAgB8C,MAAM,UAEpC,GAAAyJ,EAAAnZ,GAAA,EAACa,EAAAA,CAAIA,CAAAA,CAACqB,MAAO8Y,EAAmB,UAAY,SAAS,CAAE7Y,SAAS,OAAO+Z,GAAG,MAAMpa,KAAI,YACjF,GAAiCiZ,MAAAA,CAA9BC,EAAmB,IAAM,EAAE,EAA8BF,MAAAA,CAA3BC,EAAYoB,OAAO,CAAC,GAAG,MAAqB9Z,MAAA,CAAjByY,EAAiB,UAGlF,GAAA3B,EAAAnZ,GAAA,EAACa,EAAAA,CAAIA,CAAAA,CAAC8Y,MAAK,GAACzX,MAAM,qBACfwY,GAAaS,OAGlB,GAAAhC,EAAAnZ,GAAA,EAACG,EAAAA,EAAGA,CAAAA,UACF,GAAAgZ,EAAA1X,IAAA,EAAC2a,EAAAA,CAAUA,CAAAA,CAACC,YAAavX,EAAYwX,YAAahC,EAAeiC,MAAM,eACrE,GAAApD,EAAAnZ,GAAA,EAACwc,EAAAA,CAAcA,CAAAA,UAAE3c,EAAE,SACnB,GAAAsZ,EAAAnZ,GAAA,EAACwc,EAAAA,CAAcA,CAAAA,UAAE3c,EAAE,QACnB,GAAAsZ,EAAAnZ,GAAA,EAACwc,EAAAA,CAAcA,CAAAA,UAAE3c,EAAE,QACnB,GAAAsZ,EAAAnZ,GAAA,EAACwc,EAAAA,CAAcA,CAAAA,UAAE3c,EAAE,gBAIzB,GAAAsZ,EAAAnZ,GAAA,EAACG,EAAAA,EAAGA,CAAAA,CAACoC,OAAQkX,EAAW,OAjERP,EAAkB,sBAAwB,OAAO,CAiEnBlG,EAAGyG,EAAW,MAAQ,MAAM,CAAEjX,MAAM,gBAChF,GAAA2W,EAAAnZ,GAAA,EAAC8Z,EAAAA,CACC9R,KAAM0M,EACN+F,cAAeA,EACfE,aAAcA,EACdK,iBAAkBA,EAClB9B,gBAAiBA,EACjBpU,WAAYA,QAzCnB,EAgD6B,SAAC2X,CAAAA,CAAMC,CAAAA,CAAS,CAC9C,OACED,EAAKrX,aAAa,GAAKsX,EAAKtX,aAAa,EACzCqX,EAAKpX,aAAa,GAAKqX,EAAKrX,aAAa,EACzCoX,EAAKvD,eAAe,GAAKwD,EAAKxD,eAAe,EAC7CuD,EAAKhD,QAAQ,GAAKiD,EAAKjD,QAAQ,EAC/BgD,EAAKvD,eAAe,GAAKwD,EAAKxD,eAAe,EAC5CuD,CAAAA,IAA+B,GAA/BA,EAAM3K,gBAAgB,EACrB4K,IAA8B,GAA9BA,EAAK5K,gBAAgB,EACrB2K,EAAK3K,gBAAgB,CAAC2K,EAAKrX,aAAa,CAAC,GAAKsX,EAAK5K,gBAAgB,CAAC4K,EAAKtX,aAAa,CAAC,EACvFqX,EAAK3K,gBAAgB,CAAC2K,EAAKpX,aAAa,CAAC,GAAKqX,EAAK5K,gBAAgB,CAAC4K,EAAKrX,aAAa,CAAC,EACtFoX,IAA8B,GAA9BA,EAAK3K,gBAAgB,EAAa4K,IAA8B,GAA9BA,EAAK5K,gBAAgB,CAE9D,GC1DA6K,EA/DmB,SAAAld,CAAA,CAYb,KAXJiN,EAAAA,EAAAA,aAAAA,CACAE,EAAAA,EAAAA,cAAAA,CACAgQ,EAAAA,EAAAA,cAAAA,CACA3D,EAAAA,EAAAA,MAAAA,CACAC,EAAAA,EAAAA,eAAAA,CACA2D,EAAAA,EAAAA,kBAAAA,CACApD,EAAAA,EAAAA,QAAAA,CACAqD,EAAAA,EAAAA,oBAAAA,CACA1X,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,aAAAA,CACAyM,EAAAA,EAAAA,gBAAAA,CAGOiL,EAAaC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,IAA2BA,EAA3BA,CAAAA,EAAAA,CAEpB,MACE,GAAA7D,EAAA1X,IAAA,EAAC+W,EAAgBA,CACfjW,OAAQwa,IAAcE,EAAAA,EAAAA,CAAAA,YAA0B,CAAG,OAAS,KAAK,CACjEC,SAAUH,IAAcE,EAAAA,EAAAA,CAAAA,YAA0B,CAAG,SAAW,OAAO,CACvEvE,QAASO,EACTJ,YAAaK,EACbJ,sBAAuBgE,YAEvB,GAAA3D,EAAA1X,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CAACwX,eAAe,gBAAgB0C,GAAG,iBACtC,GAAA3C,EAAA1X,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CAACD,WAAW,mBACdiL,EACC,GAAAuM,EAAAnZ,GAAA,EAACmd,EAAAA,CAAkBA,CAAAA,CAACC,UAAW1Q,EAAe2Q,UAAWzQ,EAAgB0Q,KAAM,GAAIC,OAAM,KAEzF7Q,GAAiB,GAAAyM,EAAAnZ,GAAA,EAACwd,EAAAA,CAAYA,CAAAA,CAAC7N,SAAUjD,EAAe4Q,KAAK,OAAO1D,MAAO,CAAE6D,YAAa,KAAM,GACjG,CACA/Q,GACC,GAAAyM,EAAAnZ,GAAA,EAACa,EAAAA,CAAIA,CAAAA,CAACqB,MAAM,OAAOJ,KAAI,YACpB8K,EAAiB,GAA2BA,MAAAA,CAAxBF,EAAcgD,MAAM,CAAC,KAAyBrN,MAAA,CAAtBuK,EAAe8C,MAAM,EAAKhD,EAAcgD,MAAM,GAG/F,GAAAyJ,EAAAnZ,GAAA,EAAC0d,EAAAA,CAAUA,CAAAA,CAACC,QAAQ,OAAOC,QAAShB,WAClC,GAAAzD,EAAAnZ,GAAA,EAAC6d,EAAAA,CAAWA,CAAAA,CAAC3B,GAAG,MAAMha,MAAM,iBAG/B,CAACuX,GACA,GAAAN,EAAAnZ,GAAA,EAAC4B,EAAAA,CAAIA,CAAAA,UACH,GAAAuX,EAAAnZ,GAAA,EAAC0d,EAAAA,CAAUA,CAAAA,CAACC,QAAQ,OAAOC,QA7Bd,kBAAMf,EAAmB,SAACiB,CAAAA,CAAAA,OAAsB,CAACA,cA8B3D5E,EAAkB,GAAAC,EAAAnZ,GAAA,EAAC+d,EAAAA,CAAUA,CAAAA,CAAC7b,MAAM,SAAY,GAAAiX,EAAAnZ,GAAA,EAACge,EAAAA,CAAUA,CAAAA,CAAC9b,MAAM,QAAS,QAKnF6a,IAAcE,EAAAA,EAAAA,CAAAA,KAAmB,EAChC,GAAA9D,EAAAnZ,GAAA,EAACie,EAAUA,CACT7Y,cAAeA,EACfC,cAAeA,EACf6T,gBAAiBA,EACjBxM,cAAeA,EACfE,eAAgBA,EAChB6M,SAAUA,EACV3H,iBAAkBA,MAK5B,ECCAoM,EA9CyF,SAAAze,CAAA,CAWnF,KAVJgN,EAAAA,EAAAA,eAAAA,CACAC,EAAAA,EAAAA,aAAAA,CACAE,EAAAA,EAAAA,cAAAA,CACAD,EAAAA,EAAAA,gBAAAA,CACAuM,EAAAA,EAAAA,eAAAA,CACA2D,EAAAA,EAAAA,kBAAAA,CACAsB,EAAAA,EAAAA,gBAAAA,CACA1E,EAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EACAqD,oBAAAA,CACAhL,EAAAA,EAAAA,gBAAAA,CAEM1M,EAAgB0H,CAAAA,EAAAA,EAAAA,CAAAA,EAAgBL,GAChCpH,EAAgByH,CAAAA,EAAAA,EAAAA,CAAAA,EAAgBH,GACM2D,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAAK,GAAnD8N,EAAqC9N,CAAAA,CAAAA,EAAAA,CAArB+N,EAAqB/N,CAAAA,CAAAA,EAAAA,CACtCgO,EAAqBC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,kBAAMF,EAAkB,SAACG,CAAAA,CAAAA,OAAoB,CAACA,KAAkB,EAAE,EAEnGvF,EAAawF,CAAAA,EAAAA,EAAAA,EAAAA,IAAXxF,MAAAA,QAER,EAIkB7T,IAAkBsZ,EAAAA,CAAWA,EAAIrZ,IAAkBqZ,EAAAA,CAAWA,CAGvE,GAAAvF,EAAAnZ,GAAA,EAAC2e,EAAaA,CAAC1F,OAAQA,EAAQC,gBAAiBA,IAIvD,GAAAC,EAAAnZ,GAAA,EAAC4e,EAAUA,CACTxZ,cAAegZ,EAAiB/Y,EAAgBD,CAAa,CAC7DC,cAAe+Y,EAAiBhZ,EAAgBC,CAAa,CAC7DqH,cAAe0R,EAAiBxR,EAAiBF,CAAa,CAC9DE,eAAgBwR,EAAiB1R,EAAgBE,CAAc,CAC/DgQ,eAAgB0B,EAChBrF,OAAQA,EACRC,gBAAiBA,EACjB2D,mBAAoBA,EACpBpD,SAAUA,EACVqD,qBA/BJA,KAAAA,IAAAA,GAA4B+B,EAgCxB/M,iBAAkBA,IArBb,IAAI,yDC1Cf,IAAM4M,EAAc,0ICGP7D,EAAsB,SAACiE,CAAAA,CAAkB,CACpD,GAAIA,EAAc1Y,MAAM,CAAG,EAAG,CAC5B,IAAmB0Y,EAAAA,EAAbC,EAAaD,IAA8D,GAA9DA,CAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAcvM,IAAI,CAAC,SAAA9S,CAAA,MAAGyB,EAAAA,EAAAA,KAAAA,OAAY,CAAC,CAACA,GAASA,EAAQ,MAArD4d,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyD5d,KAAK,GAA9D4d,KAAAA,IAAAA,EAAAA,EAAkE,CAAC,CAEhF/D,EAAciE,CADW,CAACF,EAAc1Y,MAAM,CAAG,EAAE,CAAClF,KAAK,CAC/B6d,EAEhC,MAAO,CACLhE,YACEA,EAAc,EAAIkE,KAAKC,GAAG,CAACnE,EAVP,MAU2CkE,KAAKE,GAAG,CAACpE,EAAaqE,MAAyB,CAChHtE,iBAAkB,CAACC,EAAegE,EAAc,KAAK5C,OAAO,CAAC,EAC/D,CACF,CAAC,MAEM,CACLpB,YAAa,EACbD,iBAAkB,CACpB,CACF,EAEahO,EAAkB,SAAC7J,CAAAA,CAAqC,CACnE,GAAI,CAACA,EACH,MAAO,EACR,CACD,IAAMoc,EAAmBpc,EAAauO,WAAW,SACjD,QAAI6N,EACKX,EAAAA,CAAWA,CAGbW,CAFN,4JCsBH7f,CAAAA,EAAA,EAlC2E,SAAAC,CAAA,CAAoC,KAAjC6f,EAAAA,EAAAA,OAAAA,CAASC,EAAAA,EAAAA,MAAAA,CAAQC,EAAAA,EAAAA,SAAAA,CACvFC,EAAMC,CAAAA,EAAAA,EAAAA,MAAAA,EAAuB,IAAI,EACjCC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBL,EAAQ,KACzCM,EAAgBC,CAAAA,EAAAA,EAAAA,CAAAA,IAAdD,SAAAA,CAOR,GALAE,CAAAA,EAAAA,EAAAA,CAAAA,EACEN,MAAAA,EAAAA,KAAAA,EAAAA,EAAKO,OAAO,CACZzB,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,kBAAMiB,EAAU,KAAQ,CAACA,EAAU,GAG7C,CAACG,GAAgBE,EACnB,OAAO,IAAI,CAGb,IAAMI,EAASC,CAAAA,EAAAA,EAAAA,CAAAA,WAEf,EACSC,CAAAA,EAAAA,EAAAA,YAAAA,EACL,GAAApgB,EAAA0B,IAAA,EAAA1B,EAAA2Z,QAAA,YACE,GAAA3Z,EAAAC,GAAA,EAACogB,EAAAA,CAAOA,CAAAA,CAACC,aAAc,CAACd,IACxB,GAAAxf,EAAA0B,IAAA,EAAC6e,EAAAA,EAAeA,CAAAA,CAACb,IAAKA,EAAKY,aAAc,CAACd,YACxC,GAAAxf,EAAAC,GAAA,EAACG,EAAAA,EAAGA,CAAAA,CAACogB,SAAS,WAAWC,MAAM,OAAOC,IAAI,aACxC,GAAA1gB,EAAAC,GAAA,EAAC0d,EAAAA,CAAUA,CAAAA,CAACC,QAAQ,OAAOC,QAAS,kBAAM4B,EAAU,cAClD,GAAAzf,EAAAC,GAAA,EAAC0gB,EAAAA,CAASA,CAAAA,CAAAA,OAGbpB,QAGLW,GAEG,IAAI,mFCrCbzgB,CAAAA,EAAA,EAR0D,SAAC+B,CAAAA,CAAU,CACnE,MACE,GAAAxB,EAAAC,GAAA,EAAC2gB,EAAAA,CAAGA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,QAAQ,aAAgBrf,GAAAA,UAC3B,GAAAxB,EAAAC,GAAA,EAACiM,OAAAA,CAAK4U,EAAE,i1BAGd,mFCEArhB,CAAAA,EAAA,EAR0D,SAAC+B,CAAAA,CAAU,CACnE,MACE,GAAAxB,EAAAC,GAAA,EAAC2gB,EAAAA,CAAGA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,QAAQ,aAAgBrf,GAAAA,UAC3B,GAAAxB,EAAAC,GAAA,EAACiM,OAAAA,CAAK4U,EAAE,q3BAGd","sources":["webpack://_N_E/./src/components/ImportTokenWarningModal.tsx","webpack://_N_E/./src/components/PairPriceDisplay.tsx","webpack://_N_E/./src/state/swap/queries/getDerivedPrices.ts","webpack://_N_E/./src/state/swap/fetch/fetchDerivedPriceData.ts","webpack://_N_E/./src/state/swap/queries/lastPairDayId.ts","webpack://_N_E/./src/state/swap/queries/pairHourDatas.ts","webpack://_N_E/./src/state/swap/queries/pairDayDatasByIdsQuery.ts","webpack://_N_E/./src/state/swap/fetch/constants.ts","webpack://_N_E/./src/state/swap/fetch/utils.ts","webpack://_N_E/./src/state/swap/queries/pairDayDatas.ts","webpack://_N_E/./src/state/swap/queries/pairHourDatasByIds.ts","webpack://_N_E/./src/state/swap/queries/lastPairHourId.ts","webpack://_N_E/./src/state/swap/fetch/fetchPairPriceData.ts","webpack://_N_E/./src/state/swap/normalizers.ts","webpack://_N_E/./src/state/swap/selectors.ts","webpack://_N_E/./src/state/swap/useStableSwapPairs.ts","webpack://_N_E/./src/state/swap/hooks.ts","webpack://_N_E/./src/state/swap/types.ts","webpack://_N_E/./src/state/swap/fetch/fetchBestPriceWithRouter.ts","webpack://_N_E/./src/views/Swap/SmartSwap/hooks/useBestTrade.ts","webpack://_N_E/./src/views/Swap/components/Chart/styles.tsx","webpack://_N_E/./src/views/Swap/components/Chart/BnbWbnbNotice.tsx","webpack://_N_E/./src/views/Swap/components/Chart/NoChartAvailable.tsx","webpack://_N_E/./src/views/Swap/components/Chart/BasicChart.tsx","webpack://_N_E/./src/views/Swap/components/Chart/PriceChart.tsx","webpack://_N_E/./src/views/Swap/components/Chart/PriceChartContainer.tsx","webpack://_N_E/./src/views/Swap/components/Chart/constants.ts","webpack://_N_E/./src/views/Swap/components/Chart/utils.ts","webpack://_N_E/../../packages/uikit/src/components/BottomDrawer/BottomDrawer.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/Expand.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/Shrink.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Token } from '@pancakeswap/sdk'\nimport { Modal, Box, InjectedModalProps } from '@pancakeswap/uikit'\nimport ImportToken from 'components/SearchModal/ImportToken'\nimport { useTranslation } from '@pancakeswap/localization'\n\ninterface Props extends InjectedModalProps {\n  tokens: Token[]\n  onCancel: () => void\n}\n\nconst ImportTokenWarningModal: React.FC<React.PropsWithChildren<Props>> = ({ tokens, onDismiss, onCancel }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal\n      title={t('Import Token')}\n      onDismiss={() => {\n        onDismiss?.()\n        onCancel()\n      }}\n    >\n      <Box maxWidth=\"380px\">\n        <ImportToken tokens={tokens} handleCurrencySelect={onDismiss} />\n      </Box>\n    </Modal>\n  )\n}\n\nexport default ImportTokenWarningModal\n","import { Flex, Skeleton, Text, FlexGap, FlexGapProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { formatAmount, formatAmountNotation } from 'utils/formatInfoNumbers'\n\nconst formatOptions = {\n  notation: 'standard' as formatAmountNotation,\n  displayThreshold: 0.001,\n  tokenPrecision: true,\n}\n\ninterface TokenDisplayProps extends FlexGapProps {\n  value?: number | string\n  inputSymbol?: string\n  outputSymbol?: string\n  format?: boolean\n}\n\nconst TextLabel = styled(Text)`\n  font-size: 32px;\n  line-height: 1.1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst PairPriceDisplay: React.FC<React.PropsWithChildren<TokenDisplayProps>> = ({\n  value,\n  inputSymbol,\n  outputSymbol,\n  children,\n  format = true,\n  ...props\n}) => {\n  return value ? (\n    <FlexGap alignItems=\"baseline\" {...props}>\n      <Flex alignItems=\"inherit\">\n        <TextLabel mr=\"8px\" bold>\n          {format ? formatAmount(typeof value === 'string' ? parseFloat(value) : value, formatOptions) : value}\n        </TextLabel>\n        {inputSymbol && outputSymbol && (\n          <Text color=\"textSubtle\" fontSize=\"20px\" bold lineHeight={1.1}>\n            {`${inputSymbol}/${outputSymbol}`}\n          </Text>\n        )}\n      </Flex>\n      {children}\n    </FlexGap>\n  ) : (\n    <Skeleton height=\"36px\" width=\"128px\" {...props} />\n  )\n}\n\nexport default PairPriceDisplay\n","import { gql } from 'graphql-request'\nimport { Block } from 'state/info/types'\n\nexport const getDerivedPrices = (tokenAddress: string, blocks: Block[]) =>\n  blocks.map(\n    (block) => `\n    t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number}}) {\n        derivedUSD\n      }\n    `,\n  )\n\nexport const getDerivedPricesQueryConstructor = (subqueries: string[]) => {\n  return gql`\n      query derivedTokenPriceData {\n        ${subqueries}\n      }\n    `\n}\n","import { INFO_CLIENT, STABLESWAP_SUBGRAPH_CLIENT } from 'config/constants/endpoints'\nimport { ONE_DAY_UNIX, ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { getUnixTime, startOfHour, sub } from 'date-fns'\nimport mapValues from 'lodash/mapValues'\nimport orderBy from 'lodash/orderBy'\nimport { Block } from 'state/info/types'\nimport { getBlocksFromTimestamps } from 'utils/getBlocksFromTimestamps'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { getDerivedPrices, getDerivedPricesQueryConstructor } from '../queries/getDerivedPrices'\nimport { PairDataTimeWindowEnum } from '../types'\n\nconst getTokenDerivedUSDCPrices = async (tokenAddress: string, blocks: Block[], isStableStable?: boolean) => {\n  const rawPrices: any | undefined = await multiQuery(\n    getDerivedPricesQueryConstructor,\n    getDerivedPrices(tokenAddress, blocks),\n    isStableStable ? STABLESWAP_SUBGRAPH_CLIENT : INFO_CLIENT,\n    200,\n  )\n\n  if (!rawPrices) {\n    console.error('Price data failed to load')\n    return null\n  }\n\n  const prices = mapValues(rawPrices, (value) => {\n    return value.derivedUSD\n  })\n\n  // format token BNB price results\n  const tokenPrices: {\n    tokenAddress: string\n    timestamp: string\n    derivedUSD: number\n  }[] = []\n\n  // Get Token prices in BNB\n  Object.keys(prices).forEach((priceKey) => {\n    const timestamp = priceKey.split('t')[1]\n    if (timestamp) {\n      tokenPrices.push({\n        tokenAddress,\n        timestamp,\n        derivedUSD: prices[priceKey] ? parseFloat(prices[priceKey]) : 0,\n      })\n    }\n  })\n\n  return orderBy(tokenPrices, (tokenPrice) => parseInt(tokenPrice.timestamp, 10))\n}\n\nconst getInterval = (timeWindow: PairDataTimeWindowEnum) => {\n  switch (timeWindow) {\n    case PairDataTimeWindowEnum.DAY:\n      return ONE_HOUR_SECONDS\n    case PairDataTimeWindowEnum.WEEK:\n      return ONE_HOUR_SECONDS * 4\n    case PairDataTimeWindowEnum.MONTH:\n      return ONE_DAY_UNIX\n    case PairDataTimeWindowEnum.YEAR:\n      return ONE_DAY_UNIX * 15\n    default:\n      return ONE_HOUR_SECONDS * 4\n  }\n}\n\nconst getSkipDaysToStart = (timeWindow: PairDataTimeWindowEnum) => {\n  switch (timeWindow) {\n    case PairDataTimeWindowEnum.DAY:\n      return 1\n    case PairDataTimeWindowEnum.WEEK:\n      return 7\n    case PairDataTimeWindowEnum.MONTH:\n      return 30\n    case PairDataTimeWindowEnum.YEAR:\n      return 365\n    default:\n      return 7\n  }\n}\n\n// Fetches derivedBnb values for tokens to calculate derived price\n// Used when no direct pool is available\nconst fetchDerivedPriceData = async (\n  token0Address: string,\n  token1Address: string,\n  timeWindow: PairDataTimeWindowEnum,\n  // token0 has StableSwap involved\n  token0StableStable?: boolean,\n  // token1 has StableSwap involved\n  token1StableStable?: boolean,\n) => {\n  const interval = getInterval(timeWindow)\n  const endTimestamp = getUnixTime(new Date())\n  const startTimestamp = getUnixTime(startOfHour(sub(endTimestamp * 1000, { days: getSkipDaysToStart(timeWindow) })))\n  const timestamps = []\n  let time = startTimestamp\n  while (time <= endTimestamp) {\n    timestamps.push(time)\n    time += interval\n  }\n\n  try {\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500)\n    if (!blocks || blocks.length === 0) {\n      console.error('Error fetching blocks for timestamps', timestamps)\n      return null\n    }\n    blocks.pop() // the bsc graph is 32 block behind so pop the last\n    const [token0DerivedUSD, token1DerivedUSD] = await Promise.all([\n      getTokenDerivedUSDCPrices(token0Address, blocks, token0StableStable),\n      getTokenDerivedUSDCPrices(token1Address, blocks, token1StableStable),\n    ])\n    return { token0DerivedUSD, token1DerivedUSD }\n  } catch (error) {\n    console.error('Failed to fetched derived price data for chart', error)\n    return null\n  }\n}\n\nexport default fetchDerivedPriceData\n","import { gql } from 'graphql-request'\n\nconst lastPairDayId = gql`\n  query lastPairDayId($pairId: Bytes) {\n    pairDayDatas(first: 1, where: { pairAddress: $pairId }, orderBy: date, orderDirection: desc) {\n      id\n    }\n  }\n`\nexport default lastPairDayId\n","import { gql } from 'graphql-request'\n\nconst pairHourDatas = gql`\n  query pairHourDatas($pairId: String, $first: Int) {\n    pairHourDatas(first: $first, where: { pair: $pairId }, orderBy: hourStartUnix, orderDirection: desc) {\n      id\n      hourStartUnix\n      reserve0\n      reserve1\n      reserveUSD\n    }\n  }\n`\n/**\n * Hack to rename token0Price and token1Price to reserve0 and reserve1, in order to get the price by dividing in js\n */\n\nexport const stableSwapPairHourDatas = gql`\n  query pairHourDatas($pairId: String, $first: Int) {\n    pairHourDatas(first: $first, where: { pair: $pairId }, orderBy: hourStartUnix, orderDirection: desc) {\n      id\n      hourStartUnix\n      reserve0: token0Price\n      reserve1: token1Price\n      reserveUSD\n    }\n  }\n`\nexport default pairHourDatas\n","import { gql } from 'graphql-request'\n\nconst pairDayDatasByIdsQuery = gql`\n  query pairDayDatasByIdsQuery($pairIds: [ID!]) {\n    pairDayDatas(where: { id_in: $pairIds }, orderBy: date, orderDirection: desc) {\n      id\n      date\n      reserve0\n      reserve1\n      reserveUSD\n    }\n  }\n`\n\n/**\n * Hack to rename token0Price and token1Price to reserve0 and reserve1, in order to get the price by dividing in js\n */\nexport const stableSwapPairDayDatasByIdsQuery = gql`\n  query pairDayDatasByIdsQuery($pairIds: [ID!]) {\n    pairDayDatas(where: { id_in: $pairIds }, orderBy: date, orderDirection: desc) {\n      id\n      date\n      reserve0: token0Price\n      reserve1: token1Price\n      reserveUSD\n    }\n  }\n`\nexport default pairDayDatasByIdsQuery\n","import { PairDataTimeWindowEnum } from '../types'\n\n// Specifies the amount of data points to query for specific time window\nexport const timeWindowIdsCountMapping: Record<PairDataTimeWindowEnum, number> = {\n  [PairDataTimeWindowEnum.DAY]: 24,\n  [PairDataTimeWindowEnum.WEEK]: 28,\n  [PairDataTimeWindowEnum.MONTH]: 30,\n  [PairDataTimeWindowEnum.YEAR]: 24,\n}\n\n// How many StreamingFast ids to skip when querying the data\nexport const timeWindowGapMapping: Record<PairDataTimeWindowEnum, number | null> = {\n  [PairDataTimeWindowEnum.DAY]: null,\n  [PairDataTimeWindowEnum.WEEK]: 6, // Each datapoint 6 hours apart\n  [PairDataTimeWindowEnum.MONTH]: 1, // Each datapoint 1 day apart\n  [PairDataTimeWindowEnum.YEAR]: 15, // Each datapoint 15 days apart\n}\n","import times from 'lodash/times'\nimport { PairDataTimeWindowEnum } from '../types'\nimport { timeWindowGapMapping } from './constants'\nimport { PairDayDatasResponse, PairHoursDatasResponse } from './types'\n\ntype getPairSequentialIdParams = {\n  id: string\n  pairId: string\n}\nexport const getPairSequentialId = ({ id, pairId }: getPairSequentialIdParams) => id.replace(`${pairId}-`, '')\n\ntype getPairHoursIdsByTimeWindowParams = {\n  pairAddress: string\n  pairLastId: string\n  timeWindow: PairDataTimeWindowEnum\n  idsCount: number\n}\n\nexport const getIdsByTimeWindow = ({\n  pairAddress,\n  pairLastId,\n  timeWindow,\n  idsCount,\n}: getPairHoursIdsByTimeWindowParams) => {\n  const pairLastIdAsNumber = Number(pairLastId)\n  if (timeWindow === PairDataTimeWindowEnum.DAY) {\n    return []\n  }\n  return times(idsCount, (value) => `${pairAddress}-${pairLastIdAsNumber - value * timeWindowGapMapping[timeWindow]}`)\n}\n\nexport const pairHasEnoughLiquidity = (\n  data: PairHoursDatasResponse | PairDayDatasResponse | null,\n  timeWindow: PairDataTimeWindowEnum,\n) => {\n  const liquidityThreshold = 10000\n  switch (timeWindow) {\n    case PairDataTimeWindowEnum.DAY:\n    case PairDataTimeWindowEnum.WEEK: {\n      const amountOfDataPoints = (data as PairHoursDatasResponse)?.pairHourDatas?.length ?? 1\n      const totalUSD = (data as PairHoursDatasResponse)?.pairHourDatas?.reduce((totalLiquidity, fetchPairEntry) => {\n        return totalLiquidity + parseFloat(fetchPairEntry.reserveUSD)\n      }, 0)\n      return totalUSD / amountOfDataPoints > liquidityThreshold\n    }\n    case PairDataTimeWindowEnum.MONTH:\n    case PairDataTimeWindowEnum.YEAR: {\n      const amountOfDataPoints = (data as PairDayDatasResponse)?.pairDayDatas?.length ?? 1\n      const totalUSD = (data as PairDayDatasResponse)?.pairDayDatas?.reduce((totalLiquidity, fetchPairEntry) => {\n        return totalLiquidity + parseFloat(fetchPairEntry.reserveUSD)\n      }, 0)\n      return totalUSD / amountOfDataPoints > liquidityThreshold\n    }\n    default:\n      return null\n  }\n}\n","import { gql } from 'graphql-request'\n\nconst pairDayDatas = gql`\n  query pairDayDatas($pairId: Bytes, $first: Int) {\n    pairDayDatas(first: $first, where: { pairAddress: $pairId }, orderBy: date, orderDirection: desc) {\n      id\n      date\n      reserve0\n      reserve1\n      reserveUSD\n    }\n  }\n`\n\nexport const stableSwapPairDayDatas = gql`\n  query pairDayDatas($pairId: Bytes, $first: Int) {\n    pairDayDatas(first: $first, where: { pairAddress: $pairId }, orderBy: date, orderDirection: desc) {\n      id\n      date\n      reserve0: token0Price\n      reserve1: token1Price\n      reserveUSD\n    }\n  }\n`\nexport default pairDayDatas\n","import { gql } from 'graphql-request'\n\nconst pairHourDatasByIds = gql`\n  query pairHourDatasByIds($pairIds: [ID!]) {\n    pairHourDatas(where: { id_in: $pairIds }, orderBy: hourStartUnix, orderDirection: desc) {\n      id\n      hourStartUnix\n      reserve0\n      reserve1\n      reserveUSD\n    }\n  }\n`\n\n/**\n * Hack to rename token0Price and token1Price to reserve0 and reserve1, in order to get the price by dividing in js\n */\nexport const stableSwapPairHourDatasByIds = gql`\n  query pairHourDatasByIds($pairIds: [ID!]) {\n    pairHourDatas(where: { id_in: $pairIds }, orderBy: hourStartUnix, orderDirection: desc) {\n      id\n      hourStartUnix\n      reserve0: token0Price\n      reserve1: token1Price\n      reserveUSD\n    }\n  }\n`\nexport default pairHourDatasByIds\n","import { gql } from 'graphql-request'\n\nconst lastPairHourId = gql`\n  query lastPairHourId($pairId: String) {\n    pairHourDatas(first: 1, where: { pair: $pairId }, orderBy: hourStartUnix, orderDirection: desc) {\n      id\n    }\n  }\n`\nexport default lastPairHourId\n","import requestWithTimeout from 'utils/requestWithTimeout'\nimport { infoClient, stableSwapClient } from 'utils/graphql'\nimport lastPairDayId from '../queries/lastPairDayId'\nimport pairHourDatas, { stableSwapPairHourDatas } from '../queries/pairHourDatas'\nimport pairDayDatasByIdsQuery, { stableSwapPairDayDatasByIdsQuery } from '../queries/pairDayDatasByIdsQuery'\nimport { PairDataTimeWindowEnum } from '../types'\nimport { timeWindowIdsCountMapping } from './constants'\nimport {\n  fetchPairDataParams,\n  LastPairDayIdResponse,\n  LastPairHourIdResponse,\n  PairDayDatasResponse,\n  PairHoursDatasResponse,\n} from './types'\nimport { getIdsByTimeWindow, getPairSequentialId } from './utils'\nimport pairDayDatas, { stableSwapPairDayDatas } from '../queries/pairDayDatas'\nimport pairHourDatasByIds, { stableSwapPairHourDatasByIds } from '../queries/pairHourDatasByIds'\nimport lastPairHourId from '../queries/lastPairHourId'\n\nconst fetchPairPriceData = async ({ pairId, timeWindow, isStableSwap }: fetchPairDataParams) => {\n  const client = isStableSwap ? stableSwapClient : infoClient\n\n  try {\n    switch (timeWindow) {\n      case PairDataTimeWindowEnum.DAY: {\n        const data = await requestWithTimeout<PairHoursDatasResponse>(\n          client,\n          isStableSwap ? stableSwapPairHourDatas : pairHourDatas,\n          {\n            pairId,\n            first: timeWindowIdsCountMapping[timeWindow],\n          },\n        )\n        return { data, error: false }\n      }\n      case PairDataTimeWindowEnum.WEEK: {\n        const lastPairHourIdData = await requestWithTimeout<LastPairHourIdResponse>(client, lastPairHourId, { pairId })\n        const lastId = lastPairHourIdData?.pairHourDatas ? lastPairHourIdData.pairHourDatas[0]?.id : null\n        if (!lastId) {\n          return { data: { pairHourDatas: [] }, error: false }\n        }\n        const pairHourId = getPairSequentialId({ id: lastId, pairId })\n        const pairHourIds = getIdsByTimeWindow({\n          pairAddress: pairId,\n          pairLastId: pairHourId,\n          timeWindow,\n          idsCount: timeWindowIdsCountMapping[timeWindow],\n        })\n\n        const pairHoursData = await requestWithTimeout<PairHoursDatasResponse>(\n          client,\n          isStableSwap ? stableSwapPairHourDatasByIds : pairHourDatasByIds,\n          {\n            pairIds: pairHourIds,\n          },\n        )\n        return { data: pairHoursData, error: false }\n      }\n      case PairDataTimeWindowEnum.MONTH: {\n        const data = await requestWithTimeout<PairHoursDatasResponse>(\n          client,\n          isStableSwap ? stableSwapPairDayDatas : pairDayDatas,\n          {\n            pairId,\n            first: timeWindowIdsCountMapping[timeWindow],\n          },\n        )\n        return { data, error: false }\n      }\n      case PairDataTimeWindowEnum.YEAR: {\n        const lastPairDayIdData = await requestWithTimeout<LastPairDayIdResponse>(client, lastPairDayId, { pairId })\n        const lastId = lastPairDayIdData?.pairDayDatas ? lastPairDayIdData.pairDayDatas[0]?.id : null\n        if (!lastId) {\n          return { data: { pairDayDatas: [] }, error: false }\n        }\n        const pairLastId = getPairSequentialId({ id: lastId, pairId })\n        const pairDayIds = getIdsByTimeWindow({\n          pairAddress: pairId,\n          pairLastId,\n          timeWindow,\n          idsCount: timeWindowIdsCountMapping[timeWindow],\n        })\n        const pairDayData = await requestWithTimeout<PairDayDatasResponse>(\n          client,\n          isStableSwap ? stableSwapPairDayDatasByIdsQuery : pairDayDatasByIdsQuery,\n          {\n            pairIds: pairDayIds,\n          },\n        )\n        return { data: pairDayData, error: false }\n      }\n      default:\n        return { data: null, error: false }\n    }\n  } catch (error) {\n    console.error('Failed to fetch price chart data', error)\n    return { error: true }\n  }\n}\n\nexport default fetchPairPriceData\n","import { fromUnixTime } from 'date-fns'\nimport fromPairs from 'lodash/fromPairs'\nimport { PairDayDatasResponse, PairHoursDatasResponse } from './fetch/types'\nimport { DerivedPairDataNormalized, PairDataNormalized, PairDataTimeWindowEnum, PairPricesNormalized } from './types'\n\nexport const normalizeChartData = (\n  data: PairHoursDatasResponse | PairDayDatasResponse | null,\n  token0Address: string,\n  token1Address: string,\n  timeWindow: PairDataTimeWindowEnum,\n) => {\n  switch (timeWindow) {\n    case PairDataTimeWindowEnum.DAY:\n    case PairDataTimeWindowEnum.WEEK:\n      return (data as PairHoursDatasResponse)?.pairHourDatas?.map((fetchPairEntry) => ({\n        time: fetchPairEntry.hourStartUnix,\n        token0Id: token0Address,\n        token1Id: token1Address,\n        reserve0: parseFloat(fetchPairEntry.reserve0),\n        reserve1: parseFloat(fetchPairEntry.reserve1),\n      }))\n    case PairDataTimeWindowEnum.MONTH:\n    case PairDataTimeWindowEnum.YEAR:\n      return (data as PairDayDatasResponse)?.pairDayDatas?.map((fetchPairEntry) => ({\n        time: fetchPairEntry.date,\n        token0Id: token0Address,\n        token1Id: token1Address,\n        reserve0: parseFloat(fetchPairEntry.reserve0),\n        reserve1: parseFloat(fetchPairEntry.reserve1),\n      }))\n    default:\n      return null\n  }\n}\n\nexport const normalizeDerivedChartData = (data: any) => {\n  if (!data?.token0DerivedUSD || data?.token0DerivedUSD.length === 0) {\n    return []\n  }\n\n  const token1DerivedUSDEntryMap: any = fromPairs(\n    data?.token1DerivedUSD?.map((entry) => [entry.timestamp, entry]) ?? [],\n  )\n\n  return data?.token0DerivedUSD.reduce((acc, token0DerivedUSDEntry) => {\n    const token1DerivedUSDEntry = token1DerivedUSDEntryMap[token0DerivedUSDEntry.timestamp]\n    if (token1DerivedUSDEntry) {\n      acc.push({\n        time: parseInt(token0DerivedUSDEntry.timestamp, 10),\n        token0Id: token0DerivedUSDEntry.tokenAddress,\n        token1Id: token1DerivedUSDEntry.tokenAddress,\n        token0DerivedUSD: token0DerivedUSDEntry.derivedUSD,\n        token1DerivedUSD: token1DerivedUSDEntry.derivedUSD,\n      })\n    }\n    return acc\n  }, [])\n}\n\ntype normalizePairDataByActiveTokenParams = {\n  pairData: PairDataNormalized\n  activeToken: string\n}\n\nexport const normalizePairDataByActiveToken = ({\n  pairData,\n  activeToken,\n}: normalizePairDataByActiveTokenParams): PairPricesNormalized =>\n  pairData\n    ?.map((pairPrice) => ({\n      time: fromUnixTime(pairPrice.time),\n      value:\n        activeToken === pairPrice?.token0Id\n          ? pairPrice.reserve1 / pairPrice.reserve0\n          : pairPrice.reserve0 / pairPrice.reserve1,\n    }))\n    .reverse()\n\ntype normalizeDerivedPairDataByActiveTokenParams = {\n  pairData: DerivedPairDataNormalized\n  activeToken: string\n}\n\nexport const normalizeDerivedPairDataByActiveToken = ({\n  pairData,\n  activeToken,\n}: normalizeDerivedPairDataByActiveTokenParams): PairPricesNormalized =>\n  pairData?.map((pairPrice) => ({\n    time: fromUnixTime(pairPrice.time),\n    value:\n      activeToken === pairPrice?.token0Id\n        ? pairPrice.token0DerivedUSD / pairPrice.token1DerivedUSD\n        : pairPrice.token1DerivedUSD / pairPrice.token0DerivedUSD,\n  }))\n","import get from 'lodash/get'\nimport { AppState } from 'state'\nimport { PairDataTimeWindowEnum } from './types'\n\ntype pairByDataIdSelectorParams = {\n  pairId: string\n  timeWindow: PairDataTimeWindowEnum\n}\n\nexport const pairByDataIdSelector =\n  ({ pairId, timeWindow }: pairByDataIdSelectorParams) =>\n  (state: AppState) =>\n    get(state, ['swap', 'pairDataById', pairId, timeWindow])\n\nexport const derivedPairByDataIdSelector =\n  ({ pairId, timeWindow }: pairByDataIdSelectorParams) =>\n  (state: AppState) =>\n    get(state, ['swap', 'derivedPairDataById', pairId, timeWindow])\n","import { stableSwapPairsByChainId } from '@pancakeswap/smart-router/evm'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { useMemo } from 'react'\n\nexport function useStableSwapPairs() {\n  const { chainId } = useActiveChainId()\n\n  return useMemo(() => stableSwapPairsByChainId[chainId], [chainId])\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, Price, Trade, TradeType } from '@pancakeswap/sdk'\nimport { CAKE, USDC } from '@pancakeswap/tokens'\nimport { equalsIgnoreCase } from '@pancakeswap/utils/equalsIgnoreCase'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport IPancakePairABI from 'config/abi/IPancakePair.json'\nimport { DEFAULT_INPUT_CURRENCY, DEFAULT_OUTPUT_CURRENCY } from 'config/constants/exchange'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { useRouter } from 'next/router'\nimport { ParsedUrlQuery } from 'querystring'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isAddress } from 'utils'\nimport { computeSlippageAdjustedAmounts } from 'utils/exchange'\nimport getLpAddress from 'utils/getLpAddress'\nimport { multicallv2 } from 'utils/multicall'\nimport { getTokenAddress } from 'views/Swap/components/Chart/utils'\nimport { useBestTrade } from 'views/Swap/SmartSwap/hooks/useBestTrade'\nimport { useAccount } from 'wagmi'\nimport { AppState, useAppDispatch } from '../index'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, updateDerivedPairData, updatePairData } from './actions'\nimport fetchDerivedPriceData from './fetch/fetchDerivedPriceData'\nimport fetchPairPriceData from './fetch/fetchPairPriceData'\nimport { pairHasEnoughLiquidity } from './fetch/utils'\nimport {\n  normalizeChartData,\n  normalizeDerivedChartData,\n  normalizeDerivedPairDataByActiveToken,\n  normalizePairDataByActiveToken,\n} from './normalizers'\nimport { SwapState } from './reducer'\nimport { derivedPairByDataIdSelector, pairByDataIdSelector } from './selectors'\nimport { PairDataTimeWindowEnum } from './types'\nimport { useStableSwapPairs } from './useStableSwapPairs'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\n}\n\n// TODO: update\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n]\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade<Currency, Currency, TradeType>, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n  )\n}\n\n// Get swap price for single token disregarding slippage and price impact\nexport function useSingleTokenSwapInfo(\n  inputCurrencyId: string | undefined,\n  inputCurrency: Currency | undefined,\n  outputCurrencyId: string | undefined,\n  outputCurrency: Currency | undefined,\n): { [key: string]: number } {\n  const token0Address = getTokenAddress(inputCurrencyId)\n  const token1Address = getTokenAddress(outputCurrencyId)\n\n  const parsedAmount = tryParseAmount('1', inputCurrency ?? undefined)\n\n  const bestTradeExactIn = useBestTrade(parsedAmount, outputCurrency ?? undefined, TradeType.EXACT_INPUT)\n  if (!inputCurrency || !outputCurrency || !bestTradeExactIn) {\n    return null\n  }\n\n  let inputTokenPrice: number\n  try {\n    inputTokenPrice = parseFloat(\n      new Price({\n        baseAmount: bestTradeExactIn.inputAmount,\n        quoteAmount: bestTradeExactIn.outputAmount,\n      }).toSignificant(6),\n    )\n  } catch (error) {\n    //\n  }\n  if (!inputTokenPrice) {\n    return null\n  }\n  const outputTokenPrice = 1 / inputTokenPrice\n\n  return {\n    [token0Address]: inputTokenPrice,\n    [token1Address]: outputTokenPrice,\n  }\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(\n  independentField: Field,\n  typedValue: string,\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  recipient: string,\n): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  v2Trade: Trade<Currency, Currency, TradeType> | undefined\n  inputError?: string\n} {\n  const { address: account } = useAccount()\n  const { t } = useTranslation()\n\n  const to: string | null = (recipient === null ? account : isAddress(recipient) || null) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency]),\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = t('Connect Wallet')\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? t('Enter an amount')\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? t('Select a token')\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? t('Enter a recipient')\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n  ) {\n    inputError = inputError ?? t('Invalid recipient')\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = t('Insufficient %symbol% balance', { symbol: amountIn.currency.symbol })\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n  }\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !Number.isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(\n  parsedQs: ParsedUrlQuery,\n  nativeSymbol?: string,\n  defaultOutputCurrency?: string,\n): SwapState {\n  let inputCurrency = isAddress(parsedQs.inputCurrency) || (nativeSymbol ?? DEFAULT_INPUT_CURRENCY)\n  let outputCurrency =\n    typeof parsedQs.outputCurrency === 'string'\n      ? isAddress(parsedQs.outputCurrency) || nativeSymbol\n      : defaultOutputCurrency ?? DEFAULT_OUTPUT_CURRENCY\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n    pairDataById: {},\n    derivedPairDataById: {},\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveChainId()\n  const dispatch = useAppDispatch()\n  const native = useNativeCurrency()\n  const { query } = useRouter()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId || !native) return\n    const parsed = queryParametersToSwapState(query, native.symbol, CAKE[chainId]?.address ?? USDC[chainId]?.address)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: null,\n      }),\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n  }, [dispatch, chainId, query, native])\n\n  return result\n}\n\ntype useFetchPairPricesParams = {\n  token0Address: string\n  token1Address: string\n  timeWindow: PairDataTimeWindowEnum\n  currentSwapPrice: {\n    [key: string]: number\n  }\n}\n\nexport const useFetchPairPrices = ({\n  token0Address,\n  token1Address,\n  timeWindow,\n  currentSwapPrice,\n}: useFetchPairPricesParams) => {\n  const [pairId, setPairId] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const pairData = useSelector(pairByDataIdSelector({ pairId, timeWindow }))\n  const derivedPairData = useSelector(derivedPairByDataIdSelector({ pairId, timeWindow }))\n  const dispatch = useDispatch()\n\n  const stableSwapPairs = useStableSwapPairs()\n  const stableSwapPair = useMemo(\n    () =>\n      stableSwapPairs.find(\n        (pair) =>\n          pair.token0.isToken &&\n          pair.token1.isToken &&\n          (equalsIgnoreCase(pair.token0.address, token0Address) ||\n            equalsIgnoreCase(pair.token0.address, token1Address)) &&\n          (equalsIgnoreCase(pair.token1.address, token0Address) ||\n            equalsIgnoreCase(pair.token1.address, token1Address)),\n      ),\n    [stableSwapPairs, token0Address, token1Address],\n  )\n  const isStableSwap = !!stableSwapPair\n\n  useEffect(() => {\n    const fetchDerivedData = async () => {\n      console.info(\n        '[Price Chart]: Not possible to retrieve price data from single pool, trying to fetch derived prices',\n      )\n      try {\n        // Try to get at least derived data for chart\n        // This is used when there is no direct data for pool\n        // i.e. when multihops are necessary\n        const derivedData = await fetchDerivedPriceData(\n          token0Address,\n          token1Address,\n          timeWindow,\n          stableSwapPairs.some(\n            (p) =>\n              equalsIgnoreCase(p.token0.wrapped.address, token0Address) ||\n              equalsIgnoreCase(p.token1.wrapped.address, token0Address),\n          ),\n          stableSwapPairs.some(\n            (p) =>\n              equalsIgnoreCase(p.token0.wrapped.address, token1Address) ||\n              equalsIgnoreCase(p.token1.wrapped.address, token1Address),\n          ),\n        )\n        if (derivedData) {\n          const normalizedDerivedData = normalizeDerivedChartData(derivedData)\n          dispatch(updateDerivedPairData({ pairData: normalizedDerivedData, pairId, timeWindow }))\n        } else {\n          dispatch(updateDerivedPairData({ pairData: [], pairId, timeWindow }))\n        }\n      } catch (error) {\n        console.error('Failed to fetch derived prices for chart', error)\n        dispatch(updateDerivedPairData({ pairData: [], pairId, timeWindow }))\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    const fetchAndUpdatePairPrice = async () => {\n      setIsLoading(true)\n      const { data } = await fetchPairPriceData({ pairId, timeWindow, isStableSwap })\n      if (data) {\n        // Find out if Liquidity Pool has enough liquidity\n        // low liquidity pool might mean that the price is incorrect\n        // in that case try to get derived price\n        const hasEnoughLiquidity = pairHasEnoughLiquidity(data, timeWindow)\n        let pairTokenResults\n        if (isStableSwap) {\n          pairTokenResults = [[stableSwapPair.token0.wrapped.address], [stableSwapPair.token1.wrapped.address]]\n        } else {\n          try {\n            pairTokenResults = await multicallv2({\n              abi: IPancakePairABI,\n              calls: [\n                {\n                  address: pairId,\n                  name: 'token0',\n                },\n                {\n                  address: pairId,\n                  name: 'token1',\n                },\n              ],\n              options: { requireSuccess: false },\n            })\n          } catch (error) {\n            console.info('Error fetching tokenIds from pair')\n          }\n        }\n        const newPairData =\n          (pairTokenResults &&\n            pairTokenResults[0]?.[0] &&\n            pairTokenResults[1]?.[0] &&\n            normalizeChartData(\n              data,\n              pairTokenResults[0][0].toLowerCase(),\n              pairTokenResults[1][0].toLowerCase(),\n              timeWindow,\n            )) ||\n          []\n\n        if (newPairData.length > 0 && hasEnoughLiquidity) {\n          dispatch(updatePairData({ pairData: newPairData, pairId, timeWindow }))\n          setIsLoading(false)\n        } else {\n          console.info(`[Price Chart]: Liquidity too low for ${pairId}`)\n          dispatch(updatePairData({ pairData: [], pairId, timeWindow }))\n          fetchDerivedData()\n        }\n      } else {\n        dispatch(updatePairData({ pairData: [], pairId, timeWindow }))\n        fetchDerivedData()\n      }\n    }\n\n    if (!pairData && !derivedPairData && pairId && !isLoading) {\n      fetchAndUpdatePairPrice()\n    }\n  }, [\n    pairId,\n    timeWindow,\n    pairData,\n    currentSwapPrice,\n    token0Address,\n    token1Address,\n    derivedPairData,\n    dispatch,\n    isLoading,\n    isStableSwap,\n    stableSwapPair,\n    stableSwapPairs,\n  ])\n\n  useEffect(() => {\n    const updatePairId = () => {\n      try {\n        const pairAddress = isStableSwap\n          ? stableSwapPair?.stableSwapAddress?.toLowerCase()\n          : getLpAddress(token0Address, token1Address)?.toLowerCase()\n        if (pairAddress !== pairId) {\n          setPairId(pairAddress)\n        }\n      } catch (error) {\n        setPairId(null)\n      }\n    }\n\n    updatePairId()\n  }, [token0Address, token1Address, pairId, isStableSwap, stableSwapPair])\n\n  const normalizedPairData = useMemo(\n    () => normalizePairDataByActiveToken({ activeToken: token0Address, pairData }),\n    [token0Address, pairData],\n  )\n\n  const normalizedDerivedPairData = useMemo(\n    () => normalizeDerivedPairDataByActiveToken({ activeToken: token0Address, pairData: derivedPairData }),\n    [token0Address, derivedPairData],\n  )\n\n  const hasSwapPrice = currentSwapPrice && currentSwapPrice[token0Address] > 0\n\n  const normalizedPairDataWithCurrentSwapPrice =\n    normalizedPairData?.length > 0 && hasSwapPrice\n      ? [...normalizedPairData, { time: new Date(), value: currentSwapPrice[token0Address] }]\n      : normalizedPairData\n\n  const normalizedDerivedPairDataWithCurrentSwapPrice =\n    normalizedDerivedPairData?.length > 0 && hasSwapPrice\n      ? [...normalizedDerivedPairData, { time: new Date(), value: currentSwapPrice[token0Address] }]\n      : normalizedDerivedPairData\n\n  const hasNoDirectData = normalizedPairDataWithCurrentSwapPrice && normalizedPairDataWithCurrentSwapPrice?.length === 0\n  const hasNoDerivedData =\n    normalizedDerivedPairDataWithCurrentSwapPrice && normalizedDerivedPairDataWithCurrentSwapPrice?.length === 0\n\n  // undefined is used for loading\n  let pairPrices = hasNoDirectData && hasNoDerivedData ? [] : undefined\n  if (normalizedPairDataWithCurrentSwapPrice && normalizedPairDataWithCurrentSwapPrice?.length > 0) {\n    pairPrices = normalizedPairDataWithCurrentSwapPrice\n  } else if (\n    normalizedDerivedPairDataWithCurrentSwapPrice &&\n    normalizedDerivedPairDataWithCurrentSwapPrice?.length > 0\n  ) {\n    pairPrices = normalizedDerivedPairDataWithCurrentSwapPrice\n  }\n  return { pairPrices, pairId }\n}\n","export type PairDataNormalized = {\n  time: number\n  token0Id: string\n  token1Id: string\n  reserve0: number\n  reserve1: number\n}[]\n\nexport type DerivedPairDataNormalized = {\n  time: number\n  token0Id: string\n  token1Id: string\n  token0DerivedUSD: number\n  token1DerivedUSD: number\n}[]\n\nexport type PairPricesNormalized = {\n  time: Date\n  value: number\n}[]\n\nexport enum PairDataTimeWindowEnum {\n  DAY,\n  WEEK,\n  MONTH,\n  YEAR,\n}\n","import { TradeType } from '@pancakeswap/sdk'\nimport { RouteType } from '@pancakeswap/smart-router/evm'\n\nexport interface RequestBody {\n  networkId: number\n  baseToken: string\n  baseTokenName: string\n  baseTokenNumDecimals: number\n  quoteToken: string\n  quoteTokenName: string\n  quoteTokenNumDecimals: number\n  baseTokenAmount?: string\n  quoteTokenAmount?: string\n  trader: string\n}\n\ninterface Token {\n  address: string\n  chainId: number\n  decimals: number\n  symbol: string\n}\n\ninterface Pair {\n  liquidityToken?: Token\n  stableSwapAddress?: string\n  token0: Token\n  token1: Token\n  reserve0: string\n  reserve1: string\n}\n\nexport interface SmartRouterResponse {\n  tradeType: TradeType\n  route: {\n    input: Token\n    output: Token\n    routeType: RouteType\n    pairs: Pair[]\n    path: Token[]\n  }\n  outputAmount: string\n  inputAmount: string\n}\n\nconst headers = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n}\n\nexport const getBestPriceWithRouter = (requestBody: RequestBody): Promise<SmartRouterResponse> =>\n  fetch('/smartRouter', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(requestBody),\n  }).then((response) => response.json())\n","import { useDeferredValue } from 'react'\nimport useSWR from 'swr'\nimport { CurrencyAmount, TradeType, Currency, Pair } from '@pancakeswap/sdk'\nimport { getBestTradeExactIn, getBestTradeExactOut, createStableSwapPair } from '@pancakeswap/smart-router/evm'\nimport { deserializeToken } from '@pancakeswap/token-lists'\nimport { getAddress } from '@ethersproject/address'\n\nimport { useAllCommonPairs } from 'hooks/Trades'\nimport { provider } from 'utils/wagmi'\nimport { getBestPriceWithRouter, RequestBody } from 'state/swap/fetch/fetchBestPriceWithRouter'\n\nconst NATIVE_CURRENCY_ADDRESS = getAddress('0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE')\n\ninterface TradeOptions {\n  trader?: string\n  amount: CurrencyAmount<Currency>\n  currency: Currency\n  tradeType: TradeType\n  allCommonPairs: Pair[]\n  maxHops?: number\n}\n\ninterface UseTradeOptions {\n  maxHops?: number\n}\n\nfunction createUseBestTrade<T>(key: string, getBestTrade: (options: TradeOptions) => Promise<T>) {\n  return function useTrade(\n    amount: CurrencyAmount<Currency> | undefined,\n    currency: Currency,\n    tradeType: TradeType,\n    { maxHops = 3 }: UseTradeOptions = {},\n  ): T | null {\n    const allCommonPairs = useAllCommonPairs(amount?.currency, currency)\n    const deferQuotient = useDeferredValue(amount?.quotient.toString())\n\n    const { data: trade } = useSWR(\n      amount && amount.currency && currency\n        ? [\n            key,\n            'swap',\n            tradeType,\n            amount.currency.chainId,\n            amount.currency.symbol,\n            currency.symbol,\n            deferQuotient,\n            maxHops,\n            allCommonPairs,\n          ]\n        : null,\n      // TODO: trader should use user Wallet address\n      () => getBestTrade({ amount, currency, tradeType, allCommonPairs, trader: '', maxHops }),\n      {\n        keepPreviousData: true,\n      },\n    )\n    return trade\n  }\n}\n\nfunction createRequest(tradeType: TradeType) {\n  return function request(amount: CurrencyAmount<Currency>, currency: Currency, trader: string) {\n    const inputCurrency = tradeType === TradeType.EXACT_INPUT ? amount.currency : currency\n    const outputCurrency = tradeType === TradeType.EXACT_INPUT ? currency : amount.currency\n    const rawAmount = amount.quotient.toString()\n    const requestBody: RequestBody = {\n      networkId: inputCurrency.chainId,\n      baseToken: inputCurrency.isToken ? inputCurrency.address : NATIVE_CURRENCY_ADDRESS,\n      baseTokenName: inputCurrency?.name,\n      baseTokenAmount: tradeType === TradeType.EXACT_INPUT ? rawAmount : undefined,\n      baseTokenNumDecimals: inputCurrency?.decimals,\n      quoteToken: outputCurrency.isToken ? outputCurrency.address : NATIVE_CURRENCY_ADDRESS,\n      quoteTokenAmount: tradeType === TradeType.EXACT_OUTPUT ? rawAmount : undefined,\n      quoteTokenName: outputCurrency?.name,\n      quoteTokenNumDecimals: outputCurrency?.decimals,\n      trader,\n    }\n    return getBestPriceWithRouter(requestBody)\n  }\n}\n\nconst getBestTradeExactInFromApi = createRequest(TradeType.EXACT_INPUT)\n\nconst getBestTradeExactOutFromApi = createRequest(TradeType.EXACT_OUTPUT)\n\nexport const useBestTradeFromChain = createUseBestTrade(\n  'tradeFromChain',\n  async ({ amount, currency, tradeType, allCommonPairs, maxHops }) => {\n    const bestTrade = tradeType === TradeType.EXACT_INPUT ? getBestTradeExactIn : getBestTradeExactOut\n    return bestTrade(amount, currency, { provider, allCommonPairs, maxHops })\n  },\n)\n\nexport const useBestTradeFromApi = createUseBestTrade(\n  'tradeFromApi',\n  async ({ amount, currency, tradeType, trader }) => {\n    const bestTrade = tradeType === TradeType.EXACT_INPUT ? getBestTradeExactInFromApi : getBestTradeExactOutFromApi\n    const data = await bestTrade(amount, currency, trader)\n    if (!data) {\n      return null\n    }\n\n    const input = deserializeToken(data.route.input)\n    const output = deserializeToken(data.route.output)\n    return {\n      tradeType: data.tradeType,\n      route: {\n        ...data.route,\n        input,\n        output,\n        pairs: data.route.pairs.map((p) => {\n          const token0 = deserializeToken(p.token0)\n          const token1 = deserializeToken(p.token1)\n          const reserve0 = CurrencyAmount.fromRawAmount(token0, p.reserve0)\n          const reserve1 = CurrencyAmount.fromRawAmount(token1, p.reserve1)\n          const pair = new Pair(reserve0, reserve1)\n          return p.stableSwapAddress ? createStableSwapPair(pair, p.stableSwapAddress) : pair\n        }),\n        path: data.route.path.map((t) => deserializeToken(t)),\n      },\n      inputAmount: CurrencyAmount.fromRawAmount(input, data.inputAmount),\n      outputAmount: CurrencyAmount.fromRawAmount(output, data.outputAmount),\n    }\n  },\n)\n\nexport function useBestTrade(\n  amount: CurrencyAmount<Currency>,\n  currency: Currency,\n  tradeType: TradeType,\n  options?: UseTradeOptions,\n) {\n  const bestTradeFromChain = useBestTradeFromChain(amount, currency, tradeType, options)\n  // Remove source from api for now until api is optimized\n  // const bestTradeFromApi = useBestTradeFromApi(amount, currency, tradeType)\n\n  // return bestTradeFromApi || bestTradeFromChain\n  return bestTradeFromChain\n}\n","import { Box } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledPriceChart = styled(Box)<{\n  $isDark: boolean\n  $isExpanded: boolean\n  $isFullWidthContainer?: boolean\n}>`\n  border: none;\n  border-radius: 32px;\n  width: 100%;\n  padding-top: 36px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 8px;\n    background: ${({ $isDark }) => ($isDark ? 'rgba(39, 38, 44, 0.5)' : 'rgba(255, 255, 255, 0.5)')};\n    border: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n    border-radius: ${({ $isExpanded }) => ($isExpanded ? '0' : '16px')};\n    width: ${({ $isExpanded, $isFullWidthContainer }) => ($isFullWidthContainer || $isExpanded ? '100%' : '50%')};\n    height: ${({ $isExpanded }) => ($isExpanded ? '100%' : '516px')};\n  }\n`\n\nStyledPriceChart.defaultProps = {\n  height: '70%',\n}\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nimport { StyledPriceChart } from './styles'\n\ninterface BnbWbnbNoticeProps {\n  isDark: boolean\n  isChartExpanded: boolean\n}\n\nconst BnbWbnbNotice: React.FC<React.PropsWithChildren<BnbWbnbNoticeProps>> = ({ isDark, isChartExpanded }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledPriceChart $isDark={isDark} $isExpanded={isChartExpanded} p=\"24px\">\n      <Flex justifyContent=\"center\" alignItems=\"center\" height=\"100%\" flexDirection=\"column\">\n        <Text mb={['8px', '8px', '0px']} textAlign=\"center\">\n          {t('You can swap WBNB for BNB (and vice versa) with no trading fees.')}\n        </Text>\n        <Text mb={['8px', '8px', '0px']} textAlign=\"center\">\n          {t('Exchange rate is always 1 to 1.')}\n        </Text>\n      </Flex>\n    </StyledPriceChart>\n  )\n}\n\nexport default BnbWbnbNotice\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\ninterface NoChartAvailableProps {\n  token0Address: string\n  token1Address: string\n  pairAddress: string\n  isMobile: boolean\n}\n\nconst NoChartAvailable: React.FC<React.PropsWithChildren<NoChartAvailableProps>> = ({\n  token0Address,\n  token1Address,\n  pairAddress,\n  isMobile,\n}) => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <Flex justifyContent=\"center\" alignItems=\"center\" height=\"100%\" flexDirection=\"column\">\n        <Text mb={['8px', '8px', '0px']}>{t('Failed to load price chart for this pair')}</Text>\n        <Text\n          textAlign={isMobile ? 'center' : 'left'}\n          mb={['8px', '8px', '0px']}\n          color=\"textSubtle\"\n          small\n          style={isMobile && { wordSpacing: '100vw' }}\n        >\n          Token0: {token0Address ?? 'null'}\n        </Text>\n        <Text\n          textAlign={isMobile ? 'center' : 'left'}\n          mb={['8px', '8px', '0px']}\n          color=\"textSubtle\"\n          small\n          style={isMobile && { wordSpacing: '100vw' }}\n        >\n          Token1: {token1Address ?? 'null'}\n        </Text>\n        <Text\n          textAlign={isMobile ? 'center' : 'left'}\n          mb={['8px', '8px', '0px']}\n          color=\"textSubtle\"\n          small\n          style={isMobile && { wordSpacing: '100vw' }}\n        >\n          Pair: {pairAddress ?? 'null'}\n        </Text>\n      </Flex>\n    </>\n  )\n}\n\nexport default NoChartAvailable\n","import { Box, ButtonMenu, ButtonMenuItem, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useState, memo } from 'react'\nimport { useFetchPairPrices } from 'state/swap/hooks'\nimport dynamic from 'next/dynamic'\nimport { PairDataTimeWindowEnum } from 'state/swap/types'\nimport NoChartAvailable from './NoChartAvailable'\nimport PairPriceDisplay from '../../../../components/PairPriceDisplay'\nimport { getTimeWindowChange } from './utils'\n\nconst SwapLineChart = dynamic(() => import('./SwapLineChart'), {\n  ssr: false,\n})\n\nconst BasicChart = ({\n  token0Address,\n  token1Address,\n  isChartExpanded,\n  inputCurrency,\n  outputCurrency,\n  isMobile,\n  currentSwapPrice,\n}) => {\n  const [timeWindow, setTimeWindow] = useState<PairDataTimeWindowEnum>(0)\n\n  const { pairPrices = [], pairId } = useFetchPairPrices({\n    token0Address,\n    token1Address,\n    timeWindow,\n    currentSwapPrice,\n  })\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const valueToDisplay = hoverValue || pairPrices[pairPrices.length - 1]?.value\n  const { changePercentage, changeValue } = getTimeWindowChange(pairPrices)\n  const isChangePositive = changeValue >= 0\n  const chartHeight = isChartExpanded ? 'calc(100vh - 220px)' : '320px'\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const currentDate = new Date().toLocaleString(locale, {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n  })\n\n  // Sometimes we might receive array full of zeros for obscure tokens while trying to derive data\n  // In that case chart is not useful to users\n  const isBadData =\n    pairPrices &&\n    pairPrices.length > 0 &&\n    pairPrices.every(\n      (price) => !price.value || price.value === 0 || price.value === Infinity || Number.isNaN(price.value),\n    )\n\n  if (isBadData) {\n    return (\n      <NoChartAvailable\n        token0Address={token0Address}\n        token1Address={token1Address}\n        pairAddress={pairId}\n        isMobile={isMobile}\n      />\n    )\n  }\n\n  return (\n    <>\n      <Flex\n        flexDirection={['column', null, null, null, null, null, 'row']}\n        alignItems={['flex-start', null, null, null, null, null, 'center']}\n        justifyContent=\"space-between\"\n        px=\"24px\"\n        flexWrap=\"wrap\"\n      >\n        <Flex flexDirection=\"column\" pt=\"12px\">\n          <PairPriceDisplay\n            value={pairPrices?.length > 0 && valueToDisplay}\n            inputSymbol={inputCurrency?.symbol}\n            outputSymbol={outputCurrency?.symbol}\n          >\n            <Text color={isChangePositive ? 'success' : 'failure'} fontSize=\"20px\" ml=\"4px\" bold>\n              {`${isChangePositive ? '+' : ''}${changeValue.toFixed(3)} (${changePercentage}%)`}\n            </Text>\n          </PairPriceDisplay>\n          <Text small color=\"secondary\">\n            {hoverDate || currentDate}\n          </Text>\n        </Flex>\n        <Box>\n          <ButtonMenu activeIndex={timeWindow} onItemClick={setTimeWindow} scale=\"sm\">\n            <ButtonMenuItem>{t('24H')}</ButtonMenuItem>\n            <ButtonMenuItem>{t('1W')}</ButtonMenuItem>\n            <ButtonMenuItem>{t('1M')}</ButtonMenuItem>\n            <ButtonMenuItem>{t('1Y')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Box>\n      </Flex>\n      <Box height={isMobile ? '100%' : chartHeight} p={isMobile ? '0px' : '16px'} width=\"100%\">\n        <SwapLineChart\n          data={pairPrices}\n          setHoverValue={setHoverValue}\n          setHoverDate={setHoverDate}\n          isChangePositive={isChangePositive}\n          isChartExpanded={isChartExpanded}\n          timeWindow={timeWindow}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default memo(BasicChart, (prev, next) => {\n  return (\n    prev.token0Address === next.token0Address &&\n    prev.token1Address === next.token1Address &&\n    prev.isChartExpanded === next.isChartExpanded &&\n    prev.isMobile === next.isMobile &&\n    prev.isChartExpanded === next.isChartExpanded &&\n    ((prev.currentSwapPrice !== null &&\n      next.currentSwapPrice !== null &&\n      prev.currentSwapPrice[prev.token0Address] === next.currentSwapPrice[next.token0Address] &&\n      prev.currentSwapPrice[prev.token1Address] === next.currentSwapPrice[next.token1Address]) ||\n      (prev.currentSwapPrice === null && next.currentSwapPrice === null))\n  )\n})\n","import { ExpandIcon, Flex, IconButton, ShrinkIcon, SyncAltIcon, Text } from '@pancakeswap/uikit'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'components/Logo'\nimport { ChartViewMode } from 'state/user/actions'\nimport { useExchangeChartViewManager } from 'state/user/hooks'\nimport BasicChart from './BasicChart'\nimport { StyledPriceChart } from './styles'\n\nconst PriceChart = ({\n  inputCurrency,\n  outputCurrency,\n  onSwitchTokens,\n  isDark,\n  isChartExpanded,\n  setIsChartExpanded,\n  isMobile,\n  isFullWidthContainer,\n  token0Address,\n  token1Address,\n  currentSwapPrice,\n}) => {\n  const toggleExpanded = () => setIsChartExpanded((currentIsExpanded) => !currentIsExpanded)\n  const [chartView] = useExchangeChartViewManager()\n\n  return (\n    <StyledPriceChart\n      height={chartView === ChartViewMode.TRADING_VIEW ? '100%' : '70%'}\n      overflow={chartView === ChartViewMode.TRADING_VIEW ? 'hidden' : 'unset'}\n      $isDark={isDark}\n      $isExpanded={isChartExpanded}\n      $isFullWidthContainer={isFullWidthContainer}\n    >\n      <Flex justifyContent=\"space-between\" px=\"24px\">\n        <Flex alignItems=\"center\">\n          {outputCurrency ? (\n            <DoubleCurrencyLogo currency0={inputCurrency} currency1={outputCurrency} size={24} margin />\n          ) : (\n            inputCurrency && <CurrencyLogo currency={inputCurrency} size=\"24px\" style={{ marginRight: '8px' }} />\n          )}\n          {inputCurrency && (\n            <Text color=\"text\" bold>\n              {outputCurrency ? `${inputCurrency.symbol}/${outputCurrency.symbol}` : inputCurrency.symbol}\n            </Text>\n          )}\n          <IconButton variant=\"text\" onClick={onSwitchTokens}>\n            <SyncAltIcon ml=\"6px\" color=\"primary\" />\n          </IconButton>\n        </Flex>\n        {!isMobile && (\n          <Flex>\n            <IconButton variant=\"text\" onClick={toggleExpanded}>\n              {isChartExpanded ? <ShrinkIcon color=\"text\" /> : <ExpandIcon color=\"text\" />}\n            </IconButton>\n          </Flex>\n        )}\n      </Flex>\n      {chartView === ChartViewMode.BASIC && (\n        <BasicChart\n          token0Address={token0Address}\n          token1Address={token1Address}\n          isChartExpanded={isChartExpanded}\n          inputCurrency={inputCurrency}\n          outputCurrency={outputCurrency}\n          isMobile={isMobile}\n          currentSwapPrice={currentSwapPrice}\n        />\n      )}\n    </StyledPriceChart>\n  )\n}\n\nexport default PriceChart\n","import { Currency } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport { useCallback, useState } from 'react'\nimport BnbWbnbNotice from './BnbWbnbNotice'\nimport { BNB_ADDRESS } from './constants'\nimport PriceChart from './PriceChart'\nimport { getTokenAddress } from './utils'\n\ntype PriceChartContainerProps = {\n  inputCurrencyId: string\n  inputCurrency: Currency\n  outputCurrencyId: string\n  outputCurrency: Currency\n  isChartExpanded: boolean\n  setIsChartExpanded: React.Dispatch<React.SetStateAction<boolean>>\n  isChartDisplayed: boolean\n  currentSwapPrice: {\n    [key: string]: number\n  }\n  isMobile?: boolean\n  isFullWidthContainer?: boolean\n}\n\nconst PriceChartContainer: React.FC<React.PropsWithChildren<PriceChartContainerProps>> = ({\n  inputCurrencyId,\n  inputCurrency,\n  outputCurrency,\n  outputCurrencyId,\n  isChartExpanded,\n  setIsChartExpanded,\n  isChartDisplayed,\n  isMobile,\n  isFullWidthContainer = false,\n  currentSwapPrice,\n}) => {\n  const token0Address = getTokenAddress(inputCurrencyId)\n  const token1Address = getTokenAddress(outputCurrencyId)\n  const [isPairReversed, setIsPairReversed] = useState(false)\n  const togglePairReversed = useCallback(() => setIsPairReversed((prePairReversed) => !prePairReversed), [])\n\n  const { isDark } = useTheme()\n\n  if (!isChartDisplayed) {\n    return null\n  }\n\n  const isBnbWbnb = token0Address === BNB_ADDRESS && token1Address === BNB_ADDRESS\n\n  if (isBnbWbnb) {\n    return <BnbWbnbNotice isDark={isDark} isChartExpanded={isChartExpanded} />\n  }\n\n  return (\n    <PriceChart\n      token0Address={isPairReversed ? token1Address : token0Address}\n      token1Address={isPairReversed ? token0Address : token1Address}\n      inputCurrency={isPairReversed ? outputCurrency : inputCurrency}\n      outputCurrency={isPairReversed ? inputCurrency : outputCurrency}\n      onSwitchTokens={togglePairReversed}\n      isDark={isDark}\n      isChartExpanded={isChartExpanded}\n      setIsChartExpanded={setIsChartExpanded}\n      isMobile={isMobile}\n      isFullWidthContainer={isFullWidthContainer}\n      currentSwapPrice={currentSwapPrice}\n    />\n  )\n}\n\nexport default PriceChartContainer\n","// BNB Address\nconst BNB_ADDRESS = '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c'\n\nexport { BNB_ADDRESS }\n","import { BNB_ADDRESS } from './constants'\n\nconst MIN_VALUE_DISPLAYED = 0.001\n\nexport const getTimeWindowChange = (lineChartData) => {\n  if (lineChartData.length > 0) {\n    const firstValue = lineChartData.find(({ value }) => !!value && value > 0)?.value ?? 0\n    const lastValue = lineChartData[lineChartData.length - 1].value\n    const changeValue = lastValue - firstValue\n\n    return {\n      changeValue:\n        changeValue > 0 ? Math.max(changeValue, MIN_VALUE_DISPLAYED) : Math.min(changeValue, MIN_VALUE_DISPLAYED * -1),\n      changePercentage: ((changeValue / firstValue) * 100).toFixed(2),\n    }\n  }\n\n  return {\n    changeValue: 0,\n    changePercentage: 0,\n  }\n}\n\nexport const getTokenAddress = (tokenAddress: undefined | string) => {\n  if (!tokenAddress) {\n    return ''\n  }\n  const lowerCaseAddress = tokenAddress.toLowerCase()\n  if (lowerCaseAddress === 'bnb') {\n    return BNB_ADDRESS\n  }\n\n  return lowerCaseAddress\n}\n","import { useDelayedUnmount } from \"@pancakeswap/hooks\";\nimport React, { useRef, useCallback } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useMatchBreakpoints } from \"../../contexts\";\nimport useOnClickOutside from \"../../hooks/useOnClickOutside\";\nimport getPortalRoot from \"../../util/getPortalRoot\";\nimport { Box } from \"../Box\";\nimport { IconButton } from \"../Button\";\nimport { Overlay } from \"../Overlay\";\nimport { CloseIcon } from \"../Svg\";\nimport { DrawerContainer } from \"./styles\";\n\ninterface BottomDrawerProps {\n  content: React.ReactNode;\n  isOpen: boolean;\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst BottomDrawer: React.FC<React.PropsWithChildren<BottomDrawerProps>> = ({ content, isOpen, setIsOpen }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldRender = useDelayedUnmount(isOpen, 350);\n  const { isDesktop } = useMatchBreakpoints();\n\n  useOnClickOutside(\n    ref?.current,\n    useCallback(() => setIsOpen(false), [setIsOpen])\n  );\n\n  if (!shouldRender || isDesktop) {\n    return null;\n  }\n\n  const portal = getPortalRoot();\n\n  if (portal)\n    return createPortal(\n      <>\n        <Overlay isUnmounting={!isOpen} />\n        <DrawerContainer ref={ref} isUnmounting={!isOpen}>\n          <Box position=\"absolute\" right=\"16px\" top=\"0\">\n            <IconButton variant=\"text\" onClick={() => setIsOpen(false)}>\n              <CloseIcon />\n            </IconButton>\n          </Box>\n          {content}\n        </DrawerContainer>\n      </>,\n      portal\n    );\n  return null;\n};\n\nexport default BottomDrawer;\n","import * as React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 25 24\" {...props}>\n      <path d=\"M20.497 4.6l-.004-.028-.006-.036-.008-.033-.007-.03-.012-.032-.01-.03-.014-.028-.014-.03-.016-.027-.018-.03-.021-.028-.018-.024a.663.663 0 00-.044-.048v-.001a.66.66 0 00-.049-.044l-.024-.018-.028-.02-.03-.018-.026-.016-.03-.015c-.01-.004-.02-.01-.03-.013l-.03-.011-.03-.011-.031-.008-.033-.008-.035-.005-.03-.005A.684.684 0 0019.834 4h-4.667a.667.667 0 100 1.333h3.057l-4.862 4.862a.667.667 0 10.943.943l4.862-4.862v3.057a.667.667 0 101.333 0V4.667a.658.658 0 00-.003-.066zM10.696 12.861l-4.862 4.862v-3.057a.667.667 0 10-1.333 0v4.667l.003.066.005.029.005.035.008.033.008.03.01.032.012.03.013.029.015.03.016.027.017.029.021.028.018.024a.663.663 0 00.093.093l.024.018.029.021.029.018.026.016.03.014.03.014.03.01.031.012.03.007.033.008.036.006.029.004a.657.657 0 00.066.003h4.666a.667.667 0 000-1.333H6.777l4.862-4.862a.667.667 0 00-.943-.943z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import * as React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 25 25\" {...props}>\n      <path d=\"M12.327 13.27c0-.01-.003-.019-.004-.028l-.005-.036-.009-.033-.007-.03-.011-.032-.011-.03-.014-.028-.014-.03c-.005-.01-.01-.019-.016-.027l-.018-.03-.021-.028-.018-.024a.692.692 0 00-.044-.049.674.674 0 00-.049-.044l-.024-.018-.028-.02-.03-.018-.026-.016-.03-.015c-.01-.005-.02-.01-.03-.013l-.03-.011-.03-.011-.031-.008-.033-.008-.035-.006-.03-.004a.689.689 0 00-.065-.003H6.997a.667.667 0 000 1.333h3.057l-4.862 4.862a.667.667 0 10.943.943l4.862-4.862v3.057a.667.667 0 001.333 0v-4.666a.689.689 0 00-.003-.066zM19.862 4.195L15 9.057V6a.667.667 0 10-1.333 0v4.667c0 .022.001.044.003.065l.005.03.005.035.008.033.008.03.01.032.012.03.013.029.015.03.016.027.017.029.021.028.018.024a.692.692 0 00.093.093l.024.018.028.021.03.018.027.015.03.015.029.014.03.01.031.012.03.007.033.008.036.006.029.004a.688.688 0 00.066.003H19A.667.667 0 0019 10h-3.057l4.862-4.862a.667.667 0 00-.943-.943z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n"],"names":["__webpack_exports__","param","tokens","onDismiss","onCancel","t","useTranslation","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Modal","title","Box","maxWidth","ImportToken","handleCurrencySelect","formatOptions","notation","displayThreshold","tokenPrecision","TextLabel","styled","Text","theme","mediaQueries","lg","_param","value","inputSymbol","outputSymbol","children","format","props","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","FlexGap","alignItems","Flex","mr","bold","_param_format","formatAmount","parseFloat","color","fontSize","lineHeight","concat","Skeleton","height","width","_obj","_obj1","getDerivedPricesQueryConstructor","subqueries","gql","getTokenDerivedUSDCPrices","_async_to_generator","Z","tokenAddress","blocks","isStableStable","rawPrices","prices","tokenPrices","multiQuery","map","block","timestamp","number","STABLESWAP_SUBGRAPH_CLIENT","INFO_CLIENT","_state","sent","console","error","mapValues","derivedUSD","Object","keys","forEach","priceKey","split","push","orderBy","tokenPrice","parseInt","getInterval","timeWindow","PairDataTimeWindowEnum","ONE_HOUR_SECONDS","ONE_DAY_UNIX","getSkipDaysToStart","fetchDerivedPriceData","token0Address","token1Address","token0StableStable","token1StableStable","interval","endTimestamp","startTimestamp","timestamps","time","_ref","getUnixTime","Date","startOfHour","sub","days","getBlocksFromTimestamps","length","pop","Promise","all","token0DerivedUSD","_sliced_to_array","apply","token1DerivedUSD","lastPairDayId","pairHourDatas","stableSwapPairHourDatas","pairDayDatasByIdsQuery","stableSwapPairDayDatasByIdsQuery","timeWindowIdsCountMapping","_define_property","timeWindowGapMapping","getPairSequentialId","id","pairId","replace","getIdsByTimeWindow","pairAddress","pairLastId","idsCount","pairLastIdAsNumber","Number","times","pairHasEnoughLiquidity","data","_data_pairHourDatas","_data_pairHourDatas1","_data_pairHourDatas_length","amountOfDataPoints","totalUSD","reduce","totalLiquidity","fetchPairEntry","reserveUSD","_data_pairDayDatas","_data_pairDayDatas1","_data_pairDayDatas_length","pairDayDatas","stableSwapPairDayDatas","pairHourDatasByIds","stableSwapPairHourDatasByIds","lastPairHourId","fetchPairPriceData","isStableSwap","client","lastPairHourIdData","lastId","pairHourId","pairHourIds","lastPairDayIdData","pairDayIds","stableSwapClient","infoClient","requestWithTimeout","first","pairIds","normalizeChartData","hourStartUnix","token0Id","token1Id","reserve0","reserve1","date","normalizeDerivedChartData","token1DerivedUSDEntryMap","fromPairs","entry","acc","token0DerivedUSDEntry","token1DerivedUSDEntry","normalizePairDataByActiveToken","pairData","activeToken","pairPrice","fromUnixTime","reverse","normalizeDerivedPairDataByActiveToken","pairByDataIdSelector","state","get","derivedPairByDataIdSelector","useSwapState","useSelector","swap","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","address","pairs","pair","liquidityToken","useSingleTokenSwapInfo","inputCurrencyId","inputCurrency","outputCurrencyId","outputCurrency","inputTokenPrice","getTokenAddress","parsedAmount","tryParseAmount","undefined","bestTradeExactIn","useBestTrade","TradeType","Price","baseAmount","inputAmount","quoteAmount","outputAmount","toSignificant","outputTokenPrice","useDerivedSwapInfo","independentField","typedValue","recipient","isExactIn","inputError","useAccount","to","account","isAddress","relevantTokenBalances","useCurrencyBalances","useMemo","Field","useTradeExactIn","bestTradeExactOut","useTradeExactOut","v2Trade","currencyBalances","currencies","formattedTo","indexOf","allowedSlippage","useUserSlippageTolerance","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","_ref2","balanceIn","amountIn","lessThan","symbol","currency","ADDRESS_REGEX","useDefaultsFromURLSearch","chainId","useActiveChainId","dispatch","useAppDispatch","native","useNativeCurrency","query","useRouter","useState","result","setResult","useEffect","nativeSymbol","defaultOutputCurrency","urlParam","CAKE","USDC","parsed","parsedQs","DEFAULT_INPUT_CURRENCY","DEFAULT_OUTPUT_CURRENCY","test","currencyId","exactAmount","isNaN","exactField","toLowerCase","pairDataById","derivedPairDataById","replaceSwapState","field","useFetchPairPrices","currentSwapPrice","setPairId","isLoading","setIsLoading","derivedPairData","useDispatch","stableSwapPairs","stableSwapPairsByChainId","stableSwapPair","find","token0","isToken","token1","equalsIgnoreCase","fetchDerivedData","derivedData","normalizedDerivedData","info","p","wrapped","updateDerivedPairData","fetchAndUpdatePairPrice","pairTokenResults","hasEnoughLiquidity","newPairData","multicallv2","abi","IPancakePairABI","calls","name","options","requireSuccess","updatePairData","updatePairId","getLpAddress","stableSwapAddress","normalizedPairData","normalizedDerivedPairData","hasSwapPrice","normalizedPairDataWithCurrentSwapPrice","_to_consumable_array","normalizedDerivedPairDataWithCurrentSwapPrice","hasNoDirectData","hasNoDerivedData","pairPrices","DAY","WEEK","MONTH","YEAR","headers","Accept","NATIVE_CURRENCY_ADDRESS","getAddress","createUseBestTrade","key","getBestTrade","amount","tradeType","arguments","_ref_maxHops","maxHops","allCommonPairs","useAllCommonPairs","deferQuotient","useDeferredValue","quotient","toString","useSWR","trader","keepPreviousData","createRequest","requestBody","rawAmount","networkId","baseToken","baseTokenName","baseTokenAmount","baseTokenNumDecimals","decimals","quoteToken","quoteTokenAmount","quoteTokenName","quoteTokenNumDecimals","fetch","method","body","JSON","stringify","then","response","json","getBestTradeExactInFromApi","getBestTradeExactOutFromApi","useBestTradeFromChain","bestTrade","getBestTradeExactIn","getBestTradeExactOut","provider","input","output","deserializeToken","_object_spread_props","_object_spread","CurrencyAmount","Pair","createStableSwapPair","StyledPriceChart","sm","$isDark","colors","cardBorder","$isExpanded","$isFullWidthContainer","defaultProps","Chart_BnbWbnbNotice","isDark","isChartExpanded","jsx_runtime","justifyContent","flexDirection","mb","textAlign","Chart_NoChartAvailable","isMobile","Fragment","small","style","wordSpacing","SwapLineChart","dynamic","__webpack_require__","e","bind","ssr","Chart_BasicChart","memo","setTimeWindow","_useFetchPairPrices_pairPrices","hoverValue","setHoverValue","hoverDate","setHoverDate","valueToDisplay","getTimeWindowChange","changePercentage","changeValue","isChangePositive","currentLanguage","locale","currentDate","toLocaleString","year","month","day","hour","minute","every","price","Infinity","NoChartAvailable","px","flexWrap","pt","PairPriceDisplay","ml","toFixed","ButtonMenu","activeIndex","onItemClick","scale","ButtonMenuItem","prev","next","Chart_PriceChart","onSwitchTokens","setIsChartExpanded","isFullWidthContainer","chartView","useExchangeChartViewManager","ChartViewMode","overflow","DoubleCurrencyLogo","currency0","currency1","size","margin","CurrencyLogo","marginRight","IconButton","variant","onClick","SyncAltIcon","currentIsExpanded","ShrinkIcon","ExpandIcon","BasicChart","Chart_PriceChartContainer","isChartDisplayed","isPairReversed","setIsPairReversed","togglePairReversed","useCallback","prePairReversed","useTheme","BNB_ADDRESS","BnbWbnbNotice","PriceChart","_param_isFullWidthContainer","lineChartData","firstValue","lastValue","Math","max","min","MIN_VALUE_DISPLAYED","lowerCaseAddress","content","isOpen","setIsOpen","ref","useRef","shouldRender","useDelayedUnmount","isDesktop","useMatchBreakpoints","useOnClickOutside","current","portal","getPortalRoot","createPortal","Overlay","isUnmounting","DrawerContainer","position","right","top","CloseIcon","Svg","viewBox","d"],"sourceRoot":""}