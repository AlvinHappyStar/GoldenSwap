{"version":3,"file":"static/chunks/2788.3e042c8363656612.js","mappings":"iXAIA,IAAMA,EAAgB,CACpBC,SAAU,WACVC,iBAAkB,KAClBC,eAAgB,EAClB,EASMC,EAAYC,CAAAA,EAAAA,EAAAA,EAAAA,EAAOC,EAAAA,CAAIA,EAAAA,UAAAA,CAAAA,mCAIzB,SAAAC,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,YAAY,CAACC,EAAE,EAgCxCC,CAAAA,EAAA,EA3B+E,SAAAC,CAAA,CAOzE,KANJC,EAAAA,EAAAA,KAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACAC,EAAAA,EAAAA,YAAAA,CACAC,EAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EACAC,MAAAA,CACGC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CALHL,QACAC,cACAC,eACAC,WACAC,WAGA,OAAOJ,EACL,GAAAM,EAAAC,IAAA,EAACC,EAAAA,CAAOA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,WAAW,YAAeJ,GAAAA,WACjC,GAAAC,EAAAC,IAAA,EAACG,EAAAA,CAAIA,CAAAA,CAACD,WAAW,oBACf,GAAAH,EAAAK,GAAA,EAACpB,EAAAA,CAAUqB,GAAG,MAAMC,KAAI,YACrBT,KAPTA,IAAAA,GAAaU,EAOKC,CAAAA,EAAAA,EAAAA,CAAAA,EAAa,iBAAOf,EAAqBgB,WAAWhB,GAASA,CAAK,CAAEb,GAAiBa,CAAK,GAErGC,GAAeC,GACd,GAAAI,EAAAK,GAAA,EAAClB,EAAAA,CAAIA,CAAAA,CAACwB,MAAM,aAAaC,SAAS,OAAOL,KAAI,GAACM,WAAY,aACvD,GAAkBjB,MAAAA,CAAfD,EAAY,KAAgBmB,MAAA,CAAblB,QAIxBC,MAGH,GAAAG,EAAAK,GAAA,EAACU,EAAAA,CAAQA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,OAAO,OAAOC,MAAM,SAAYlB,GAC3C,gFC7BUU,EAAe,SAC1BS,CAAAA,CACAC,CAAAA,CAMG,CACH,IAKIA,EAAAA,GAAW,CAAErC,SAAUoC,GAAU,IAAQ,UAAY,UAAU,EAACE,EAAhED,EAJFrC,QAAAA,CACAC,EAGEoC,EAHFpC,gBAAAA,CACAC,EAEEmC,EAFFnC,cAAAA,CACAqC,EACEF,EADFE,SAAAA,CAEF,GAAIH,IAAAA,SACF,EACS,IAEF,MADN,CAGH,GAAI,CAACA,EAAQ,MAAO,IACpB,GAAInC,GAAoBmC,EAASnC,EAC/B,MAAO,IAAqB+B,MAAA,CAAjB/B,EACZ,CACD,GAAImC,EAAS,GAAK,CAAClC,EACjB,OAxCKU,EAAM4B,OAAO,CAAC,GAAGC,KAAK,CAAC,qBAAqB,CAAC,EAAE,CA2CtD,IAAIC,EAAY,EACZxC,GACFwC,CAAAA,EAAYN,EAAS,EAAI,EAAI,CAAC,EAGhC,IAAIpB,EAAS,KAA2BgB,MAAA,CAAtB,IAAIW,MAAM,CAACD,GAAW,KAEvB,aA1Bf1C,CAAAA,KAAAA,IAAAA,EAAWoC,GAAU,IAAQ,UAAY,UAAU,CAAAE,CAAA,GA2BnDtB,CAAAA,EAAS,OAA6BgB,MAAA,CAAtB,IAAIW,MAAM,CAACD,GAAAA,EAGzBH,GAAaH,EAAS,KACxBpB,CAAAA,EAAS,KAGX,IAAM4B,EAAsBhB,WAAWQ,EAAOI,OAAO,CAACE,IAGtD,OAAOG,IAAQD,GAAqB5B,MAAM,CAACA,GAAQ8B,WAAW,EAChE,qgBCkCA,IAAMC,EAAa,CAAEC,UAAW,UAAWC,UAAW,UAAWC,OAAQ,SAAU,EAE7EC,EAAwB/C,CAAAA,EAAAA,EAAAA,EAAAA,EAAOkB,EAAAA,CAAIA,EAAAA,UAAAA,CAAAA,mCAIzB,SAAAhB,CAAA,MAAGC,EAAAA,EAAAA,KAAAA,QAAuB6C,EAAhBA,QAAAA,CAA2B7C,EAAM8C,IAAI,CAACC,UAAU,CAAG/C,EAAMgD,MAAM,CAACC,iBAAiB,GAGrGC,EAAY,SAAAnD,CAAA,CAA0D,KAAvDoD,EAAAA,EAAAA,MAAAA,CACbC,EA3BWC,CAAAA,EAAAA,EAAAA,CAAAA,EAA2B,uBAApCC,IAAAA,CA4BAC,EAA6BC,CAAAA,EAAAA,EAAAA,CAAAA,IAA7BD,KAAAA,CAIJE,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,IAFFC,EAEED,EAFFC,CAAAA,CACAC,EACEF,EADFE,eAAAA,CAAmBC,MAAAA,CAEfC,EAAYC,CAAAA,EAAAA,EAAAA,EAAAA,IAAVD,KAAAA,CAER,MACE,GAAAlD,EAAAK,GAAA,EAAC+C,EAAAA,CAAgBA,CAAAA,CACfnC,MAAM,OACNvB,MAAO+C,EAAYA,EAAUY,MAAM,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBC,EAAmB,EAAG,EAAE,CACrF5D,YAAauD,EAAMM,MAAM,CACzB5D,aAAa,MACbE,OAAQ,GACR2D,SAAS,OACTtD,WAAW,SACXuD,UAAU,gBAETjB,GACC,GAAAzC,EAAAC,IAAA,EAACC,EAAAA,CAAOA,CAAAA,CAACyD,SAAS,MAAMxD,WAAW,WAAWyD,IAAI,OAAO5C,OAAO,iBAC9D,GAAAhB,EAAAK,GAAA,EAAClB,EAAAA,CAAIA,CAAAA,CAACwB,MAAM,aAAaE,WAAY,aAClC,IAAIgD,KAAKpB,IAAAA,EAAUqB,SAAS,EAASC,cAAc,CAACd,EAAQ,CAC3De,KAAM,UACNC,IAAK,UACLC,MAAO,QACPC,KAAM,UACNC,OAAQ,SACV,KAED5B,CAAM,CAACC,EAAU4B,OAAO,CAAC,EACxB,GAAArE,EAAAC,IAAA,EAACd,EAAAA,CAAIA,CAAAA,CAACyB,SAAS,OAAOD,MAAM,YAAYJ,KAAI,GAACM,WAAY,cACtDkC,EAAE,SAAS,MAAIP,CAAM,CAACC,EAAU4B,OAAO,CAAC,CAACC,KAAK,QAO7D,EAiCMC,EAAQ,SAAAnF,CAAA,CAQR,KAtGEoF,EA+FNhC,EAAAA,EAAAA,MAAAA,CACAG,EAAAA,EAAAA,IAAAA,CAQEK,EACEF,CAAAA,EAAAA,EAAAA,EAAAA,IADFE,eAAAA,CAAmBC,MAAAA,CAEKwB,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,IAAlBC,EAAkBD,EAAlBC,MAAAA,CAAQrF,EAAUoF,EAAVpF,KAAAA,CACVmF,GA3GAA,EAAaG,CAAAA,EAAAA,EAAAA,EAAAA,IAAXH,MAAAA,CAEYI,CAAAA,EAAAA,EAAAA,WAAAA,EAClB,SAACjC,CAAAA,CAAS,CACR6B,EAAO,sBAAuB7B,EAChC,EACA,CAAC6B,EAAO,GAuGV,MACE,GAAAxE,EAAAK,GAAA,EAACwE,EAAAA,CAAmBA,CAAAA,UAClB,GAAA7E,EAAAC,IAAA,EAAC6E,EAAAA,CAASA,CAAAA,CACRnC,KAAMA,EACNoC,OAAQ,CACNC,IAAK,GACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,CACV,EACAC,aAAc,UAAM,CAClBZ,EAAOa,KAAAA,EACT,YAEA,GAAArF,EAAAK,GAAA,EAACiF,OAAAA,UACC,GAAAtF,EAAAC,IAAA,EAACsF,iBAAAA,CAAeC,GAAG,WAAWC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,cACpD,GAAA5F,EAAAK,GAAA,EAACwF,OAAAA,CAAKC,OAAO,KAAKC,UAAWlE,EAAWC,SAAS,CAAEkE,YAAa,MAChE,GAAAhG,EAAAK,GAAA,EAACwF,OAAAA,CAAKC,OAAO,OAAOC,UAAWlE,EAAWE,SAAS,CAAEiE,YAAa,SAGtE,GAAAhG,EAAAK,GAAA,EAAC4F,EAAAA,CAAKA,CAAAA,CACJC,QAAQ,YACRC,cAAe,SAACC,CAAAA,CAAS,CACvB,OAAO,IAAIvC,KAAKuC,IAAAA,GAAarC,cAAc,CAACd,EAAQ,CAClDkB,KAAM,UACNC,OAAQ,UACRiC,UAAW,KACb,EACF,EACA1F,MAAOtB,EAAMgD,MAAM,CAACiE,IAAI,CACxB1F,SAAS,OACT2F,WAAY,EACZC,SAAQ,GACRC,KAAM,CAAEC,KAAMrH,EAAMgD,MAAM,CAACiE,IAAI,IAEjC,GAAAtG,EAAAK,GAAA,EAAC4F,EAAAA,CAAKA,CAAAA,CAACC,QAAQ,UAAUS,KAAI,KAC7B,GAAA3G,EAAAK,GAAA,EAACuG,EAAAA,CAAKA,CAAAA,CACJV,QAAQ,SACRW,UAAW,EACXC,MAAM,SACNnG,MAAOtB,EAAMgD,MAAM,CAAC0E,UAAU,CAC9BnG,SAAS,OACToG,OAAQ,CAAC,OAAQ,OAAO,CACxBC,YAAY,QACZR,KAAM,CAAES,GAAI,GAAIR,KAAMrH,EAAMgD,MAAM,CAAC0E,UAAU,IAE/C,GAAA/G,EAAAK,GAAA,EAAC8G,EAAAA,CAAOA,CAAAA,CACNC,OAAQ,CAAEpF,OAAQ3C,EAAMgD,MAAM,CAAC0E,UAAU,CAAEM,gBAAiB,KAAM,EAClEC,aAAc,CAAEC,QAAS,MAAO,EAChCC,UAAW,SAACC,CAAAA,CAAcC,CAAAA,CAAM3H,CAAAA,CAAU,CAExC,OADAyE,EAAOzE,EAAM4H,OAAO,EACb,IAAI,IAGf,GAAA3H,EAAAK,GAAA,EAACuH,EAAAA,CAAIA,CAAAA,CACH1B,QAAQ,SACR2B,KAAK,SACL7F,OAAQH,EAAWG,MAAM,CACzB0E,KAAK,iBACLoB,YAAa,EACbC,UAAW,SAAChI,CAAAA,CAAU,QACpB,CAAU,CAACA,EAAM4H,OAAO,CAACtD,OAAO,CAAC,CACxB,GAAArE,EAAAK,GAAA,EAAC2H,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAcjI,IAEjB,IAAI,EAEbkI,IAAK,SAAClI,CAAAA,CAAU,QACd,CAAU,CAACA,EAAM4H,OAAO,CAACtD,OAAO,CAAC,CAE7B,GAAArE,EAAAK,GAAA,EAAC6H,EAAAA,CAAGA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EACEnI,GAAAA,CACJoI,EAAG,EACHzB,KAAMhC,EAASrF,EAAMgD,MAAM,CAAC+F,IAAI,CAAG/I,EAAMgD,MAAM,CAACgG,SAAS,CACzDC,YAAa,EACbR,YAAa,KAIZ,IAAI,QAMvB,EAEME,EAAY,SAACjI,CAAAA,CAAU,CAC3B,IAAMwI,EAAaC,CAAAA,EAAAA,EAAAA,CAAAA,IAAXD,MAAAA,CACFE,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,IACfrJ,EAAYoF,CAAAA,EAAAA,EAAAA,EAAAA,IAAVpF,KAAAA,CAER,MACE,GAAAW,EAAAK,GAAA,EAAC6H,EAAAA,CAAGA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EACEnI,GAAAA,CACJoI,EAAG,GACHnG,OAAQ3C,EAAMgD,MAAM,CAACsG,OAAO,CAC5Bb,YAAa,GACbpB,KAAMrH,EAAMgD,MAAM,CAACD,UAAU,CAC7BwG,MAAO,CAAExB,OAAQ,SAAU,EAC3ByB,QAAS,UAAM,CACb,IAAMC,EAAaL,EAAaM,SAAS,CAAC,SAACC,CAAAA,CAAAA,QAAUA,EAAMC,aAAa,GAAKlJ,EAAM4H,OAAO,CAACtD,OAAO,GAC9FyE,GAAc,GAAKP,IACrBA,EAAOW,OAAO,CAACJ,GACfP,EAAOY,EAAE,CAACC,aAAa,CAAC,IAAIC,MAAMC,EAAAA,EAAqBA,GAE3D,IAGN,CAEA9J,CAAAA,EAAA,QA5JuB,SAACO,CAAAA,CAA8C,CACpE,IApIMwJ,EACAC,EAiBAC,EACAF,EAEAG,EAUkBC,EAAhBhH,EAAMiH,EAqGRjH,EAAWkH,CApIXN,EAA6BpG,CAAAA,EAAAA,EAAAA,EAAAA,IAA3BoG,sBAAAA,CACFC,EAA0BM,CAAAA,EAAAA,EAAAA,EAAAA,EAA2BP,EAAwB,IAiB7EE,EAfYM,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAACP,EAAyB,cAAc,CAAE,CACzEQ,iBAAkB,IAClBC,gBAAiB,IACjBC,QAAS,SAACC,CAAAA,CAAGC,CAAAA,CAAM,OACjB,CAAKD,IAAMC,KAEND,KAAMC,GACJD,EAAEE,EAAE,CAACD,EACd,CACF,GAOMb,EAA6BpG,CAAAA,EAAAA,EAAAA,EAAAA,IAA3BoG,sBAAAA,CAEFG,EAAQY,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,CAC1B,OAAOb,EAAU9G,IAAI,CACjB4H,MAAMC,IAAI,CAAC,CAAEC,OAAQ,EAAG,GAAGC,GAAG,CAAC,SAACC,CAAAA,CAAGC,CAAAA,CAAAA,OAAO,CACxCC,QAAStB,EACT7B,KAAM,eACNoD,OAAQ,CAACrB,EAAU9G,IAAI,CAACoI,GAAG,CAACH,GAAG,IAEjC,IAAI,EACP,CAACnB,EAAU9G,IAAI,CAAE4G,EAAuB,EAEnC5G,EAAgBgH,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EACtBqB,EACAtB,EACA,CACEuB,iBAAkB,EACpB,IALMtI,IAAAA,CAAMiH,EAAUD,EAAVC,KAAAA,CAsBP,CAAEjH,KAdyB2H,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,KAE5C3H,EADF,OACEA,IAQI,GARJA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EACIuI,MAAM,CAAC,SAACC,CAAAA,CAAAA,OAAM,CAAC,CAACA,GAAKA,EAAE9H,MAAM,CAAC+H,EAAE,CAAC,KAClCV,GAAG,CAAC,SAAAtL,CAAA,CAAoC,KAAjCiE,EAAAA,EAAAA,MAAAA,CAAQgB,EAAAA,EAAAA,OAAAA,CAASP,EAAAA,EAAAA,SAAAA,CACvB,MAAO,CACLT,OAAQC,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBD,EAAQ,EAAG,GAC1CgB,QAASA,EAAQgH,QAAQ,GACzBvH,UAAWA,EAAUwH,QAAQ,EAC/B,CACF,EAAE,GARJ3I,KAAAA,IAAAA,EAAAA,EAQQ,EAAE,EAEX,CAACA,EAAK,EAEoBiH,MAAAA,CAAM,GA+E3BjH,IAAAA,CACFH,EAAS+I,CAAAA,EAAAA,EAAAA,EAAAA,WAEf,EAAUd,MAAM,CAKd,GAAAzK,EAAAC,IAAA,EAACgC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA0BlC,GAAAA,WACzB,GAAAC,EAAAK,GAAA,EAACH,EAAAA,CAAOA,CAAAA,CACNsL,cAAc,MACdC,GAAG,OACHC,GAAG,OACHvL,WAAW,SACXsD,SAAS,OACTC,UAAU,OACV1C,OAAQ,CAAC,UAAc,OAAO,UAE9B,GAAAhB,EAAAK,GAAA,EAACkC,EAAAA,CAAUC,OAAQA,MAErB,GAAAxC,EAAAK,GAAA,EAACD,EAAAA,CAAIA,CAAAA,CAACY,OAAQ,CAAE,oBAAmB,UACjC,GAAAhB,EAAAK,GAAA,EAACkE,EAAAA,CAAM/B,OAAQA,EAAQG,KAAMA,UAjB1B,GAAA3C,EAAAK,GAAA,EAACsL,EAAAA,EAAeA,CAAAA,CAAAA,EACxB,AAoBH","sources":["webpack://_N_E/./src/components/PairPriceDisplay.tsx","webpack://_N_E/./src/utils/formatInfoNumbers.ts","webpack://_N_E/./src/views/Predictions/components/ChainlinkChart.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Flex, Skeleton, Text, FlexGap, FlexGapProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { formatAmount, formatAmountNotation } from 'utils/formatInfoNumbers'\n\nconst formatOptions = {\n  notation: 'standard' as formatAmountNotation,\n  displayThreshold: 0.001,\n  tokenPrecision: true,\n}\n\ninterface TokenDisplayProps extends FlexGapProps {\n  value?: number | string\n  inputSymbol?: string\n  outputSymbol?: string\n  format?: boolean\n}\n\nconst TextLabel = styled(Text)`\n  font-size: 32px;\n  line-height: 1.1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst PairPriceDisplay: React.FC<React.PropsWithChildren<TokenDisplayProps>> = ({\n  value,\n  inputSymbol,\n  outputSymbol,\n  children,\n  format = true,\n  ...props\n}) => {\n  return value ? (\n    <FlexGap alignItems=\"baseline\" {...props}>\n      <Flex alignItems=\"inherit\">\n        <TextLabel mr=\"8px\" bold>\n          {format ? formatAmount(typeof value === 'string' ? parseFloat(value) : value, formatOptions) : value}\n        </TextLabel>\n        {inputSymbol && outputSymbol && (\n          <Text color=\"textSubtle\" fontSize=\"20px\" bold lineHeight={1.1}>\n            {`${inputSymbol}/${outputSymbol}`}\n          </Text>\n        )}\n      </Flex>\n      {children}\n    </FlexGap>\n  ) : (\n    <Skeleton height=\"36px\" width=\"128px\" {...props} />\n  )\n}\n\nexport default PairPriceDisplay\n","import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\nexport type formatAmountNotation = 'compact' | 'standard'\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: formatAmountNotation\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const {\n    notation = amount >= 10000 ? 'compact' : 'standard',\n    displayThreshold,\n    tokenPrecision,\n    isInteger,\n  } = options || { notation: amount >= 10000 ? 'compact' : 'standard' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n","import { useCallback, useMemo } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area, Dot } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { LineChartLoader } from 'components/ChartLoaders'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useSWRContract, useSWRMulticall } from 'hooks/useSWRContract'\nimport useSWRImmutable from 'swr/immutable'\nimport { useSWRConfig } from 'swr'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport { ChainlinkOracle } from 'config/abi/types'\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\nimport { formatBigNumberToFixed } from '@pancakeswap/utils/formatBalance'\nimport { useGetRoundsByCloseOracleId, useGetSortedRounds } from 'state/predictions/hooks'\nimport styled from 'styled-components'\nimport { Flex, Text, FlexProps, FlexGap } from '@pancakeswap/uikit'\nimport PairPriceDisplay from 'components/PairPriceDisplay'\nimport { NodeRound } from 'state/types'\nimport useSwiper from '../hooks/useSwiper'\nimport usePollOraclePrice from '../hooks/usePollOraclePrice'\nimport { CHART_DOT_CLICK_EVENT } from '../helpers'\nimport { useConfig } from '../context/ConfigProvider'\n\nfunction useChainlinkLatestRound() {\n  const { chainlinkOracleAddress } = useConfig()\n  const chainlinkOracleContract = useChainlinkOracleContract(chainlinkOracleAddress, false)\n  // Can refactor to subscription later\n  const lastRound = useSWRContract([chainlinkOracleContract, 'latestRound'], {\n    dedupingInterval: 10 * 1000,\n    refreshInterval: 10 * 1000,\n    compare: (a, b) => {\n      if (!a && !b) return true\n      // check is equal\n      if (!a || !b) return false\n      return a.eq(b)\n    },\n  })\n\n  return lastRound\n}\n\nfunction useChainlinkRoundDataSet() {\n  const lastRound = useChainlinkLatestRound()\n  const { chainlinkOracleAddress } = useConfig()\n\n  const calls = useMemo(() => {\n    return lastRound.data\n      ? Array.from({ length: 50 }).map((_, i) => ({\n          address: chainlinkOracleAddress,\n          name: 'getRoundData',\n          params: [lastRound.data.sub(i)],\n        }))\n      : null\n  }, [lastRound.data, chainlinkOracleAddress])\n\n  const { data, error } = useSWRMulticall<Awaited<ReturnType<ChainlinkOracle['getRoundData']>>[]>(\n    chainlinkOracleAbi,\n    calls,\n    {\n      keepPreviousData: true,\n    },\n  )\n\n  const computedData: ChartData[] = useMemo(() => {\n    return (\n      data\n        ?.filter((d) => !!d && d.answer.gt(0))\n        .map(({ answer, roundId, startedAt }) => {\n          return {\n            answer: formatBigNumberToFixed(answer, 4, 8),\n            roundId: roundId.toString(),\n            startedAt: startedAt.toNumber(),\n          }\n        }) ?? []\n    )\n  }, [data])\n\n  return { data: computedData, error }\n}\n\ntype ChartData = {\n  answer: string\n  roundId: string\n  startedAt: number\n}\n\nfunction useChartHover() {\n  const { data } = useSWRImmutable<ChartData>('chainlinkChartHover')\n  return data\n}\n\nfunction useChartHoverMutate() {\n  const { mutate } = useSWRConfig()\n\n  const updateHover = useCallback(\n    (data) => {\n      mutate('chainlinkChartHover', data)\n    },\n    [mutate],\n  )\n\n  return updateHover\n}\n\nconst chartColor = { gradient1: '#00E7B0', gradient2: '#0C8B6C', stroke: '#31D0AA' }\n\nconst ChainlinkChartWrapper = styled(Flex)<{ isMobile?: boolean }>`\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background: ${({ theme, isMobile }) => (isMobile ? theme.card.background : theme.colors.gradientBubblegum)};\n`\n\nconst HoverData = ({ rounds }: { rounds: { [key: string]: NodeRound } }) => {\n  const hoverData = useChartHover()\n  const { price: answerAsBigNumber } = usePollOraclePrice()\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { token } = useConfig()\n\n  return (\n    <PairPriceDisplay\n      width=\"100%\"\n      value={hoverData ? hoverData.answer : formatBigNumberToFixed(answerAsBigNumber, 4, 8)}\n      inputSymbol={token.symbol}\n      outputSymbol=\"USD\"\n      format={false}\n      flexWrap=\"wrap\"\n      alignItems=\"center\"\n      columnGap=\"12px\"\n    >\n      {hoverData && (\n        <FlexGap minWidth=\"51%\" alignItems=\"flex-end\" gap=\"12px\" height=\"22px\">\n          <Text color=\"textSubtle\" lineHeight={1.1}>\n            {new Date(hoverData.startedAt * 1000).toLocaleString(locale, {\n              year: 'numeric',\n              day: 'numeric',\n              month: 'short',\n              hour: '2-digit',\n              minute: '2-digit',\n            })}\n          </Text>\n          {rounds[hoverData.roundId] && (\n            <Text fontSize=\"20px\" color=\"secondary\" bold lineHeight={1.1}>\n              {t('Round')}: #{rounds[hoverData.roundId].epoch}\n            </Text>\n          )}\n        </FlexGap>\n      )}\n    </PairPriceDisplay>\n  )\n}\n\nconst ChainLinkChart = (props: FlexProps & { isMobile?: boolean }) => {\n  const { data } = useChainlinkRoundDataSet()\n  const rounds = useGetRoundsByCloseOracleId()\n\n  if (!data.length) {\n    return <LineChartLoader />\n  }\n\n  return (\n    <ChainlinkChartWrapper {...props}>\n      <FlexGap\n        flexDirection=\"row\"\n        pt=\"12px\"\n        px=\"20px\"\n        alignItems=\"center\"\n        flexWrap=\"wrap\"\n        columnGap=\"12px\"\n        height={['56px', , , , '44px']}\n      >\n        <HoverData rounds={rounds} />\n      </FlexGap>\n      <Flex height={[`calc(100% - 56px)`]}>\n        <Chart rounds={rounds} data={data} />\n      </Flex>\n    </ChainlinkChartWrapper>\n  )\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst Chart = ({\n  rounds,\n  data,\n}: {\n  rounds: {\n    [key: string]: NodeRound\n  }\n  data: ChartData[]\n}) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { isDark, theme } = useTheme()\n  const mutate = useChartHoverMutate()\n\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 20,\n          right: 0,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          mutate(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={chartColor.gradient1} stopOpacity={0.34} />\n            <stop offset=\"100%\" stopColor={chartColor.gradient2} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"startedAt\"\n          tickFormatter={(time) => {\n            return new Date(time * 1000).toLocaleString(locale, {\n              hour: 'numeric',\n              minute: '2-digit',\n              hourCycle: 'h24',\n            })\n          }}\n          color={theme.colors.text}\n          fontSize=\"12px\"\n          minTickGap={8}\n          reversed\n          tick={{ fill: theme.colors.text }}\n        />\n        <XAxis dataKey=\"roundId\" hide />\n        <YAxis\n          dataKey=\"answer\"\n          tickCount={6}\n          scale=\"linear\"\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          domain={['auto', 'auto']}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.textSubtle, strokeDasharray: '3 3' }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => {\n            mutate(props.payload)\n            return null\n          }}\n        />\n        <Area\n          dataKey=\"answer\"\n          type=\"linear\"\n          stroke={chartColor.stroke}\n          fill=\"url(#gradient)\"\n          strokeWidth={2}\n          activeDot={(props) => {\n            if (rounds[props.payload.roundId]) {\n              return <ActiveDot {...props} />\n            }\n            return null\n          }}\n          dot={(props) => {\n            if (rounds[props.payload.roundId]) {\n              return (\n                <Dot\n                  {...props}\n                  r={4}\n                  fill={isDark ? theme.colors.gold : theme.colors.secondary}\n                  fillOpacity={1}\n                  strokeWidth={0}\n                />\n              )\n            }\n            return null\n          }}\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nconst ActiveDot = (props) => {\n  const { swiper } = useSwiper()\n  const sortedRounds = useGetSortedRounds()\n  const { theme } = useTheme()\n\n  return (\n    <Dot\n      {...props}\n      r={12}\n      stroke={theme.colors.primary}\n      strokeWidth={10}\n      fill={theme.colors.background}\n      style={{ cursor: 'pointer' }}\n      onClick={() => {\n        const roundIndex = sortedRounds.findIndex((round) => round.closeOracleId === props.payload.roundId)\n        if (roundIndex >= 0 && swiper) {\n          swiper.slideTo(roundIndex)\n          swiper.el.dispatchEvent(new Event(CHART_DOT_CLICK_EVENT))\n        }\n      }}\n    />\n  )\n}\n\nexport default ChainLinkChart\n"],"names":["formatOptions","notation","displayThreshold","tokenPrecision","TextLabel","styled","Text","param","theme","mediaQueries","lg","__webpack_exports__","_param","value","inputSymbol","outputSymbol","children","format","props","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","FlexGap","alignItems","Flex","jsx","mr","bold","_param_format","formatAmount","parseFloat","color","fontSize","lineHeight","concat","Skeleton","height","width","amount","options","_ref_notation","isInteger","toFixed","match","precision","repeat","amountWithPrecision","numeral","toUpperCase","chartColor","gradient1","gradient2","stroke","ChainlinkChartWrapper","isMobile","card","background","colors","gradientBubblegum","HoverData","rounds","hoverData","useSWRImmutable","data","price","usePollOraclePrice","useTranslation","t","currentLanguage","locale","token","useConfig","PairPriceDisplay","answer","formatBigNumberToFixed","answerAsBigNumber","symbol","flexWrap","columnGap","minWidth","gap","Date","startedAt","toLocaleString","year","day","month","hour","minute","roundId","epoch","Chart","mutate","useTheme","isDark","useSWRConfig","useCallback","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","onMouseLeave","undefined","defs","linearGradient","id","x1","y1","x2","y2","stop","offset","stopColor","stopOpacity","XAxis","dataKey","tickFormatter","time","hourCycle","text","minTickGap","reversed","tick","fill","hide","YAxis","tickCount","scale","textSubtle","domain","orientation","dx","Tooltip","cursor","strokeDasharray","contentStyle","display","formatter","tooltipValue","name","payload","Area","type","strokeWidth","activeDot","ActiveDot","dot","Dot","r","gold","secondary","fillOpacity","swiper","useSwiper","sortedRounds","useGetSortedRounds","primary","style","onClick","roundIndex","findIndex","round","closeOracleId","slideTo","el","dispatchEvent","Event","CHART_DOT_CLICK_EVENT","chainlinkOracleAddress","chainlinkOracleContract","lastRound","calls","useSWRMulticall","error","useChainlinkRoundDataSet","useChainlinkOracleContract","useSWRContract","dedupingInterval","refreshInterval","compare","a","b","eq","useMemo","Array","from","length","map","_","i","address","params","sub","chainlinkOracleAbi","keepPreviousData","filter","d","gt","toString","toNumber","useGetRoundsByCloseOracleId","flexDirection","pt","px","LineChartLoader"],"sourceRoot":""}