{"version":3,"file":"static/chunks/5043.04270bff9f293ec6.js","mappings":"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","sources":["webpack://_N_E/./src/hooks/useSubgraphHealth.ts","webpack://_N_E/./src/components/SubgraphHealthIndicator/index.tsx","webpack://_N_E/./src/hooks/useRefreshEffect.ts","webpack://_N_E/../../packages/uikit/src/components/Card/StyledCard.tsx","webpack://_N_E/../../packages/uikit/src/components/Card/Card.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { bscRpcProvider } from 'utils/providers'\nimport { GRAPH_HEALTH } from 'config/constants/endpoints'\nimport { useSlowRefreshEffect } from './useRefreshEffect'\n\nexport enum SubgraphStatus {\n  OK,\n  WARNING,\n  NOT_OK,\n  UNKNOWN,\n}\n\nexport type SubgraphHealthState = {\n  status: SubgraphStatus\n  currentBlock: number\n  chainHeadBlock: number\n  latestBlock: number\n  blockDifference: number\n}\n\nconst NOT_OK_BLOCK_DIFFERENCE = 200 // ~15 minutes delay\nconst WARNING_BLOCK_DIFFERENCE = 50 // ~2.5 minute delay\n\nconst useSubgraphHealth = (subgraphName: string) => {\n  const [sgHealth, setSgHealth] = useState<SubgraphHealthState>({\n    status: SubgraphStatus.UNKNOWN,\n    currentBlock: 0,\n    chainHeadBlock: 0,\n    latestBlock: 0,\n    blockDifference: 0,\n  })\n\n  useSlowRefreshEffect(\n    (currentBlockNumber) => {\n      const getSubgraphHealth = async () => {\n        try {\n          const [{ indexingStatusForCurrentVersion }, currentBlock] = await Promise.all([\n            request(\n              GRAPH_HEALTH,\n              gql`\n            query getNftMarketSubgraphHealth {\n              indexingStatusForCurrentVersion(subgraphName: \"${subgraphName}\") {\n                health\n                chains {\n                  chainHeadBlock {\n                    number\n                  }\n                  latestBlock {\n                    number\n                  }\n                }\n              }\n            }\n          `,\n            ),\n            currentBlockNumber ? Promise.resolve(currentBlockNumber) : bscRpcProvider.getBlockNumber(),\n          ])\n\n          const isHealthy = indexingStatusForCurrentVersion.health === 'healthy'\n          const chainHeadBlock = parseInt(indexingStatusForCurrentVersion.chains[0].chainHeadBlock.number)\n          const latestBlock = parseInt(indexingStatusForCurrentVersion.chains[0].latestBlock.number)\n          const blockDifference = currentBlock - latestBlock\n          // Sometimes subgraph might report old block as chainHeadBlock, so its important to compare\n          // it with block retrieved from simpleRpcProvider.getBlockNumber()\n          const chainHeadBlockDifference = currentBlock - chainHeadBlock\n          if (\n            !isHealthy ||\n            blockDifference > NOT_OK_BLOCK_DIFFERENCE ||\n            chainHeadBlockDifference > NOT_OK_BLOCK_DIFFERENCE\n          ) {\n            setSgHealth({ status: SubgraphStatus.NOT_OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          } else if (\n            blockDifference > WARNING_BLOCK_DIFFERENCE ||\n            chainHeadBlockDifference > WARNING_BLOCK_DIFFERENCE\n          ) {\n            setSgHealth({ status: SubgraphStatus.WARNING, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          } else {\n            setSgHealth({ status: SubgraphStatus.OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          }\n        } catch (error) {\n          console.error(`Failed to perform health check for ${subgraphName} subgraph`, error)\n        }\n      }\n      getSubgraphHealth()\n    },\n    [subgraphName],\n  )\n\n  return sgHealth\n}\n\nexport default useSubgraphHealth\n","import { BSC_BLOCK_TIME } from 'config'\nimport { useTranslation, TranslateFunction } from '@pancakeswap/localization'\nimport styled from 'styled-components'\nimport { Card, Flex, Box, InfoIcon, Text, useTooltip } from '@pancakeswap/uikit'\nimport { useSubgraphHealthIndicatorManager } from 'state/user/hooks'\nimport useSubgraphHealth, { SubgraphStatus } from 'hooks/useSubgraphHealth'\n\nconst StyledCard = styled(Card)`\n  border-radius: 8px;\n  > div {\n    border-radius: 8px;\n  }\n  user-select: none;\n`\n\nconst IndicatorWrapper = styled(Flex)`\n  gap: 7px;\n`\n\nconst Dot = styled(Box)<{ $color: string }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: ${({ $color, theme }) => theme.colors[$color]};\n`\n\ninterface CustomDescriptions {\n  delayed: string\n  slow: string\n  healthy: string\n}\n\nconst indicator = (t: TranslateFunction, customDescriptions?: CustomDescriptions) =>\n  ({\n    delayed: {\n      label: t('Delayed'),\n      color: 'failure',\n      description:\n        customDescriptions?.delayed ??\n        t(\n          'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\n        ),\n    },\n    slow: {\n      label: t('Slight delay'),\n      color: 'warning',\n      description:\n        customDescriptions?.slow ??\n        t(\n          'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\n        ),\n    },\n    healthy: {\n      label: t('Fast'),\n      color: 'success',\n      description: customDescriptions?.healthy ?? t('No issues with the subgraph.'),\n    },\n  } as const)\n\ntype Indicator = keyof ReturnType<typeof indicator>\n\nconst getIndicator = (sgStatus: SubgraphStatus): Indicator => {\n  if (sgStatus === SubgraphStatus.NOT_OK) {\n    return 'delayed'\n  }\n\n  if (sgStatus === SubgraphStatus.WARNING) {\n    return 'slow'\n  }\n\n  return 'healthy'\n}\n\nexport interface BlockResponse {\n  blocks: {\n    number: string\n  }[]\n}\n\nconst SubgraphHealthIndicator: React.FC<\n  React.PropsWithChildren<{\n    subgraphName: string\n    inline?: boolean\n    customDescriptions?: CustomDescriptions\n    obeyGlobalSetting?: boolean\n  }>\n> = ({ subgraphName, inline, customDescriptions, obeyGlobalSetting = true }) => {\n  const { t } = useTranslation()\n  const { status, currentBlock, blockDifference, latestBlock } = useSubgraphHealth(subgraphName)\n  const [alwaysShowIndicator] = useSubgraphHealthIndicatorManager()\n  const forceIndicatorDisplay = status === SubgraphStatus.WARNING || status === SubgraphStatus.NOT_OK\n  const showIndicator = (obeyGlobalSetting && alwaysShowIndicator) || forceIndicatorDisplay\n\n  const indicatorProps = indicator(t, customDescriptions)\n\n  const secondRemainingBlockSync = blockDifference * BSC_BLOCK_TIME\n\n  const indicatorValue = getIndicator(status)\n\n  const current = indicatorProps[indicatorValue]\n\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <TooltipContent\n      currentBlock={currentBlock}\n      secondRemainingBlockSync={secondRemainingBlockSync}\n      blockNumberFromSubgraph={latestBlock}\n      {...current}\n    />,\n    {\n      placement: 'top',\n    },\n  )\n\n  if (!latestBlock || !currentBlock || !showIndicator) {\n    return null\n  }\n\n  if (inline) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <IndicatorWrapper alignItems=\"center\" ref={targetRef}>\n          <Dot $color={current.color} />\n          <Text>{current.label}</Text>\n          <InfoIcon />\n          {tooltipVisible && tooltip}\n        </IndicatorWrapper>\n      </Flex>\n    )\n  }\n\n  return (\n    <Box\n      position=\"fixed\"\n      bottom=\"calc(55px + env(safe-area-inset-bottom))\"\n      right=\"5%\"\n      ref={targetRef}\n      data-test=\"subgraph-health-indicator\"\n    >\n      {tooltipVisible && tooltip}\n      <StyledCard>\n        <IndicatorWrapper alignItems=\"center\" p=\"10px\">\n          <Dot $color={current.color} />\n          <Text>{current.label}</Text>\n          <InfoIcon />\n        </IndicatorWrapper>\n      </StyledCard>\n    </Box>\n  )\n}\n\nconst TooltipContent = ({\n  color,\n  label,\n  description,\n  currentBlock,\n  secondRemainingBlockSync,\n  blockNumberFromSubgraph,\n}) => {\n  const { t } = useTranslation()\n  return (\n    <Box>\n      <IndicatorWrapper pb=\"10px\">\n        <Dot $color={color} />\n        <Text>{label}</Text>\n      </IndicatorWrapper>\n      <Text pb=\"24px\">{description}</Text>\n      <Text>\n        <strong>{t('Chain Head Block')}:</strong> {currentBlock}\n      </Text>\n      <Text>\n        <strong>{t('Latest Subgraph Block')}:</strong> {blockNumberFromSubgraph}\n      </Text>\n      <Text>\n        <strong>{t('Delay')}:</strong> {currentBlock - blockNumberFromSubgraph} ({secondRemainingBlockSync}s)\n      </Text>\n    </Box>\n  )\n}\n\nexport default SubgraphHealthIndicator\n","import { FAST_INTERVAL, SLOW_INTERVAL } from 'config/constants'\nimport { DependencyList, EffectCallback, useEffect } from 'react'\nimport useSWR from 'swr'\nimport { useActiveChainId } from './useActiveChainId'\n\ntype BlockEffectCallback = (blockNumber: number) => ReturnType<EffectCallback>\n\nconst EMPTY_ARRAY = []\n\nexport function useFastRefreshEffect(effect: BlockEffectCallback, deps?: DependencyList) {\n  const { chainId } = useActiveChainId()\n  const { data = 0 } = useSWR(chainId && [FAST_INTERVAL, 'blockNumber', chainId])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect.bind(null, data), [data, ...(deps || EMPTY_ARRAY)])\n}\n\nexport function useSlowRefreshEffect(effect: BlockEffectCallback, deps?: DependencyList) {\n  const { chainId } = useActiveChainId()\n  const { data = 0 } = useSWR(chainId && [SLOW_INTERVAL, 'blockNumber', chainId])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect.bind(null, data), [data, ...(deps || EMPTY_ARRAY)])\n}\n","import styled, { css, DefaultTheme } from \"styled-components\";\nimport { space } from \"styled-system\";\nimport { promotedGradient } from \"../../util/animationToolkit\";\nimport { Box } from \"../Box\";\nimport { CardProps } from \"./types\";\n\ninterface StyledCardProps extends CardProps {\n  theme: DefaultTheme;\n}\n\n/**\n * Priority: Warning --> Success --> Active\n */\nconst getBorderColor = ({ isActive, isSuccess, isWarning, borderBackground, theme }: StyledCardProps) => {\n  if (borderBackground) {\n    return borderBackground;\n  }\n  if (isWarning) {\n    return theme.colors.warning;\n  }\n\n  if (isSuccess) {\n    return theme.colors.success;\n  }\n\n  if (isActive) {\n    return `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`;\n  }\n\n  return theme.colors.cardBorder;\n};\n\nexport const StyledCard = styled.div<StyledCardProps>`\n  background: ${getBorderColor};\n  border-radius: ${({ theme }) => theme.radii.card};\n  color: ${({ theme, isDisabled }) => theme.colors[isDisabled ? \"textDisabled\" : \"text\"]};\n  overflow: hidden;\n  position: relative;\n\n  ${({ isActive }) =>\n    isActive &&\n    css`\n      animation: ${promotedGradient} 3s ease infinite;\n      background-size: 400% 400%;\n    `}\n\n  padding: 1px 1px 3px 1px;\n\n  ${space}\n`;\n\nexport const StyledCardInner = styled(Box)<{ background?: string; hasCustomBorder: boolean }>`\n  width: 100%;\n  height: 100%;\n  overflow: ${({ hasCustomBorder }) => (hasCustomBorder ? \"initial\" : \"inherit\")};\n  background: ${({ theme, background }) => background ?? theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`;\n\nStyledCard.defaultProps = {\n  isActive: false,\n  isSuccess: false,\n  isWarning: false,\n  isDisabled: false,\n};\n","import React from \"react\";\nimport { StyledCard, StyledCardInner } from \"./StyledCard\";\nimport { CardProps } from \"./types\";\n\nconst Card: React.FC<React.PropsWithChildren<CardProps>> = ({ ribbon, children, background, ...props }) => {\n  return (\n    <StyledCard {...props}>\n      <StyledCardInner background={background} hasCustomBorder={!!props.borderBackground}>\n        {ribbon}\n        {children}\n      </StyledCardInner>\n    </StyledCard>\n  );\n};\nexport default Card;\n"],"names":["SubgraphStatus","customDescriptions","OK","WARNING","NOT_OK","UNKNOWN","hooks_useSubgraphHealth","subgraphName","useState","status","currentBlock","chainHeadBlock","latestBlock","blockDifference","sgHealth","setSgHealth","useSlowRefreshEffect","currentBlockNumber","getSubgraphHealth","_async_to_generator","Z","_ref","indexingStatusForCurrentVersion","isHealthy","chainHeadBlockDifference","error","Promise","all","request","GRAPH_HEALTH","gql","resolve","bscRpcProvider","_sliced_to_array","apply","_state","sent","health","parseInt","chains","number","console","concat","StyledCard","styled","Card","IndicatorWrapper","Flex","Dot","Box","param","$color","theme","colors","TooltipContent","color","label","description","secondRemainingBlockSync","blockNumberFromSubgraph","t","useTranslation","jsx_runtime","jsxs","pb","jsx","Text","strong","components_SubgraphHealthIndicator","inline","obeyGlobalSetting","useSubgraphHealth","alwaysShowIndicator","useSubgraphHealthIndicatorManager","forceIndicatorDisplay","indicatorProps","delayed","slow","healthy","BSC_BLOCK_TIME","current","sgStatus","useTooltip","placement","targetRef","tooltipVisible","tooltip","_param_obeyGlobalSetting","justifyContent","alignItems","ref","InfoIcon","position","bottom","right","data-test","p","EMPTY_ARRAY","useFastRefreshEffect","effect","deps","chainId","useActiveChainId","_useSWR_data","useSWR","FAST_INTERVAL","data","useEffect","bind","_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_4__","SLOW_INTERVAL","isActive","isSuccess","isWarning","borderBackground","warning","success","primaryBright","secondary","cardBorder","radii","card","isDisabled","css","promotedGradient","space","StyledCardInner","hasCustomBorder","background","defaultProps","Card_Card","_param","ribbon","children","props"],"sourceRoot":""}