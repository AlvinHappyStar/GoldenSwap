{"version":3,"file":"static/chunks/3205-429942d02463e3dd.js","mappings":"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","sources":["webpack://_N_E/./src/hooks/useCurrentBlockTimestamp.ts","webpack://_N_E/./src/hooks/useSwapCallArguments.ts","webpack://_N_E/./src/hooks/useSwapCallback.ts","webpack://_N_E/./src/hooks/useTransactionDeadline.ts","webpack://_N_E/./src/utils/log.ts","webpack://_N_E/./src/utils/transactionErrorToUserReadableMessage.ts","webpack://_N_E/../../packages/utils/isZero.ts","webpack://_N_E/<anon>"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType, Currency } from '@pancakeswap/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { BIPS_BASE } from 'config/constants/exchange'\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'config/constants'\nimport { useRouterContract } from 'utils/exchange'\nimport useTransactionDeadline from './useTransactionDeadline'\n\nexport interface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nexport function useSwapCallArguments(\n  trade: Trade<Currency, Currency, TradeType> | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId } = useActiveWeb3React()\n\n  const recipient = recipientAddress === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n  const contract = useRouterContract()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !account || !chainId || !deadline) return []\n\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    swapMethods.push(\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: false,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient,\n        deadline: deadline.toNumber(),\n      }),\n    )\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n        Router.swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline.toNumber(),\n        }),\n      )\n    }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, contract, deadline, recipient, trade])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { SwapParameters, TradeType } from '@pancakeswap/sdk'\nimport isZero from '@pancakeswap/utils/isZero'\nimport truncateHash from '@pancakeswap/utils/truncateHash'\nimport { isStableSwap, V2TradeAndStableSwap } from 'config/constants/types'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { useGasPrice } from 'state/user/hooks'\nimport { logSwap, logTx } from 'utils/log'\n\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../config/constants'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, isAddress } from '../utils'\nimport { basisPointsToPercent } from '../utils/exchange'\nimport { transactionErrorToUserReadableMessage } from '../utils/transactionErrorToUserReadableMessage'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall extends SwapCallEstimate {\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall extends SwapCallEstimate {\n  error: string\n}\n\ninterface SwapCallEstimate {\n  call: SwapCall\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: V2TradeAndStableSwap, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n  swapCalls: SwapCall[],\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId } = useActiveWeb3React()\n  const gasPrice = useGasPrice()\n\n  const { t } = useTranslation()\n\n  const addTransaction = useTransactionAdder()\n\n  const recipient = recipientAddress === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddress !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      }\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: SwapCallEstimate[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.error('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.error('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: t('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.error('Call threw error', call, callError)\n\n                    return { call, error: transactionErrorToUserReadableMessage(callError, t) }\n                  })\n              })\n          }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw new Error(errorCalls[errorCalls.length - 1].error)\n          throw new Error(t('Unexpected error. Could not estimate gas for the swap.'))\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          gasPrice,\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const pct = basisPointsToPercent(allowedSlippage)\n            const inputAmount =\n              trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.inputAmount.toSignificant(3)\n                : trade.maximumAmountIn(pct).toSignificant(3)\n\n            const outputAmount =\n              trade.tradeType === TradeType.EXACT_OUTPUT\n                ? trade.outputAmount.toSignificant(3)\n                : trade.minimumAmountOut(pct).toSignificant(3)\n\n            const base = `Swap ${\n              trade.tradeType === TradeType.EXACT_OUTPUT ? 'max.' : ''\n            } ${inputAmount} ${inputSymbol} for ${\n              trade.tradeType === TradeType.EXACT_INPUT ? 'min.' : ''\n            } ${outputAmount} ${outputSymbol}`\n\n            const recipientAddressText =\n              recipientAddress && isAddress(recipientAddress) ? truncateHash(recipientAddress) : recipientAddress\n\n            const withRecipient = recipient === account ? base : `${base} to ${recipientAddressText}`\n\n            const translatableWithRecipient =\n              trade.tradeType === TradeType.EXACT_OUTPUT\n                ? recipient === account\n                  ? 'Swap max. %inputAmount% %inputSymbol% for %outputAmount% %outputSymbol%'\n                  : 'Swap max. %inputAmount% %inputSymbol% for %outputAmount% %outputSymbol% to %recipientAddress%'\n                : recipient === account\n                ? 'Swap %inputAmount% %inputSymbol% for min. %outputAmount% %outputSymbol%'\n                : 'Swap %inputAmount% %inputSymbol% for min. %outputAmount% %outputSymbol% to %recipientAddress%'\n\n            addTransaction(response, {\n              summary: withRecipient,\n              translatableSummary: {\n                text: translatableWithRecipient,\n                data: {\n                  inputAmount,\n                  inputSymbol,\n                  outputAmount,\n                  outputSymbol,\n                  ...(recipient !== account && { recipientAddress: recipientAddressText }),\n                },\n              },\n              type: 'swap',\n            })\n            logSwap({\n              chainId,\n              inputAmount,\n              outputAmount,\n              input: trade.inputAmount.currency,\n              output: trade.outputAmount.currency,\n              type: isStableSwap(trade) ? 'StableSwap' : 'V2Swap',\n            })\n            logTx({ account, chainId, hash: response.hash })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(t('Swap failed: %message%', { message: transactionErrorToUserReadableMessage(error, t) }))\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, account, chainId, recipient, recipientAddress, swapCalls, gasPrice, t, addTransaction, allowedSlippage])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { Currency } from '@pancakeswap/swap-sdk-core'\nimport { log } from 'next-axiom'\n\nexport const logTx = ({ account, hash, chainId }: { account: string; hash: string; chainId: number }) => {\n  fetch(`/api/_log/${account}/${chainId}/${hash}`)\n}\n\nexport const logSwap = ({\n  input,\n  output,\n  inputAmount,\n  outputAmount,\n  chainId,\n  type,\n}: {\n  input: Currency\n  output: Currency\n  inputAmount: string\n  outputAmount: string\n  chainId: number\n  type: 'V2Swap' | 'SmartSwap' | 'StableSwap' | 'MarketMakerSwap'\n}) => {\n  try {\n    log.info(type, {\n      inputAddress: input.isToken ? input.address.toLowerCase() : input.symbol,\n      outputAddress: output.isToken ? output.address.toLowerCase() : output.symbol,\n      inputAmount,\n      outputAmount,\n      chainId,\n    })\n  } catch (error) {\n    //\n  }\n}\n","import { TranslateFunction } from '@pancakeswap/localization'\n\n/**\n * This is hacking out the revert reason from the ethers provider thrown error however it can.\n * This object seems to be undocumented by ethers.\n * @param error an error from the ethers provider\n * @param t Translation function\n */\nexport function transactionErrorToUserReadableMessage(error: any, t: TranslateFunction) {\n  let reason: string | undefined\n  while (error) {\n    reason = error.reason ?? error.data?.message ?? error.message ?? reason\n    // eslint-disable-next-line no-param-reassign\n    error = error.error ?? error.data?.originalError\n  }\n\n  if (reason?.indexOf('execution reverted: ') === 0) reason = reason.substring('execution reverted: '.length)\n\n  const formatErrorMessage = (message: string) => [message, `(${reason})`].join(' ')\n  switch (reason) {\n    case 'PancakeRouter: EXPIRED':\n      return formatErrorMessage(\n        t(\n          'The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.',\n        ),\n      )\n    case 'PancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT':\n    case 'PancakeRouter: EXCESSIVE_INPUT_AMOUNT':\n    case 'PancakeRouter: INSUFFICIENT_A_AMOUNT':\n    case 'PancakeRouter: INSUFFICIENT_B_AMOUNT':\n    case 'swapMulti: incorrect user balance':\n    case 'Pancake: K':\n      return formatErrorMessage(\n        t(\n          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.',\n        ),\n      )\n    case 'TransferHelper: TRANSFER_FROM_FAILED':\n      return formatErrorMessage(t('The input token cannot be transferred. There may be an issue with the input token.'))\n    case 'Pancake: TRANSFER_FAILED':\n      return formatErrorMessage(\n        t('The output token cannot be transferred. There may be an issue with the output token.'),\n      )\n    default:\n      if (reason?.indexOf('undefined is not an object') !== -1) {\n        console.error(error, reason)\n        return t(\n          'An error occurred when trying to execute this operation. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading.',\n        )\n      }\n      return t('Unknown error%reason%. Try increasing your slippage tolerance.', {\n        reason: reason ? `: \"${reason}\"` : '',\n      })\n  }\n}\n","/**\n * Returns true if the string value is zero in hex\n * @param hexNumberString\n */\nexport default function isZero(hexNumberString: string) {\n  return /^0x0*$/.test(hexNumberString)\n}\n"],"names":["useCurrentBlockTimestamp","useSingleCallResult","multicall","useMulticallContract","result","useSwapCallArguments","trade","allowedSlippage","INITIAL_ALLOWED_SLIPPAGE","recipientAddress","useActiveWeb3React","account","chainId","recipient","deadline","useTransactionDeadline","contract","useRouterContract","useMemo","swapMethods","push","Router","feeOnTransfer","Percent","JSBI","BIPS_BASE","toNumber","tradeType","TradeType","map","parameters","SwapCallbackState","useSwapCallback","swapCalls","gasPrice","useGasPrice","t","useTranslation","addTransaction","useTransactionAdder","onSwap","state","VALID","callback","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_12__","Z","estimatedCalls","successfulEstimation","errorCalls","methodName","args","value","gasEstimate","Promise","all","call","_call_parameters","options","isZero","estimateGas","then","catch","gasError","console","error","callStatic","callError","transactionErrorToUserReadableMessage","_state","sent","find","el","ix","list","length","filter","_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__","gasLimit","calculateGasMargin","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","pct","basisPointsToPercent","toSignificant","maximumAmountIn","minimumAmountOut","base","concat","recipientAddressText","isAddress","truncateHash","summary","translatableSummary","text","data","type","logSwap","input","output","isStableSwap","logTx","hash","code","message","INVALID","LOADING","ttl","useSelector","user","userDeadline","blockTimestamp","add","param","fetch","log","inputAddress","isToken","address","toLowerCase","outputAddress","reason","originalError","indexOf","substring","formatErrorMessage","join","hexNumberString","test"],"sourceRoot":""}