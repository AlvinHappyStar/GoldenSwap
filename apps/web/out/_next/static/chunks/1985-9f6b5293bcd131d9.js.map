{"version":3,"file":"static/chunks/1985-9f6b5293bcd131d9.js","mappings":"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","sources":["webpack://_N_E/./src/components/TabToggle/index.tsx","webpack://_N_E/./src/views/Info/hooks/useCMCLink.ts","webpack://_N_E/./src/views/Info/Tokens/TokenPage.tsx","webpack://_N_E/./src/views/Info/components/InfoCharts/ChartCard/index.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/PoolsTable.tsx","webpack://_N_E/../../packages/uikit/src/components/Breadcrumbs/Breadcrumbs.tsx","webpack://_N_E/../../packages/uikit/src/components/Spinner/Spinner.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Box, BoxProps, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(Flex)`\n  overflow-x: scroll;\n  padding: 0;\n  border-radius: 24px 24px 0 0;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none; /* Firefox */\n`\n\nconst Inner = styled(Flex)`\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.input};\n  width: 100%;\n`\n\ninterface TabProps extends BoxProps {\n  isActive?: boolean\n  onClick?: () => void\n}\n\nexport const TabToggle = styled(Box).attrs({\n  as: 'button',\n})<TabProps>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  flex: 1;\n  border: 0;\n  outline: 0;\n  margin: 0;\n  border-radius: 24px 24px 0 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : theme.colors.textSubtle)};\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\n  box-shadow: none;\n`\n\nTabToggle.defaultProps = {\n  p: '16px',\n}\n\ninterface TabToggleGroupProps {\n  children: React.ReactElement[]\n}\n\nexport const TabToggleGroup: React.FC<React.PropsWithChildren<TabToggleGroupProps>> = ({ children }) => {\n  return (\n    <Wrapper p={['0 4px', '0 16px']}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  )\n}\n","import useSWRImmutable from 'swr/immutable'\n\n// endpoint to check asset exists and get url to CMC page\n// returns 400 status code if token is not on CMC\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\n\n/**\n * Check if asset exists on CMC, if exists\n * return url, if not return undefined\n * @param address token address (all lowercase, checksummed are not supported by CMC)\n */\nconst useCMCLink = (address: string): string | undefined => {\n  const { data: cmcPageUrl } = useSWRImmutable(address ? ['cmcLink', address] : null, async () => {\n    const response = await fetch(`${CMC_ENDPOINT}${address}`)\n\n    if (response.ok) {\n      return (await response.json()).data.url\n    }\n    return undefined\n  })\n\n  return cmcPageUrl\n}\n\nexport default useCMCLink\n","/* eslint-disable no-nested-ternary */\nimport { useTranslation } from '@pancakeswap/localization'\nimport {\n  Box,\n  Breadcrumbs,\n  Button,\n  Card,\n  Flex,\n  Heading,\n  Image,\n  Link as UIKitLink,\n  LinkExternal,\n  Spinner,\n  Text,\n  useMatchBreakpoints,\n  NextLinkFromReactRouter,\n} from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { NextSeo } from 'next-seo'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { CHAIN_QUERY_NAME } from 'config/chains'\nimport truncateHash from '@pancakeswap/utils/truncateHash'\nimport Page from 'components/Layout/Page'\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { Duration } from 'date-fns'\nimport { useMemo } from 'react'\nimport { multiChainId, multiChainScan } from 'state/info/constant'\nimport {\n  useGetChainName,\n  useMultiChainPath,\n  usePoolDatasSWR,\n  usePoolsForTokenSWR,\n  useTokenChartDataSWR,\n  useTokenDataSWR,\n  useTokenPriceDataSWR,\n  useTokenTransactionsSWR,\n  useStableSwapPath,\n} from 'state/info/hooks'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport styled from 'styled-components'\nimport { getBlockExploreLink } from 'utils'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\n\nconst ContentLayout = styled.div`\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: 260px 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst StyledCMCLink = styled(UIKitLink)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n\n  & :hover {\n    opacity: 0.8;\n  }\n`\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\n\nconst TokenPage: React.FC<React.PropsWithChildren<{ routeAddress: string }>> = ({ routeAddress }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const { chainId } = useActiveChainId()\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const cmcLink = useCMCLink(address)\n\n  const tokenData = useTokenDataSWR(address)\n  const poolsForToken = usePoolsForTokenSWR(address)\n  const poolDatas = usePoolDatasSWR(useMemo(() => poolsForToken ?? [], [poolsForToken]))\n  const transactions = useTokenTransactionsSWR(address)\n  const chartData = useTokenChartDataSWR(address)\n\n  // pricing data\n  const priceData = useTokenPriceDataSWR(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\n  const adjustedPriceData = useMemo(() => {\n    // Include latest available price\n    if (priceData && tokenData && priceData.length > 0) {\n      return [\n        ...priceData,\n        {\n          time: new Date().getTime() / 1000,\n          open: priceData[priceData.length - 1].close,\n          close: tokenData?.priceUSD,\n          high: tokenData?.priceUSD,\n          low: priceData[priceData.length - 1].close,\n        },\n      ]\n    }\n    return undefined\n  }, [priceData, tokenData])\n\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\n  const chainPath = useMultiChainPath()\n  const chainName = useGetChainName()\n  const infoTypeParam = useStableSwapPath()\n\n  return (\n    <Page>\n      <NextSeo title={tokenData?.symbol} />\n      {tokenData ? (\n        !tokenData.exists ? (\n          <Card>\n            <Box p=\"16px\">\n              <Text>\n                {t('No pair has been created with this token yet. Create one')}\n                <NextLinkFromReactRouter style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\n                  {t('here.')}\n                </NextLinkFromReactRouter>\n              </Text>\n            </Box>\n          </Card>\n        ) : (\n          <>\n            {/* Stuff on top */}\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\n              <Breadcrumbs mb=\"32px\">\n                <NextLinkFromReactRouter to={`/info${chainPath}${infoTypeParam}`}>\n                  <Text color=\"primary\">{t('Info')}</Text>\n                </NextLinkFromReactRouter>\n                <NextLinkFromReactRouter to={`/info${chainPath}/tokens${infoTypeParam}`}>\n                  <Text color=\"primary\">{t('Tokens')}</Text>\n                </NextLinkFromReactRouter>\n                <Flex>\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\n                  <Text>{`(${truncateHash(address)})`}</Text>\n                </Flex>\n              </Breadcrumbs>\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n                <LinkExternal\n                  isBscScan={multiChainId[chainName] === ChainId.BSC}\n                  mr=\"8px\"\n                  color=\"primary\"\n                  href={getBlockExploreLink(address, 'address', multiChainId[chainName])}\n                >\n                  {t('View on %site%', { site: multiChainScan[chainName] })}\n                </LinkExternal>\n                {cmcLink && (\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\n                  </StyledCMCLink>\n                )}\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\n                <Flex alignItems=\"center\">\n                  <CurrencyLogo size=\"32px\" address={address} chainName={chainName} />\n                  <Text\n                    ml=\"12px\"\n                    bold\n                    lineHeight=\"0.7\"\n                    fontSize={isXs || isSm ? '24px' : '40px'}\n                    id=\"info-token-name-title\"\n                  >\n                    {tokenData.name}\n                  </Text>\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\n                    ({tokenData.symbol})\n                  </Text>\n                </Flex>\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\n                  </Text>\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\n                </Flex>\n              </Flex>\n              <Flex>\n                <NextLinkFromReactRouter to={`/add/${address}?chain=${CHAIN_QUERY_NAME[chainId]}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </NextLinkFromReactRouter>\n                <NextLinkFromReactRouter to={`/swap?outputCurrency=${address}&chainId=${multiChainId[chainName]}`}>\n                  <Button>{t('Trade')}</Button>\n                </NextLinkFromReactRouter>\n              </Flex>\n            </Flex>\n\n            {/* data on the right side of chart */}\n            <ContentLayout>\n              <Card>\n                <Box p=\"24px\">\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Liquidity')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.liquidityUSD)}\n                  </Text>\n                  <Percent value={tokenData.liquidityUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\n                    ${formatAmount(tokenData.volumeUSD)}\n                  </Text>\n                  <Percent value={tokenData.volumeUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 7D')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.volumeUSDWeek)}\n                  </Text>\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Transactions 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\n                  </Text>\n                </Box>\n              </Card>\n              {/* charts card */}\n              <ChartCard\n                variant=\"token\"\n                chartData={chartData}\n                tokenData={tokenData}\n                tokenPriceData={adjustedPriceData}\n              />\n            </ContentLayout>\n\n            {/* pools and transaction tables */}\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Pairs')}\n            </Heading>\n\n            <PoolTable poolDatas={poolDatas} />\n\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Transactions')}\n            </Heading>\n\n            <TransactionTable transactions={transactions} />\n          </>\n        )\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default TokenPage\n","import { useMemo, useState } from 'react'\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\nimport { fromUnixTime } from 'date-fns'\nimport dynamic from 'next/dynamic'\n\nconst CandleChart = dynamic(() => import('../CandleChart'), {\n  ssr: false,\n})\n\nenum ChartView {\n  LIQUIDITY,\n  VOLUME,\n  PRICE,\n}\n\ninterface ChartCardProps {\n  variant: 'pool' | 'token'\n  chartData: ChartEntry[]\n  tokenData?: TokenData\n  tokenPriceData?: PriceChartEntry[]\n}\n\nconst ChartCard: React.FC<React.PropsWithChildren<ChartCardProps>> = ({\n  variant,\n  chartData,\n  tokenData,\n  tokenPriceData,\n}) => {\n  const [view, setView] = useState(ChartView.VOLUME)\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue)\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\n    } else if ((view === ChartView.PRICE && tokenData?.priceUSD) || tokenData?.priceUSD === 0) {\n      valueToDisplay = formatAmount(tokenData.priceUSD, { notation: 'standard' })\n    }\n\n    return valueToDisplay ? (\n      <Text fontSize=\"24px\" bold>\n        ${valueToDisplay}\n      </Text>\n    ) : (\n      <Skeleton height=\"36px\" width=\"128px\" />\n    )\n  }\n\n  return (\n    <Card>\n      <TabToggleGroup>\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\n          <Text>{t('Volume')}</Text>\n        </TabToggle>\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\n          <Text>{t('Liquidity')}</Text>\n        </TabToggle>\n        {variant === 'token' && (\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\n            <Text>{t('Price')}</Text>\n          </TabToggle>\n        )}\n      </TabToggleGroup>\n\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\n        {getLatestValueDisplay()}\n        <Text small color=\"secondary\">\n          {hoverDate || currentDate}\n        </Text>\n      </Flex>\n\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\n        {view === ChartView.LIQUIDITY ? (\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.VOLUME ? (\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.PRICE ? (\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\n        ) : null}\n      </Box>\n    </Card>\n  )\n}\n\nexport default ChartCard\n","import { useTranslation } from '@pancakeswap/localization'\nimport { ArrowBackIcon, ArrowForwardIcon, Box, Flex, NextLinkFromReactRouter, Skeleton, Text } from '@pancakeswap/uikit'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { Fragment, useCallback, useEffect, useMemo, useState } from 'react'\nimport { useGetChainName, useMultiChainPath, useStableSwapPath } from 'state/info/hooks'\nimport { PoolData } from 'state/info/types'\nimport styled from 'styled-components'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { Arrow, Break, ClickableColumnHeader, PageButtons, TableWrapper } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC<React.PropsWithChildren> = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC<React.PropsWithChildren> = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  const chainName = useGetChainName()\n  const chainPath = useMultiChainPath()\n  const stableSwapPath = useStableSwapPath()\n  return (\n    <LinkWrapper to={`/info${chainPath}/pairs/${poolData.address}${stableSwapPath}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo\n            address0={poolData.token0.address}\n            address1={poolData.token1.address}\n            chainName={chainName}\n          />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<React.PropsWithChildren<PoolTableProps>> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pair')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","/* eslint-disable react/no-array-index-key */\nimport React, { Children, isValidElement, ReactNode } from \"react\";\nimport styled from \"styled-components\";\nimport { space } from \"styled-system\";\nimport ChevronRightIcon from \"../Svg/Icons/ChevronRight\";\nimport { BreadcrumbsProps } from \"./types\";\n\nconst Separator = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.textDisabled};\n  display: flex;\n  justify-content: center;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 8px;\n    padding-right: 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding-left: 16px;\n    padding-right: 16px;\n  }\n`;\n\nconst StyledBreadcrumbs = styled.ul`\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  list-style-type: none;\n\n  a {\n    color: ${({ theme }) => theme.colors.primary};\n\n    &:hover {\n      color: ${({ theme }) => theme.colors.primaryBright};\n    }\n  }\n\n  ${space}\n`;\n\nconst insertSeparators = (items: ReactNode[], separator: BreadcrumbsProps[\"separator\"]) =>\n  items.reduce((accum: ReactNode[], item, index) => {\n    if (index === 0) {\n      return [...accum, item];\n    }\n\n    return [\n      ...accum,\n      <Separator aria-hidden key={`separator-${index}`}>\n        {separator}\n      </Separator>,\n      item,\n    ];\n  }, []);\n\nconst DefaultSeparator = <ChevronRightIcon color=\"currentColor\" width=\"24px\" />;\n\nconst Breadcrumbs: React.FC<React.PropsWithChildren<BreadcrumbsProps>> = ({\n  separator = DefaultSeparator,\n  children,\n}) => {\n  const validItems = Children.toArray(children).filter((child) => isValidElement(child));\n  const items = insertSeparators(validItems, separator);\n\n  return (\n    <StyledBreadcrumbs>\n      {items.map((item, index) => (\n        <li key={`child-${index}`}>{item}</li>\n      ))}\n    </StyledBreadcrumbs>\n  );\n};\n\nexport default Breadcrumbs;\n","import React from \"react\";\nimport { Image, Box } from \"@pancakeswap/uikit\";\nimport { SpinnerProps } from \"./types\";\n\nconst Spinner: React.FC<React.PropsWithChildren<SpinnerProps>> = ({ size = 128 }) => {\n  return (\n    <Box width={size} height={size * 1.197} position=\"relative\">\n      <Image\n        width={size}\n        height={size * 1.197}\n        src=\"https://assets.pancakeswap.finance/web/pancake-3d-spinner-v2.gif\"\n        alt=\"pancake-3d-spinner\"\n      />\n    </Box>\n  );\n};\n\nexport default Spinner;\n"],"names":["Wrapper","styled","Flex","Inner","param","theme","colors","input","TabToggle","Box","attrs","as","withConfig","isActive","text","textSubtle","card","background","defaultProps","p","TabToggleGroup","children","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","ContentLayout","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","Tokens_TokenPage","routeAddress","useMatchBreakpoints","isXs","isSm","t","useTranslation","chainId","useActiveChainId","address","toLowerCase","cmcLink","useSWRImmutable","_async_to_generator","Z","response","fetch","concat","_state","sent","ok","json","data","url","undefined","tokenData","useTokenDataSWR","poolsForToken","usePoolsForTokenSWR","poolDatas","usePoolDatasSWR","useMemo","transactions","useTokenTransactionsSWR","chartData","useTokenChartDataSWR","priceData","useTokenPriceDataSWR","ONE_HOUR_SECONDS","adjustedPriceData","length","_to_consumable_array","time","Date","getTime","open","close","priceUSD","high","low","useWatchlistTokens","watchlistTokens","addWatchlistToken","chainPath","useMultiChainPath","chainName","useGetChainName","infoTypeParam","useStableSwapPath","jsx_runtime","jsxs","Page","NextSeo","title","symbol","exists","Fragment","justifyContent","mb","flexDirection","Breadcrumbs","NextLinkFromReactRouter","to","Text","color","mr","truncateHash","mt","LinkExternal","isBscScan","multiChainId","ChainId","href","getBlockExploreLink","site","multiChainScan","rel","target","Image","src","height","width","alt","SaveIcon","fill","includes","onClick","alignItems","CurrencyLogo","size","ml","bold","lineHeight","fontSize","id","name","formatAmount","notation","Percent","value","priceUSDChange","fontWeight","CHAIN_QUERY_NAME","Button","variant","Card","small","textTransform","liquidityUSD","liquidityUSDChange","volumeUSD","volumeUSDChange","volumeUSDWeek","txCount","isInteger","ChartCard","tokenPriceData","Heading","scale","PoolTable","TransactionTable","style","display","marginLeft","Spinner","ChartView","CandleChart","dynamic","Promise","all","__webpack_require__","e","then","bind","ssr","LIQUIDITY","VOLUME","PRICE","__webpack_exports__","formattedVolumeData","formattedTvlData","valueToDisplay","useState","view","setView","hoverValue","setHoverValue","hoverDate","setHoverDate","currentLanguage","locale","currentDate","toLocaleString","month","year","day","map","fromUnixTime","date","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","px","pt","Skeleton","LineChart","BarChart","setValue","setLabel","ResponsiveGrid","LinkWrapper","SORT_FIELD","lpFees24h","lpApr7d","LoadingRow","TableLoader","DataRow","poolData","index","stableSwapPath","DoubleCurrencyLogo","address0","token0","address1","token1","loading","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","useEffect","extraPages","ITEMS_PER_INFO_TABLE_PAGE","Math","floor","sortedPools","sort","a","b","slice","handleSort","useCallback","newField","arrow","field","TableWrapper","ClickableColumnHeader","Break","i","PageButtons","Arrow","ArrowBackIcon","ArrowForwardIcon","Separator","textDisabled","mediaQueries","sm","md","StyledBreadcrumbs","primary","primaryBright","space","DefaultSeparator","ChevronRightIcon","items","separator","Children","filter","child","isValidElement","reduce","accum","item","_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_5__","aria-hidden","li","_param_size","position"],"sourceRoot":""}