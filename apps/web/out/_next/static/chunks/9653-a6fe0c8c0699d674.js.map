{"version":3,"file":"static/chunks/9653-a6fe0c8c0699d674.js","mappings":"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","sources":["webpack://_N_E/./src/views/Pools/hooks/useHarvestPool.ts","webpack://_N_E/./src/views/Pools/components/Modals/CollectModal.tsx","webpack://_N_E/./src/views/Pools/hooks/useStakePool.ts","webpack://_N_E/./src/views/Pools/hooks/useUnstakePool.ts","webpack://_N_E/./src/views/Pools/components/Modals/StakeModal.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/ActionPanel/Harvest.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/ActionPanel/AutoHarvest.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/ActionPanel/CakeVaultApr.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/ActionPanel/styles.ts","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/AprCell.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/AutoAprCell.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/AutoEarningsCell.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/NameCell.tsx","webpack://_N_E/./src/views/Pools/components/ProfileRequirementWarning.tsx","webpack://_N_E/./src/views/Pools/hooks/useProfileRequirement.ts","webpack://_N_E/<anon>"],"sourcesContent":["import { useCallback } from 'react'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { useSousChef } from 'hooks/useContract'\nimport { DEFAULT_GAS_LIMIT } from 'config'\nimport { useGasPrice } from 'state/user/hooks'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst harvestPool = async (sousChefContract, gasPrice) => {\n  return sousChefContract.deposit('0', { ...options, gasPrice })\n}\n\nconst harvestPoolBnb = async (sousChefContract, gasPrice) => {\n  return sousChefContract.deposit({\n    ...options,\n    value: BIG_ZERO,\n    gasPrice,\n  })\n}\n\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\n  const sousChefContract = useSousChef(sousId)\n  const gasPrice = useGasPrice()\n\n  const handleHarvest = useCallback(async () => {\n    if (isUsingBnb) {\n      return harvestPoolBnb(sousChefContract, gasPrice)\n    }\n\n    return harvestPool(sousChefContract, gasPrice)\n  }, [isUsingBnb, sousChefContract, gasPrice])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestPool\n","import { useCallback } from 'react'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Pool, useToast } from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/pools'\nimport useHarvestPool from '../../hooks/useHarvestPool'\n\nexport const CollectModalContainer = ({\n  earningTokenSymbol,\n  sousId,\n  isBnbPool,\n  onDismiss,\n  ...rest\n}: React.PropsWithChildren<Pool.CollectModalProps>) => {\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { address: account } = useAccount()\n  const dispatch = useAppDispatch()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { onReward } = useHarvestPool(sousId, isBnbPool)\n\n  const handleHarvestConfirm = useCallback(async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onReward()\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Harvested')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningTokenSymbol })}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(updateUserStakedBalance({ sousId, account }))\n      dispatch(updateUserPendingReward({ sousId, account }))\n      dispatch(updateUserBalance({ sousId, account }))\n      onDismiss?.()\n    }\n  }, [account, dispatch, earningTokenSymbol, fetchWithCatchTxError, onDismiss, onReward, sousId, t, toastSuccess])\n\n  return (\n    <Pool.CollectModal\n      earningTokenSymbol={earningTokenSymbol}\n      onDismiss={onDismiss}\n      handleHarvestConfirm={handleHarvestConfirm}\n      pendingTx={pendingTx}\n      {...rest}\n    />\n  )\n}\n\nexport default CollectModalContainer\n","import { useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\nimport { getFullDecimalMultiplier } from '@pancakeswap/utils/getFullDecimalMultiplier'\nimport { useSousChef } from 'hooks/useContract'\nimport { useGasPrice } from 'state/user/hooks'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousStake = async (sousChefContract, amount, gasPrice: string, decimals = 18) => {\n  return sousChefContract.deposit(new BigNumber(amount).times(getFullDecimalMultiplier(decimals)).toString(), {\n    ...options,\n    gasPrice,\n  })\n}\n\nconst sousStakeBnb = async (sousChefContract, amount, gasPrice: string) => {\n  return sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), {\n    ...options,\n    gasPrice,\n  })\n}\n\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\n  const sousChefContract = useSousChef(sousId)\n  const gasPrice = useGasPrice()\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (isUsingBnb) {\n        return sousStakeBnb(sousChefContract, amount, gasPrice)\n      }\n      return sousStake(sousChefContract, amount, gasPrice, decimals)\n    },\n    [isUsingBnb, sousChefContract, gasPrice],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakePool\n","import { useCallback } from 'react'\nimport { DEFAULT_GAS_LIMIT } from 'config'\nimport { parseUnits } from '@ethersproject/units'\nimport { useSousChef } from 'hooks/useContract'\nimport { useGasPrice } from 'state/user/hooks'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousUnstake = (sousChefContract: any, amount: string, decimals: number, gasPrice: string) => {\n  const units = parseUnits(amount, decimals)\n\n  return sousChefContract.withdraw(units.toString(), {\n    ...options,\n    gasPrice,\n  })\n}\n\nconst sousEmergencyUnstake = (sousChefContract: any, gasPrice: string) => {\n  return sousChefContract.emergencyWithdraw({ ...options, gasPrice })\n}\n\nconst useUnstakePool = (sousId: number, enableEmergencyWithdraw = false) => {\n  const sousChefContract = useSousChef(sousId)\n  const gasPrice = useGasPrice()\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (enableEmergencyWithdraw) {\n        return sousEmergencyUnstake(sousChefContract, gasPrice)\n      }\n\n      return sousUnstake(sousChefContract, amount, decimals, gasPrice)\n    },\n    [enableEmergencyWithdraw, sousChefContract, gasPrice],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakePool\n","import { Pool, useToast } from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useCallback, useState, useMemo } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance, updateUserAllowance } from 'state/pools'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { Token } from '@pancakeswap/sdk'\nimport BigNumber from 'bignumber.js'\nimport { useERC20 } from 'hooks/useContract'\nimport { getDecimalAmount } from '@pancakeswap/utils/formatBalance'\nimport { useApprovePool } from 'views/Pools/hooks/useApprove'\nimport { usePool } from 'state/pools/hooks'\n\nimport useStakePool from '../../hooks/useStakePool'\nimport useUnstakePool from '../../hooks/useUnstakePool'\n\nconst StakeModalContainer = ({\n  isBnbPool,\n  pool,\n  isRemovingStake,\n  onDismiss,\n  stakingTokenBalance,\n  stakingTokenPrice,\n}: Pool.StakeModalPropsType<Token>) => {\n  const { t } = useTranslation()\n\n  const {\n    sousId,\n    earningToken,\n    stakingToken,\n    earningTokenPrice,\n    apr,\n    userData,\n    stakingLimit,\n    enableEmergencyWithdraw,\n  } = pool\n  const { address: account } = useAccount()\n  const { toastSuccess } = useToast()\n  const { pool: singlePool } = usePool(sousId)\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const [amount, setAmount] = useState('')\n\n  const { onUnstake } = useUnstakePool(sousId, enableEmergencyWithdraw)\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const dispatch = useAppDispatch()\n\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove, pendingTx: enablePendingTx } = useApprovePool(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const onDone = useCallback(() => {\n    dispatch(updateUserStakedBalance({ sousId, account }))\n    dispatch(updateUserPendingReward({ sousId, account }))\n    dispatch(updateUserBalance({ sousId, account }))\n  }, [dispatch, sousId, account])\n\n  const handleConfirmClick = useCallback(\n    async (stakeAmount: string) => {\n      const receipt = await fetchWithCatchTxError(() => {\n        if (isRemovingStake) {\n          return onUnstake(stakeAmount, stakingToken.decimals)\n        }\n        return onStake(stakeAmount, stakingToken.decimals)\n      })\n      if (receipt?.status) {\n        if (isRemovingStake) {\n          toastSuccess(\n            `${t('Unstaked')}!`,\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your %symbol% earnings have also been harvested to your wallet!', {\n                symbol: earningToken.symbol,\n              })}\n            </ToastDescriptionWithTx>,\n          )\n        } else {\n          toastSuccess(\n            `${t('Staked')}!`,\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your %symbol% funds have been staked in the pool!', {\n                symbol: stakingToken.symbol,\n              })}\n            </ToastDescriptionWithTx>,\n          )\n        }\n\n        onDone?.()\n        onDismiss?.()\n      }\n    },\n    [\n      fetchWithCatchTxError,\n      isRemovingStake,\n      onStake,\n      stakingToken.decimals,\n      stakingToken.symbol,\n      onUnstake,\n      onDone,\n      onDismiss,\n      toastSuccess,\n      t,\n      earningToken.symbol,\n    ],\n  )\n\n  const needEnable = useMemo(() => {\n    if (!isRemovingStake && !pendingTx) {\n      const stakeAmount = getDecimalAmount(new BigNumber(amount))\n      return stakeAmount.gt(singlePool.userData.allowance)\n    }\n    return false\n  }, [singlePool, amount, pendingTx, isRemovingStake])\n\n  const handleEnableApprove = async () => {\n    await handleApprove()\n    dispatch(updateUserAllowance({ sousId, account }))\n  }\n\n  return (\n    <Pool.StakeModal\n      enableEmergencyWithdraw={enableEmergencyWithdraw}\n      stakingLimit={stakingLimit}\n      stakingTokenPrice={stakingTokenPrice}\n      earningTokenPrice={earningTokenPrice}\n      stakingTokenDecimals={stakingToken.decimals}\n      earningTokenSymbol={earningToken.symbol}\n      stakingTokenSymbol={stakingToken.symbol}\n      stakingTokenAddress={stakingToken.address}\n      stakingTokenBalance={stakingTokenBalance}\n      apr={apr}\n      userDataStakedBalance={userData.stakedBalance}\n      userDataStakingTokenBalance={userData.stakingTokenBalance}\n      onDismiss={onDismiss}\n      pendingTx={pendingTx}\n      account={account}\n      needEnable={needEnable}\n      enablePendingTx={enablePendingTx}\n      handleEnableApprove={handleEnableApprove}\n      setAmount={setAmount}\n      handleConfirmClick={handleConfirmClick}\n      isRemovingStake={isRemovingStake}\n    />\n  )\n}\n\nexport default StakeModalContainer\n","import { Button, Text, useModal, Flex, Skeleton, Heading, Balance, Pool } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useAccount } from 'wagmi'\nimport { PoolCategory } from 'config/constants/types'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { Token } from '@pancakeswap/sdk'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport CollectModal from '../../Modals/CollectModal'\n\nconst HarvestAction: React.FunctionComponent<React.PropsWithChildren<Pool.DeserializedPool<Token>>> = ({\n  sousId,\n  poolCategory,\n  earningToken,\n  userData,\n  userDataLoaded,\n  earningTokenPrice,\n}) => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const hasEarnings = earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningTokenSymbol={earningToken.symbol}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n    />,\n  )\n\n  const actionTitle = (\n    <>\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n        {earningToken.symbol}{' '}\n      </Text>\n      <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n        {t('Earned')}\n      </Text>\n    </>\n  )\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Heading>0</Heading>\n          <Button disabled>{t('Harvest')}</Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" flexDirection=\"column\" alignSelf=\"flex-center\">\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n        <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import {\n  AddIcon,\n  Button,\n  Flex,\n  IconButton,\n  MinusIcon,\n  HelpIcon,\n  Skeleton,\n  Text,\n  useModal,\n  useTooltip,\n  Box,\n  SkeletonV2,\n  useMatchBreakpoints,\n  Balance,\n  Pool,\n} from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport BigNumber from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { PoolCategory } from 'config/constants/types'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useERC20 } from 'hooks/useContract'\n\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { VaultKey, DeserializedLockedCakeVault } from 'state/types'\nimport { getVaultPosition, VaultPosition } from 'utils/cakePool'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getBalanceNumber, getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport { useProfileRequirement } from 'views/Pools/hooks/useProfileRequirement'\nimport isUndefinedOrNull from '@pancakeswap/utils/isUndefinedOrNull'\nimport useUserDataInVaultPresenter from 'views/Pools/components/LockedPool/hooks/useUserDataInVaultPresenter'\nimport { Token } from '@pancakeswap/sdk'\n\nimport { useApprovePool, useCheckVaultApprovalStatus, useVaultApprove } from '../../../hooks/useApprove'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\nimport NotEnoughTokensModal from '../../Modals/NotEnoughTokensModal'\nimport StakeModal from '../../Modals/StakeModal'\nimport { ProfileRequirementWarning } from '../../ProfileRequirementWarning'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\nimport { VaultStakeButtonGroup } from '../../Vault/VaultStakeButtonGroup'\nimport AddCakeButton from '../../LockedPool/Buttons/AddCakeButton'\nimport ExtendButton from '../../LockedPool/Buttons/ExtendDurationButton'\nimport AfterLockedActions from '../../LockedPool/Common/AfterLockedActions'\nimport ConvertToLock from '../../LockedPool/Common/ConvertToLock'\nimport BurningCountDown from '../../LockedPool/Common/BurningCountDown'\nimport LockedStakedModal from '../../LockedPool/Modals/LockedStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst Staked: React.FunctionComponent<React.PropsWithChildren<StackedActionProps>> = ({ pool }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    vaultKey,\n    profileRequirement,\n    userDataLoaded,\n  } = pool\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const { isMobile } = useMatchBreakpoints()\n\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove: handlePoolApprove, pendingTx: pendingPoolTx } = useApprovePool(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus(vaultKey)\n  const { handleApprove: handleVaultApprove, pendingTx: pendingVaultTx } = useVaultApprove(vaultKey, setLastUpdated)\n\n  const handleApprove = vaultKey ? handleVaultApprove : handlePoolApprove\n  const pendingTx = vaultKey ? pendingVaultTx : pendingPoolTx\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !vaultKey && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const vaultData = useVaultPoolByKey(pool.vaultKey)\n  const {\n    userData: {\n      userShares,\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n    },\n  } = vaultData\n\n  const { lockEndDate, remainingTime, burnStartTime } = useUserDataInVaultPresenter({\n    lockStartTime:\n      vaultKey === VaultKey.CakeVault ? (vaultData as DeserializedLockedCakeVault).userData?.lockStartTime ?? '0' : '0',\n    lockEndTime:\n      vaultKey === VaultKey.CakeVault ? (vaultData as DeserializedLockedCakeVault).userData?.lockEndTime ?? '0' : '0',\n    burnStartTime:\n      vaultKey === VaultKey.CakeVault ? (vaultData as DeserializedLockedCakeVault).userData?.burnStartTime ?? '0' : '0',\n  })\n\n  const hasSharesStaked = userShares.gt(0)\n  const isVaultWithShares = vaultKey && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = vaultKey ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const [openPresentLockedStakeModal] = useModal(\n    <LockedStakedModal\n      currentBalance={stakingTokenBalance}\n      stakingToken={stakingToken}\n      stakingTokenBalance={stakingTokenBalance}\n    />,\n  )\n\n  const { notMeetRequired, notMeetThreshold } = useProfileRequirement(profileRequirement)\n\n  const onStake = () => {\n    if (vaultKey) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (vaultKey) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const tooltipContentOfBurn = t(\n    'After Burning starts at %burnStartTime%. You need to renew your fix-term position, to initiate a new lock or convert your staking position to flexible before it starts. Otherwise all the rewards will be burned within the next 90 days.',\n    { burnStartTime },\n  )\n  const {\n    targetRef: tagTargetRefOfBurn,\n    tooltip: tagTooltipOfBurn,\n    tooltipVisible: tagTooltipVisibleOfBurn,\n  } = useTooltip(tooltipContentOfBurn, {\n    placement: 'bottom',\n  })\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (notMeetRequired || notMeetThreshold) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ProfileRequirementWarning profileRequirement={profileRequirement} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval && !isNotVaultAndHasStake && !isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={pendingTx} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    const vaultPosition = getVaultPosition(vaultData.userData)\n    return (\n      <>\n        <ActionContainer flex={vaultPosition > 1 ? 1.5 : 1}>\n          <ActionContent mt={0}>\n            <Flex flex=\"1\" flexDirection=\"column\" alignSelf=\"flex-start\">\n              <ActionTitles>\n                <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n                  {stakingToken.symbol}{' '}\n                </Text>\n                <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n                  {vaultKey === VaultKey.CakeVault && (vaultData as DeserializedLockedCakeVault).userData.locked\n                    ? t('Locked')\n                    : t('Staked')}\n                </Text>\n              </ActionTitles>\n              <ActionContent>\n                <Box position=\"relative\">\n                  <Balance\n                    lineHeight=\"1\"\n                    bold\n                    fontSize=\"20px\"\n                    decimals={5}\n                    value={vaultKey ? cakeAsNumberBalance : stakedTokenBalance}\n                  />\n                  <SkeletonV2\n                    isDataReady={Number.isFinite(vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance)}\n                    width={120}\n                    wrapperProps={{ height: '20px' }}\n                    skeletonTop=\"2px\"\n                  >\n                    <Balance\n                      fontSize=\"12px\"\n                      display=\"inline\"\n                      color=\"textSubtle\"\n                      decimals={2}\n                      value={vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n                      unit=\" USD\"\n                      prefix=\"~\"\n                    />\n                  </SkeletonV2>\n                </Box>\n              </ActionContent>\n              {vaultPosition === VaultPosition.Locked && (\n                <Box mt=\"16px\">\n                  <AddCakeButton\n                    lockEndTime={(vaultData as DeserializedLockedCakeVault).userData.lockEndTime}\n                    lockStartTime={(vaultData as DeserializedLockedCakeVault).userData.lockStartTime}\n                    currentLockedAmount={cakeAsBigNumber}\n                    stakingToken={stakingToken}\n                    currentBalance={stakingTokenBalance}\n                    stakingTokenBalance={stakingTokenBalance}\n                  />\n                </Box>\n              )}\n            </Flex>\n            {vaultPosition >= VaultPosition.Locked && (\n              <Flex flex=\"1\" ml=\"20px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n                <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n                  {t('Unlocks In')}\n                </Text>\n                <Text\n                  lineHeight=\"1\"\n                  mt=\"5px\"\n                  bold\n                  fontSize=\"20px\"\n                  color={vaultPosition >= VaultPosition.LockedEnd ? '#D67E0A' : 'text'}\n                >\n                  {vaultPosition >= VaultPosition.LockedEnd ? t('Unlocked') : remainingTime}\n                  {tagTooltipVisibleOfBurn && tagTooltipOfBurn}\n                  <span ref={tagTargetRefOfBurn}>\n                    <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n                  </span>\n                </Text>\n                <Text\n                  height=\"20px\"\n                  fontSize=\"12px\"\n                  display=\"inline\"\n                  color={vaultPosition >= VaultPosition.LockedEnd ? '#D67E0A' : 'text'}\n                >\n                  {t('On %date%', { date: lockEndDate })}\n                </Text>\n                {vaultPosition === VaultPosition.Locked && (\n                  <Box mt=\"16px\">\n                    <ExtendButton\n                      lockEndTime={(vaultData as DeserializedLockedCakeVault).userData.lockEndTime}\n                      lockStartTime={(vaultData as DeserializedLockedCakeVault).userData.lockStartTime}\n                      stakingToken={stakingToken}\n                      currentBalance={stakingTokenBalance}\n                      currentLockedAmount={cakeAsNumberBalance}\n                    >\n                      {t('Extend')}\n                    </ExtendButton>\n                  </Box>\n                )}\n              </Flex>\n            )}\n            {(vaultPosition === VaultPosition.Flexible || !vaultKey) && (\n              <IconButtonWrapper>\n                <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n                  <MinusIcon color=\"primary\" width=\"14px\" />\n                </IconButton>\n                {reachStakingLimit ? (\n                  <span ref={targetRef}>\n                    <IconButton variant=\"secondary\" disabled>\n                      <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                    </IconButton>\n                  </span>\n                ) : (\n                  <IconButton\n                    variant=\"secondary\"\n                    onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                    disabled={isFinished}\n                  >\n                    <AddIcon color=\"primary\" width=\"14px\" />\n                  </IconButton>\n                )}\n              </IconButtonWrapper>\n            )}\n            {!isMobile && vaultPosition >= VaultPosition.LockedEnd && (\n              <Flex flex=\"1\" ml=\"20px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n                <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n                  {vaultPosition === VaultPosition.AfterBurning ? t('After Burning') : t('After Burning In')}\n                </Text>\n                <Text lineHeight=\"1\" mt=\"8px\" bold fontSize=\"20px\" color=\"failure\">\n                  {vaultPosition === VaultPosition.AfterBurning ? (\n                    isUndefinedOrNull((vaultData as DeserializedLockedCakeVault).userData.currentOverdueFee) ? (\n                      '-'\n                    ) : (\n                      t('%amount% Burned', {\n                        amount: getFullDisplayBalance(\n                          (vaultData as DeserializedLockedCakeVault).userData.currentOverdueFee,\n                          18,\n                          5,\n                        ),\n                      })\n                    )\n                  ) : (\n                    <BurningCountDown lockEndTime={(vaultData as DeserializedLockedCakeVault).userData.lockEndTime} />\n                  )}\n                </Text>\n              </Flex>\n            )}\n            {tooltipVisible && tooltip}\n          </ActionContent>\n        </ActionContainer>\n        {isMobile && vaultPosition >= VaultPosition.LockedEnd && (\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"failure\" as=\"span\">\n              {vaultPosition === VaultPosition.AfterBurning ? t('After Burning') : t('After Burning In')}\n            </Text>\n            <Text fontSize=\"14px\" bold color=\"failure\">\n              {vaultPosition === VaultPosition.AfterBurning ? (\n                isUndefinedOrNull((vaultData as DeserializedLockedCakeVault).userData.currentOverdueFee) ? (\n                  '-'\n                ) : (\n                  t('%amount% Burned', {\n                    amount: getFullDisplayBalance(\n                      (vaultData as DeserializedLockedCakeVault).userData.currentOverdueFee,\n                      18,\n                      5,\n                    ),\n                  })\n                )\n              ) : (\n                <BurningCountDown lockEndTime={(vaultData as DeserializedLockedCakeVault).userData.lockEndTime} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        {[VaultPosition.AfterBurning, VaultPosition.LockedEnd].includes(vaultPosition) && (\n          <Box\n            width=\"100%\"\n            mt={['0', '0', '24px', '24px', '24px']}\n            ml={['0', '0', '12px', '12px', '12px', '32px']}\n            mr={['0', '0', '12px', '12px', '12px', '0px']}\n          >\n            <AfterLockedActions\n              isInline\n              position={vaultPosition}\n              currentLockedAmount={cakeAsNumberBalance}\n              stakingToken={stakingToken}\n              lockEndTime=\"0\"\n              lockStartTime=\"0\"\n            />\n          </Box>\n        )}\n        {vaultKey === VaultKey.CakeVault && vaultPosition === VaultPosition.Flexible && (\n          <Box\n            width=\"100%\"\n            mt={['0', '0', '24px', '24px', '24px']}\n            ml={['0', '0', '12px', '12px', '32px']}\n            mr={['0', '0', '12px', '12px', '0']}\n          >\n            <ConvertToLock stakingToken={stakingToken} currentStakedAmount={cakeAsNumberBalance} isInline />\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        {vaultKey ? (\n          <VaultStakeButtonGroup\n            onFlexibleClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n            onLockedClick={vaultKey === VaultKey.CakeVault ? openPresentLockedStakeModal : null}\n          />\n        ) : (\n          <Button\n            width=\"100%\"\n            onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n            variant=\"secondary\"\n            disabled={isFinished}\n          >\n            {t('Stake')}\n          </Button>\n        )}\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import { Text, Flex, Skeleton, Heading, Box, useMatchBreakpoints, BalanceWithLoading, Pool } from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { VaultKey, DeserializedLockedCakeVault } from 'state/types'\nimport { getVaultPosition, VaultPosition } from 'utils/cakePool'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { Token } from '@pancakeswap/sdk'\n\nimport { ActionContainer, ActionTitles, ActionContent, RowActionContainer } from './styles'\nimport UnstakingFeeCountdownRow from '../../CakeVaultCard/UnstakingFeeCountdownRow'\nimport useUserDataInVaultPresenter from '../../LockedPool/hooks/useUserDataInVaultPresenter'\n\nconst AutoHarvestAction: React.FunctionComponent<React.PropsWithChildren<Pool.DeserializedPool<Token>>> = ({\n  userDataLoaded,\n  earningTokenPrice,\n  vaultKey,\n}) => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const { isMobile } = useMatchBreakpoints()\n\n  const vaultData = useVaultPoolByKey(vaultKey)\n  const {\n    userData: { userShares, cakeAtLastUserAction },\n    pricePerFullShare,\n  } = vaultData\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n    vaultKey === VaultKey.CakeVault\n      ? (vaultData as DeserializedLockedCakeVault).userData.currentPerformanceFee\n          .plus((vaultData as DeserializedLockedCakeVault).userData.currentOverdueFee)\n          .plus((vaultData as DeserializedLockedCakeVault).userData.userBoostedShare)\n      : null,\n  )\n\n  const { secondDuration, weekDuration } = useUserDataInVaultPresenter({\n    lockStartTime:\n      vaultKey === VaultKey.CakeVault ? (vaultData as DeserializedLockedCakeVault).userData?.lockStartTime ?? '0' : '0',\n    lockEndTime:\n      vaultKey === VaultKey.CakeVault ? (vaultData as DeserializedLockedCakeVault).userData?.lockEndTime ?? '0' : '0',\n  })\n\n  const { boostFactor } = useVaultApy({ duration: secondDuration })\n\n  const vaultPosition = getVaultPosition(vaultData.userData)\n\n  const actionTitle = (\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n      {t('Recent CAKE profit')}\n    </Text>\n  )\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Heading>0</Heading>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <RowActionContainer justifyContent=\"space-between\">\n      <Box width=\"100%\">\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <>\n              {hasAutoEarnings ? (\n                <>\n                  <BalanceWithLoading lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={autoCakeToDisplay} />\n                  {Number.isFinite(earningTokenPrice) && earningTokenPrice > 0 && (\n                    <BalanceWithLoading\n                      display=\"inline\"\n                      fontSize=\"12px\"\n                      color=\"textSubtle\"\n                      decimals={2}\n                      prefix=\"~\"\n                      value={autoUsdToDisplay}\n                      unit=\" USD\"\n                    />\n                  )}\n                </>\n              ) : (\n                <>\n                  <Heading color=\"textDisabled\">0</Heading>\n                  <Text fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                </>\n              )}\n            </>\n          </Flex>\n          <Flex flex=\"1.3\" flexDirection=\"column\" alignSelf=\"flex-start\" alignItems=\"flex-start\">\n            {[VaultPosition.Flexible, VaultPosition.None].includes(vaultPosition) && (\n              <UnstakingFeeCountdownRow vaultKey={vaultKey} isTableVariant />\n            )}\n            {/* IFO credit here */}\n          </Flex>\n        </ActionContent>\n      </Box>\n      {!isMobile && vaultKey === VaultKey.CakeVault && (vaultData as DeserializedLockedCakeVault).userData.locked && (\n        <Box minWidth=\"123px\">\n          <ActionTitles>\n            <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n              {t('Yield boost')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <Flex flex=\"1\" flexDirection=\"column\" alignSelf=\"flex-start\">\n              <BalanceWithLoading\n                color=\"text\"\n                lineHeight=\"1\"\n                bold\n                fontSize=\"20px\"\n                value={boostFactor ? boostFactor?.toString() : '0'}\n                decimals={2}\n                unit=\"x\"\n              />\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                {t('Lock for %duration%', { duration: weekDuration })}\n              </Text>\n            </Flex>\n          </ActionContent>\n        </Box>\n      )}\n    </RowActionContainer>\n  )\n}\n\nexport default AutoHarvestAction\n","import { Box, Button, Flex, Skeleton, Text, CalculateIcon, useModal, Balance, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { DeserializedLockedVaultUser, VaultKey, DeserializedVaultUser } from 'state/types'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { VaultPosition } from 'utils/cakePool'\nimport { MAX_LOCK_DURATION } from 'config/constants/pools'\nimport { Token } from '@pancakeswap/sdk'\n\nimport { VaultRoiCalculatorModal } from '../../Vault/VaultRoiCalculatorModal'\n\ninterface CakeVaultAprProps {\n  pool: Pool.DeserializedPool<Token>\n  userData: DeserializedVaultUser\n  vaultPosition: VaultPosition\n}\n\nconst CakeVaultApr: React.FC<React.PropsWithChildren<CakeVaultAprProps>> = ({ pool, userData, vaultPosition }) => {\n  const { t } = useTranslation()\n\n  const { flexibleApy, lockedApy } = useVaultApy({\n    duration:\n      vaultPosition > VaultPosition.Flexible\n        ? +(userData as DeserializedLockedVaultUser).lockEndTime -\n          +(userData as DeserializedLockedVaultUser).lockStartTime\n        : MAX_LOCK_DURATION,\n  })\n\n  const [onPresentFlexibleApyModal] = useModal(<VaultRoiCalculatorModal pool={pool} />)\n  const [onPresentLockedApyModal] = useModal(<VaultRoiCalculatorModal pool={pool} initialView={1} />)\n\n  return (\n    <>\n      <Box marginX=\"8px\" mb=\"8px\">\n        <Flex justifyContent=\"space-between\">\n          <Text fontSize=\"16px\" color=\"textSubtle\" textAlign=\"left\">\n            {t('Flexible APY')}\n          </Text>\n          {flexibleApy ? (\n            <Flex alignItems=\"center\" justifyContent=\"flex-start\">\n              <Balance fontSize=\"16px\" value={parseFloat(flexibleApy)} decimals={2} unit=\"%\" fontWeight=\"600\" />\n              <Button\n                onClick={(e) => {\n                  e.stopPropagation()\n                  onPresentFlexibleApyModal()\n                }}\n                variant=\"text\"\n                width=\"20px\"\n                height=\"20px\"\n                padding=\"0px\"\n                marginLeft=\"4px\"\n              >\n                <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n              </Button>\n            </Flex>\n          ) : (\n            <Skeleton width=\"80px\" height=\"16px\" />\n          )}\n        </Flex>\n      </Box>\n      {pool.vaultKey === VaultKey.CakeVault && (\n        <Box marginX=\"8px\" mb=\"8px\">\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"16px\" color=\"textSubtle\" textAlign=\"left\">\n              {t('Locked APR')}\n            </Text>\n            {lockedApy ? (\n              <Flex alignItems=\"center\" justifyContent=\"flex-start\">\n                <Text fontSize=\"16px\" style={{ whiteSpace: 'nowrap' }} fontWeight=\"600\">\n                  {t('Up to')}\n                </Text>\n                <Balance\n                  ml=\"7px\"\n                  fontSize=\"16px\"\n                  value={parseFloat(lockedApy)}\n                  decimals={2}\n                  unit=\"%\"\n                  fontWeight=\"600\"\n                />\n                <Button\n                  onClick={(e) => {\n                    e.stopPropagation()\n                    onPresentLockedApyModal()\n                  }}\n                  variant=\"text\"\n                  width=\"20px\"\n                  height=\"20px\"\n                  padding=\"0px\"\n                  marginLeft=\"4px\"\n                >\n                  <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n                </Button>\n              </Flex>\n            ) : (\n              <Skeleton width=\"80px\" height=\"16px\" />\n            )}\n          </Flex>\n        </Box>\n      )}\n    </>\n  )\n}\n\nexport default CakeVaultApr\n","import styled, { keyframes, css } from 'styled-components'\nimport { Box, Flex, HelpIcon, Text, useMatchBreakpoints, Pool } from '@pancakeswap/uikit'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { getVaultPosition, VaultPosition } from 'utils/cakePool'\nimport BigNumber from 'bignumber.js'\nimport { VaultKey, DeserializedLockedCakeVault, DeserializedLockedVaultUser } from 'state/types'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { Token } from '@pancakeswap/sdk'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport AutoHarvest from './AutoHarvest'\nimport { VaultPositionTagWithLabel } from '../../Vault/VaultPositionTag'\nimport YieldBoostRow from '../../LockedPool/Common/YieldBoostRow'\nimport LockDurationRow from '../../LockedPool/Common/LockDurationRow'\nimport useUserDataInVaultPresenter from '../../LockedPool/hooks/useUserDataInVaultPresenter'\nimport CakeVaultApr from './CakeVaultApr'\nimport PoolStatsInfo from '../../PoolStatsInfo'\nimport PoolTypeTag from '../../PoolTypeTag'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 1000px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 1000px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div<{ isAutoVault?: boolean; hasBalance?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  flex-wrap: wrap;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: ${({ isAutoVault }) => (isAutoVault ? 'row' : null)};\n    align-items: ${({ isAutoVault, hasBalance }) => (isAutoVault ? (hasBalance ? 'flex-start' : 'stretch') : 'center')};\n  }\n`\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool.DeserializedPool<Token>\n  expanded: boolean\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n    ${Text} {\n      font-size: 14px;\n    }\n  }\n`\n\nconst YieldBoostDurationRow = ({ lockEndTime, lockStartTime }) => {\n  const { weekDuration, secondDuration } = useUserDataInVaultPresenter({\n    lockEndTime,\n    lockStartTime,\n  })\n\n  return (\n    <>\n      <YieldBoostRow secondDuration={secondDuration} />\n      <LockDurationRow weekDuration={weekDuration} />\n    </>\n  )\n}\n\nconst ActionPanel: React.FC<React.PropsWithChildren<ActionPanelProps>> = ({ account, pool, expanded }) => {\n  const { userData, vaultKey } = pool\n  const { isMobile } = useMatchBreakpoints()\n\n  const vaultData = useVaultPoolByKey(vaultKey)\n  const {\n    userData: {\n      balance: { cakeAsBigNumber },\n    },\n  } = vaultData\n\n  const vaultPosition = getVaultPosition(vaultData.userData)\n\n  const isLocked = (vaultData as DeserializedLockedCakeVault).userData.locked\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n\n  const poolStakingTokenBalance = vaultKey\n    ? cakeAsBigNumber.plus(stakingTokenBalance)\n    : stakedBalance.plus(stakingTokenBalance)\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {isMobile && vaultKey === VaultKey.CakeVault && isLocked && (\n          <Box mb=\"16px\">\n            <YieldBoostDurationRow\n              lockEndTime={(vaultData as DeserializedLockedCakeVault).userData.lockEndTime}\n              lockStartTime={(vaultData as DeserializedLockedCakeVault).userData.lockStartTime}\n            />\n          </Box>\n        )}\n        <Flex flexDirection=\"column\" mb=\"8px\">\n          <PoolStatsInfo pool={pool} account={account} showTotalStaked={isMobile} alignLinksToRight={isMobile} />\n        </Flex>\n        <Flex alignItems=\"center\">\n          <PoolTypeTag vaultKey={vaultKey} isLocked={isLocked} account={account}>\n            {(tagTargetRef) => (\n              <Flex ref={tagTargetRef}>\n                <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n              </Flex>\n            )}\n          </PoolTypeTag>\n        </Flex>\n      </InfoSection>\n      <ActionContainer>\n        {isMobile && vaultKey === VaultKey.CakeVault && vaultPosition === VaultPosition.None && (\n          <CakeVaultApr pool={pool} userData={vaultData.userData} vaultPosition={vaultPosition} />\n        )}\n        <Box width=\"100%\">\n          {pool.vaultKey === VaultKey.CakeVault && (\n            <VaultPositionTagWithLabel\n              userData={vaultData.userData as DeserializedLockedVaultUser}\n              width={['auto', , 'fit-content']}\n              ml={['12px', , , , , '32px']}\n            />\n          )}\n          <ActionContainer isAutoVault={!!pool.vaultKey} hasBalance={poolStakingTokenBalance.gt(0)}>\n            {pool.vaultKey ? <AutoHarvest {...pool} /> : <Harvest {...pool} />}\n            <Stake pool={pool} />\n          </ActionContainer>\n        </Box>\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nexport const ActionContainer = styled(Flex)`\n  flex-direction: column;\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n  }\n}\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n  }\n`\n\nActionContainer.defaultProps = {\n  flex: 1,\n}\n\nexport const RowActionContainer = styled(ActionContainer)`\n  flex-direction: row;\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled(Flex)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nActionContent.defaultProps = {\n  mt: '8px',\n}\n","import { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { Text, useMatchBreakpoints, Pool } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Token } from '@pancakeswap/sdk'\n\nimport Apr from '../../Apr'\n\ninterface AprCellProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst AprCell: React.FC<React.PropsWithChildren<AprCellProps>> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { userData } = pool\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n\n  return (\n    <Pool.BaseCell role=\"cell\" flex={['1 0 50px', '1 0 50px', '2 0 100px', '2 0 100px', '1 0 120px']}>\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('APR')}\n        </Text>\n        <Apr pool={pool} stakedBalance={stakedBalance} showIcon={!isMobile} />\n      </Pool.CellContent>\n    </Pool.BaseCell>\n  )\n}\n\nexport default AprCell\n","import {\n  Skeleton,\n  Text,\n  Flex,\n  Button,\n  CalculateIcon,\n  useModal,\n  useMatchBreakpoints,\n  FlexGap,\n  Balance,\n  Pool,\n  useTooltip,\n  TooltipText,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedLockedVaultUser, VaultKey } from 'state/types'\nimport { MAX_LOCK_DURATION } from 'config/constants/pools'\nimport { getVaultPosition, VaultPosition, isLocked } from 'utils/cakePool'\nimport { Token } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport { getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\n\nimport { VaultRoiCalculatorModal } from '../../Vault/VaultRoiCalculatorModal'\nimport LockedAprTooltipContent from '../../LockedPool/Common/LockedAprTooltipContent'\n\nconst AprLabelContainer = styled(Flex)`\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\ninterface AprCellProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst AutoAprCell: React.FC<React.PropsWithChildren<AprCellProps>> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const { userData } = useVaultPoolByKey(pool.vaultKey)\n\n  const vaultPosition = getVaultPosition(userData)\n  const isLock = isLocked(userData)\n\n  const { flexibleApy, lockedApy } = useVaultApy({\n    duration:\n      vaultPosition > VaultPosition.Flexible\n        ? +(userData as DeserializedLockedVaultUser).lockEndTime -\n          +(userData as DeserializedLockedVaultUser).lockStartTime\n        : MAX_LOCK_DURATION,\n  })\n\n  const [onPresentFlexibleApyModal] = useModal(<VaultRoiCalculatorModal pool={pool} />)\n  const [onPresentLockedApyModal] = useModal(\n    <VaultRoiCalculatorModal pool={pool} initialView={1} />,\n    true,\n    true,\n    pool.vaultKey === VaultKey.CakeVault ? 'LockedVaultRoiCalculatorModal' : 'FlexibleSideVaultRoiCalculatorModal',\n  )\n\n  const boostedYieldAmount = useMemo(() => {\n    return isLock ? getFullDisplayBalance(userData?.cakeAtLastUserAction, 18, 5) : 0\n  }, [isLock, userData?.cakeAtLastUserAction])\n\n  const tooltipContent = <LockedAprTooltipContent boostedYieldAmount={boostedYieldAmount} />\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  if (pool.vaultKey === VaultKey.CakeVault && vaultPosition === VaultPosition.None) {\n    return (\n      <>\n        <Pool.BaseCell role=\"cell\" flex={['1 0 50px', '4.5', '1 0 120px', null, '2 0 100px']}>\n          <Pool.CellContent>\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n              {t('Flexible APY')}\n            </Text>\n            {flexibleApy ? (\n              <AprLabelContainer alignItems=\"center\" justifyContent=\"flex-start\">\n                <Balance\n                  fontSize={['14px', '14px', '16px']}\n                  value={parseFloat(flexibleApy)}\n                  decimals={2}\n                  unit=\"%\"\n                  fontWeight={[600, 400]}\n                />\n                {!isMobile && (\n                  <Button\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onPresentFlexibleApyModal()\n                    }}\n                    variant=\"text\"\n                    width=\"20px\"\n                    height=\"20px\"\n                    padding=\"0px\"\n                    marginLeft=\"4px\"\n                  >\n                    <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n                  </Button>\n                )}\n              </AprLabelContainer>\n            ) : (\n              <Skeleton width=\"80px\" height=\"16px\" />\n            )}\n          </Pool.CellContent>\n        </Pool.BaseCell>\n        <Pool.BaseCell role=\"cell\" flex={['1 0 50px', '1 0 50px', '2 0 100px', null, '1 0 120px']}>\n          <Pool.CellContent>\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n              {t('Locked APR')}\n            </Text>\n            {lockedApy ? (\n              <AprLabelContainer alignItems=\"center\" justifyContent=\"flex-start\">\n                <FlexGap gap=\"4px\" flexWrap=\"wrap\">\n                  <Text fontSize={['14px', '14px', '16px']} style={{ whiteSpace: 'nowrap' }} fontWeight={[500, 400]}>\n                    {t('Up to')}\n                  </Text>\n                  <Balance\n                    fontSize={['14px', '14px', '16px']}\n                    value={parseFloat(lockedApy)}\n                    decimals={2}\n                    unit=\"%\"\n                    fontWeight={[600, 400]}\n                  />\n                  {!isMobile && (\n                    <Button\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        onPresentLockedApyModal()\n                      }}\n                      variant=\"text\"\n                      width=\"20px\"\n                      height=\"20px\"\n                      padding=\"0px\"\n                      marginLeft=\"4px\"\n                    >\n                      <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n                    </Button>\n                  )}\n                </FlexGap>\n              </AprLabelContainer>\n            ) : (\n              <Skeleton width=\"80px\" height=\"16px\" />\n            )}\n          </Pool.CellContent>\n        </Pool.BaseCell>\n      </>\n    )\n  }\n\n  return (\n    <Pool.BaseCell role=\"cell\" flex={['1 0 50px', '1 0 50px', '2 0 100px', '2 0 100px', '1 0 120px']}>\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isLock ? t('APR') : t('APY')}\n        </Text>\n        {flexibleApy ? (\n          <AprLabelContainer alignItems=\"center\" justifyContent=\"flex-start\">\n            {isLock ? (\n              <>\n                {tooltipVisible && tooltip}\n                <TooltipText\n                  ref={targetRef}\n                  onClick={(e) => {\n                    e.stopPropagation()\n                  }}\n                >\n                  <Balance\n                    fontSize=\"16px\"\n                    value={vaultPosition > VaultPosition.Flexible ? parseFloat(lockedApy) : parseFloat(flexibleApy)}\n                    decimals={2}\n                    unit=\"%\"\n                  />\n                </TooltipText>\n              </>\n            ) : (\n              <Balance\n                fontSize=\"16px\"\n                value={vaultPosition > VaultPosition.Flexible ? parseFloat(lockedApy) : parseFloat(flexibleApy)}\n                decimals={2}\n                unit=\"%\"\n              />\n            )}\n            <Button\n              onClick={(e) => {\n                e.stopPropagation()\n                return vaultPosition > VaultPosition.Flexible ? onPresentLockedApyModal() : onPresentFlexibleApyModal()\n              }}\n              variant=\"text\"\n              width=\"20px\"\n              height=\"20px\"\n              padding=\"0px\"\n              marginLeft=\"4px\"\n            >\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n            </Button>\n          </AprLabelContainer>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </Pool.CellContent>\n    </Pool.BaseCell>\n  )\n}\n\nexport default AutoAprCell\n","import styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useMatchBreakpoints, Balance, Pool } from '@pancakeswap/uikit'\nimport { VaultKey } from 'state/types'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { Token } from '@pancakeswap/sdk'\nimport AutoEarningsBreakdown from '../../AutoEarningsBreakdown'\n\ninterface AutoEarningsCellProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst AutoEarningsCell: React.FC<React.PropsWithChildren<AutoEarningsCellProps>> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { earningTokenPrice, vaultKey } = pool\n\n  const vaultData = useVaultPoolByKey(vaultKey)\n  const {\n    userData: { userShares, cakeAtLastUserAction, isLoading },\n    pricePerFullShare,\n  } = vaultData\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n    vaultKey === VaultKey.CakeVault\n      ? (vaultData as Pool.DeserializedPoolLockedVault<Token>).userData.currentPerformanceFee\n          .plus((vaultData as Pool.DeserializedPoolLockedVault<Token>).userData.currentOverdueFee)\n          .plus((vaultData as Pool.DeserializedPoolLockedVault<Token>).userData.userBoostedShare)\n      : null,\n  )\n\n  const labelText = t('Recent CAKE profit')\n  const earningTokenBalance = autoCakeToDisplay\n  const hasEarnings = hasAutoEarnings\n  const earningTokenDollarBalance = autoUsdToDisplay\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<AutoEarningsBreakdown pool={pool} account={account} />, {\n    placement: 'bottom',\n  })\n\n  if (vaultKey === VaultKey.CakeVault && !userShares.gt(0)) {\n    return null\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {isLoading && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\">\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {hasEarnings && !isMobile && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoEarningsCell\n","import { Text, TokenPairImage as UITokenPairImage, useMatchBreakpoints, Skeleton, Pool } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { memo, useMemo } from 'react'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { VaultKey, DeserializedLockedCakeVault } from 'state/types'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getVaultPosition, VaultPosition, VaultPositionParams } from 'utils/cakePool'\nimport { Token } from '@pancakeswap/sdk'\n\ninterface NameCellProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<React.PropsWithChildren<NameCellProps>> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, vaultKey, totalStaked } = pool\n  const vaultData = useVaultPoolByKey(pool.vaultKey)\n  const {\n    userData: { userShares },\n    totalCakeInVault,\n  } = vaultData\n  const hasVaultShares = userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n\n  const showStakedTag = vaultKey ? hasVaultShares : isStaked\n\n  let title: React.ReactNode = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle: React.ReactNode = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isMobile)\n\n  if (vaultKey) {\n    title = vaultPoolConfig[vaultKey].name\n    subtitle = vaultPoolConfig[vaultKey].description\n  }\n\n  const isLoaded = useMemo(() => {\n    if (pool.vaultKey) {\n      return totalCakeInVault && totalCakeInVault.gte(0)\n    }\n    return totalStaked && totalStaked.gte(0)\n  }, [pool.vaultKey, totalCakeInVault, totalStaked])\n\n  return (\n    <StyledCell role=\"cell\">\n      {isLoaded ? (\n        <>\n          {vaultKey ? (\n            <UITokenPairImage {...vaultPoolConfig[vaultKey].tokenImage} mr=\"8px\" width={40} height={40} />\n          ) : (\n            <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n          )}\n          <Pool.CellContent>\n            {showStakedTag &&\n              (vaultKey === VaultKey.CakeVault ? (\n                <StakedCakeStatus\n                  userShares={userShares}\n                  locked={(vaultData as DeserializedLockedCakeVault).userData.locked}\n                  lockEndTime={(vaultData as DeserializedLockedCakeVault).userData.lockEndTime}\n                />\n              ) : (\n                <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n                  {t('Staked')}\n                </Text>\n              ))}\n            <Text bold={!isMobile} small={isMobile}>\n              {title}\n            </Text>\n            {showSubtitle && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                {subtitle}\n              </Text>\n            )}\n          </Pool.CellContent>\n        </>\n      ) : (\n        <>\n          <Skeleton mr=\"8px\" width={36} height={36} variant=\"circle\" />\n          <Pool.CellContent>\n            <Skeleton width={30} height={12} mb=\"4px\" />\n            <Skeleton width={65} height={12} />\n          </Pool.CellContent>\n        </>\n      )}\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n\nconst stakedStatus = {\n  [VaultPosition.None]: { text: '', color: 'secondary' },\n  [VaultPosition.Locked]: { text: 'Locked', color: 'secondary' },\n  [VaultPosition.LockedEnd]: { text: 'Locked End', color: 'secondary' },\n  [VaultPosition.AfterBurning]: { text: 'After Burning', color: 'failure' },\n  [VaultPosition.Flexible]: { text: 'Flexible', color: 'success' },\n}\n\nexport const StakedCakeStatus: React.FC<React.PropsWithChildren<VaultPositionParams>> = memo(\n  ({ userShares, locked, lockEndTime }) => {\n    const vaultPosition = getVaultPosition({ userShares, locked, lockEndTime })\n    const { t } = useTranslation()\n    return (\n      <Text fontSize=\"12px\" bold color={stakedStatus[vaultPosition].color} textTransform=\"uppercase\">\n        {t(stakedStatus[vaultPosition].text)}\n      </Text>\n    )\n  },\n)\n","import { Box, Message, MessageText, NextLinkFromReactRouter, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Token } from '@pancakeswap/sdk'\nimport { useProfileRequirement } from '../hooks/useProfileRequirement'\n\nexport function ProfileRequirementWarning({\n  profileRequirement,\n}: {\n  profileRequirement: Pool.DeserializedPool<Token>['profileRequirement']\n}) {\n  const { t } = useTranslation()\n  const { notMeetRequired, notMeetThreshold } = useProfileRequirement(profileRequirement)\n  return (\n    <Message variant=\"warning\">\n      <Box>\n        <MessageText>\n          {notMeetRequired &&\n            notMeetThreshold &&\n            t('This pool requires active Pancake Profile and %amount% profile points.', {\n              amount: profileRequirement.thresholdPoints.toNumber().toLocaleString(),\n            })}\n          {notMeetRequired && !notMeetThreshold && t('This pool requires active Pancake Profile')}\n          {!notMeetRequired &&\n            notMeetThreshold &&\n            t('This pool requires %amount% profile points.', {\n              amount: profileRequirement.thresholdPoints.toNumber().toLocaleString(),\n            })}\n        </MessageText>\n        {(notMeetRequired || notMeetThreshold) && (\n          <MessageText bold>\n            {notMeetRequired ? (\n              <NextLinkFromReactRouter style={{ textDecoration: 'underline' }} to=\"/create-profile\">\n                {t('Create Profile')} »\n              </NextLinkFromReactRouter>\n            ) : (\n              <NextLinkFromReactRouter style={{ textDecoration: 'underline' }} to=\"/profile\">\n                {t('Go to Profile')} »\n              </NextLinkFromReactRouter>\n            )}\n          </MessageText>\n        )}\n      </Box>\n    </Message>\n  )\n}\n","import { useProfile } from 'state/profile/hooks'\nimport { Pool } from '@pancakeswap/uikit'\nimport { useMemo } from 'react'\nimport { Token } from '@pancakeswap/sdk'\n\nexport function useProfileRequirement(profileRequirement: Pool.DeserializedPool<Token>['profileRequirement']) {\n  const { profile, hasActiveProfile } = useProfile()\n\n  const notMeetRequired = useMemo(\n    () => profileRequirement && profileRequirement.required && !hasActiveProfile,\n    [profileRequirement, hasActiveProfile],\n  )\n  const notMeetThreshold = useMemo(\n    () =>\n      profileRequirement &&\n      profileRequirement.thresholdPoints.gt(0) &&\n      profileRequirement.thresholdPoints.gt(profile?.points ?? 0),\n    [profileRequirement, profile],\n  )\n\n  return {\n    notMeetRequired,\n    notMeetThreshold,\n  }\n}\n"],"names":["options","gasLimit","DEFAULT_GAS_LIMIT","harvestPool","_async_to_generator","Z","sousChefContract","gasPrice","deposit","_object_spread_props","_object_spread","harvestPoolBnb","value","BIG_ZERO","hooks_useHarvestPool","sousId","isUsingBnb","useSousChef","useGasPrice","onReward","useCallback","Modals_CollectModal","_param","earningTokenSymbol","isBnbPool","onDismiss","rest","t","useTranslation","toastSuccess","useToast","address","useAccount","dispatch","useAppDispatch","useCatchTxError","fetchWithCatchTxError","loading","useHarvestPool","handleHarvestConfirm","receipt","_state","sent","status","concat","jsx_runtime","jsx","ToastDescriptionWithTx","txHash","transactionHash","symbol","updateUserStakedBalance","account","updateUserPendingReward","updateUserBalance","Pool","pendingTx","sousStake","amount","decimals","BigNumber","times","getFullDecimalMultiplier","toString","sousStakeBnb","DEFAULT_TOKEN_DECIMAL","hooks_useStakePool","onStake","sousUnstake","units","parseUnits","withdraw","hooks_useUnstakePool","enableEmergencyWithdraw","onUnstake","emergencyWithdraw","Modals_StakeModal","param","pool","isRemovingStake","stakingTokenBalance","stakingTokenPrice","earningToken","stakingToken","earningTokenPrice","apr","userData","stakingLimit","usePool","useState","setAmount","useUnstakePool","useStakePool","stakingTokenContract","useERC20","useApprovePool","handleApprove","onDone","handleConfirmClick","stakeAmount","needEnable","useMemo","getDecimalAmount","gt","singlePool","allowance","handleEnableApprove","updateUserAllowance","stakingTokenDecimals","stakingTokenSymbol","stakingTokenAddress","userDataStakedBalance","stakedBalance","userDataStakingTokenBalance","enablePendingTx","Harvest","poolCategory","userDataLoaded","earnings","pendingReward","earningTokenBalance","getBalanceNumber","earningTokenDollarBalance","multipliedBy","hasEarnings","fullBalance","getFullDisplayBalance","formattedBalance","formatNumber","PoolCategory","onPresentCollect","useModal","CollectModal","earningsDollarValue","actionTitle","jsxs","Fragment","Text","fontSize","bold","color","as","textTransform","ActionContainer","ActionTitles","ActionContent","Flex","flex","flexDirection","alignSelf","Balance","lineHeight","display","prefix","unit","Heading","Button","disabled","onClick","Skeleton","width","height","marginTop","IconButtonWrapper","styled","Stake","_vaultData_userData","_vaultData_userData1","_vaultData_userData2","_vaultData_userData_lockStartTime","_vaultData_userData_lockEndTime","_vaultData_userData_burnStartTime","isFinished","vaultKey","profileRequirement","isMobile","useMatchBreakpoints","useCheckVaultApprovalStatus","isVaultApproved","setLastUpdated","useVaultApprove","isNotVaultAndHasStake","stakedTokenBalance","stakedTokenDollarBalance","vaultData","useVaultPoolByKey","_vaultData_userData3","userShares","balance","cakeAsBigNumber","cakeAsNumberBalance","useUserDataInVaultPresenter","lockStartTime","VaultKey","lockEndTime","burnStartTime","lockEndDate","remainingTime","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","needsApproval","onPresentTokenRequired","NotEnoughTokensModal","tokenSymbol","onPresentStake","StakeModal","onPresentVaultStake","VaultStakeModal","stakingMax","onPresentUnstake","onPresentVaultUnstake","openPresentLockedStakeModal","LockedStakedModal","currentBalance","useProfileRequirement","notMeetRequired","notMeetThreshold","useTooltip","placement","targetRef","tooltip","tooltipVisible","tooltipContentOfBurn","reachStakingLimit","gte","ConnectWalletButton","ProfileRequirementWarning","pendingVaultTx","pendingPoolTx","handleVaultApprove","handlePoolApprove","variant","vaultPosition","getVaultPosition","mt","locked","Box","position","SkeletonV2","isDataReady","Number","isFinite","wrapperProps","skeletonTop","VaultPosition","AddCakeButton","currentLockedAmount","ml","tagTooltipVisibleOfBurn","tagTooltipOfBurn","span","ref","tagTargetRefOfBurn","HelpIcon","date","ExtendButton","IconButton","mr","MinusIcon","AddIcon","isUndefinedOrNull","currentOverdueFee","BurningCountDown","mb","justifyContent","includes","AfterLockedActions","isInline","ConvertToLock","currentStakedAmount","VaultStakeButtonGroup","onFlexibleClick","onLockedClick","AutoHarvest","cakeAtLastUserAction","pricePerFullShare","getCakeVaultEarnings","currentPerformanceFee","plus","userBoostedShare","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","secondDuration","weekDuration","boostFactor","useVaultApy","duration","RowActionContainer","BalanceWithLoading","alignItems","UnstakingFeeCountdownRow","isTableVariant","minWidth","ActionPanel_CakeVaultApr","MAX_LOCK_DURATION","flexibleApy","lockedApy","onPresentFlexibleApyModal","VaultRoiCalculatorModal","onPresentLockedApyModal","initialView","marginX","textAlign","parseFloat","fontWeight","e","stopPropagation","padding","marginLeft","CalculateIcon","style","whiteSpace","expandAnimation","keyframes","collapseAnimation","StyledActionPanel","expanded","css","theme","colors","dropdown","mediaQueries","lg","sm","isAutoVault","hasBalance","InfoSection","YieldBoostDurationRow","YieldBoostRow","LockDurationRow","ActionPanel_ActionPanel","isLocked","poolStakingTokenBalance","PoolStatsInfo","showTotalStaked","alignLinksToRight","PoolTypeTag","tagTargetRef","CakeVaultApr","VaultPositionTagWithLabel","input","xl","defaultProps","__webpack_exports__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","role","Apr","showIcon","AprLabelContainer","isLock","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","boostedYieldAmount","tooltipContent","LockedAprTooltipContent","FlexGap","gap","flexWrap","TooltipText","StyledCell","withConfig","HelpIconWrapper","isLoading","labelText","AutoEarningsBreakdown","_obj","totalStaked","totalCakeInVault","hasVaultShares","isStaked","title","subtitle","vaultPoolConfig","name","description","isLoaded","UITokenPairImage","tokenImage","TokenPairImage","primaryToken","secondaryToken","showStakedTag","StakedCakeStatus","small","showSubtitle","stakedStatus","_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_19__","text","memo","Message","MessageText","thresholdPoints","toNumber","toLocaleString","NextLinkFromReactRouter","textDecoration","to","profile","useProfile","hasActiveProfile","required","points"],"sourceRoot":""}