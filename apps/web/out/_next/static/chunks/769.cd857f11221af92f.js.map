{"version":3,"file":"static/chunks/769.cd857f11221af92f.js","mappings":"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","sources":["webpack://_N_E/./src/components/ApproveConfirmButtons.tsx","webpack://_N_E/./src/hooks/useCakeEnable.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/ExtendEnable.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n  useMinWidth?: boolean\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)<{ useMinWidth: boolean }>`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    ${({ useMinWidth }) =>\n      useMinWidth &&\n      `  \n    min-width: 160px;\n  `}\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<React.PropsWithChildren<ApproveConfirmButtonsProps>> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n  useMinWidth = true,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n            useMinWidth={useMinWidth}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n            useMinWidth={useMinWidth}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import { useState, useCallback, useMemo, useEffect } from 'react'\nimport { useIsTransactionPending } from 'state/transactions/hooks'\nimport { getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance } from 'state/pools'\nimport { ChainId, Native } from '@pancakeswap/sdk'\nimport { CAKE } from '@pancakeswap/tokens'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { useTradeExactOut } from 'hooks/Trades'\nimport { useSwapCallback } from 'hooks/useSwapCallback'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useSwapCallArguments } from 'hooks/useSwapCallArguments'\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'config/constants'\nimport BigNumber from 'bignumber.js'\n\nexport const useCakeEnable = (enableAmount: BigNumber) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const [pendingEnableTx, setPendingEnableTx] = useState(false)\n  const [transactionHash, setTransactionHash] = useState<string>()\n  const isTransactionPending = useIsTransactionPending(transactionHash)\n  const swapAmount = useMemo(() => getFullDisplayBalance(enableAmount), [enableAmount])\n\n  const parsedAmount = tryParseAmount(swapAmount, CAKE[chainId])\n\n  const trade = useTradeExactOut(Native.onChain(ChainId.BSC), parsedAmount)\n\n  const swapCalls = useSwapCallArguments(trade, INITIAL_ALLOWED_SLIPPAGE, null)\n\n  const { callback: swapCallback } = useSwapCallback(trade, INITIAL_ALLOWED_SLIPPAGE, null, swapCalls)\n\n  useEffect(() => {\n    if (pendingEnableTx && transactionHash && !isTransactionPending) {\n      dispatch(updateUserBalance({ sousId: 0, account }))\n      setPendingEnableTx(isTransactionPending)\n    }\n  }, [account, dispatch, transactionHash, pendingEnableTx, isTransactionPending])\n\n  const handleEnable = useCallback(() => {\n    if (!swapCallback) {\n      return\n    }\n    setPendingEnableTx(true)\n    swapCallback()\n      .then((hash) => {\n        setTransactionHash(hash)\n      })\n      .catch(() => {\n        setPendingEnableTx(false)\n      })\n  }, [swapCallback])\n\n  return { handleEnable, pendingEnableTx }\n}\n","import { useState, useEffect } from 'react'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport { useCakeEnable } from 'hooks/useCakeEnable'\nimport { ENABLE_EXTEND_LOCK_AMOUNT } from '../../../helpers'\n\ninterface ExtendEnableProps {\n  hasEnoughCake: boolean\n  handleConfirmClick: () => void\n  pendingConfirmTx: boolean\n  isValidAmount: boolean\n  isValidDuration: boolean\n}\n\nconst ExtendEnable: React.FC<React.PropsWithChildren<ExtendEnableProps>> = ({\n  hasEnoughCake,\n  handleConfirmClick,\n  pendingConfirmTx,\n  isValidAmount,\n  isValidDuration,\n}) => {\n  const { handleEnable, pendingEnableTx } = useCakeEnable(ENABLE_EXTEND_LOCK_AMOUNT)\n\n  const [pendingEnableTxWithBalance, setPendingEnableTxWithBalance] = useState(pendingEnableTx)\n\n  useEffect(() => {\n    if (pendingEnableTx) {\n      setPendingEnableTxWithBalance(true)\n    } else if (hasEnoughCake) {\n      setPendingEnableTxWithBalance(false)\n    }\n  }, [hasEnoughCake, pendingEnableTx])\n\n  return (\n    <ApproveConfirmButtons\n      isApproveDisabled={!(isValidAmount && isValidDuration) || hasEnoughCake}\n      isApproving={pendingEnableTxWithBalance}\n      isConfirmDisabled={!(isValidAmount && isValidDuration) || !hasEnoughCake}\n      isConfirming={pendingConfirmTx}\n      onApprove={handleEnable}\n      onConfirm={handleConfirmClick}\n      useMinWidth={false}\n    />\n  )\n}\n\nexport default ExtendEnable\n"],"names":["ButtonArrangement","ROW","SEQUENTIAL","StyledApproveConfirmButtonRow","styled","param","theme","mediaQueries","md","Button","UIKitButton","useMinWidth","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","AutoRenewIcon","spin","__webpack_exports__","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onApprove","onConfirm","buttonArrangement","_param_buttonArrangement","confirmLabel","confirmId","_param_useMinWidth","t","useTranslation","confirmButtonText","jsxs","Box","disabled","onClick","endIcon","undefined","isLoading","Flex","justifyContent","id","Fragment","useCakeEnable","enableAmount","useActiveWeb3React","account","chainId","dispatch","useAppDispatch","useState","pendingEnableTx","setPendingEnableTx","transactionHash","setTransactionHash","isTransactionPending","useIsTransactionPending","swapAmount","useMemo","getFullDisplayBalance","parsedAmount","tryParseAmount","CAKE","trade","useTradeExactOut","Native","ChainId","swapCalls","useSwapCallArguments","INITIAL_ALLOWED_SLIPPAGE","callback","useSwapCallback","useEffect","updateUserBalance","sousId","handleEnable","useCallback","swapCallback","then","hash","catch","hasEnoughCake","handleConfirmClick","pendingConfirmTx","isValidAmount","isValidDuration","ENABLE_EXTEND_LOCK_AMOUNT","pendingEnableTxWithBalance","setPendingEnableTxWithBalance","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","ApproveConfirmButtons"],"sourceRoot":""}