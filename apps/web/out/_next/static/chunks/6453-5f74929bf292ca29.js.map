{"version":3,"file":"static/chunks/6453-5f74929bf292ca29.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/date-fns/esm/startOfMinute/index.js","webpack://_N_E/../../node_modules/date-fns/esm/addWeeks/index.js","webpack://_N_E/../../node_modules/date-fns/esm/subWeeks/index.js","webpack://_N_E/./src/components/PositionCard/index.tsx","webpack://_N_E/./src/hooks/useTotalSupply.ts","webpack://_N_E/./src/state/burn/hooks.ts","webpack://_N_E/./src/state/mint/hooks.ts","webpack://_N_E/./src/state/swap/useLPApr.ts","webpack://_N_E/./src/views/Swap/StableSwap/hooks/useStableTradeExactIn.ts","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/hooks/useStableLPDerivedMintInfo.tsx","webpack://_N_E/./src/views/RemoveLiquidity/RemoveStableLiquidity/hooks/useStableDerivedBurnInfo.ts","webpack://_N_E/./src/views/Swap/StableSwap/hooks/useStableConfig.ts","webpack://_N_E/../../packages/uikit/src/components/Card/CardBody.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/Add.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/ChevronUp.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\n\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addWeeks from \"../addWeeks/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * const result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\n\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import { useState, useMemo, useContext } from 'react'\nimport { Currency, CurrencyAmount, JSBI, Pair, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n  TooltipText,\n  useTooltip,\n  NextLinkFromReactRouter,\n  Link,\n  AutoColumn,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport useBUSDPrice from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useAccount } from 'wagmi'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\nimport { useGetRemovedTokenAmounts } from 'views/RemoveLiquidity/RemoveStableLiquidity/hooks/useStableDerivedBurnInfo'\nimport useStableConfig, { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\n\nimport { useLPApr } from 'state/swap/useLPApr'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\n\nimport { LightCard } from '../Card'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { DoubleCurrencyLogo } from '../Logo'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport Dots from '../Loader/Dots'\nimport { formatAmount } from '../../utils/formatInfoNumbers'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n  currency0: Currency\n  currency1: Currency\n  token0Deposited: CurrencyAmount<Currency>\n  token1Deposited: CurrencyAmount<Currency>\n  totalUSDValue: number\n  userPoolBalance: CurrencyAmount<Currency>\n  poolTokenPercentage: Percent\n}\n\nconst useTokensDeposited = ({ pair, totalPoolTokens, userPoolBalance }) => {\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return [token0Deposited, token1Deposited]\n}\n\nconst useTotalUSDValue = ({ currency0, currency1, token0Deposited, token1Deposited }) => {\n  const token0Price = useBUSDPrice(currency0)\n  const token1Price = useBUSDPrice(currency1)\n\n  const token0USDValue =\n    token0Deposited && token0Price\n      ? multiplyPriceByAmount(token0Price, parseFloat(token0Deposited.toSignificant(6)))\n      : null\n  const token1USDValue =\n    token1Deposited && token1Price\n      ? multiplyPriceByAmount(token1Price, parseFloat(token1Deposited.toSignificant(6)))\n      : null\n  return token0USDValue && token1USDValue ? token0USDValue + token1USDValue : null\n}\n\nconst usePoolTokenPercentage = ({ userPoolBalance, totalPoolTokens }) => {\n  return !!userPoolBalance &&\n    !!totalPoolTokens &&\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n    ? new Percent(userPoolBalance.quotient, totalPoolTokens.quotient)\n    : undefined\n}\n\nconst withLPValuesFactory =\n  ({ useLPValuesHook, hookArgFn }) =>\n  (Component) =>\n  (props) => {\n    const { address: account } = useAccount()\n\n    const currency0 = props.showUnwrapped ? props.pair.token0 : unwrappedToken(props.pair.token0)\n    const currency1 = props.showUnwrapped ? props.pair.token1 : unwrappedToken(props.pair.token1)\n\n    const userPoolBalance = useTokenBalance(account ?? undefined, props.pair.liquidityToken)\n\n    const totalPoolTokens = useTotalSupply(props.pair.liquidityToken)\n\n    const poolTokenPercentage = usePoolTokenPercentage({ totalPoolTokens, userPoolBalance })\n\n    const args = useMemo(\n      () =>\n        hookArgFn({\n          userPoolBalance,\n          pair: props.pair,\n          totalPoolTokens,\n        }),\n      [userPoolBalance, props.pair, totalPoolTokens],\n    )\n\n    const [token0Deposited, token1Deposited] = useLPValuesHook(args)\n\n    const totalUSDValue = useTotalUSDValue({ currency0, currency1, token0Deposited, token1Deposited })\n\n    return (\n      <Component\n        {...props}\n        currency0={currency0}\n        currency1={currency1}\n        token0Deposited={token0Deposited}\n        token1Deposited={token1Deposited}\n        totalUSDValue={totalUSDValue}\n        userPoolBalance={userPoolBalance}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\nconst withLPValues = withLPValuesFactory({\n  useLPValuesHook: useTokensDeposited,\n  hookArgFn: ({ pair, userPoolBalance, totalPoolTokens }) => ({ pair, userPoolBalance, totalPoolTokens }),\n})\n\nconst withStableLPValues = withLPValuesFactory({\n  useLPValuesHook: useGetRemovedTokenAmounts,\n  hookArgFn: ({ userPoolBalance }) => ({\n    lpAmount: userPoolBalance?.quotient?.toString(),\n  }),\n})\n\nfunction MinimalPositionCardView({\n  pair,\n  currency0,\n  currency1,\n  token0Deposited,\n  token1Deposited,\n  totalUSDValue,\n  userPoolBalance,\n  poolTokenPercentage,\n}: PositionCardProps) {\n  const isStableLP = useContext(StableConfigContext)\n\n  const { t } = useTranslation()\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.quotient, BIG_INT_ZERO) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n                    <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                    {Number.isFinite(totalUSDValue) && (\n                      <Text small color=\"textSubtle\">{`(~${totalUSDValue.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })} USD)`}</Text>\n                    )}\n                  </Flex>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                {poolData && (\n                  <FixedHeightRow>\n                    <TooltipText ref={targetRef} color=\"textSubtle\" small>\n                      {t('LP reward APR')}:\n                    </TooltipText>\n                    {tooltipVisible && tooltip}\n                    <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n                  </FixedHeightRow>\n                )}\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share in Trading Pair')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                {isStableLP ? null : (\n                  <FixedHeightRow>\n                    <Text color=\"textSubtle\" small>\n                      {t('Pooled %asset%', { asset: currency0.symbol })}:\n                    </Text>\n                    {token0Deposited ? (\n                      <RowFixed>\n                        <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                      </RowFixed>\n                    ) : (\n                      '-'\n                    )}\n                  </FixedHeightRow>\n                )}\n                {isStableLP ? null : (\n                  <FixedHeightRow>\n                    <Text color=\"textSubtle\" small>\n                      {t('Pooled %asset%', { asset: currency1.symbol })}:\n                    </Text>\n                    {token1Deposited ? (\n                      <RowFixed>\n                        <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                      </RowFixed>\n                    ) : (\n                      '-'\n                    )}\n                  </FixedHeightRow>\n                )}\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        <LightCard>\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"pancake-icon\">\n              🥞\n            </span>{' '}\n            {isStableLP ? (\n              <>\n                {t(\n                  'By adding liquidity, you’ll earn 50% from the fees of all trades on this pair, proportional to your share in the trading pair. Fees are added to the pair, accrue in real time, and can be claimed by withdrawing your liquidity. For more information on Stableswap fees click',\n                )}\n                <Link\n                  style={{ display: 'inline' }}\n                  ml=\"4px\"\n                  external\n                  href=\"https://docs.pancakeswap.finance/products/stableswap#stableswap-fees\"\n                >\n                  {t('here.')}\n                </Link>\n              </>\n            ) : (\n              t(\n                \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share in the trading pair. Fees are added to the pair, accrue in real time and can be claimed by withdrawing your liquidity.\",\n              )\n            )}\n          </Text>\n        </LightCard>\n      )}\n    </>\n  )\n}\n\nfunction FullPositionCard({\n  pair,\n  currency0,\n  currency1,\n  token0Deposited,\n  token1Deposited,\n  totalUSDValue,\n  userPoolBalance,\n  poolTokenPercentage,\n  ...props\n}: PositionCardProps) {\n  const isStableLP = useContext(StableConfigContext)\n\n  const { t } = useTranslation()\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n  const [showMore, setShowMore] = useState(false)\n\n  return (\n    <Card {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>{t('Loading')}</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n            {isStableLP ? (\n              <Text color=\"textSubtle\" ml=\"4px\">\n                {' '}\n                - Stable\n              </Text>\n            ) : null}\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n          {Number.isFinite(totalUSDValue) && (\n            <Text small color=\"textSubtle\">{`(~${totalUSDValue.toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })} USD)`}</Text>\n          )}\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          {isStableLP ? null : (\n            <FixedHeightRow>\n              <RowFixed>\n                <CurrencyLogo size=\"20px\" currency={currency0} />\n                <Text color=\"textSubtle\" ml=\"4px\">\n                  {t('Pooled %asset%', { asset: currency0.symbol })}:\n                </Text>\n              </RowFixed>\n              {token0Deposited ? (\n                <RowFixed>\n                  <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n          )}\n\n          {isStableLP ? null : (\n            <FixedHeightRow>\n              <RowFixed>\n                <CurrencyLogo size=\"20px\" currency={currency1} />\n                <Text color=\"textSubtle\" ml=\"4px\">\n                  {t('Pooled %asset%', { asset: currency1.symbol })}:\n                </Text>\n              </RowFixed>\n              {token1Deposited ? (\n                <RowFixed>\n                  <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n          )}\n          {poolData && (\n            <FixedHeightRow>\n              <RowFixed>\n                <TooltipText ref={targetRef} color=\"textSubtle\">\n                  {t('LP reward APR')}:\n                </TooltipText>\n                {tooltipVisible && tooltip}\n              </RowFixed>\n              <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n            </FixedHeightRow>\n          )}\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">{t('Share in Trading Pair')}</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.quotient, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={NextLinkFromReactRouter}\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}${isStableLP ? '?stable=1' : ''}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                {t('Remove')}\n              </Button>\n              <Button\n                as={NextLinkFromReactRouter}\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}?step=1`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                {t('Add liquidity instead')}\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n\nexport const MinimalPositionCard = withLPValues(MinimalPositionCardView)\n\nexport const StableFullPositionCardContainer = withStableLPValues(FullPositionCard)\n\nexport const StableFullPositionCard = (props) => {\n  const stableConfig = useStableConfig({\n    tokenA: props.pair?.token0,\n    tokenB: props.pair?.token1,\n  })\n\n  if (!stableConfig.stableSwapConfig) return null\n\n  return (\n    <StableConfigContext.Provider value={stableConfig}>\n      <StableFullPositionCardContainer {...props} />\n    </StableConfigContext.Provider>\n  )\n}\n\nexport default withLPValues(FullPositionCard)\n","import { useMemo } from 'react'\nimport { Currency, CurrencyAmount, Token } from '@pancakeswap/sdk'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nexport function useTotalSupply(token?: Currency): CurrencyAmount<Token> | undefined {\n  const contract = useTokenContract(token?.isToken ? token.address : undefined, false)\n\n  const totalSupplyStr: string | undefined = useSingleCallResult(contract, 'totalSupply')?.result?.[0]?.toString()\n\n  return useMemo(\n    () => (token?.isToken && totalSupplyStr ? CurrencyAmount.fromRawAmount(token, totalSupplyStr) : undefined),\n    [token, totalSupplyStr],\n  )\n}\n\nexport default useTotalSupply\n","import { Currency, CurrencyAmount, JSBI, Pair, Percent, Token } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { useTranslation } from '@pancakeswap/localization'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { AppState, useAppDispatch } from '../index'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  removalCheckedA?: boolean,\n  removalCheckedB?: boolean,\n  zapMode?: boolean,\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  }\n  error?: string\n  tokenToReceive?: string\n  estimateZapOutAmount?: CurrencyAmount<Token>\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  const { t } = useTranslation()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(\n    account ?? undefined,\n    useMemo(() => [pair?.liquidityToken], [pair?.liquidityToken]),\n  )\n  const userLiquidity: undefined | CurrencyAmount<Token> = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).quotient)\n      : undefined\n\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: CurrencyAmount<Token>; [Field.CURRENCY_B]?: CurrencyAmount<Token> } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.quotient, userLiquidity.quotient)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else if (tokens[independentField]) {\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n    const liquidityValue = liquidityValues[independentField]\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n      percentToRemove = new Percent(independentAmount.quotient, liquidityValue.quotient)\n    }\n  }\n\n  const liquidityToRemove =\n    userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n      ? CurrencyAmount.fromRawAmount(userLiquidity.currency, percentToRemove.multiply(userLiquidity.quotient).quotient)\n      : undefined\n\n  const tokenToReceive =\n    removalCheckedA && removalCheckedB\n      ? undefined\n      : removalCheckedA\n      ? tokens[Field.CURRENCY_A]?.address\n      : tokens[Field.CURRENCY_B]?.address\n\n  const amountA =\n    tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n      ? CurrencyAmount.fromRawAmount(tokenA, percentToRemove.multiply(liquidityValueA.quotient).quotient)\n      : undefined\n\n  const amountB =\n    tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n      ? CurrencyAmount.fromRawAmount(tokenB, percentToRemove.multiply(liquidityValueB.quotient).quotient)\n      : undefined\n\n  const tokenAmountToZap = removalCheckedA && removalCheckedB ? undefined : removalCheckedA ? amountB : amountA\n\n  const estimateZapOutAmount = useMemo(() => {\n    if (pair && tokenAmountToZap) {\n      try {\n        return pair.getOutputAmount(tokenAmountToZap)[0]\n      } catch (error) {\n        return undefined\n      }\n    }\n    return undefined\n  }, [pair, tokenAmountToZap])\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Token>\n    [Field.CURRENCY_B]?: CurrencyAmount<Token>\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: liquidityToRemove,\n    [Field.CURRENCY_A]: !zapMode\n      ? amountA\n      : amountA && removalCheckedA && !removalCheckedB && estimateZapOutAmount\n      ? CurrencyAmount.fromRawAmount(\n          tokenA,\n          JSBI.add(percentToRemove.multiply(liquidityValueA.quotient).quotient, estimateZapOutAmount.quotient),\n        )\n      : !removalCheckedA\n      ? undefined\n      : amountA,\n    [Field.CURRENCY_B]: !zapMode\n      ? amountB\n      : amountB && removalCheckedB && !removalCheckedA && estimateZapOutAmount\n      ? CurrencyAmount.fromRawAmount(\n          tokenB,\n          JSBI.add(percentToRemove.multiply(liquidityValueB.quotient).quotient, estimateZapOutAmount.quotient),\n        )\n      : !removalCheckedB\n      ? undefined\n      : amountB,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (\n    !parsedAmounts[Field.LIQUIDITY] ||\n    (removalCheckedA && !parsedAmounts[Field.CURRENCY_A]) ||\n    (removalCheckedB && !parsedAmounts[Field.CURRENCY_B])\n  ) {\n    error = error ?? t('Enter an amount')\n  }\n\n  return { pair, parsedAmounts, error, tokenToReceive, estimateZapOutAmount }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onUserInput,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatUnits } from '@ethersproject/units'\nimport { useTranslation } from '@pancakeswap/localization'\nimport {\n  computePriceImpact,\n  Currency,\n  CurrencyAmount,\n  JSBI,\n  MINIMUM_LIQUIDITY,\n  Pair,\n  Percent,\n  Price,\n  Token,\n} from '@pancakeswap/sdk'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\nimport { FetchStatus } from 'config/constants/types'\nimport { useTradeExactIn } from 'hooks/Trades'\nimport { useZapContract } from 'hooks/useContract'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { PairState, usePair } from 'hooks/usePairs'\nimport { usePreviousValue } from '@pancakeswap/hooks'\nimport { useSWRContract } from 'hooks/useSWRContract'\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useGasPrice } from 'state/user/hooks'\nimport { warningSeverity } from 'utils/exchange'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { useAccount } from 'wagmi'\nimport { AppState, useAppDispatch } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  price?: Price<Currency, Currency>\n  noLiquidity?: boolean\n  liquidityMinted?: CurrencyAmount<Token>\n  poolTokenPercentage?: Percent\n  error?: string\n  addError?: string\n} {\n  const { address: account } = useAccount()\n\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(totalSupply && JSBI.equal(totalSupply.quotient, BIG_INT_ZERO)) ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.quotient, BIG_INT_ZERO) &&\n        JSBI.equal(pair.reserve1.quotient, BIG_INT_ZERO),\n    )\n\n  // balances\n  const balances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]], [currencies]),\n  )\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseAmount(\n    typedValue,\n    currencies[independentField],\n  )\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = independentAmount?.wrapped\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency?.isNative\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\n          : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(\n          currencyAAmount.currency,\n          currencyBAmount.currency,\n          currencyAAmount.quotient,\n          currencyBAmount.quotient,\n        )\n      }\n      return undefined\n    }\n    const wrappedCurrencyA = currencyA?.wrapped\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n  }, [currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [currencyAAmount?.wrapped, currencyBAmount?.wrapped]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      try {\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    }\n    return undefined\n  }, [parsedAmounts, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  let addError: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('Choose a valid pair')\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (\n    currencyAAmount &&\n    currencyBAmount &&\n    currencyBalances?.[Field.CURRENCY_A]?.equalTo(0) &&\n    currencyBalances?.[Field.CURRENCY_B]?.equalTo(0)\n  ) {\n    error = error ?? t('No token balance')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    addError = t('Enter an amount')\n  }\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_A]?.symbol })\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_B]?.symbol })\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n  }\n}\n\nconst MAX_ZAP_REVERSE_RATIO = JSBI.BigInt(50)\n\nconst getMaxZapSwapAmount = (pair: Pair, tokenZap: Token) =>\n  pair &&\n  tokenZap &&\n  pair.involvesToken(tokenZap) &&\n  JSBI.divide(pair.reserveOf(tokenZap).quotient, MAX_ZAP_REVERSE_RATIO)\n\n// simplify version to guess the zap in amount by swapInAmount from max zap reserves ratio 50\nfunction guessMaxZappableAmount(\n  pair: Pair,\n  token0AmountIn: CurrencyAmount<Token>,\n  token1AmountIn?: CurrencyAmount<Token>,\n) {\n  if (!token1AmountIn) {\n    if (token0AmountIn) {\n      const maxSwapAmount = getMaxZapSwapAmount(pair, token0AmountIn.currency)\n      return maxSwapAmount && JSBI.multiply(maxSwapAmount, JSBI.BigInt(2))\n    }\n    return undefined\n  }\n  if (token0AmountIn && token1AmountIn) {\n    const maxSwapAmount = getMaxZapSwapAmount(pair, token0AmountIn.currency)\n\n    if (!maxSwapAmount) {\n      return undefined\n    }\n\n    const [_, newPair] = pair.getInputAmount(CurrencyAmount.fromRawAmount(token0AmountIn.currency, maxSwapAmount))\n\n    return JSBI.add(\n      maxSwapAmount,\n      JSBI.divide(\n        JSBI.multiply(token1AmountIn.quotient, newPair.reserveOf(token0AmountIn.currency).quotient),\n        newPair.reserveOf(token1AmountIn.currency).quotient,\n      ),\n    )\n  }\n\n  return undefined\n}\n\n// compare the gas is larger than swap in amount\nfunction useZapInGasOverhead(inputAmount: CurrencyAmount<Currency> | undefined) {\n  const gasPrice = useGasPrice()\n  const native = useNativeCurrency()\n  const requiredGas = formatUnits(gasPrice ? BigNumber.from(gasPrice).mul('500000') : '0')\n  const requiredGasAsCurrencyAmount = inputAmount ? tryParseAmount(requiredGas, native) : undefined\n  const inputIsBNB = inputAmount?.currency.symbol === 'BNB'\n\n  const gasCostInInputTokens = useTradeExactIn(requiredGasAsCurrencyAmount, inputIsBNB ? null : inputAmount?.currency)\n\n  return gasCostInInputTokens?.outputAmount?.greaterThan(inputAmount?.quotient) ?? false\n}\n\nexport function useZapIn({\n  canZap,\n  currencyA,\n  currencyB,\n  pair,\n  currencyBalances,\n  zapTokenCheckedA,\n  zapTokenCheckedB,\n  maxAmounts,\n}: {\n  canZap?: boolean\n  currencyA?: Currency\n  currencyB?: Currency\n  pair: Pair\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  zapTokenCheckedA?: boolean\n  zapTokenCheckedB?: boolean\n  maxAmounts?: { [field in Field]?: CurrencyAmount<Currency> }\n}) {\n  const { t } = useTranslation()\n  const [inputBlurOnce, setInputBlurOnce] = useState(false)\n  const previousBlur = usePreviousValue(inputBlurOnce)\n  const [triedAutoReduce, setTriedAutoReduce] = useState(false)\n  const { independentField, typedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseAmount(\n    typedValue,\n    currencies[independentField],\n  )\n\n  const _dependentAmount = useMemo(() => {\n    if (!canZap) {\n      return undefined\n    }\n    if (independentAmount) {\n      const wrappedIndependentAmount = independentAmount?.wrapped\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency.isNative\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\n          : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [canZap, currencyA, currencyB, dependentField, independentAmount, pair])\n\n  const isDependentAmountGreaterThanMaxAmount =\n    maxAmounts[dependentField] && _dependentAmount && _dependentAmount?.greaterThan(maxAmounts[dependentField])\n\n  // amounts\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\n    return isDependentAmountGreaterThanMaxAmount ? maxAmounts[dependentField] : _dependentAmount\n  }, [isDependentAmountGreaterThanMaxAmount, maxAmounts, dependentField, _dependentAmount])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: !zapTokenCheckedA\n        ? undefined\n        : independentField === Field.CURRENCY_A\n        ? independentAmount\n        : dependentAmount,\n      [Field.CURRENCY_B]: !zapTokenCheckedB\n        ? undefined\n        : independentField === Field.CURRENCY_A\n        ? dependentAmount\n        : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField, zapTokenCheckedA, zapTokenCheckedB],\n  )\n\n  const wrappedParsedAmounts: { [field in Field]: CurrencyAmount<Token> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: parsedAmounts[Field.CURRENCY_A]?.wrapped,\n      [Field.CURRENCY_B]: parsedAmounts[Field.CURRENCY_B]?.wrapped,\n    }),\n    [parsedAmounts],\n  )\n\n  const zapContract = useZapContract()\n\n  const rebalancing =\n    !!zapTokenCheckedA && !!zapTokenCheckedB && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n\n  const singleTokenToZapField =\n    !rebalancing && zapTokenCheckedB && !!parsedAmounts[Field.CURRENCY_B] ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  const singleTokenToZapAmount = useMemo(\n    () => wrappedParsedAmounts[singleTokenToZapField],\n    [singleTokenToZapField, wrappedParsedAmounts],\n  )\n\n  const noNeedZap = useMemo(() => {\n    if (!rebalancing) {\n      return false\n    }\n    if (!wrappedParsedAmounts[independentField] || !wrappedParsedAmounts[dependentField]) {\n      return undefined\n    }\n\n    if (!isDependentAmountGreaterThanMaxAmount) {\n      return true\n    }\n\n    const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n\n    if (tokenA && tokenB && wrappedParsedAmounts[independentField] && pair) {\n      return wrappedParsedAmounts[dependentField].equalTo(\n        dependentField === Field.CURRENCY_B\n          ? pair.priceOf(tokenA).quote(wrappedParsedAmounts[independentField])\n          : pair.priceOf(tokenB).quote(wrappedParsedAmounts[independentField]),\n      )\n    }\n    return undefined\n  }, [\n    currencyA,\n    currencyB,\n    dependentField,\n    independentField,\n    isDependentAmountGreaterThanMaxAmount,\n    pair,\n    rebalancing,\n    wrappedParsedAmounts,\n  ])\n\n  const singleZapEstimate = useSWRContract(\n    canZap &&\n      !noNeedZap &&\n      zapContract &&\n      singleTokenToZapAmount &&\n      singleTokenToZapAmount?.currency &&\n      pair &&\n      !rebalancing && {\n        contract: zapContract,\n        methodName: 'estimateZapInSwap',\n        params: [\n          singleTokenToZapAmount.currency.address,\n          singleTokenToZapAmount.quotient.toString(),\n          pair.liquidityToken.address,\n        ],\n      },\n    {\n      onError(err) {\n        console.error(err)\n      },\n    },\n  )\n\n  const rebalancingZapEstimate = useSWRContract(\n    canZap &&\n      zapContract &&\n      !noNeedZap &&\n      wrappedParsedAmounts &&\n      wrappedParsedAmounts[Field.CURRENCY_A] &&\n      wrappedParsedAmounts[Field.CURRENCY_B] &&\n      pair &&\n      rebalancing && {\n        contract: zapContract,\n        methodName: 'estimateZapInRebalancingSwap',\n        params: [\n          wrappedParsedAmounts[Field.CURRENCY_A].currency.address,\n          wrappedParsedAmounts[Field.CURRENCY_B].currency.address,\n          wrappedParsedAmounts[Field.CURRENCY_A].quotient.toString(),\n          wrappedParsedAmounts[Field.CURRENCY_B]?.quotient?.toString(),\n          pair.liquidityToken.address,\n        ],\n      },\n    {\n      onError(err) {\n        console.error(err)\n      },\n    },\n  )\n\n  const zapInEstimated = useMemo(\n    () =>\n      (rebalancingZapEstimate?.data || singleZapEstimate?.data) && {\n        swapAmountIn: rebalancing ? rebalancingZapEstimate.data?.swapAmountIn : singleZapEstimate.data?.swapAmountIn,\n        swapAmountOut: rebalancing ? rebalancingZapEstimate.data?.swapAmountOut : singleZapEstimate.data?.swapAmountOut,\n        isToken0Sold: rebalancing\n          ? rebalancingZapEstimate.data?.sellToken0\n          : singleZapEstimate.data?.swapTokenOut === singleTokenToZapAmount?.currency.address,\n      },\n    [rebalancing, rebalancingZapEstimate.data, singleZapEstimate.data, singleTokenToZapAmount?.currency.address],\n  )\n\n  const rebalancingSellToken0 = useMemo(() => {\n    if (rebalancingZapEstimate.data) {\n      return rebalancingZapEstimate.data.sellToken0\n    }\n    if (!pair || !wrappedParsedAmounts[Field.CURRENCY_A] || !wrappedParsedAmounts[Field.CURRENCY_B]) {\n      return undefined\n    }\n    const token0toZap = pair.token0.equals(wrappedParsedAmounts[Field.CURRENCY_A].currency)\n    if (token0toZap) {\n      return JSBI.greaterThan(\n        JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_A].quotient, pair.reserve1.quotient),\n        JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_B].quotient, pair.reserve0.quotient),\n      )\n    }\n    return JSBI.greaterThan(\n      JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_B].quotient, pair.reserve0.quotient),\n      JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_A].quotient, pair.reserve1.quotient),\n    )\n  }, [pair, rebalancingZapEstimate.data, wrappedParsedAmounts])\n\n  const swapTokenField = !rebalancing\n    ? singleTokenToZapField\n    : rebalancingSellToken0\n    ? Field.CURRENCY_A\n    : Field.CURRENCY_B\n  const swapOutTokenField = swapTokenField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  const swapTokens: { [field in Field]?: Token } = useMemo(\n    () => ({\n      [swapTokenField]: currencies[swapTokenField]?.wrapped,\n      [swapOutTokenField]: currencies[swapOutTokenField]?.wrapped,\n    }),\n    [currencies, swapOutTokenField, swapTokenField],\n  )\n\n  const zapInEstimatedError = useMemo(\n    () => (rebalancing ? rebalancingZapEstimate.error : singleZapEstimate.error),\n    [rebalancing, rebalancingZapEstimate.error, singleZapEstimate.error],\n  )\n\n  const zapInEstimatedStatus = useMemo(\n    () => (rebalancing ? rebalancingZapEstimate.status : singleZapEstimate.status),\n    [rebalancing, rebalancingZapEstimate.status, singleZapEstimate.status],\n  )\n\n  const priceImpact = useMemo(() => {\n    if (!zapInEstimated) {\n      return undefined\n    }\n    const tokenAmountIn = CurrencyAmount.fromRawAmount(\n      swapTokens[swapTokenField],\n      zapInEstimated.swapAmountIn.toString(),\n    )\n    const tokenAmountOut = CurrencyAmount.fromRawAmount(\n      swapTokens[swapOutTokenField],\n      zapInEstimated.swapAmountOut.toString(),\n    )\n    const midPrice = new Price(\n      swapTokens[swapTokenField],\n      swapTokens[swapOutTokenField],\n      pair.token0.equals(swapTokens[swapTokenField]) ? pair.reserve0.quotient : pair.reserve1.quotient,\n      pair.token0.equals(swapTokens[swapTokenField]) ? pair.reserve1.quotient : pair.reserve0.quotient,\n    )\n    return computePriceImpact(midPrice, tokenAmountIn, tokenAmountOut)\n  }, [pair, swapOutTokenField, swapTokenField, swapTokens, zapInEstimated])\n\n  const overLimitZapRatio = useMemo(() => {\n    if (!zapInEstimated) {\n      return false\n    }\n\n    return JSBI.lessThan(\n      JSBI.divide(\n        pair.reserveOf(swapTokens[swapTokenField]).quotient,\n        JSBI.BigInt(zapInEstimated.swapAmountIn.toString()),\n      ),\n      MAX_ZAP_REVERSE_RATIO,\n    )\n  }, [pair, swapTokens, zapInEstimated, swapTokenField])\n\n  const priceSeverity = overLimitZapRatio || zapInEstimatedError ? 4 : priceImpact ? warningSeverity(priceImpact) : 0\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(false)\n\n  const maxZappableAmount = useMemo(\n    () =>\n      guessMaxZappableAmount(\n        pair,\n        wrappedParsedAmounts[swapTokenField],\n        rebalancing ? wrappedParsedAmounts[swapOutTokenField] : undefined,\n      ),\n    [pair, wrappedParsedAmounts, swapTokenField, rebalancing, swapOutTokenField],\n  )\n\n  const convertToMaxZappable = useCallback(() => {\n    if (maxZappableAmount) {\n      if (maxAmounts[swapTokenField]) {\n        const formatInput = formatUnits(\n          JSBI.greaterThan(maxAmounts[swapTokenField].quotient, maxZappableAmount)\n            ? maxZappableAmount.toString()\n            : maxAmounts[swapTokenField].quotient.toString(),\n          maxAmounts[swapTokenField]?.currency.decimals,\n        )\n\n        if (swapTokenField === Field.CURRENCY_A) {\n          onFieldAInput(formatInput)\n        } else {\n          onFieldBInput(formatInput)\n        }\n      }\n    }\n  }, [maxAmounts, maxZappableAmount, onFieldAInput, onFieldBInput, swapTokenField])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    if (\n      !pair ||\n      !swapTokens[swapTokenField] ||\n      !swapTokens[swapOutTokenField] ||\n      !zapInEstimated?.swapAmountIn ||\n      !zapInEstimated?.swapAmountOut ||\n      !wrappedParsedAmounts[swapTokenField]\n    ) {\n      return undefined\n    }\n\n    if (pair && totalSupply) {\n      try {\n        // calc the tokenA amount after swap\n        const zappedTokenAmountA = wrappedParsedAmounts[swapTokenField].greaterThan(\n          zapInEstimated.swapAmountIn.toString(),\n        )\n          ? wrappedParsedAmounts[swapTokenField].subtract(\n              CurrencyAmount.fromRawAmount(swapTokens[swapTokenField], zapInEstimated.swapAmountIn.toString()),\n            )\n          : wrappedParsedAmounts[swapTokenField]\n\n        let zappedTokenAmountB = CurrencyAmount.fromRawAmount(\n          swapTokens[swapOutTokenField],\n          zapInEstimated.swapAmountOut.toString(),\n        )\n\n        if (wrappedParsedAmounts[swapOutTokenField]) {\n          zappedTokenAmountB = zappedTokenAmountB.add(wrappedParsedAmounts[swapOutTokenField])\n        }\n        const lpMinted = pair.getLiquidityMinted(totalSupply, zappedTokenAmountA, zappedTokenAmountB)\n        return lpMinted\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    }\n    return undefined\n  }, [\n    pair,\n    swapTokens,\n    swapTokenField,\n    swapOutTokenField,\n    zapInEstimated?.swapAmountIn,\n    zapInEstimated?.swapAmountOut,\n    wrappedParsedAmounts,\n    totalSupply,\n  ])\n\n  const swapTokenAmountTooLow = useMemo(\n    () =>\n      wrappedParsedAmounts[swapTokenField] &&\n      JSBI.lessThan(wrappedParsedAmounts[swapTokenField].quotient, MINIMUM_LIQUIDITY),\n    [swapTokenField, wrappedParsedAmounts],\n  )\n  const swapOutAmountTooLow = useMemo(\n    () =>\n      wrappedParsedAmounts[swapOutTokenField] &&\n      JSBI.lessThan(wrappedParsedAmounts[swapOutTokenField].quotient, MINIMUM_LIQUIDITY),\n    [swapOutTokenField, wrappedParsedAmounts],\n  )\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  const gasOverhead = useZapInGasOverhead(\n    useMemo(\n      () =>\n        zapInEstimated\n          ? CurrencyAmount.fromRawAmount(swapTokens[swapTokenField], zapInEstimated.swapAmountIn.toString())\n          : null,\n      [swapTokenField, swapTokens, zapInEstimated],\n    ),\n  )\n\n  useEffect(() => {\n    if (\n      !triedAutoReduce &&\n      parsedAmounts[swapTokenField] &&\n      maxZappableAmount &&\n      !previousBlur &&\n      inputBlurOnce &&\n      !rebalancing\n    ) {\n      if (JSBI.greaterThan(parsedAmounts[swapTokenField].quotient, maxZappableAmount)) {\n        convertToMaxZappable()\n        setTriedAutoReduce(true)\n      }\n    }\n  }, [\n    convertToMaxZappable,\n    inputBlurOnce,\n    maxZappableAmount,\n    parsedAmounts,\n    previousBlur,\n    rebalancing,\n    singleTokenToZapAmount,\n    swapTokenField,\n    triedAutoReduce,\n  ])\n\n  const onInputBlurOnce = useCallback(() => {\n    setInputBlurOnce(true)\n  }, [])\n\n  let error: string | undefined\n\n  if (zapInEstimatedError) {\n    error = t('Cannot estimate zap amount')\n  }\n\n  if (swapTokenAmountTooLow || (rebalancing && swapOutAmountTooLow)) {\n    error = t('Zap in amount too low')\n  }\n\n  if (\n    wrappedParsedAmounts[swapTokenField] &&\n    currencyBalances[swapTokenField]?.lessThan(wrappedParsedAmounts[swapTokenField])\n  ) {\n    error = t('Insufficient %token% balance', {\n      token: wrappedParsedAmounts[swapTokenField]?.currency.symbol ?? '',\n    })\n  }\n\n  if (\n    wrappedParsedAmounts[swapOutTokenField] &&\n    rebalancing &&\n    currencyBalances[swapOutTokenField]?.lessThan(wrappedParsedAmounts[swapOutTokenField])\n  ) {\n    error = t('Insufficient %token% balance', { token: wrappedParsedAmounts[swapOutTokenField]?.currency.symbol ?? '' })\n  }\n\n  return {\n    zapInEstimating: zapInEstimatedStatus !== FetchStatus.Fetched,\n    zapInEstimatedError,\n    zapInEstimated,\n    error,\n    liquidityMinted,\n    poolTokenPercentage,\n    parsedAmounts,\n    swapTokenField,\n    swapOutTokenField,\n    priceSeverity,\n    convertToMaxZappable,\n    rebalancing,\n    noNeedZap,\n    gasOverhead,\n    isDependentAmountGreaterThanMaxAmount,\n    onInputBlurOnce,\n  }\n}\n","import { gql } from 'graphql-request'\nimport { Pair, ChainId } from '@pancakeswap/sdk'\nimport useSWRImmutable from 'swr/immutable'\nimport { getDeltaTimestamps } from 'utils/getDeltaTimestamps'\nimport { getBlocksFromTimestamps } from 'utils/getBlocksFromTimestamps'\nimport { getChangeForPeriod } from 'utils/getChangeForPeriod'\nimport { SLOW_INTERVAL } from 'config/constants'\nimport { LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\nimport { getMultiChainQueryEndPointWithStableSwap, MultiChainName, multiChainQueryMainToken } from '../info/constant'\n\ninterface PoolReserveVolume {\n  reserveUSD: string\n  volumeUSD: string\n}\n\ninterface PoolReserveVolumeResponse {\n  now: PoolReserveVolume[]\n  oneDayAgo: PoolReserveVolume[]\n  twoDaysAgo: PoolReserveVolume[]\n  oneWeekAgo: PoolReserveVolume[]\n  twoWeeksAgo: PoolReserveVolume[]\n}\n\nexport const useLPApr = (pair?: Pair) => {\n  const { data: poolData } = useSWRImmutable(\n    pair && pair.chainId === ChainId.BSC ? ['LP7dApr', pair.liquidityToken.address] : null,\n    async () => {\n      const timestampsArray = getDeltaTimestamps()\n      const blocks = await getBlocksFromTimestamps(timestampsArray, 'desc', 1000)\n      const [, , block7d] = blocks ?? []\n      const { error, data } = await fetchPoolVolumeAndReserveData(\n        block7d.number,\n        pair.liquidityToken.address.toLowerCase(),\n      )\n      if (error) return null\n      const current = parseFloat(data?.now[0]?.volumeUSD)\n      const currentReserveUSD = parseFloat(data?.now[0]?.reserveUSD)\n      const week = parseFloat(data?.oneWeekAgo[0]?.volumeUSD)\n      const [volumeUSDWeek] = getChangeForPeriod(current, week)\n      const liquidityUSD = currentReserveUSD || 0\n      const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n      return lpApr7d ? { lpApr7d } : null\n    },\n    {\n      refreshInterval: SLOW_INTERVAL,\n    },\n  )\n\n  return poolData\n}\nconst fetchPoolVolumeAndReserveData = async (\n  block7d: number,\n  poolAddress: string,\n  chainName: 'ETH' | 'BSC' = 'BSC',\n) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(chainName, null, poolAddress)}\n        oneWeekAgo: ${POOL_AT_BLOCK(chainName, block7d, poolAddress)}\n      }\n    `\n\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<PoolReserveVolumeResponse>(query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\nconst POOL_AT_BLOCK = (chainName: MultiChainName, block: number | null, pool: string) => {\n  const addressesString = `[\"${pool}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserve${multiChainQueryMainToken[chainName]}\n    orderDirection: desc\n  ) {\n    reserveUSD\n    volumeUSD\n  }`\n}\n","import { CurrencyAmount, Price, Percent, TradeType, Fraction, ONE, Currency } from '@pancakeswap/sdk'\nimport { useCallback, useMemo, useContext, useDeferredValue } from 'react'\nimport useSWR from 'swr'\nimport { StableConfigContext } from './useStableConfig'\n\nexport interface StableTrade {\n  tradeType: TradeType\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n  executionPrice: Price<Currency, Currency>\n  priceImpact: null\n  maximumAmountIn: (slippaged: Percent) => CurrencyAmount<Currency>\n  minimumAmountOut: (slippaged: Percent) => CurrencyAmount<Currency>\n}\n\nexport const maximumAmountInFactory = (currencyAmountIn: CurrencyAmount<Currency>, slippageTolerance: number) => {\n  const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(currencyAmountIn.quotient).quotient\n\n  return CurrencyAmount.fromRawAmount(currencyAmountIn.currency, slippageAdjustedAmountIn)\n}\n\nexport const minimumAmountOutFactory = (currencyAmountOut: CurrencyAmount<Currency>, slippageTolerance: number) => {\n  const slippageAdjustedAmountOut = new Fraction(ONE)\n    .add(slippageTolerance)\n    .invert()\n    .multiply(currencyAmountOut.quotient).quotient\n  return CurrencyAmount.fromRawAmount(currencyAmountOut.currency, slippageAdjustedAmountOut)\n}\n\ninterface UseStableTradeResponse {\n  currencyAmountIn: CurrencyAmount<Currency>\n  currencyAmountOut: CurrencyAmount<Currency>\n  stableSwapConfig: any\n  tradeType: TradeType\n}\n\nexport function useStableTradeResponse({\n  currencyAmountIn,\n  currencyAmountOut,\n  stableSwapConfig,\n  tradeType,\n}: UseStableTradeResponse) {\n  const maximumAmountIn = useCallback(\n    (slippageTolerance) => {\n      if (tradeType === TradeType.EXACT_INPUT) {\n        return currencyAmountIn\n      }\n\n      return currencyAmountIn\n        ? maximumAmountInFactory(currencyAmountIn, slippageTolerance)\n        : CurrencyAmount.fromRawAmount(currencyAmountIn.currency, '0')\n    },\n    [currencyAmountIn, tradeType],\n  )\n\n  const minimumAmountOut = useCallback(\n    (slippageTolerance) => {\n      if (tradeType === TradeType.EXACT_OUTPUT) {\n        return currencyAmountOut\n      }\n\n      return currencyAmountOut\n        ? minimumAmountOutFactory(currencyAmountOut, slippageTolerance)\n        : CurrencyAmount.fromRawAmount(currencyAmountOut.currency, '0')\n    },\n    [currencyAmountOut, tradeType],\n  )\n\n  const isInvalid = !currencyAmountIn || !currencyAmountOut || !stableSwapConfig || !currencyAmountIn\n\n  const executionPrice = useMemo(() => {\n    if (isInvalid) return null\n\n    return new Price(\n      currencyAmountIn.currency,\n      currencyAmountOut.currency,\n      currencyAmountIn.quotient,\n      currencyAmountOut.quotient,\n    )\n  }, [isInvalid, currencyAmountIn, currencyAmountOut])\n\n  if (isInvalid) return null\n\n  return {\n    tradeType: TradeType.EXACT_INPUT,\n    inputAmount: currencyAmountIn,\n    outputAmount: currencyAmountOut,\n    executionPrice,\n    priceImpact: null,\n    maximumAmountIn,\n    minimumAmountOut,\n  }\n}\n\nexport function useEstimatedAmount({ estimatedCurrency, stableSwapConfig, quotient, stableSwapContract }) {\n  const deferQuotient = useDeferredValue(quotient)\n\n  return useSWR(\n    stableSwapConfig?.stableSwapAddress && estimatedCurrency && !!deferQuotient\n      ? ['swapContract', stableSwapConfig?.stableSwapAddress, deferQuotient]\n      : null,\n    async () => {\n      const isToken0 = stableSwapConfig?.token0?.address === estimatedCurrency?.address\n\n      const args = isToken0 ? [1, 0, deferQuotient] : [0, 1, deferQuotient]\n\n      const estimatedAmount = await stableSwapContract.get_dy(...args)\n\n      return CurrencyAmount.fromRawAmount(estimatedCurrency, estimatedAmount)\n    },\n    {\n      keepPreviousData: true,\n    },\n  )\n}\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport default function useStableTradeExactIn(\n  currencyAmountIn?: CurrencyAmount<Currency>,\n  currencyOut?: Currency,\n): StableTrade | null {\n  const { stableSwapContract, stableSwapConfig } = useContext(StableConfigContext)\n\n  const currencyAmountInQuotient = currencyAmountIn?.quotient?.toString()\n\n  const { data: currencyAmountOut } = useEstimatedAmount({\n    estimatedCurrency: currencyOut,\n    quotient: currencyAmountInQuotient,\n    stableSwapContract,\n    stableSwapConfig,\n  })\n\n  return useStableTradeResponse({\n    currencyAmountIn,\n    currencyAmountOut,\n    stableSwapConfig,\n    tradeType: TradeType.EXACT_INPUT,\n  })\n}\n","import { useAccount } from 'wagmi'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, Fraction, JSBI, Percent, Price, Token } from '@pancakeswap/sdk'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\n\nimport { PairState } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\nimport { useContext, useMemo } from 'react'\nimport { Field } from 'state/mint/actions'\nimport { useCurrencyBalances } from 'state/wallet/hooks'\nimport { useSingleCallResult } from 'state/multicall/hooks'\nimport { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport { useEstimatedAmount } from 'views/Swap/StableSwap/hooks/useStableTradeExactIn'\nimport { useMintState } from 'state/mint/hooks'\n\nexport interface StablePair {\n  liquidityToken: Token | null\n  tokenAmounts: any[]\n  token0: Currency\n  token1: Currency\n  priceOf: (token: Currency) => CurrencyAmount<Currency> | Price<Currency, Currency> | Fraction\n  token0Price: () => CurrencyAmount<Currency> | Price<Currency, Currency> | Fraction\n  token1Price: () => CurrencyAmount<Currency> | Price<Currency, Currency> | Fraction\n  // NOTE: Stable Tokens don't need this\n  reserve1: CurrencyAmount<Currency>\n  reserve0: CurrencyAmount<Currency>\n  getLiquidityValue: () => CurrencyAmount<Currency>\n}\n\ninterface UseStablePairResponse {\n  pairState: PairState\n  pair: StablePair\n}\n\nexport function useStablePair(currencyA: Token, currencyB: Token): UseStablePairResponse {\n  const { stableSwapConfig, stableSwapContract } = useContext(StableConfigContext)\n\n  const currencyAAmountQuotient = tryParseAmount('1', currencyA)?.quotient\n\n  const { data: estimatedToken1Amount } = useEstimatedAmount({\n    estimatedCurrency: currencyB,\n    quotient: currencyAAmountQuotient?.toString(),\n    stableSwapContract,\n    stableSwapConfig,\n  })\n\n  const pair = useMemo(() => {\n    if (!currencyA || !currencyB) {\n      return undefined\n    }\n    const isPriceValid = currencyAAmountQuotient && estimatedToken1Amount\n\n    const ZERO_AMOUNT = CurrencyAmount.fromRawAmount(currencyB, '0')\n\n    const token0Price = isPriceValid\n      ? new Price(currencyA, currencyB, currencyAAmountQuotient, estimatedToken1Amount.quotient)\n      : ZERO_AMOUNT\n\n    return {\n      liquidityToken: stableSwapConfig?.liquidityToken || null,\n      tokenAmounts: [],\n      token0: currencyA,\n      token1: currencyB,\n      priceOf: (token) =>\n        isPriceValid ? (token?.address === currencyA?.address ? token0Price : token0Price.invert()) : ZERO_AMOUNT,\n      token0Price: () => token0Price,\n      token1Price: () => token0Price.invert(),\n      // NOTE: Stable Tokens don't need this\n      reserve1: ZERO_AMOUNT,\n      reserve0: ZERO_AMOUNT,\n      getLiquidityValue: () => ZERO_AMOUNT,\n    }\n  }, [stableSwapConfig?.liquidityToken, currencyA, currencyB, currencyAAmountQuotient, estimatedToken1Amount])\n\n  if (!stableSwapConfig) {\n    return { pairState: PairState.NOT_EXISTS, pair: undefined }\n  }\n\n  return { pairState: PairState.EXISTS, pair }\n}\n\nfunction useMintedStableLP({\n  stableSwapInfoContract,\n  stableSwapConfig,\n  stableSwapAddress,\n  currencyInput,\n  currencyInputAmount,\n  currencyOutputAmount,\n}) {\n  const quotient0Str = currencyInputAmount?.toString() || '0'\n  const quotient1Str = currencyOutputAmount?.toString() || '0'\n\n  const isToken0 = stableSwapConfig?.token0?.address === currencyInput?.address\n  const amounts = useMemo(() => {\n    return isToken0 ? [quotient0Str, quotient1Str] : [quotient1Str, quotient0Str]\n  }, [isToken0, quotient0Str, quotient1Str])\n\n  const inputs = useMemo(() => {\n    return [stableSwapAddress, amounts]\n  }, [stableSwapAddress, amounts])\n\n  const { result, error, loading, syncing } = useSingleCallResult(\n    stableSwapInfoContract,\n    'get_add_liquidity_mint_amount',\n    inputs,\n  )\n\n  return useMemo(\n    () => ({\n      data: result?.[0],\n      loading: loading || syncing,\n      error,\n    }),\n    [result, loading, syncing, error],\n  )\n}\n\nexport function useStableLPDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: StablePair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  price?: Price<Currency, Currency>\n  noLiquidity?: boolean\n  loading?: boolean\n  liquidityMinted?: CurrencyAmount<Token>\n  poolTokenPercentage?: Percent\n  error?: string\n  addError?: string\n} {\n  const { address: account } = useAccount()\n\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const { pairState, pair } = useStablePair(currencyA?.wrapped, currencyB?.wrapped)\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.quotient, BIG_INT_ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [currencyA, currencyB], [currencyA, currencyB]),\n  )\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentCurrency = currencies[independentField]\n  const independentAmount: CurrencyAmount<Currency> | undefined =\n    (independentCurrency && tryParseAmount(typedValue, independentCurrency)) ||\n    CurrencyAmount.fromRawAmount(independentCurrency, '0')\n\n  const dependentCurrency = currencies[dependentField]\n  const dependentAmount: CurrencyAmount<Currency> | undefined =\n    tryParseAmount(otherTypedValue, dependentCurrency) || CurrencyAmount.fromRawAmount(dependentCurrency, '0')\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const { stableSwapConfig, stableSwapContract, stableSwapInfoContract } = useContext(StableConfigContext)\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  const currencyAAmountQuotient = currencyAAmount?.quotient\n  const targetCurrency = currencyAAmountQuotient ? currencyA : currencyB\n  const targetAmount = tryParseAmount('1', targetCurrency)\n  const currencyBAmountQuotient = currencyBAmount?.quotient\n\n  const { data: estimatedOutputAmount } = useEstimatedAmount({\n    estimatedCurrency: currencyAAmountQuotient ? currencyB : currencyA,\n    quotient: targetAmount?.quotient.toString(),\n    stableSwapConfig,\n    stableSwapContract,\n  })\n\n  const price = useMemo(() => {\n    const isEstimatedOutputAmountZero = estimatedOutputAmount?.equalTo(0)\n\n    if (\n      (currencyAAmountQuotient || currencyBAmountQuotient) &&\n      targetAmount &&\n      estimatedOutputAmount &&\n      !isEstimatedOutputAmountZero\n    ) {\n      return currencyAAmountQuotient\n        ? new Price(currencyA, currencyB, targetAmount.quotient, estimatedOutputAmount.quotient)\n        : new Price(currencyB, currencyA, estimatedOutputAmount.quotient, targetAmount.quotient)\n    }\n    return undefined\n  }, [targetAmount, estimatedOutputAmount, currencyA, currencyB, currencyBAmountQuotient, currencyAAmountQuotient])\n\n  const {\n    data: lpMinted,\n    error: estimateLPError,\n    loading,\n  } = useMintedStableLP({\n    stableSwapAddress: stableSwapConfig?.stableSwapAddress,\n    stableSwapInfoContract,\n    stableSwapConfig,\n    currencyInput: currencyAAmountQuotient ? currencyA : currencyB,\n    currencyInputAmount: currencyAAmountQuotient || currencyBAmountQuotient,\n    currencyOutputAmount: currencyAAmountQuotient ? currencyBAmountQuotient : currencyAAmountQuotient,\n  })\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    if (pair?.liquidityToken && totalSupply && lpMinted) {\n      try {\n        return CurrencyAmount.fromRawAmount(pair?.liquidityToken, lpMinted?.toString())\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    }\n    return undefined\n  }, [pair?.liquidityToken, totalSupply, lpMinted])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  let addError: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('Choose a valid pair')\n  }\n\n  if (\n    currencyAAmount &&\n    currencyBAmount &&\n    currencyBalances?.[Field.CURRENCY_A]?.equalTo(0) &&\n    currencyBalances?.[Field.CURRENCY_B]?.equalTo(0)\n  ) {\n    error = error ?? t('No token balance')\n  }\n\n  const oneCurrencyRequired =\n    !parsedAmounts[Field.CURRENCY_A]?.greaterThan(0) && !parsedAmounts[Field.CURRENCY_B]?.greaterThan(0)\n  const twoCurrenciesRequired =\n    !parsedAmounts[Field.CURRENCY_A]?.greaterThan(0) || !parsedAmounts[Field.CURRENCY_B]?.greaterThan(0)\n\n  if (noLiquidity ? twoCurrenciesRequired : oneCurrencyRequired) {\n    addError = t('Enter an amount')\n  }\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_A]?.symbol })\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_B]?.symbol })\n  }\n\n  if (estimateLPError) {\n    addError = t('Unable to supply')\n  }\n\n  return {\n    dependentField,\n    loading,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Token } from '@pancakeswap/sdk'\n\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Field } from 'state/burn/actions'\nimport { useTokenBalances } from 'state/wallet/hooks'\nimport { useBurnState } from 'state/burn/hooks'\nimport { StablePair, useStablePair } from 'views/AddLiquidity/AddStableLiquidity/hooks/useStableLPDerivedMintInfo'\nimport { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport useSWR from 'swr'\nimport { useContext, useMemo } from 'react'\nimport { useAccount } from 'wagmi'\n\nexport function useGetRemovedTokenAmounts({ lpAmount }) {\n  const { stableSwapInfoContract, stableSwapConfig } = useContext(StableConfigContext)\n\n  const { data } = useSWR(\n    !lpAmount ? null : ['stableSwapInfoContract', 'calc_coins_amount', stableSwapConfig?.stableSwapAddress, lpAmount],\n    async () => {\n      return stableSwapInfoContract.calc_coins_amount(stableSwapConfig?.stableSwapAddress, lpAmount)\n    },\n  )\n\n  if (!Array.isArray(data)) return []\n\n  const tokenAAmount = CurrencyAmount.fromRawAmount(stableSwapConfig?.token0, data[0].toString())\n  const tokenBAmount = CurrencyAmount.fromRawAmount(stableSwapConfig?.token1, data[1].toString())\n\n  return [tokenAAmount, tokenBAmount]\n}\n\nexport function useStableDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  pair?: StablePair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  }\n  error?: string\n  tokenToReceive?: string\n} {\n  const { address: account } = useAccount()\n\n  const { independentField, typedValue } = useBurnState()\n\n  const { t } = useTranslation()\n\n  // pair + totalsupply\n  const { pair } = useStablePair(currencyA?.wrapped, currencyB?.wrapped)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(\n    account ?? undefined,\n    useMemo(() => [pair?.liquidityToken], [pair?.liquidityToken]),\n  )\n  const userLiquidity: undefined | CurrencyAmount<Token> = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n\n  const liquidityToRemove =\n    userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n      ? CurrencyAmount.fromRawAmount(userLiquidity.currency, percentToRemove.multiply(userLiquidity.quotient).quotient)\n      : undefined\n\n  const [amountA, amountB] = useGetRemovedTokenAmounts({\n    lpAmount: liquidityToRemove?.quotient?.toString(),\n  })\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Token>\n    [Field.CURRENCY_B]?: CurrencyAmount<Token>\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: liquidityToRemove,\n    [Field.CURRENCY_A]: amountA,\n    [Field.CURRENCY_B]: amountB,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  return { pair, parsedAmounts, error }\n}\n","import { useContract } from 'hooks/useContract'\nimport stableSwapABI from 'config/abi/stableSwap.json'\nimport stableSwapInfoABI from 'config/abi/infoStableSwap.json'\nimport stableLPABI from 'config/abi/stableLP.json'\nimport { Currency, CurrencyAmount, ERC20Token } from '@pancakeswap/sdk'\nimport { useTokenBalancesWithLoadingIndicator } from 'state/wallet/hooks'\nimport { createContext, useMemo } from 'react'\nimport useSWRImmutable from 'swr/immutable'\nimport { getStableConfig } from '@pancakeswap/farms/constants'\nimport { deserializeToken } from '@pancakeswap/token-lists'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\n\nexport function useStableFarms() {\n  const { chainId } = useActiveChainId()\n\n  const { data: stableFarms = [] } = useSWRImmutable(chainId && ['stable-farms', chainId], async () => {\n    const farms = await getStableConfig(chainId)\n\n    return farms.map(({ token, quoteToken, lpAddress, ...rest }) => ({\n      ...rest,\n      liquidityToken: new ERC20Token(chainId, lpAddress, 18, 'Stable-LP', 'Pancake StableSwap LPs'),\n      token0: deserializeToken(token),\n      token1: deserializeToken(quoteToken),\n    }))\n  })\n\n  return stableFarms\n}\n\nfunction useFindStablePair({ tokenA, tokenB }) {\n  const stableFarms = useStableFarms()\n\n  return useMemo(\n    () =>\n      stableFarms.find((stablePair) => {\n        return (\n          tokenA &&\n          tokenB &&\n          ((stablePair?.token0?.equals(tokenA) && stablePair?.token1?.equals(tokenB)) ||\n            (stablePair?.token1?.equals(tokenA) && stablePair?.token0?.equals(tokenB)))\n        )\n      }),\n    [tokenA, tokenB, stableFarms],\n  )\n}\n\nexport function useLPTokensWithBalanceByAccount(account) {\n  const lpTokens = useStableFarms()\n\n  const [stableBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    lpTokens.map(({ liquidityToken }) => liquidityToken),\n  )\n\n  const lpTokensWithBalance = useMemo(\n    () => lpTokens.filter(({ liquidityToken }) => stableBalances[liquidityToken.address]?.greaterThan('0')),\n    [lpTokens, stableBalances],\n  )\n\n  return lpTokensWithBalance.map((lpToken) => ({\n    ...lpToken,\n    tokenAmounts: [],\n    reserve0: CurrencyAmount.fromRawAmount(lpToken?.token0, '0'),\n    reserve1: CurrencyAmount.fromRawAmount(lpToken?.token1, '0'),\n    getLiquidityValue: () => CurrencyAmount.fromRawAmount(lpToken?.token0, '0'),\n  }))\n}\n\nexport const StableConfigContext = createContext(null)\n\nexport default function useStableConfig({ tokenA, tokenB }: { tokenA: Currency; tokenB: Currency }) {\n  const stablePair = useFindStablePair({ tokenA, tokenB })\n  const stableSwapContract = useContract(stablePair?.stableSwapAddress, stableSwapABI)\n  const stableSwapInfoContract = useContract(stablePair?.infoStableSwapAddress, stableSwapInfoABI)\n  const stableSwapLPContract = useContract(stablePair?.liquidityToken.address, stableLPABI)\n\n  return useMemo(\n    () => ({\n      stableSwapConfig: stablePair,\n      stableSwapContract,\n      stableSwapInfoContract,\n      stableSwapLPContract,\n    }),\n    [stablePair, stableSwapContract, stableSwapInfoContract, stableSwapLPContract],\n  )\n}\n","import styled from \"styled-components\";\nimport { space, SpaceProps } from \"styled-system\";\n\nexport type CardBodyProps = SpaceProps;\n\nconst CardBody = styled.div<CardBodyProps>`\n  ${space}\n`;\n\nCardBody.defaultProps = {\n  p: \"24px\",\n};\n\nexport default CardBody;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M18 13H13V18C13 18.55 12.55 19 12 19C11.45 19 11 18.55 11 18V13H6C5.45 13 5 12.55 5 12C5 11.45 5.45 11 6 11H11V6C11 5.45 11.45 5 12 5C12.55 5 13 5.45 13 6V11H18C18.55 11 19 11.45 19 12C19 12.55 18.55 13 18 13Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M8.11997 14.7101L12 10.8301L15.88 14.7101C16.27 15.1001 16.9 15.1001 17.29 14.7101C17.68 14.3201 17.68 13.6901 17.29 13.3001L12.7 8.7101C12.31 8.3201 11.68 8.3201 11.29 8.7101L6.69997 13.3001C6.30997 13.6901 6.30997 14.3201 6.69997 14.7101C7.08997 15.0901 7.72997 15.1001 8.11997 14.7101Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n"],"names":["startOfMinute","dirtyDate","_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","Z","arguments","date","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","setSeconds","subWeeks","dirtyAmount","requiredArgs","addWeeks","amount","toInteger","addDays","FixedHeightRow","styled","RowBetween","useTotalUSDValue","param","currency0","currency1","token0Deposited","token1Deposited","token0Price","useBUSDPrice","token1Price","token0USDValue","multiplyPriceByAmount","parseFloat","toSignificant","token1USDValue","usePoolTokenPercentage","userPoolBalance","totalPoolTokens","JSBI","quotient","Percent","undefined","withLPValuesFactory","useLPValuesHook","hookArgFn","Component","props","address","useAccount","showUnwrapped","pair","token0","unwrappedToken","token1","useTokenBalance","account","liquidityToken","useTotalSupply","poolTokenPercentage","args","useMemo","totalUSDValue","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","withLPValues","_ref","_swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_20__","getLiquidityValue","withStableLPValues","useGetRemovedTokenAmounts","lpAmount","toString","FullPositionCard","_param","isStableLP","useContext","StableConfigContext","t","useTranslation","poolData","useLPApr","useTooltip","placement","targetRef","tooltip","tooltipVisible","useState","showMore","setShowMore","jsxs","Card","Flex","justifyContent","role","onClick","p","flexDirection","alignItems","mb","DoubleCurrencyLogo","size","Text","bold","ml","symbol","concat","Dots","color","fontSize","Number","isFinite","small","toLocaleString","minimumFractionDigits","maximumFractionDigits","ChevronUpIcon","ChevronDownIcon","AutoColumn","gap","style","padding","RowFixed","CurrencyLogo","currency","asset","TooltipText","ref","formatAmount","lpApr7d","toFixed","BIG_INT_ZERO","Button","as","NextLinkFromReactRouter","to","currencyId","variant","width","startIcon","AddIcon","MinimalPositionCard","Fragment","CardBody","margin","LightCard","textAlign","span","aria-label","Link","display","external","href","StableFullPositionCardContainer","StableFullPositionCard","stableConfig","useStableConfig","tokenA","tokenB","stableSwapConfig","value","__webpack_exports__","token","useSingleCallResult","contract","useTokenContract","isToken","totalSupplyStr","result","_useSingleCallResult_result_","CurrencyAmount","useBurnState","useSelector","state","burn","useDerivedBurnInfo","currencyA","currencyB","removalCheckedA","removalCheckedB","zapMode","tokens","_obj","_obj1","_obj2","error","useActiveWeb3React","chainId","independentField","typedValue","usePair","relevantTokenBalances","useTokenBalances","userLiquidity","wrappedCurrency","_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_13__","Field","totalSupply","liquidityValueA","liquidityValueB","liquidityValues","percentToRemove","independentAmount","tryParseAmount","greaterThan","liquidityValue","liquidityToRemove","multiply","tokenToReceive","amountA","amountB","tokenAmountToZap","estimateZapOutAmount","getOutputAmount","parsedAmounts","useBurnActionHandlers","dispatch","useAppDispatch","onUserInput","useCallback","field","typeInput","useMintState","mint","useMintActionHandlers","noLiquidity","onFieldAInput","onFieldBInput","useDerivedMintInfo","currencyBalances","addError","currencies","otherTypedValue","dependentField","_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_20__","pairState","PairState","Boolean","reserve0","reserve1","balances","useCurrencyBalances","dependentAmount","wrappedIndependentAmount","wrapped","dependentCurrency","dependentTokenAmount","priceOf","quote","isNative","price","currencyAAmount","currencyBAmount","Price","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","console","add","equalTo","lessThan","MAX_ZAP_REVERSE_RATIO","getMaxZapSwapAmount","tokenZap","involvesToken","reserveOf","useZapIn","inputAmount","gasCostInInputTokens","gasPrice","native","requiredGas","requiredGasAsCurrencyAmount","inputIsBNB","wrappedParsedAmounts","canZap","zapTokenCheckedA","zapTokenCheckedB","maxAmounts","inputBlurOnce","setInputBlurOnce","previousBlur","usePreviousValue","triedAutoReduce","setTriedAutoReduce","_dependentAmount","isDependentAmountGreaterThanMaxAmount","zapContract","useZapContract","rebalancing","singleTokenToZapField","singleTokenToZapAmount","noNeedZap","singleZapEstimate","useSWRContract","methodName","params","onError","err","rebalancingZapEstimate","zapInEstimated","data","swapAmountIn","swapAmountOut","isToken0Sold","sellToken0","swapTokenOut","rebalancingSellToken0","equals","swapTokenField","swapOutTokenField","swapTokens","zapInEstimatedError","zapInEstimatedStatus","status","priceImpact","tokenAmountIn","tokenAmountOut","midPrice","computePriceImpact","priceSeverity","overLimitZapRatio","warningSeverity","maxZappableAmount","guessMaxZappableAmount","token0AmountIn","token1AmountIn","maxSwapAmount","getInputAmount","newPair","convertToMaxZappable","formatInput","formatUnits","decimals","zappedTokenAmountA","subtract","zappedTokenAmountB","swapTokenAmountTooLow","MINIMUM_LIQUIDITY","swapOutAmountTooLow","gasOverhead","useGasPrice","useNativeCurrency","BigNumber","mul","useTradeExactIn","outputAmount","useEffect","onInputBlurOnce","zapInEstimating","FetchStatus","useSWRImmutable","ChainId","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_7__","timestampsArray","blocks","_ref1","current","currentReserveUSD","week","volumeUSDWeek","liquidityUSD","getDeltaTimestamps","getBlocksFromTimestamps","_state","sent","fetchPoolVolumeAndReserveData","block7d","number","toLowerCase","now","volumeUSD","reserveUSD","oneWeekAgo","getChangeForPeriod","LP_HOLDERS_FEE","WEEKS_IN_YEAR","refreshInterval","SLOW_INTERVAL","poolAddress","chainName","query","gql","POOL_AT_BLOCK","getMultiChainQueryEndPointWithStableSwap","request","block","pool","blockString","multiChainQueryMainToken","useEstimatedAmount","estimatedCurrency","stableSwapContract","deferQuotient","useDeferredValue","useSWR","stableSwapAddress","_async_to_generator","estimatedAmount","isToken0","get_dy","_to_consumable_array","keepPreviousData","useStablePair","currencyAAmountQuotient","isPriceValid","estimatedToken1Amount","ZERO_AMOUNT","tokenAmounts","invert","useStableLPDerivedMintInfo","stableSwapInfoContract","currencyInput","currencyInputAmount","currencyOutputAmount","quotient0Str","quotient1Str","amounts","inputs","loading","syncing","_define_property","independentCurrency","targetAmount","currencyBAmountQuotient","isEstimatedOutputAmountZero","estimatedOutputAmount","useMintedStableLP","lpMinted","oneCurrencyRequired","twoCurrenciesRequired","estimateLPError","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_9__","calc_coins_amount","isArray","useStableDerivedBurnInfo","useStableFarms","useActiveChainId","stableFarms","getStableConfig","farms","map","quoteToken","lpAddress","rest","_object_spread_props","_object_spread","ERC20Token","deserializeToken","useLPTokensWithBalanceByAccount","lpTokens","stableBalances","useTokenBalancesWithLoadingIndicator","lpTokensWithBalance","filter","lpToken","createContext","stablePair","find","useContract","stableSwapABI","infoStableSwapAddress","stableSwapInfoABI","stableSwapLPContract","stableLPABI","space","defaultProps","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Svg","viewBox","path","d"],"sourceRoot":""}