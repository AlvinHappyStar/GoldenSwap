{"version":3,"file":"static/chunks/4281-8a2866082601fa97.js","mappings":"uWAkBO,SAASA,EAAkBC,CAAoB,CAAEC,CAAoB,CAAU,CACpF,IAAMC,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,IAAZD,OAAAA,CAEiBA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EACrB,CAACE,CAAAA,EAAAA,EAAAA,EAAAA,EAAgBJ,EAAWE,GAAUE,CAAAA,EAAAA,EAAAA,EAAAA,EAAgBH,EAAWC,GAAS,CAC1E,CAACG,KAAAA,EAAWA,KAAAA,EAAU,IAFnBC,EAAkBJ,CAAAA,CAAAA,EAAAA,CAAVK,EAAUL,CAAAA,CAAAA,EAAAA,CAInBM,EAAiBC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,CACnC,GAAI,CAACP,EAAS,MAAO,EAAE,CAEvB,IAC6BQ,EACAA,EAFdC,EACcD,EACAA,EAFvBE,EAASD,IAAsC,GAAtCA,CAAAA,EAAAA,EAAAA,EAA6B,CAACT,EAAQ,GAAtCS,KAAAA,IAAAA,EAAAA,EAA0C,EAAE,CACrDE,EAAcP,GAASI,IAA2C,GAA3CA,CAAAA,EAAAA,IAAyB,GAAzBA,CAAAA,EAAAA,EAAAA,EAAgB,CAACR,EAAQ,GAAzBQ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,CAA2B,CAACJ,EAAOQ,OAAO,CAAC,GAA3CJ,KAAAA,IAAAA,EAAAA,EAA+C,EAAE,CACxEK,EAAcR,GAASG,IAA2C,GAA3CA,CAAAA,EAAAA,IAAyB,GAAzBA,CAAAA,EAAAA,EAAAA,EAAgB,CAACR,EAAQ,GAAzBQ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,CAA2B,CAACH,EAAOO,OAAO,CAAC,GAA3CJ,KAAAA,IAAAA,EAAAA,EAA+C,EAAE,CAE9E,MAAO,GAAAM,EAAAC,CAAA,EAAIL,GAAAA,MAAAA,CAAQ,GAAAI,EAAAC,CAAA,EAAGJ,GAAa,GAAAG,EAAAC,CAAA,EAAGF,GACxC,EAAG,CAACb,EAASI,EAAQC,EAAO,EAEtBW,EAA8BT,CAAAA,EAAAA,EAAAA,OAAAA,EAClC,kBAAMU,IAAQX,EAAO,SAACY,CAAAA,CAAAA,QAA2BZ,EAAMa,GAAG,CAAC,SAACC,CAAAA,CAAAA,OAAc,CAACF,EAAME,EAAU,MAC3F,CAACd,EAAM,EAGHe,EAAwCd,CAAAA,EAAAA,EAAAA,OAAAA,EAC5C,WACEH,OAAAA,GAAUC,EACN,CAEE,CAACD,EAAQC,EAAO,CAOjB,CATDiB,MAAA,CAIE,GAAAR,EAAAC,CAAA,EAAGT,EAAMa,GAAG,CAAC,SAACD,CAAAA,CAAAA,OAAyB,CAACd,EAAQc,EAAK,IAErD,GAAAJ,EAAAC,CAAA,EAAGT,EAAMa,GAAG,CAAC,SAACD,CAAAA,CAAAA,OAAyB,CAACb,EAAQa,EAAK,IAErD,GAAAJ,EAAAC,CAAA,EAAGC,IAEFO,MAAM,CAAC,SAACC,CAAAA,CAAAA,QAAqCC,QAAQD,CAAM,CAAC,EAAE,EAAIA,CAAM,CAAC,EAAE,IAC3ED,MAAM,CAAC,SAAAG,CAAA,qBAAEC,EAAAA,CAAAA,CAAAA,EAAAA,CAAIC,EAAAA,CAAAA,CAAAA,EAAAA,QAAQD,EAAGf,OAAO,GAAKgB,EAAGhB,OAAO,GAC9CW,MAAM,CAAC,SAAAG,CAAA,CAAwB,oBAAtBG,EAAAA,CAAAA,CAAAA,EAAAA,CAASC,EAAAA,CAAAA,CAAAA,EAAAA,CACjB,GAAI,CAAC9B,EAAS,MAAO,EAAI,CACzB,IAAM+B,EAAcC,EAAAA,EAAY,CAAChC,EAAQ,CAEnCiC,EAAoCF,MAAAA,EAAAA,KAAAA,EAAAA,CAAa,CAACF,EAAQjB,OAAO,CAAC,CAClEsB,EAAoCH,MAAAA,EAAAA,KAAAA,EAAAA,CAAa,CAACD,EAAQlB,OAAO,CAAC,OAExE,CAAKqB,IAAiBC,GAElBD,CAAAA,CAAAA,IAAgB,CAACA,EAAaE,IAAI,CAAC,SAACjB,CAAAA,CAAAA,QAASY,EAAQM,MAAM,CAAClB,OAC5DgB,CAAAA,CAAAA,IAAgB,CAACA,EAAaC,IAAI,CAAC,SAACjB,CAAAA,CAAAA,QAASW,EAAQO,MAAM,CAAClB,KAGlE,GACF,EAAE,EACR,CAACd,EAAQC,EAAQC,EAAOU,EAAWhB,EAAQ,EAGvCqC,EAAWC,CAAAA,EAAAA,EAAAA,EAAAA,EAASjB,GAG1B,MAAOd,CAAAA,EAAAA,EAAAA,OAAAA,EACL,kBACEgC,OAAOC,MAAM,CACXH,EAEGd,MAAM,CAAC,SAACkB,CAAAA,CAAAA,QAA+ChB,QAAQgB,CAAM,CAAC,EAAE,GAAKC,EAAAA,EAAAA,CAAAA,MAAgB,EAAID,CAAM,CAAC,EAAE,IAE1GE,MAAM,CAAkC,SAACC,CAAAA,CAAAA,CAAAA,CAAmB,KACvBA,EADaC,EAAAA,YAAAA,CAAAA,EAAAA,CAEjD,OADAD,CAAI,CAACC,EAAKC,cAAc,CAAClC,OAAO,CAAC,CAAGgC,IAAiC,GAAjCA,CAAAA,EAAAA,CAAI,CAACC,EAAKC,cAAc,CAAClC,OAAO,CAAC,GAAjCgC,KAAAA,IAAAA,EAAAA,EAAqCC,CAAI,CACtED,CACT,EAAG,CAAC,KAEV,CAACP,EAAS,CAEd,CAOO,SAASU,EACdC,CAA2C,CAC3CC,CAAsB,CACuB,CAC7C,IAAMC,EAAerD,EAAkBmD,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBG,QAAQ,CAAEF,GAE5DG,EAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,IAAoBA,EAApBA,CAAAA,EAAAA,CAExB,MAAO9C,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,CACnB,GAAIyC,GAAoBC,GAAeC,EAAaI,MAAM,CAAG,EAAG,CAC9D,GAAIF,EAAe,KAEfG,EADF,OACEA,IAAwG,GAAxGA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,gBAAsB,CAACL,EAAcF,EAAkBC,EAAa,CAAEO,QAAS,EAAGC,cAAe,CAAE,EAAE,CAAC,EAAE,GAAxGF,KAAAA,IAAAA,EAAAA,EACA,IAAI,CAEP,IAGI,IADDG,EAA8D,IAAI,CAC7DC,EAAI,EAAGA,GAvBL,EAuBoBA,IAAK,CAClC,IACEJ,EADIK,EACJL,IAAwG,GAAxGA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,gBAAsB,CAACL,EAAcF,EAAkBC,EAAa,CAAEO,QAASG,EAAGF,cAAe,CAAE,EAAE,CAAC,EAAE,GAAxGF,KAAAA,IAAAA,EAAAA,EACA,IAAI,CAEFM,CAAAA,EAAAA,EAAAA,EAAAA,EAAcH,EAAgBE,EAAcE,EAAAA,EAAgCA,GAC9EJ,CAAAA,EAAiBE,CAAAA,CAErB,CACA,OAAOF,CACT,CAAC,OAEM,IAAI,EACV,CAACR,EAAcF,EAAkBC,EAAaG,EAAc,CACjE,CAKO,SAASW,EACdC,CAAqB,CACrBC,CAA4C,CACC,CAC7C,IAAMf,EAAerD,EAAkBmE,EAAYC,MAAAA,EAAAA,KAAAA,EAAAA,EAAmBd,QAAQ,EAEvEC,EAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,IAAoBA,EAApBA,CAAAA,EAAAA,CAExB,MAAO9C,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,CACnB,GAAIyD,GAAcC,GAAqBf,EAAaI,MAAM,CAAG,EAAG,CAC9D,GAAIF,EAAe,KAEfG,EADF,OACEA,IAAyG,GAAzGA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,iBAAuB,CAACL,EAAcc,EAAYC,EAAmB,CAAET,QAAS,EAAGC,cAAe,CAAE,EAAE,CAAC,EAAE,GAAzGF,KAAAA,IAAAA,EAAAA,EACA,IAAI,CAEP,IAGI,IADDG,EAA8D,IAAI,CAC7DC,EAAI,EAAGA,GA5DL,EA4DoBA,IAAK,CAClC,IACEJ,EADIK,EACJL,IAAyG,GAAzGA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,iBAAuB,CAACL,EAAcc,EAAYC,EAAmB,CAAET,QAASG,EAAGF,cAAe,CAAE,EAAE,CAAC,EAAE,GAAzGF,KAAAA,IAAAA,EAAAA,EACA,IAAI,CACFM,CAAAA,EAAAA,EAAAA,EAAAA,EAAcH,EAAgBE,EAAcE,EAAAA,EAAgCA,GAC9EJ,CAAAA,EAAiBE,CAAAA,CAErB,CACA,OAAOF,CACT,CAAC,OACM,IAAI,EACV,CAACM,EAAYC,EAAmBf,EAAcE,EAAc,CACjE,CAEO,SAASc,EAA4BF,CAAqB,CAAEf,CAAsB,CAAW,CAClG,IAAMkB,EAAkDC,CAAAA,EAAAA,EAAAA,EAAAA,IAClDpE,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,IAAZD,OAAAA,CAEFqE,EAAUnE,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB8D,EAAYhE,GACtCsE,EAAWpE,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB+C,EAAajD,WAG1CmE,CAAAA,IACEE,GAAW9B,OAAOgC,IAAI,CAACJ,GAAmBK,QAAQ,CAACH,EAAQzD,OAAO,GAGlE0D,GAAY/B,OAAOgC,IAAI,CAACJ,GAAmBK,QAAQ,CAACF,EAAS1D,OAAO,EAJtEuD,CAUN,CAEO,SAASM,EAAwBT,CAAqB,CAAEf,CAAsB,CAAW,CAC9F,IAAMyB,EAA8CC,CAAAA,EAAAA,EAAAA,EAAAA,IAC9C3E,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,IAAZD,OAAAA,CAEFqE,EAAUnE,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB8D,EAAYhE,GACtCsE,EAAWpE,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB+C,EAAajD,WAE1C0E,CAAAA,IACEL,GAAW9B,OAAOgC,IAAI,CAACG,GAAeF,QAAQ,CAACH,EAAQzD,OAAO,GAG9D0D,GAAY/B,OAAOgC,IAAI,CAACG,GAAeF,QAAQ,CAACF,EAAS1D,OAAO,EAJlE8D,CAUN,2pXCvLO,SAASE,EAAqBC,CAAW,CAAW,CACzD,OAAO,IAAIC,EAAAA,EAAOA,CAACC,EAAAA,EAAAA,CAAAA,MAAW,CAACF,GAAMG,EAAAA,EAASA,CAChD,CAEO,SAASC,EAAwBC,CAA+B,CAAEC,CAAgB,CAAgB,CACvG,GAAIA,EAAW,GAAKA,EAAW,IAC7B,MAAMC,MAAM,8BAAuC9D,MAAA,CAAT6D,GAAW,CAEvD,MAAO,CACLJ,EAAAA,EAAAA,CAAAA,MAAW,CAACA,EAAAA,EAAAA,CAAAA,QAAa,CAACG,EAAMG,QAAQ,CAAEN,EAAAA,EAAAA,CAAAA,MAAW,CAAC,IAAQI,IAAYH,EAAAA,EAASA,EACnFD,EAAAA,EAAAA,CAAAA,MAAW,CAACA,EAAAA,EAAAA,CAAAA,QAAa,CAACG,EAAMG,QAAQ,CAAEN,EAAAA,EAAAA,CAAAA,MAAW,CAAC,IAAQI,IAAYH,EAAAA,EAASA,EACpF,CAGI,SAASM,GAAoB,CAClC,IAAMtF,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,IAAZD,OAAAA,CACR,MAAOuF,CAAAA,EAAAA,EAAAA,EAAAA,EAA8BC,EAAAA,EAAc,CAACxF,EAAQ,CAAEyF,EAAqB,GACrF,CAGO,SAASC,EAA2BC,CAAkD,CAG3F,CAGA,IAAMC,EAAgB,EAElBC,EAAAA,EAAAA,CAAAA,QAA4B,CAC1BF,EAAMG,KAAK,CAACC,KAAK,CAACpD,MAAM,CACtB,SAACqD,CAAAA,CAAAA,QAAmCA,EAAWC,QAAQ,CAACC,EAAAA,EAAwBA,GAChFL,EAAAA,EAAmBA,GAJvB1F,KAAAA,CAMC,CAGCgG,EAAgCR,GAASC,EAAgBD,MAAAA,EAAAA,KAAAA,EAAAA,EAAOS,WAAW,CAACC,QAAQ,CAACT,EAAc,CAAGzF,KAAAA,CAAS,CAgBrH,MAAO,CAAEmG,sBAb4BH,EACjC,IAAIrB,EAAAA,EAAOA,CAACqB,MAAAA,EAAAA,KAAAA,EAAAA,EAA+BI,SAAS,CAAEJ,MAAAA,EAAAA,KAAAA,EAAAA,EAA+BK,WAAW,EAChGrG,KAAAA,CAAS,CAWiDyF,cAP5DA,GACAD,GACAc,EAAAA,EAAAA,CAAAA,aAA4B,CAC1Bd,EAAMe,WAAW,CAACvD,QAAQ,CAC1ByC,EAAcK,QAAQ,CAACN,EAAMe,WAAW,CAACrB,QAAQ,EAAEA,QAAQ,CAGkC,CACnG,CAIO,SAASsB,EACdhB,CAAqE,CACrEiB,CAAuB,CAC0B,CACjD,IACOC,EADDC,EAAMlC,EAAqBgC,GACjC,OAAOC,EAAA,MAAAE,EAAAhG,CAAA,EAAA8F,EACJG,EAAAA,EAAAA,CAAAA,KAAW,CAAGrB,MAAAA,EAAAA,KAAAA,EAAAA,EAAOsB,eAAe,CAACH,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EADjCD,EAEJG,EAAAA,EAAAA,CAAAA,MAAY,CAAGrB,MAAAA,EAAAA,KAAAA,EAAAA,EAAOuB,gBAAgB,CAACJ,EAAAA,EAFnCD,CAAA,CAMF,SAASM,EAAgBf,CAAgC,CAAqB,OACnF,CAAKA,MAAAA,EAAAA,KAAAA,EAAAA,EAAagB,QAAQ,CAACC,EAAAA,EAA+BA,CAAAA,EACrDjB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAagB,QAAQ,CAACE,EAAAA,EAAyBA,CAAAA,EAC/ClB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAagB,QAAQ,CAACG,EAAAA,EAA2BA,CAAAA,EACjDnB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAagB,QAAQ,CAACI,EAAAA,EAAwBA,CAAAA,EAC5C,EADsD,EADG,EADF,EADM,EAO/D,SAASC,EACd9B,CAA0D,CAC1D+B,CAAkB,CACV,QACR,EAGOA,EACH,GAAqD/B,MAAAA,CAAlDA,EAAMgC,cAAc,CAACC,MAAM,GAAGC,aAAa,CAAC,GAAG,KAChDlC,MAAAA,CADmDA,EAAMe,WAAW,CAACvD,QAAQ,CAAC2E,MAAM,CAAC,OAEtFxG,MAAA,CADCqE,EAAMoC,YAAY,CAAC5E,QAAQ,CAAC2E,MAAM,EAEpC,GAA4CnC,MAAAA,CAAzCA,EAAMgC,cAAc,CAACE,aAAa,CAAC,GAAG,KACvClC,MAAAA,CAD0CA,EAAMoC,YAAY,CAAC5E,QAAQ,CAAC2E,MAAM,CAAC,OAE9ExG,MAAA,CADCqE,EAAMe,WAAW,CAACvD,QAAQ,CAAC2E,MAAM,CACjC,CARG,EACR,iDChFHE,CAAAA,EAAA,EAlBA,SAA4C9C,CAAc,CAAE/B,CAAY,CAAiC,CACvG,GAAI,GAAWA,EAGf,GAAI,CACF,IAAM8E,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWhD,EAAO/B,EAASgF,QAAQ,EAAEC,QAAQ,GAEtE,GAAIH,MAAAA,EACF,OAAOxB,EAAAA,EAAAA,CAAAA,aAA4B,CAACtD,EAAU4B,EAAAA,EAAAA,CAAAA,MAAW,CAACkD,GAC3D,CACD,MAAOI,EAAO,CAEdC,QAAQC,KAAK,CAAC,kCAAwCjH,MAAA,CAAN4D,EAAM,KAAImD,EAC5D,CAVC,AAaH","sources":["webpack://_N_E/./src/hooks/Trades.ts","webpack://_N_E/./src/utils/exchange.ts","webpack://_N_E/../../packages/utils/tryParseAmount.ts","webpack://_N_E/<anon>"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { Currency, CurrencyAmount, isTradeBetter, Pair, Token, Trade, TradeType } from '@pancakeswap/sdk'\nimport flatMap from 'lodash/flatMap'\nimport { useMemo } from 'react'\n\nimport { useUserSingleHopOnly } from 'state/user/hooks'\nimport {\n  BASES_TO_CHECK_TRADES_AGAINST,\n  CUSTOM_BASES,\n  BETTER_TRADE_LESS_HOPS_THRESHOLD,\n  ADDITIONAL_BASES,\n} from 'config/constants/exchange'\nimport { PairState, usePairs } from './usePairs'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nimport { useUnsupportedTokens, useWarningTokens } from './Tokens'\nimport { useActiveChainId } from './useActiveChainId'\n\nexport function useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const { chainId } = useActiveChainId()\n\n  const [tokenA, tokenB] = chainId\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n    : [undefined, undefined]\n\n  const bases: Token[] = useMemo(() => {\n    if (!chainId) return []\n\n    const common = BASES_TO_CHECK_TRADES_AGAINST[chainId] ?? []\n    const additionalA = tokenA ? ADDITIONAL_BASES[chainId]?.[tokenA.address] ?? [] : []\n    const additionalB = tokenB ? ADDITIONAL_BASES[chainId]?.[tokenB.address] ?? [] : []\n\n    return [...common, ...additionalA, ...additionalB]\n  }, [chainId, tokenA, tokenB])\n\n  const basePairs: [Token, Token][] = useMemo(\n    () => flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])),\n    [bases],\n  )\n\n  const allPairCombinations: [Token, Token][] = useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n          ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            .filter(([tokenA_, tokenB_]) => {\n              if (!chainId) return true\n              const customBases = CUSTOM_BASES[chainId]\n\n              const customBasesA: Token[] | undefined = customBases?.[tokenA_.address]\n              const customBasesB: Token[] | undefined = customBases?.[tokenB_.address]\n\n              if (!customBasesA && !customBasesB) return true\n\n              if (customBasesA && !customBasesA.find((base) => tokenB_.equals(base))) return false\n              if (customBasesB && !customBasesB.find((base) => tokenA_.equals(base))) return false\n\n              return true\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId],\n  )\n\n  const allPairs = usePairs(allPairCombinations)\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\n            return memo\n          }, {}),\n      ),\n    [allPairs],\n  )\n}\n\nconst MAX_HOPS = 3\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(\n  currencyAmountIn?: CurrencyAmount<Currency>,\n  currencyOut?: Currency,\n): Trade<Currency, Currency, TradeType> | null {\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade<Currency, Currency, TradeType> | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade: Trade<Currency, Currency, TradeType> | null =\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        // if current trade is best yet, save it\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n\n    return null\n  }, [allowedPairs, currencyAmountIn, currencyOut, singleHopOnly])\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(\n  currencyIn?: Currency,\n  currencyAmountOut?: CurrencyAmount<Currency>,\n): Trade<Currency, Currency, TradeType> | null {\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade<Currency, Currency, TradeType> | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade =\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n    return null\n  }, [currencyIn, currencyAmountOut, allowedPairs, singleHopOnly])\n}\n\nexport function useIsTransactionUnsupported(currencyIn?: Currency, currencyOut?: Currency): boolean {\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n  const { chainId } = useActiveChainId()\n\n  const tokenIn = wrappedCurrency(currencyIn, chainId)\n  const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n  // if unsupported list loaded & either token on list, mark as unsupported\n  if (unsupportedTokens) {\n    if (tokenIn && Object.keys(unsupportedTokens).includes(tokenIn.address)) {\n      return true\n    }\n    if (tokenOut && Object.keys(unsupportedTokens).includes(tokenOut.address)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport function useIsTransactionWarning(currencyIn?: Currency, currencyOut?: Currency): boolean {\n  const warningTokens: { [address: string]: Token } = useWarningTokens()\n  const { chainId } = useActiveChainId()\n\n  const tokenIn = wrappedCurrency(currencyIn, chainId)\n  const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n  if (warningTokens) {\n    if (tokenIn && Object.keys(warningTokens).includes(tokenIn.address)) {\n      return true\n    }\n    if (tokenOut && Object.keys(warningTokens).includes(tokenOut.address)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import { Currency, CurrencyAmount, Fraction, JSBI, Percent, Trade, TradeType } from '@pancakeswap/sdk'\nimport IPancakeRouter02ABI from 'config/abi/IPancakeRouter02.json'\nimport { IPancakeRouter02 } from 'config/abi/types/IPancakeRouter02'\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BIPS_BASE,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  INPUT_FRACTION_AFTER_FEE,\n  ONE_HUNDRED_PERCENT,\n  ROUTER_ADDRESS,\n} from 'config/constants/exchange'\n\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { useContract } from 'hooks/useContract'\nimport { StableTrade } from 'views/Swap/StableSwap/hooks/useStableTradeExactIn'\nimport { Field } from '../state/swap/actions'\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), BIPS_BASE)\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount<Currency>, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.quotient, JSBI.BigInt(10000 - slippage)), BIPS_BASE),\n    JSBI.divide(JSBI.multiply(value.quotient, JSBI.BigInt(10000 + slippage)), BIPS_BASE),\n  ]\n}\n\nexport function useRouterContract() {\n  const { chainId } = useActiveChainId()\n  return useContract<IPancakeRouter02>(ROUTER_ADDRESS[chainId], IPancakeRouter02ABI, true)\n}\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade: Trade<Currency, Currency, TradeType> | null): {\n  priceImpactWithoutFee: Percent | undefined\n  realizedLPFee: CurrencyAmount<Currency> | undefined | null\n} {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n          ONE_HUNDRED_PERCENT,\n        ),\n      )\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade?.priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    CurrencyAmount.fromRawAmount(\n      trade.inputAmount.currency,\n      realizedLPFee.multiply(trade.inputAmount.quotient).quotient,\n    )\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\n\nexport function computeSlippageAdjustedAmounts(\n  trade: Trade<Currency, Currency, TradeType> | StableTrade | undefined,\n  allowedSlippage: number,\n): { [field in Field]?: CurrencyAmount<Currency> } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct),\n  }\n}\n\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\n  return 0\n}\n\nexport function formatExecutionPrice(\n  trade?: Trade<Currency, Currency, TradeType> | StableTrade,\n  inverted?: boolean,\n): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n","import { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, JSBI } from '@pancakeswap/swap-sdk-core'\n\n// try to parse a user entered amount for a given token\nfunction tryParseAmount<T extends Currency>(value?: string, currency?: T): CurrencyAmount<T> | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n\n    if (typedValueParsed !== '0') {\n      return CurrencyAmount.fromRawAmount(currency, JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nexport default tryParseAmount\n"],"names":["useAllCommonPairs","currencyA","currencyB","chainId","useActiveChainId","wrappedCurrency","undefined","tokenA","tokenB","bases","useMemo","ADDITIONAL_BASES","BASES_TO_CHECK_TRADES_AGAINST","common","additionalA","address","additionalB","_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_10__","Z","basePairs","flatMap","base","map","otherBase","allPairCombinations","concat","filter","tokens","Boolean","param","t0","t1","tokenA_","tokenB_","customBases","CUSTOM_BASES","customBasesA","customBasesB","find","equals","allPairs","usePairs","Object","values","result","PairState","reduce","memo","curr","liquidityToken","useTradeExactIn","currencyAmountIn","currencyOut","allowedPairs","currency","singleHopOnly","useUserSingleHopOnly","length","Trade","maxHops","maxNumResults","bestTradeSoFar","i","currentTrade","isTradeBetter","BETTER_TRADE_LESS_HOPS_THRESHOLD","useTradeExactOut","currencyIn","currencyAmountOut","useIsTransactionUnsupported","unsupportedTokens","useUnsupportedTokens","tokenIn","tokenOut","keys","includes","useIsTransactionWarning","warningTokens","useWarningTokens","basisPointsToPercent","num","Percent","JSBI","BIPS_BASE","calculateSlippageAmount","value","slippage","Error","quotient","useRouterContract","useContract","ROUTER_ADDRESS","IPancakeRouter02ABI","computeTradePriceBreakdown","trade","realizedLPFee","ONE_HUNDRED_PERCENT","route","pairs","currentFee","multiply","INPUT_FRACTION_AFTER_FEE","priceImpactWithoutFeeFraction","priceImpact","subtract","priceImpactWithoutFee","numerator","denominator","CurrencyAmount","inputAmount","computeSlippageAdjustedAmounts","allowedSlippage","_obj","pct","_define_property","Field","maximumAmountIn","minimumAmountOut","warningSeverity","lessThan","BLOCKED_PRICE_IMPACT_NON_EXPERT","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_LOW","formatExecutionPrice","inverted","executionPrice","invert","toSignificant","symbol","outputAmount","__webpack_exports__","typedValueParsed","parseUnits","decimals","toString","error","console","debug"],"sourceRoot":""}