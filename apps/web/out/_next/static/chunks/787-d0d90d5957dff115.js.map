{"version":3,"file":"static/chunks/787-d0d90d5957dff115.js","mappings":"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","sources":["webpack://_N_E/./src/views/Info/components/InfoCharts/HoverableChart.tsx","webpack://_N_E/./src/views/Info/Overview/index.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/PoolsTable.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/TokensTable.tsx","webpack://_N_E/./src/views/Info/hooks/usePoolsData.ts","webpack://_N_E/<anon>"],"sourcesContent":["import { Box, Text, Skeleton } from '@pancakeswap/uikit'\nimport { fromUnixTime } from 'date-fns'\nimport { useState, useMemo, memo, useEffect } from 'react'\nimport { ChartEntry, ProtocolData } from 'state/info/types'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport BarChart from './BarChart'\nimport LineChart from './LineChart'\n\ninterface HoverableChartProps {\n  chartData: ChartEntry[]\n  protocolData: ProtocolData\n  currentDate: string\n  valueProperty: string\n  title: string\n  ChartComponent: typeof BarChart | typeof LineChart\n}\n\nconst HoverableChart = ({\n  chartData,\n  protocolData,\n  currentDate,\n  valueProperty,\n  title,\n  ChartComponent,\n}: HoverableChartProps) => {\n  const [hover, setHover] = useState<number | undefined>()\n  const [dateHover, setDateHover] = useState<string | undefined>()\n\n  // Getting latest data to display on top of chart when not hovered\n  useEffect(() => {\n    setHover(null)\n  }, [protocolData])\n\n  useEffect(() => {\n    if (hover == null && protocolData) {\n      setHover(protocolData[valueProperty])\n    }\n  }, [protocolData, hover, valueProperty])\n\n  const formattedData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day[valueProperty],\n        }\n      })\n    }\n    return []\n  }, [chartData, valueProperty])\n\n  return (\n    <Box p={['16px', '16px', '24px']}>\n      <Text bold color=\"secondary\">\n        {title}\n      </Text>\n      {hover > -1 ? ( // sometimes data is 0\n        <Text bold fontSize=\"24px\">\n          ${formatAmount(hover)}\n        </Text>\n      ) : (\n        <Skeleton width=\"128px\" height=\"36px\" />\n      )}\n      <Text>{dateHover ?? currentDate}</Text>\n      <Box height=\"250px\">\n        <ChartComponent data={formattedData} setHoverValue={setHover} setHoverDate={setDateHover} />\n      </Box>\n    </Box>\n  )\n}\n\nexport default memo(HoverableChart)\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Card, Flex, Heading } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { useMemo } from 'react'\nimport {\n  useAllTokenDataSWR,\n  useProtocolChartDataSWR,\n  useProtocolDataSWR,\n  useProtocolTransactionsSWR,\n} from 'state/info/hooks'\nimport styled from 'styled-components'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport HoverableChart from '../components/InfoCharts/HoverableChart'\nimport { usePoolsData } from '../hooks/usePoolsData'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst Overview: React.FC<React.PropsWithChildren> = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  const protocolData = useProtocolDataSWR()\n  const chartData = useProtocolChartDataSWR()\n  const transactions = useProtocolTransactionsSWR()\n\n  const currentDate = useMemo(\n    () => new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' }),\n    [locale],\n  )\n\n  const allTokens = useAllTokenDataSWR()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token.name !== 'unknown')\n  }, [allTokens])\n\n  const { poolsData } = usePoolsData()\n\n  const somePoolsAreLoading = useMemo(() => {\n    return poolsData.some((pool) => !pool?.token0Price)\n  }, [poolsData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('PancakeSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <HoverableChart\n            chartData={chartData}\n            protocolData={protocolData}\n            currentDate={currentDate}\n            valueProperty=\"liquidityUSD\"\n            title={t('Liquidity')}\n            ChartComponent={LineChart}\n          />\n        </Card>\n        <Card>\n          <HoverableChart\n            chartData={chartData}\n            protocolData={protocolData}\n            currentDate={currentDate}\n            valueProperty=\"volumeUSD\"\n            title={t('Volume 24H')}\n            ChartComponent={BarChart}\n          />\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pairs')}\n      </Heading>\n      <PoolTable poolDatas={poolsData} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import { useTranslation } from '@pancakeswap/localization'\nimport { ArrowBackIcon, ArrowForwardIcon, Box, Flex, NextLinkFromReactRouter, Skeleton, Text } from '@pancakeswap/uikit'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { Fragment, useCallback, useEffect, useMemo, useState } from 'react'\nimport { useGetChainName, useMultiChainPath, useStableSwapPath } from 'state/info/hooks'\nimport { PoolData } from 'state/info/types'\nimport styled from 'styled-components'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { Arrow, Break, ClickableColumnHeader, PageButtons, TableWrapper } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC<React.PropsWithChildren> = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC<React.PropsWithChildren> = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  const chainName = useGetChainName()\n  const chainPath = useMultiChainPath()\n  const stableSwapPath = useStableSwapPath()\n  return (\n    <LinkWrapper to={`/info${chainPath}/pairs/${poolData.address}${stableSwapPath}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo\n            address0={poolData.token0.address}\n            address1={poolData.token1.address}\n            chainName={chainName}\n          />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<React.PropsWithChildren<PoolTableProps>> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pair')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import { useState, useMemo, useCallback, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Flex,\n  Box,\n  Skeleton,\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  useMatchBreakpoints,\n  NextLinkFromReactRouter,\n} from '@pancakeswap/uikit'\nimport { useGetChainName, useMultiChainPath, useStableSwapPath } from 'state/info/hooks'\nimport { TokenData } from 'state/info/types'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from '@pancakeswap/localization'\nimport orderBy from 'lodash/orderBy'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { Arrow, Break, ClickableColumnHeader, PageButtons, TableWrapper } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC<React.PropsWithChildren> = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<React.PropsWithChildren<{ tokenData: TokenData; index: number }>> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const chainName = useGetChainName()\n  const chianPath = useMultiChainPath()\n  const stableSwapPath = useStableSwapPath()\n  return (\n    <LinkWrapper to={`/info${chianPath}/tokens/${tokenData.address}${stableSwapPath}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} chainName={chainName} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<\n  React.PropsWithChildren<{\n    tokenDatas: TokenData[] | undefined\n    maxItems?: number\n  }>\n> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? orderBy(\n          tokenDatas,\n          (tokenData) => tokenData[sortField as keyof TokenData],\n          sortDirection ? 'desc' : 'asc',\n        ).slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n","import { useMemo } from 'react'\nimport { checkIsStableSwap } from 'state/info/constant'\nimport { useAllPoolDataSWR, useStableSwapTopPoolsAPR } from 'state/info/hooks'\n\nexport const usePoolsData = () => {\n  const isStableSwap = checkIsStableSwap()\n\n  // get all the pool datas that exist\n  const allPoolData = useAllPoolDataSWR()\n\n  const poolAddresses = useMemo(() => {\n    return Object.keys(allPoolData)\n  }, [allPoolData])\n\n  const stableSwapsAprs = useStableSwapTopPoolsAPR(poolAddresses)\n  // get all the pool datas that exist\n  const poolsData = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => {\n        return {\n          ...pool.data,\n          ...(isStableSwap && stableSwapsAprs && { lpApr7d: stableSwapsAprs[pool.data.address] }),\n        }\n      })\n      .filter((pool) => pool.token1.name !== 'unknown' && pool.token0.name !== 'unknown')\n  }, [allPoolData, isStableSwap, stableSwapsAprs])\n  return { poolsData, stableSwapsAprs }\n}\n"],"names":["InfoCharts_HoverableChart","memo","param","chartData","protocolData","currentDate","valueProperty","title","ChartComponent","useState","hover","setHover","dateHover","setDateHover","useEffect","formattedData","useMemo","map","day","time","fromUnixTime","date","value","jsx_runtime","jsxs","Box","p","jsx","Text","bold","color","fontSize","formatAmount","Skeleton","width","height","data","setHoverValue","setHoverDate","ChartCardsContainer","styled","Flex","theme","mediaQueries","md","Info_Overview","useTranslation","t","currentLanguage","locale","useProtocolDataSWR","useProtocolChartDataSWR","transactions","useProtocolTransactionsSWR","Date","toLocaleString","month","year","allTokens","useAllTokenDataSWR","formattedTokens","Object","values","token","filter","name","poolsData","usePoolsData","somePoolsAreLoading","some","pool","token0Price","Page","Heading","scale","mb","id","Card","HoverableChart","LineChart","BarChart","mt","TokenTable","tokenDatas","PoolTable","poolDatas","loading","TransactionTable","ResponsiveGrid","LinkWrapper","NextLinkFromReactRouter","SORT_FIELD","volumeUSD","liquidityUSD","volumeUSDWeek","lpFees24h","lpApr7d","LoadingRow","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","TableLoader","Fragment","DataRow","poolData","index","chainName","useGetChainName","chainPath","useMultiChainPath","stableSwapPath","useStableSwapPath","to","address","concat","DoubleCurrencyLogo","address0","token0","address1","token1","ml","symbol","__webpack_exports__","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","length","ITEMS_PER_INFO_TABLE_PAGE","Math","floor","sortedPools","sort","a","b","slice","handleSort","useCallback","newField","arrow","field","TableWrapper","textTransform","ClickableColumnHeader","onClick","Break","i","PageButtons","Arrow","ArrowBackIcon","ArrowForwardIcon","ResponsiveLogo","CurrencyLogo","loadingRow","tokenData","useMatchBreakpoints","isXs","isSm","chianPath","alignItems","marginLeft","fontWeight","priceUSD","notation","Percent","priceUSDChange","priceUSDChangeWeek","maxItems","MAX_ITEMS","sortedTokens","orderBy","isStableSwap","checkIsStableSwap","allPoolData","useAllPoolDataSWR","poolAddresses","keys","stableSwapsAprs","useStableSwapTopPoolsAPR","_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_3__","Z"],"sourceRoot":""}