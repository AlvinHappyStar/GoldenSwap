{"version":3,"file":"static/chunks/1178-dd7ad8fdd96f319c.js","mappings":"mGAAe,SAAAA,EAAAC,CAAA,CAAAC,CAAA,EACf,GAAAD,IAAA,EAAAA,EACA,iFAGA,QAAAE,KAAAD,EACAE,OAAAC,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAL,EAAAC,IAEAF,CAAAA,CAAA,CAAAE,EAAA,CAAAD,CAAA,CAAAC,EAAA,EAIA,OAAAF,CACA,oHCZe,SAAAO,EAAAN,CAAA,EACf,MAAS,GAAAO,EAAAC,CAAA,EAAM,GAAGR,EAClB,sECHA,IAAAS,EAAA,CACAC,KAAAC,KAAAD,IAAA,CACAE,MAAAD,KAAAC,KAAA,CACAC,MAAAF,KAAAE,KAAA,CACAC,MAAA,SAAAC,CAAA,EACA,OAAAA,EAAA,EAAAJ,KAAAD,IAAA,CAAAK,GAAAJ,KAAAE,KAAA,CAAAE,EAAA,CAGA,EAEO,SAAAC,EAAAC,CAAA,EACP,OAAAA,EAAAR,CAAA,CAAAQ,EAAA,CAAAR,EAFA,KAEA,+FCwBe,SAAAS,EAAAC,CAAA,CAAAC,CAAA,EACb,GAAAC,EAAAb,CAAA,EAAY,EAAAc,WACd,IAAAC,EAAiB,GAAAC,EAAAhB,CAAA,EAAMW,GACvBM,EAAkB,GAAAD,EAAAhB,CAAA,EAAMY,GACxBM,EAAAH,EAAAI,OAAA,GAAAF,EAAAE,OAAA,UAEA,IACA,GACID,EAAA,EACJ,EAEAA,CACA,uHCLO,IAAAE,EAAA,IAUAC,EAAA,KAsEAC,EAAA,yHC9FQ,SAAAC,EAAAR,CAAA,CAAAE,CAAA,CAAAO,CAAA,EACb,GAAAX,EAAAb,CAAA,EAAY,EAAAc,WACd,IAAAI,EAAa,GAAAO,EAAAzB,CAAA,EAAwBe,EAAAE,GAAwBS,EAAAC,EAAkB,CAC/E,MAAS,GAAAC,EAAAC,CAAA,EAAiBL,MAAAA,EAAA,OAAAA,EAAAM,cAAA,EAAAZ,EAC1B,gGCPe,SAAAa,EAAAhB,CAAA,CAAAE,CAAA,EAEf,MADE,GAAAJ,EAAAb,CAAA,EAAY,EAAAc,WACL,GAAAE,EAAAhB,CAAA,EAAMe,GAAAI,OAAA,GAAuB,GAAAH,EAAAhB,CAAA,EAAMiB,GAAAE,OAAA,EAC5C,2GCAe,SAAAa,EAAAjB,CAAA,CAAAE,CAAA,CAAAO,CAAA,EACb,GAAAX,EAAAb,CAAA,EAAY,EAAAc,WACd,IAAAI,EAAa,GAAAO,EAAAzB,CAAA,EAAwBe,EAAAE,GAAA,IACrC,MAAS,GAAAgB,EAAAJ,CAAA,EAAiBL,MAAAA,EAAA,OAAAA,EAAAM,cAAA,EAAAZ,EAC1B,2GCae,SAAAgB,EAAAnB,CAAA,CAAAE,CAAA,CAAAO,CAAA,EACb,GAAAX,EAAAb,CAAA,EAAY,EAAAc,WACd,IAAAI,EAAa,GAAAiB,EAAAnC,CAAA,EAAgBe,EAAAE,GAAA,EAC7B,MAAS,GAAAgB,EAAAJ,CAAA,EAAiBL,MAAAA,EAAA,OAAAA,EAAAM,cAAA,EAAAZ,EAC1B,gKE4Be,SAAAkB,EAAAC,CAAA,CAAAb,CAAA,EAEf,MADE,GAAAc,EAAAtC,CAAA,EAAY,EAAAc,WACLyB,SDeMF,CAAA,CAAAG,CAAA,CAAAhB,CAAA,EAGb,GAAAc,EAAAtC,CAAA,EAAY,EAAAc,WACd,IAHA2B,EAAAC,EAAAC,EAoBA5B,EACAE,EAWA2B,EAmBAC,EAhDAC,EAAuB,GAAAC,EAAAC,CAAA,IACvBC,EAAA,OAAAR,CAAAA,EAAA,OAAAC,CAAAA,EAAAlB,MAAAA,EAAA,OAAAA,EAAAyB,MAAA,GAAAP,KAAA,IAAAA,EAAAA,EAAAI,EAAAG,MAAA,GAAAR,KAAA,IAAAA,EAAAA,EAAmOS,EAAAlD,CAAa,CAEhP,IAAAiD,EAAAE,cAAA,CACA,yEAGA,IAAAC,EAAmB,GAAA1C,EAAAV,CAAA,EAAUqC,EAAAG,GAE7B,GAAAa,MAAAD,GACA,uCAGA,IAAAE,EAAwB,GAAAC,EAAAvD,CAAA,EAAO,GAAAF,EAAAE,CAAA,EAAWwB,GAAA,CAC1CgC,UAAAC,QAAAjC,MAAAA,EAAA,OAAAA,EAAAgC,SAAA,EACAJ,WAAAA,CACA,EAIAA,CAAAA,EAAA,GACArC,EAAe,GAAA2C,EAAA1D,CAAA,EAAMwC,GACrBvB,EAAgB,GAAAyC,EAAA1D,CAAA,EAAMqC,KAEtBtB,EAAe,GAAA2C,EAAA1D,CAAA,EAAMqC,GACrBpB,EAAgB,GAAAyC,EAAA1D,CAAA,EAAMwC,IAGtB,IAAAV,EAAA6B,OAAA,OAAAhB,CAAAA,EAAAnB,MAAAA,EAAA,OAAAA,EAAAM,cAAA,GAAAa,KAAA,IAAAA,EAAAA,EAAA,SAGA,GAAAb,UAAAA,EACAc,EAAAzC,KAAAE,KAAA,MACI,GAAAyB,SAAAA,EACJc,EAAAzC,KAAAD,IAAA,MACI,GAAA4B,UAAAA,EACJc,EAAAzC,KAAAC,KAAA,MAEA,sEAGA,IAAAwD,EAAA3C,EAAAE,OAAA,GAAAJ,EAAAI,OAAA,GACA0C,EAAAD,EApIA,IAwIAE,EAAA,CAAAF,EAHuB,IAAAG,EAAA/D,CAAA,EAA+BiB,GAAc,GAAA8C,EAAA/D,CAAA,EAA+Be,EAAA,CAGnG,EAxIA,IAyIAiD,EAAAxC,MAAAA,EAAA,OAAAA,EAAAqB,IAAA,CAsBA,GAAAA,YAJAA,EAfAmB,EAeAL,OAAAK,GAdAH,EAAA,EACA,SACMA,EAAA,GACN,SACMA,EAhJN,KAiJA,OACMC,EAjJNG,MAkJA,MACMH,EAlJNG,OAmJA,QAEA,QAOA,CACA,IAAAC,EAAAtB,EAAAgB,EAAA,KACA,OAAAX,EAAAE,cAAA,YAAAe,EAAAZ,EACA,CAeA,GAfIT,WAAAA,EAAA,CACJ,IAAAsB,EAAAvB,EAAAiB,GACA,OAAAZ,EAAAE,cAAA,YAAAgB,EAAAb,EACA,CAYA,GAZIT,SAAAA,EAAA,CACJ,IAAAuB,EAAAxB,EAAAiB,EAAA,IACA,OAAAZ,EAAAE,cAAA,UAAAiB,EAAAd,EACA,CASA,GATIT,QAAAA,EAAA,CACJ,IAAAwB,EAAAzB,EAAAkB,EAxKA,MAyKA,OAAAb,EAAAE,cAAA,SAAAkB,EAAAf,EACA,CAMA,GANIT,UAAAA,EAAA,CACJ,IAAAyB,EAAA1B,EAAAkB,EA1KAG,OA2KA,OAAAK,KAAAA,GAAAN,UAAAA,EAAAf,EAAAE,cAAA,YAAAG,GAAAL,EAAAE,cAAA,WAAAmB,EAAAhB,EAAA,CAIA,GAHIT,SAAAA,EAAA,CACJ,IAAA0B,EAAA3B,EAAAkB,EA5KAG,QA6KA,OAAAhB,EAAAE,cAAA,UAAAoB,EAAAjB,EACA,OAEA,iFC5G6BjB,EAAAmC,KAAAC,GAAA,GAAAjD,EAC7B,gGC9EAkD,EAAA,8DAgEe,SAAAC,EAAAC,CAAA,CAAApD,CAAA,EAGf,GAAAV,UAAA+D,MAAA,GACA,iDAAAC,MAAA,CAAAhE,UAAA+D,MAAA,cAGA,IANApC,EAAAC,EAAAqC,EAAAC,EAAAC,EAMAnC,EAAuB,GAAAoC,EAAAlC,CAAA,IACvBC,EAAA,OAAAR,CAAAA,EAAA,OAAAC,CAAAA,EAAAlB,MAAAA,EAAA,OAAAA,EAAAyB,MAAA,GAAAP,KAAA,IAAAA,EAAAA,EAAAI,EAAAG,MAAA,GAAAR,KAAA,IAAAA,EAAAA,EAAmO0C,EAAAnF,CAAa,CAChPoF,EAAA,OAAAL,CAAAA,EAAAvD,MAAAA,EAAA,OAAAA,EAAA4D,MAAA,GAAAL,KAAA,IAAAA,EAAAA,EAAAL,CAAA,CACAW,EAAA,OAAAL,CAAAA,EAAAxD,MAAAA,EAAA,OAAAA,EAAA6D,IAAA,GAAAL,KAAA,IAAAA,GAAAA,EACAM,EAAA,OAAAL,CAAAA,EAAAzD,MAAAA,EAAA,OAAAA,EAAA8D,SAAA,GAAAL,KAAA,IAAAA,EAAAA,EAAA,WAEA,EAAA9B,cAAA,CAIAiC,EAAAG,MAAA,UAAAC,CAAA,CAAA3C,CAAA,EACA,IAAA4C,EAAA,IAAAX,MAAA,CAAAjC,EAAA6C,OAAA,iBAAAC,CAAA,EACA,OAAAA,EAAAC,WAAA,EACA,IACArF,EAAAqE,CAAA,CAAA/B,EAAA,OAEA,iBAAAtC,GAAA8E,CAAAA,GAAAT,CAAA,CAAA/B,EAAA,EACA2C,EAAAV,MAAA,CAAA7B,EAAAE,cAAA,CAAAsC,EAAAlF,IAGAiF,CAFA,EAGG,IAAAK,IAAA,CAAAP,GAdH,EACA,gGCvDe,SAAAQ,EAAA5B,CAAA,EAGf,MAFE,GAAArD,EAAAb,CAAA,EAAY,EAAAc,WAEdX,KAAAE,KAAA,CADA6D,EAAwB6B,EAAAC,EAAa,CAErC,yBC9BA,IAAAC,EAAeC,EAAQ,MAqCvBC,CAAAA,EAAAC,OAAA,CAPA,SAAA7F,CAAA,EAIA,OAAA0F,EAAA1F,IAAAA,GAAA,CAAAA,CACA,yBCnCA,IAAA8F,EAAiBH,EAAQ,OACzBI,EAAmBJ,EAAQ,MAoC3BC,CAAAA,EAAAC,OAAA,CALA,SAAA7F,CAAA,EACA,uBAAAA,GACA+F,EAAA/F,IAAA8F,mBAAAA,EAAA9F,EACA,yBCnCA,IAAAgG,EAAeL,EAAQ,MA4BvBC,CAAAA,EAAAC,OAAA,CAPA,WACA,IAAAI,EAAA1F,UACA2F,EAAAF,EAAAC,CAAA,KAEA,OAAAA,EAAA3B,MAAA,GAAA4B,EAAAA,EAAAf,OAAA,CAAAc,CAAA,IAAAA,CAAA,IACA","sources":["webpack://_N_E/../../node_modules/date-fns/esm/_lib/assign/index.js","webpack://_N_E/../../node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack://_N_E/../../node_modules/date-fns/esm/_lib/roundingMethods/index.js","webpack://_N_E/../../node_modules/date-fns/esm/compareAsc/index.js","webpack://_N_E/../../node_modules/date-fns/esm/constants/index.js","webpack://_N_E/../../node_modules/date-fns/esm/differenceInHours/index.js","webpack://_N_E/../../node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://_N_E/../../node_modules/date-fns/esm/differenceInSeconds/index.js","webpack://_N_E/../../node_modules/date-fns/esm/differenceInWeeks/index.js","webpack://_N_E/../../node_modules/date-fns/esm/formatDistanceStrict/index.js","webpack://_N_E/../../node_modules/date-fns/esm/formatDistanceToNowStrict/index.js","webpack://_N_E/../../node_modules/date-fns/esm/formatDuration/index.js","webpack://_N_E/../../node_modules/date-fns/esm/secondsToHours/index.js","webpack://_N_E/../../node_modules/lodash/isNaN.js","webpack://_N_E/../../node_modules/lodash/isNumber.js","webpack://_N_E/../../node_modules/lodash/replace.js","webpack://_N_E/<anon>"],"sourcesContent":["export default function assign(target, object) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  for (var property in object) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      ;\n      target[property] = object[property];\n    }\n  }\n\n  return target;\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(object) {\n  return assign({}, object);\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var daysInYear = 365.2425;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInDay = secondsInHour * 24;\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInWeek = secondsInDay * 7;\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInYear = secondsInDay * daysInYear;\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMonth = secondsInYear / 12;\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInQuarter = secondsInMonth * 3;","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInDays from \"../differenceInDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\n\nexport default function differenceInWeeks(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dateLeft, dateRight) / 7;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale, _options$roundingMeth;\n\n  requiredArgs(2, arguments);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = assign(cloneObject(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = String((_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : 'round');\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var defaultUnit = options === null || options === void 0 ? void 0 : options.unit;\n  var unit;\n\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(defaultUnit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && defaultUnit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","import formatDistanceStrict from \"../formatDistanceStrict/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceToNowStrict(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return formatDistanceStrict(dirtyDate, Date.now(), options);\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration, options) {\n  var _ref, _options$locale, _options$format, _options$zero, _options$delimiter;\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  var format = (_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : defaultFormat;\n  var zero = (_options$zero = options === null || options === void 0 ? void 0 : options.zero) !== null && _options$zero !== void 0 ? _options$zero : false;\n  var delimiter = (_options$delimiter = options === null || options === void 0 ? void 0 : options.delimiter) !== null && _options$delimiter !== void 0 ? _options$delimiter : ' ';\n\n  if (!locale.formatDistance) {\n    return '';\n  }\n\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var value = duration[unit];\n\n    if (typeof value === 'number' && (zero || duration[unit])) {\n      return acc.concat(locale.formatDistance(token, value));\n    }\n\n    return acc;\n  }, []).join(delimiter);\n  return result;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInHour } from \"../constants/index.js\";\n/**\n * @name secondsToHours\n * @category Conversion Helpers\n * @summary Convert seconds to hours.\n *\n * @description\n * Convert a number of seconds to a full number of hours.\n *\n * @param {number} seconds - number of seconds to be converted\n *\n * @returns {number} the number of seconds converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 7200 seconds into hours\n * const result = secondsToHours(7200)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = secondsToHours(7199)\n * //=> 1\n */\n\nexport default function secondsToHours(seconds) {\n  requiredArgs(1, arguments);\n  var hours = seconds / secondsInHour;\n  return Math.floor(hours);\n}","var isNumber = require('./isNumber');\n\n/**\n * Checks if `value` is `NaN`.\n *\n * **Note:** This method is based on\n * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n * `undefined` and other non-number values.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n * @example\n *\n * _.isNaN(NaN);\n * // => true\n *\n * _.isNaN(new Number(NaN));\n * // => true\n *\n * isNaN(undefined);\n * // => true\n *\n * _.isNaN(undefined);\n * // => false\n */\nfunction isNaN(value) {\n  // An `NaN` primitive is the only value that is not equal to itself.\n  // Perform the `toStringTag` check first to avoid errors with some\n  // ActiveX objects in IE.\n  return isNumber(value) && value != +value;\n}\n\nmodule.exports = isNaN;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","var toString = require('./toString');\n\n/**\n * Replaces matches for `pattern` in `string` with `replacement`.\n *\n * **Note:** This method is based on\n * [`String#replace`](https://mdn.io/String/replace).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to modify.\n * @param {RegExp|string} pattern The pattern to replace.\n * @param {Function|string} replacement The match replacement.\n * @returns {string} Returns the modified string.\n * @example\n *\n * _.replace('Hi Fred', 'Fred', 'Barney');\n * // => 'Hi Barney'\n */\nfunction replace() {\n  var args = arguments,\n      string = toString(args[0]);\n\n  return args.length < 3 ? string : string.replace(args[1], args[2]);\n}\n\nmodule.exports = replace;\n"],"names":["assign","target","object","property","Object","prototype","hasOwnProperty","call","cloneObject","_assign_index_js__WEBPACK_IMPORTED_MODULE_0__","Z","roundingMap","ceil","Math","round","floor","trunc","value","getRoundingMethod","method","compareAsc","dirtyDateLeft","dirtyDateRight","_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","arguments","dateLeft","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","dateRight","diff","getTime","millisecondsInMinute","millisecondsInHour","secondsInHour","differenceInHours","options","_differenceInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_1__","_constants_index_js__WEBPACK_IMPORTED_MODULE_2__","vh","_lib_roundingMethods_index_js__WEBPACK_IMPORTED_MODULE_3__","u","roundingMethod","differenceInMilliseconds","differenceInSeconds","_lib_roundingMethods_index_js__WEBPACK_IMPORTED_MODULE_2__","differenceInWeeks","_differenceInDays_index_js__WEBPACK_IMPORTED_MODULE_1__","formatDistanceToNowStrict","dirtyDate","requiredArgs","formatDistanceStrict","dirtyBaseDate","_ref","_options$locale","_options$roundingMeth","roundingMethodFn","unit","defaultOptions","_lib_defaultOptions","j","locale","defaultLocale","formatDistance","comparison","isNaN","localizeOptions","_lib_assign","addSuffix","Boolean","toDate","String","milliseconds","minutes","dstNormalizedMinutes","getTimezoneOffsetInMilliseconds","defaultUnit","MINUTES_IN_DAY","seconds","roundedMinutes","hours","days","months","years","Date","now","defaultFormat","formatDuration","duration","length","concat","_options$format","_options$zero","_options$delimiter","_lib_defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_0__","_lib_defaultLocale_index_js__WEBPACK_IMPORTED_MODULE_1__","format","zero","delimiter","reduce","acc","token","replace","m","toUpperCase","join","secondsToHours","_constants_index_js__WEBPACK_IMPORTED_MODULE_1__","R3","isNumber","__webpack_require__","module","exports","baseGetTag","isObjectLike","toString","args","string"],"sourceRoot":""}