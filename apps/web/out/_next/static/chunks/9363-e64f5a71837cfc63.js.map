{"version":3,"file":"static/chunks/9363-e64f5a71837cfc63.js","mappings":"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","sources":["webpack://_N_E/./src/utils/wallet.ts","webpack://_N_E/./src/components/AddToWallet/AddToWalletButton.tsx","webpack://_N_E/./src/components/Divider/index.tsx","webpack://_N_E/./src/components/Logo/constants.ts","webpack://_N_E/./src/hooks/useCakeApprovalStatus.ts","webpack://_N_E/./src/hooks/useCakeApprove.tsx","webpack://_N_E/./src/hooks/useVaultApy.ts","webpack://_N_E/./src/utils/timeHelper.ts","webpack://_N_E/./src/views/Pools/components/Apr.tsx","webpack://_N_E/./src/views/Pools/components/AutoEarningsBreakdown.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/FeeSummary.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Modals/AddAmountModal.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Buttons/AddCakeButton.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/StaticAmount.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Modals/ExtendDurationModal.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Buttons/ExtendDurationButton.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Buttons/ConvertToFlexibleButton.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/AfterLockedActions.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/BalanceField.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/BurningCountDown.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/ConvertToLock.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/LockDurationField.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/LockDurationRow.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/LockedAprTooltipContent.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/hooks/useLockedPool.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/LockedModalBody.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/Overview/CrossText.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/Overview/TextRow.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/Overview/BalanceRow.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/Overview/DateRow.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/utils/formatRoi.ts","webpack://_N_E/./src/views/Pools/components/LockedPool/utils/formatICake.ts","webpack://_N_E/./src/views/Pools/components/LockedPool/Buttons/CalculatorButton.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/Overview/index.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/YieldBoostRow.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Modals/LockedStakeModal.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Modals/RoiCalculatorModalProvider.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/hooks/useAvgLockDuration.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/hooks/useUserDataInVaultPresenter.ts","webpack://_N_E/./src/views/Pools/components/LockedPool/hooks/useUserEnoughCakeValidator.ts","webpack://_N_E/./src/views/Pools/components/Modals/NotEnoughTokensModal.tsx","webpack://_N_E/./src/views/Pools/components/MaxStakeRow.tsx","webpack://_N_E/./src/views/Pools/components/Stat.tsx","webpack://_N_E/./src/views/Pools/components/PoolStatsInfo.tsx","webpack://_N_E/./src/views/Pools/components/PoolTypeTag.tsx","webpack://_N_E/./src/views/Pools/components/Vault/VaultPositionTag.tsx","webpack://_N_E/./src/views/Pools/components/Vault/VaultRoiCalculatorModal.tsx","webpack://_N_E/./src/views/Pools/components/Vault/VaultStakeButtonGroup.tsx","webpack://_N_E/./src/views/Pools/components/utils/formatSecondsToWeeks.ts","webpack://_N_E/./src/state/actions.ts","webpack://_N_E/./src/views/Pools/hooks/useApprove.tsx","webpack://_N_E/./src/views/Pools/hooks/useWithdrawalFeeTimer.ts","webpack://_N_E/../../packages/utils/getTimePeriods.ts","webpack://_N_E/<anon>"],"sourcesContent":["// Set of helper functions to facilitate wallet setup\nimport { Address } from 'wagmi'\nimport { BAD_SRCS } from '../components/Logo/constants'\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (\n  tokenAddress: string,\n  tokenSymbol: string,\n  tokenDecimals: number,\n  tokenLogo?: string,\n) => {\n  // better leave this undefined for default image instead of broken image url\n  const image = tokenLogo ? (BAD_SRCS[tokenLogo] ? undefined : tokenLogo) : undefined\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress as Address,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n\nexport const canRegisterToken = () =>\n  typeof window !== 'undefined' &&\n  // @ts-ignore\n  !window?.ethereum?.isSafePal &&\n  (window?.ethereum?.isMetaMask ||\n    window?.ethereum?.isTrust ||\n    window?.ethereum?.isCoinbaseWallet ||\n    window?.ethereum?.isTokenPocket)\n","import { useTranslation } from '@pancakeswap/localization'\nimport {\n  BinanceChainIcon,\n  Button,\n  ButtonProps,\n  CoinbaseWalletIcon,\n  MetamaskIcon,\n  OperaIcon,\n  TokenPocketIcon,\n  TrustWalletIcon,\n} from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { canRegisterToken } from '../../utils/wallet'\nimport { BAD_SRCS } from '../Logo/constants'\n\nexport enum AddToWalletTextOptions {\n  NO_TEXT,\n  TEXT,\n  TEXT_WITH_ASSET,\n}\n\nexport interface AddToWalletButtonProps {\n  tokenAddress: string\n  tokenSymbol: string\n  tokenDecimals: number\n  tokenLogo: string\n  textOptions?: AddToWalletTextOptions\n  marginTextBetweenLogo?: string\n}\n\nconst Icons = {\n  // TODO: Brave\n  Binance: BinanceChainIcon,\n  'Coinbase Wallet': CoinbaseWalletIcon,\n  Opera: OperaIcon,\n  TokenPocket: TokenPocketIcon,\n  'Trust Wallet': TrustWalletIcon,\n  MetaMask: MetamaskIcon,\n}\n\nconst getWalletText = (textOptions: AddToWalletTextOptions, tokenSymbol: string, t: any) => {\n  return (\n    textOptions !== AddToWalletTextOptions.NO_TEXT &&\n    (textOptions === AddToWalletTextOptions.TEXT\n      ? t('Add to Wallet')\n      : t('Add %asset% to Wallet', { asset: tokenSymbol }))\n  )\n}\n\nconst getWalletIcon = (marginTextBetweenLogo: string, name?: string) => {\n  const iconProps = {\n    width: '16px',\n    ...(marginTextBetweenLogo && { ml: marginTextBetweenLogo }),\n  }\n  if (name && Icons[name]) {\n    const Icon = Icons[name]\n    return <Icon {...iconProps} />\n  }\n  if (window?.ethereum?.isTrust) {\n    return <TrustWalletIcon {...iconProps} />\n  }\n  if (window?.ethereum?.isCoinbaseWallet) {\n    return <CoinbaseWalletIcon {...iconProps} />\n  }\n  if (window?.ethereum?.isTokenPocket) {\n    return <TokenPocketIcon {...iconProps} />\n  }\n  if (window?.ethereum?.isMetaMask) {\n    return <MetamaskIcon {...iconProps} />\n  }\n  return <MetamaskIcon {...iconProps} />\n}\n\nconst AddToWalletButton: React.FC<AddToWalletButtonProps & ButtonProps> = ({\n  tokenAddress,\n  tokenSymbol,\n  tokenDecimals,\n  tokenLogo,\n  textOptions = AddToWalletTextOptions.NO_TEXT,\n  marginTextBetweenLogo = '0px',\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const { connector, isConnected } = useAccount()\n  const isCanRegisterToken = canRegisterToken()\n\n  if (connector && connector.name === 'Binance') return null\n  if (!(connector && connector.watchAsset && isConnected)) return null\n  if (!isCanRegisterToken) return null\n\n  return (\n    <Button\n      {...props}\n      onClick={() => {\n        const image = tokenLogo ? (BAD_SRCS[tokenLogo] ? undefined : tokenLogo) : undefined\n        connector.watchAsset?.({\n          address: tokenAddress,\n          symbol: tokenSymbol,\n          image,\n          // @ts-ignore\n          decimals: tokenDecimals,\n        })\n      }}\n    >\n      {getWalletText(textOptions, tokenSymbol, t)}\n      {getWalletIcon(marginTextBetweenLogo, connector?.name)}\n    </Button>\n  )\n}\n\nexport default AddToWalletButton\n","import styled from 'styled-components'\n\nconst Divider = styled.hr`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n`\n\nexport default Divider\n","export const BAD_SRCS: { [imageSrc: string]: true } = {}\n","import { useMemo } from 'react'\nimport { useAccount } from 'wagmi'\nimport { useCake } from 'hooks/useContract'\nimport { useSWRContract, UseSWRContractKey } from 'hooks/useSWRContract'\nimport BigNumber from 'bignumber.js'\n\n// TODO: refactor as useTokenApprovalStatus for generic use\n\nexport const useCakeApprovalStatus = (spender) => {\n  const { address: account } = useAccount()\n  const { reader: cakeContract } = useCake()\n\n  const key = useMemo<UseSWRContractKey>(\n    () =>\n      account && spender\n        ? {\n            contract: cakeContract,\n            methodName: 'allowance',\n            params: [account, spender],\n          }\n        : null,\n    [account, cakeContract, spender],\n  )\n\n  const { data, mutate } = useSWRContract(key)\n\n  return {\n    isVaultApproved: data ? data.gt(0) : false,\n    allowance: new BigNumber(data?.toString()),\n    setLastUpdated: mutate,\n  }\n}\n\nexport default useCakeApprovalStatus\n","import { MaxUint256 } from '@ethersproject/constants'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useCake } from 'hooks/useContract'\nimport { useToast } from '@pancakeswap/uikit'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\nconst useCakeApprove = (setLastUpdated: () => void, spender, successMsg) => {\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { signer: cakeContract } = useCake()\n\n  const handleApprove = async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return callWithGasPrice(cakeContract, 'approve', [spender, MaxUint256])\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        t('Contract Enabled'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>{successMsg}</ToastDescriptionWithTx>,\n      )\n      setLastUpdated()\n    }\n  }\n\n  return { handleApprove, pendingTx }\n}\n\nexport default useCakeApprove\n","import { BigNumber, FixedNumber } from '@ethersproject/bignumber'\nimport { WeiPerEther } from '@ethersproject/constants'\nimport _toString from 'lodash/toString'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport masterChefAbi from 'config/abi/masterchef.json'\nimport { useCallback, useMemo } from 'react'\nimport { useCakeVault } from 'state/pools/hooks'\nimport useSWRImmutable from 'swr/immutable'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { BOOST_WEIGHT, DURATION_FACTOR, MAX_LOCK_DURATION } from 'config/constants/pools'\nimport { multicallv2 } from '../utils/multicall'\n\nconst masterChefAddress = getMasterChefAddress()\n\n// default\nconst DEFAULT_PERFORMANCE_FEE_DECIMALS = 2\n\nconst PRECISION_FACTOR = BigNumber.from('1000000000000')\n\nconst getFlexibleApy = (\n  totalCakePoolEmissionPerYear: FixedNumber,\n  pricePerFullShare: FixedNumber,\n  totalShares: FixedNumber,\n) =>\n  totalCakePoolEmissionPerYear\n    .mulUnsafe(FixedNumber.from(WeiPerEther))\n    .divUnsafe(pricePerFullShare)\n    .divUnsafe(totalShares)\n    .mulUnsafe(FixedNumber.from(100))\n\nconst _getBoostFactor = (boostWeight: BigNumber, duration: number, durationFactor: BigNumber) => {\n  return FixedNumber.from(boostWeight)\n    .mulUnsafe(FixedNumber.from(Math.max(duration, 0)))\n    .divUnsafe(FixedNumber.from(durationFactor))\n    .divUnsafe(FixedNumber.from(PRECISION_FACTOR))\n}\n\nconst getLockedApy = (flexibleApy: string, boostFactor: FixedNumber) =>\n  FixedNumber.from(flexibleApy).mulUnsafe(boostFactor.addUnsafe(FixedNumber.from('1')))\n\nconst cakePoolPID = 0\n\nexport function useVaultApy({ duration = MAX_LOCK_DURATION }: { duration?: number } = {}) {\n  const {\n    totalShares = BIG_ZERO,\n    pricePerFullShare = BIG_ZERO,\n    fees: { performanceFeeAsDecimal } = { performanceFeeAsDecimal: DEFAULT_PERFORMANCE_FEE_DECIMALS },\n  } = useCakeVault()\n\n  const totalSharesAsEtherBN = useMemo(() => FixedNumber.from(totalShares.toString()), [totalShares])\n  const pricePerFullShareAsEtherBN = useMemo(() => FixedNumber.from(pricePerFullShare.toString()), [pricePerFullShare])\n\n  const { data: totalCakePoolEmissionPerYear } = useSWRImmutable('masterChef-total-cake-pool-emission', async () => {\n    const calls = [\n      {\n        address: masterChefAddress,\n        name: 'cakePerBlock',\n        params: [false],\n      },\n      {\n        address: masterChefAddress,\n        name: 'poolInfo',\n        params: [cakePoolPID],\n      },\n      {\n        address: masterChefAddress,\n        name: 'totalSpecialAllocPoint',\n      },\n    ]\n\n    const [[specialFarmsPerBlock], cakePoolInfo, [totalSpecialAllocPoint]] = await multicallv2({\n      abi: masterChefAbi,\n      calls,\n    })\n\n    const cakePoolSharesInSpecialFarms = FixedNumber.from(cakePoolInfo.allocPoint).divUnsafe(\n      FixedNumber.from(totalSpecialAllocPoint),\n    )\n    return FixedNumber.from(specialFarmsPerBlock)\n      .mulUnsafe(FixedNumber.from(BLOCKS_PER_YEAR))\n      .mulUnsafe(cakePoolSharesInSpecialFarms)\n  })\n\n  const flexibleApy = useMemo(\n    () =>\n      totalCakePoolEmissionPerYear &&\n      !pricePerFullShareAsEtherBN.isZero() &&\n      !totalSharesAsEtherBN.isZero() &&\n      getFlexibleApy(totalCakePoolEmissionPerYear, pricePerFullShareAsEtherBN, totalSharesAsEtherBN).toString(),\n    [pricePerFullShareAsEtherBN, totalCakePoolEmissionPerYear, totalSharesAsEtherBN],\n  )\n\n  const boostFactor = useMemo(() => _getBoostFactor(BOOST_WEIGHT, duration, DURATION_FACTOR), [duration])\n\n  const lockedApy = useMemo(() => {\n    return flexibleApy && getLockedApy(flexibleApy, boostFactor).toString()\n  }, [boostFactor, flexibleApy])\n\n  const getBoostFactor = useCallback(\n    (adjustDuration: number) => _getBoostFactor(BOOST_WEIGHT, adjustDuration, DURATION_FACTOR),\n    [],\n  )\n\n  const flexibleApyNoFee = useMemo(() => {\n    if (flexibleApy && performanceFeeAsDecimal) {\n      const rewardPercentageNoFee = _toString(1 - performanceFeeAsDecimal / 100)\n\n      return FixedNumber.from(flexibleApy).mulUnsafe(FixedNumber.from(rewardPercentageNoFee)).toString()\n    }\n\n    return flexibleApy\n  }, [flexibleApy, performanceFeeAsDecimal])\n\n  return {\n    flexibleApy: flexibleApyNoFee,\n    lockedApy,\n    getLockedApy: useCallback(\n      (adjustDuration: number) => flexibleApy && getLockedApy(flexibleApy, getBoostFactor(adjustDuration)).toString(),\n      [flexibleApy, getBoostFactor],\n    ),\n    boostFactor: useMemo(() => boostFactor.addUnsafe(FixedNumber.from('1')), [boostFactor]),\n    getBoostFactor: useCallback(\n      (adjustDuration: number) => getBoostFactor(adjustDuration).addUnsafe(FixedNumber.from('1')),\n      [getBoostFactor],\n    ),\n  }\n}\n","import { formatDistanceToNowStrict } from 'date-fns'\n\nexport const secondsToDay = (s: number) => Math.floor(s / (24 * 60 * 60))\n\nexport const convertTimeToSeconds = (time: string): number => {\n  return parseInt(time) * 1000\n}\n\n// https://date-fns.org/v2.28.0/docs/formatDistanceToNowStrict\nexport const distanceToNowStrict = (timeInMilliSeconds: number) => {\n  const endTime = new Date(timeInMilliSeconds)\n  return new Date() > endTime || !Number.isFinite(timeInMilliSeconds)\n    ? `0 seconds`\n    : formatDistanceToNowStrict(endTime, { unit: 'day' })\n}\n\nexport const distanceToNowStrictWithUnit = (\n  timeInMilliSeconds: number,\n  unit: 'month' | 'day' | 'second' | 'minute' | 'hour' | 'year',\n) => {\n  const endTime = new Date(timeInMilliSeconds)\n  return new Date() > endTime || !Number.isFinite(timeInMilliSeconds)\n    ? `0 seconds`\n    : formatDistanceToNowStrict(endTime, { unit })\n}\n","import useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Pool } from '@pancakeswap/uikit'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { useCurrentBlock } from 'state/block/hooks'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { Token } from '@pancakeswap/sdk'\n\nconst withShownApr = (AprComp) => (props) => {\n  const { account } = useActiveWeb3React()\n\n  const currentBlock = useCurrentBlock()\n\n  const { shouldShowBlockCountdown, hasPoolStarted } = getPoolBlockInfo(props.pool, currentBlock)\n\n  const autoCompoundFrequency = vaultPoolConfig[props.pool.vaultKey]?.autoCompoundFrequency ?? 0\n\n  return (\n    <AprComp\n      {...props}\n      shouldShowApr={hasPoolStarted || !shouldShowBlockCountdown}\n      account={account}\n      autoCompoundFrequency={autoCompoundFrequency}\n    />\n  )\n}\n\nexport default withShownApr(Pool.Apr<Token>)\n","import { Text, Box, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { differenceInHours } from 'date-fns'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { VaultKey, DeserializedLockedVaultUser } from 'state/types'\nimport { Token } from '@pancakeswap/sdk'\nimport { getCakeVaultEarnings } from '../helpers'\n\ninterface AutoEarningsBreakdownProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n}\n\nconst AutoEarningsBreakdown: React.FC<React.PropsWithChildren<AutoEarningsBreakdownProps>> = ({ pool, account }) => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { earningTokenPrice } = pool\n  const { pricePerFullShare, userData } = useVaultPoolByKey(pool.vaultKey)\n  const { autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    userData.cakeAtLastUserAction,\n    userData.userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n    pool.vaultKey === VaultKey.CakeVault\n      ? (userData as DeserializedLockedVaultUser).currentPerformanceFee\n          .plus((userData as DeserializedLockedVaultUser).currentOverdueFee)\n          .plus((userData as DeserializedLockedVaultUser).userBoostedShare)\n      : null,\n  )\n\n  const lastActionInMs = userData.lastUserActionTime ? parseInt(userData.lastUserActionTime) * 1000 : 0\n  const hourDiffSinceLastAction = differenceInHours(Date.now(), lastActionInMs)\n  const earnedCakePerHour = hourDiffSinceLastAction ? autoCakeToDisplay / hourDiffSinceLastAction : 0\n  const earnedUsdPerHour = hourDiffSinceLastAction ? autoUsdToDisplay / hourDiffSinceLastAction : 0\n\n  return (\n    <>\n      <Text>{t('Earned since your last action')}:</Text>\n      <Text bold>\n        {new Date(lastActionInMs).toLocaleString(locale, {\n          month: 'short',\n          day: 'numeric',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false,\n        })}\n      </Text>\n      {hourDiffSinceLastAction ? (\n        <Box mt=\"12px\">\n          <Text>{t('Hourly Average')}:</Text>\n          <Text bold>\n            {earnedCakePerHour < 0.01 ? '<0.01' : earnedCakePerHour.toFixed(2)} CAKE\n            <Text display=\"inline-block\" ml=\"5px\">\n              ({earnedUsdPerHour < 0.01 ? '<0.01' : `~${earnedUsdPerHour.toFixed(2)}`} USD)\n            </Text>\n          </Text>\n        </Box>\n      ) : null}\n    </>\n  )\n}\n\nexport default AutoEarningsBreakdown\n","import { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from '@pancakeswap/utils/getTimePeriods'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst WithdrawalFeeTimer: React.FC<React.PropsWithChildren<{ secondsRemaining: number }>> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return (\n    <Text bold fontSize=\"14px\">\n      {t('%day%d:%hour%h:%minute%m', { day: days, hour: hours, minute: minutes })}\n    </Text>\n  )\n}\n\nexport default WithdrawalFeeTimer\n","import { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport { secondsToHours } from 'date-fns'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { secondsToDay } from 'utils/timeHelper'\nimport { VaultKey } from 'state/types'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n  vaultKey: VaultKey\n}\n\nconst UnstakingFeeCountdownRow: React.FC<React.PropsWithChildren<UnstakingFeeCountdownRowProps>> = ({\n  isTableVariant,\n  vaultKey,\n}) => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useVaultPoolByKey(vaultKey)\n\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const withdrawalDayPeriod = withdrawalFeePeriod ? secondsToDay(withdrawalFeePeriod) : '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within %num% days of staking. Unstaking after %num% days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n          {\n            num: withdrawalDayPeriod,\n          },\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const withdrawalFeePeriodHour = withdrawalFeePeriod ? secondsToHours(withdrawalFeePeriod) : '-'\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee')\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee before')\n    }\n    return t('unstaking fee if withdrawn within %num%h', { num: withdrawalFeePeriodHour })\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small textTransform=\"lowercase\">\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { VaultKey } from 'state/types'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { secondsToDay } from 'utils/timeHelper'\nimport { getHasWithdrawFee } from '../../hooks/useWithdrawalFeeTimer'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n  vaultKey: VaultKey\n}\n\nconst FeeSummary: React.FC<React.PropsWithChildren<FeeSummaryProps>> = ({\n  stakingTokenSymbol,\n  stakeAmount,\n  vaultKey,\n}) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee, withdrawalFeePeriod },\n    userData: { lastDepositedTime },\n  } = useVaultPoolByKey(vaultKey)\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const withdrawalDayPeriod = withdrawalFeePeriod ? secondsToDay(withdrawalFeePeriod) : '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within %num% days of staking. Unstaking after %num% days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n          {\n            num: withdrawalDayPeriod,\n          },\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  const hasFeeToPay = lastDepositedTime && getHasWithdrawFee(parseInt(lastDepositedTime, 10), withdrawalFeePeriod)\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount && hasFeeToPay ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow vaultKey={vaultKey} />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import { useState, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Flex,\n  Image,\n  Button,\n  Slider,\n  BalanceInput,\n  AutoRenewIcon,\n  CalculateIcon,\n  IconButton,\n  Skeleton,\n  Box,\n  useToast,\n  Pool,\n} from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useAppDispatch } from 'state'\n\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { useCheckVaultApprovalStatus, useVaultApprove } from 'views/Pools/hooks/useApprove'\nimport { useVaultPoolContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from '@pancakeswap/utils/formatBalance'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { VaultKey } from 'state/types'\nimport { getInterestBreakdown } from '@pancakeswap/utils/compoundApyHelpers'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { getFullDecimalMultiplier } from '@pancakeswap/utils/getFullDecimalMultiplier'\nimport { Token } from '@pancakeswap/sdk'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { VaultRoiCalculatorModal } from '../Vault/VaultRoiCalculatorModal'\nimport ConvertToLock from '../LockedPool/Common/ConvertToLock'\nimport FeeSummary from './FeeSummary'\nimport { MIN_LOCK_AMOUNT, convertCakeToShares } from '../../helpers'\n\ninterface VaultStakeModalProps {\n  pool: Pool.DeserializedPool<Token>\n  stakingMax: BigNumber\n  performanceFee?: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\nconst VaultStakeModal: React.FC<React.PropsWithChildren<VaultStakeModalProps>> = ({\n  pool,\n  stakingMax,\n  performanceFee,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken, earningTokenPrice, vaultKey } = pool\n  const { address: account } = useAccount()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const vaultPoolContract = useVaultPoolContract(pool.vaultKey)\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const {\n    pricePerFullShare,\n    userData: {\n      lastDepositedTime,\n      userShares,\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n    },\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess } = useToast()\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked = new BigNumber(stakeAmount).times(cakePriceBusd)\n  const formattedUsdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(usdValueStaked.toNumber()) : ''\n  const { flexibleApy } = useVaultApy()\n  const { allowance, setLastUpdated } = useCheckVaultApprovalStatus(vaultKey)\n  const { handleApprove: handleCakeApprove, pendingTx: cakePendingTx } = useVaultApprove(vaultKey, setLastUpdated)\n\n  const needEnable = useMemo(() => {\n    if (!isRemovingStake) {\n      const amount = getDecimalAmount(new BigNumber(stakeAmount))\n      return amount.gt(allowance)\n    }\n    return false\n  }, [allowance, stakeAmount, isRemovingStake])\n\n  const callOptions = {\n    gasLimit: vaultPoolConfig[pool.vaultKey].gasLimit,\n  }\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr: +flexibleApy,\n    earningTokenPrice,\n    performanceFee,\n    compoundFrequency: 0,\n  })\n\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2)\n\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n  const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(getFullDecimalMultiplier(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = useCallback(\n    (sliderPercent: number) => {\n      if (sliderPercent > 0) {\n        const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n        const amountToStake = getFullDisplayBalance(\n          percentageOfStakingMax,\n          stakingToken.decimals,\n          stakingToken.decimals,\n        )\n        setStakeAmount(amountToStake)\n      } else {\n        setStakeAmount('')\n      }\n      setPercent(sliderPercent)\n    },\n    [stakingMax, stakingToken.decimals],\n  )\n\n  const handleWithdrawal = async () => {\n    // trigger withdrawAll function if the withdrawal will leave 0.00001 CAKE or less\n    const isWithdrawingAll = stakingMax.minus(convertedStakeAmount).lte(MIN_LOCK_AMOUNT)\n\n    const receipt = await fetchWithCatchTxError(() => {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      if (isWithdrawingAll) {\n        return callWithGasPrice(vaultPoolContract, 'withdrawAll', undefined, callOptions)\n      }\n\n      if (pool.vaultKey === VaultKey.CakeFlexibleSideVault) {\n        const { sharesAsBigNumber } = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n        return callWithGasPrice(vaultPoolContract, 'withdraw', [sharesAsBigNumber.toString()], callOptions)\n      }\n\n      return callWithGasPrice(vaultPoolContract, 'withdrawByAmount', [convertedStakeAmount.toString()], callOptions)\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        t('Unstaked!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      onDismiss?.()\n      dispatch(fetchCakeVaultUserData({ account }))\n    }\n  }\n\n  const handleDeposit = async (lockDuration = 0) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const extraArgs = pool.vaultKey === VaultKey.CakeVault ? [lockDuration.toString()] : []\n      const methodArgs = [convertedStakeAmount.toString(), ...extraArgs]\n      return callWithGasPrice(vaultPoolContract, 'deposit', methodArgs, callOptions)\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        t('Staked!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your funds have been staked in the pool')}\n        </ToastDescriptionWithTx>,\n      )\n      onDismiss?.()\n      dispatch(fetchCakeVaultUserData({ account }))\n    }\n  }\n\n  const handleConfirmClick = async () => {\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal()\n    } else {\n      // staking\n      handleDeposit()\n    }\n  }\n\n  if (showRoiCalculator) {\n    return (\n      <VaultRoiCalculatorModal\n        pool={pool}\n        linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n        linkHref={getTokenLink}\n        stakingTokenBalance={cakeAsBigNumber.plus(stakingMax)}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={stakeAmount}\n        performanceFee={performanceFee}\n      />\n    )\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradientCardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.address}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        isWarning={needEnable}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${formattedUsdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      {needEnable && (\n        <Text color=\"failure\" textAlign=\"right\" fontSize=\"12px\" mt=\"8px\">\n          {t('Insufficient token allowance. Click \"Enable\" to approve.')}\n        </Text>\n      )}\n      <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" m=\"8px 0\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary vaultKey={vaultKey} stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      {!isRemovingStake && (\n        <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text mr=\"8px\" color=\"textSubtle\">\n            {t('Annual ROI at current rates')}:\n          </Text>\n          {Number.isFinite(annualRoi) ? (\n            <AnnualRoiContainer\n              alignItems=\"center\"\n              onClick={() => {\n                setShowRoiCalculator(true)\n              }}\n            >\n              <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n              <IconButton variant=\"text\" scale=\"sm\">\n                <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n              </IconButton>\n            </AnnualRoiContainer>\n          ) : (\n            <Skeleton width={60} />\n          )}\n        </Flex>\n      )}\n      {pool.vaultKey === VaultKey.CakeVault && cakeAsNumberBalance ? (\n        <Box mt=\"8px\" maxWidth=\"370px\">\n          <ConvertToLock stakingToken={stakingToken} currentStakedAmount={cakeAsNumberBalance} />\n        </Box>\n      ) : null}\n      {needEnable ? (\n        <Button\n          isLoading={cakePendingTx}\n          endIcon={cakePendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleCakeApprove}\n          mt=\"24px\"\n        >\n          {t('Enable')}\n        </Button>\n      ) : (\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleConfirmClick}\n          disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || stakingMax.lt(convertedStakeAmount)}\n          mt=\"24px\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      )}\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={getTokenLink} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import { useState, useCallback, useMemo } from 'react'\nimport { differenceInSeconds } from 'date-fns'\nimport { convertTimeToSeconds } from 'utils/timeHelper'\nimport { Modal, Box, MessageText, Message, Checkbox, Flex, Text } from '@pancakeswap/uikit'\nimport _noop from 'lodash/noop'\nimport { useTranslation } from '@pancakeswap/localization'\nimport BigNumber from 'bignumber.js'\nimport { useIfoCeiling } from 'state/pools/hooks'\nimport { VaultKey } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport { getBalanceNumber, getDecimalAmount, getBalanceAmount } from '@pancakeswap/utils/formatBalance'\nimport { ONE_WEEK_DEFAULT } from 'config/constants/pools'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nimport RoiCalculatorModalProvider from './RoiCalculatorModalProvider'\n\nimport BalanceField from '../Common/BalanceField'\nimport LockedBodyModal from '../Common/LockedModalBody'\nimport Overview from '../Common/Overview'\nimport { AddAmountModalProps } from '../types'\n\nconst RenewDuration = ({ setCheckedState, checkedState }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {!checkedState && (\n        <Message variant=\"warning\" mb=\"16px\">\n          <MessageText maxWidth=\"320px\">\n            {t(\n              'Adding more CAKE will renew your lock, setting it to remaining duration. Due to shorter lock period, benefits decrease. To keep similar benefits, extend your lock.',\n            )}\n          </MessageText>\n        </Message>\n      )}\n      <Flex alignItems=\"center\">\n        <Checkbox checked={checkedState} onChange={() => setCheckedState((prev) => !prev)} scale=\"sm\" />\n        <Text ml=\"8px\" color=\"text\">\n          {t('Renew and extend your lock to keep similar benefits.')}\n        </Text>\n      </Flex>\n    </>\n  )\n}\n// add 60s buffer in order to make sure minimum duration by pass on renew extension\nconst MIN_DURATION_BUFFER = 60\n\nconst AddAmountModal: React.FC<React.PropsWithChildren<AddAmountModalProps>> = ({\n  onDismiss,\n  currentBalance,\n  currentLockedAmount,\n  stakingToken,\n  lockStartTime,\n  lockEndTime,\n  stakingTokenBalance,\n}) => {\n  const { theme } = useTheme()\n  const ceiling = useIfoCeiling()\n  const [lockedAmount, setLockedAmount] = useState('')\n  const [checkedState, setCheckedState] = useState(false)\n  const { t } = useTranslation()\n  const lockedAmountAsBigNumber = !Number.isNaN(new BigNumber(lockedAmount).toNumber())\n    ? new BigNumber(lockedAmount)\n    : BIG_ZERO\n  const totalLockedAmount: number = getBalanceNumber(\n    currentLockedAmount.plus(getDecimalAmount(lockedAmountAsBigNumber)),\n  )\n  const currentLockedAmountAsBalance = getBalanceAmount(currentLockedAmount)\n\n  const usdValueStaked = useBUSDCakeAmount(lockedAmountAsBigNumber.toNumber())\n  const usdValueNewStaked = useBUSDCakeAmount(totalLockedAmount)\n\n  const remainingDuration = differenceInSeconds(new Date(convertTimeToSeconds(lockEndTime)), new Date(), {\n    roundingMethod: 'ceil',\n  })\n  const passedDuration = differenceInSeconds(new Date(), new Date(convertTimeToSeconds(lockStartTime)), {\n    roundingMethod: 'ceil',\n  })\n\n  // if you locked for 1 week, then add cake without renew the extension, it's possible that remainingDuration + passedDuration less than 1 week.\n  const atLeastOneWeekNewDuration = Math.max(ONE_WEEK_DEFAULT + MIN_DURATION_BUFFER, remainingDuration + passedDuration)\n\n  const prepConfirmArg = useCallback(() => {\n    const extendDuration = atLeastOneWeekNewDuration - remainingDuration\n    return {\n      finalDuration: checkedState ? extendDuration : 0,\n    }\n  }, [atLeastOneWeekNewDuration, checkedState, remainingDuration])\n\n  const customOverview = useCallback(\n    () => (\n      <Overview\n        isValidDuration\n        openCalculator={_noop}\n        duration={remainingDuration}\n        newDuration={checkedState ? atLeastOneWeekNewDuration : null}\n        lockedAmount={currentLockedAmountAsBalance.toNumber()}\n        newLockedAmount={totalLockedAmount}\n        usdValueStaked={usdValueNewStaked}\n        lockEndTime={lockEndTime}\n        ceiling={ceiling}\n      />\n    ),\n    [\n      remainingDuration,\n      checkedState,\n      currentLockedAmountAsBalance,\n      atLeastOneWeekNewDuration,\n      totalLockedAmount,\n      usdValueNewStaked,\n      lockEndTime,\n      ceiling,\n    ],\n  )\n\n  const { allowance } = useCheckVaultApprovalStatus(VaultKey.CakeVault)\n  const needApprove = useMemo(() => {\n    const amount = getDecimalAmount(new BigNumber(lockedAmount))\n    return amount.gt(allowance)\n  }, [allowance, lockedAmount])\n\n  return (\n    <RoiCalculatorModalProvider lockedAmount={lockedAmount}>\n      <Modal title={t('Add CAKE')} onDismiss={onDismiss} headerBackground={theme.colors.gradientCardHeader}>\n        <Box mb=\"16px\">\n          <BalanceField\n            stakingAddress={stakingToken.address}\n            stakingSymbol={stakingToken.symbol}\n            stakingDecimals={stakingToken.decimals}\n            lockedAmount={lockedAmount}\n            usedValueStaked={usdValueStaked}\n            stakingMax={currentBalance}\n            setLockedAmount={setLockedAmount}\n            stakingTokenBalance={stakingTokenBalance}\n            needApprove={needApprove}\n          />\n        </Box>\n        <LockedBodyModal\n          currentBalance={currentBalance}\n          stakingToken={stakingToken}\n          onDismiss={onDismiss}\n          lockedAmount={lockedAmountAsBigNumber}\n          editAmountOnly={<RenewDuration checkedState={checkedState} setCheckedState={setCheckedState} />}\n          prepConfirmArg={prepConfirmArg}\n          customOverview={customOverview}\n        />\n      </Modal>\n    </RoiCalculatorModalProvider>\n  )\n}\n\nexport default AddAmountModal\n","import { useCallback, memo } from 'react'\nimport { Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { usePool } from 'state/pools/hooks'\nimport AddAmountModal from '../Modals/AddAmountModal'\nimport { AddButtonProps } from '../types'\nimport NotEnoughTokensModal from '../../Modals/NotEnoughTokensModal'\n\nconst AddCakeButton: React.FC<React.PropsWithChildren<AddButtonProps>> = ({\n  currentBalance,\n  stakingToken,\n  currentLockedAmount,\n  lockEndTime,\n  lockStartTime,\n  stakingTokenBalance,\n}) => {\n  const {\n    pool: { userDataLoaded },\n  } = usePool(0)\n\n  const { t } = useTranslation()\n\n  const [openAddAmountModal] = useModal(\n    <AddAmountModal\n      currentLockedAmount={currentLockedAmount}\n      currentBalance={currentBalance}\n      stakingToken={stakingToken}\n      lockStartTime={lockStartTime}\n      lockEndTime={lockEndTime}\n      stakingTokenBalance={stakingTokenBalance}\n    />,\n    true,\n    true,\n    'AddAmountModal',\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const handleClicked = useCallback(() => {\n    return currentBalance.gt(0) ? openAddAmountModal() : onPresentTokenRequired()\n  }, [currentBalance, openAddAmountModal, onPresentTokenRequired])\n\n  return userDataLoaded ? (\n    <Button onClick={handleClicked} width=\"100%\" style={{ whiteSpace: 'nowrap', paddingLeft: 0, paddingRight: 0 }}>\n      {t('Add CAKE')}\n    </Button>\n  ) : (\n    <Skeleton height={48} />\n  )\n}\n\nexport default memo(AddCakeButton)\n","import { Text, Flex, Image, Box, BalanceWithLoading } from '@pancakeswap/uikit'\nimport Divider from 'components/Divider'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { StaticAmountPropsType } from '../types'\n\nconst StaticAmount: React.FC<React.PropsWithChildren<StaticAmountPropsType>> = ({\n  stakingSymbol,\n  stakingAddress,\n  lockedAmount,\n  usdValueStaked,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n        {t('Add CAKE to lock')}\n      </Text>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Box>\n          <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" value={lockedAmount} decimals={2} />\n          <BalanceWithLoading\n            value={usdValueStaked}\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            prefix=\"~\"\n            unit=\" USD\"\n          />\n        </Box>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingAddress}.png`} width={24} height={24} alt={stakingSymbol} />\n          <Text ml=\"4px\" bold>\n            {stakingSymbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <Divider />\n    </>\n  )\n}\n\nexport default StaticAmount\n","import { useCallback } from 'react'\nimport { Modal, Box } from '@pancakeswap/uikit'\nimport _noop from 'lodash/noop'\nimport useTheme from 'hooks/useTheme'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport { MAX_LOCK_DURATION } from 'config/constants/pools'\nimport { useTranslation } from '@pancakeswap/localization'\nimport BigNumber from 'bignumber.js'\nimport { useIfoCeiling } from 'state/pools/hooks'\n\nimport { getBalanceAmount } from '@pancakeswap/utils/formatBalance'\nimport StaticAmount from '../Common/StaticAmount'\nimport LockedBodyModal from '../Common/LockedModalBody'\nimport Overview from '../Common/Overview'\nimport { ExtendDurationModal } from '../types'\nimport RoiCalculatorModalProvider from './RoiCalculatorModalProvider'\nimport { ENABLE_EXTEND_LOCK_AMOUNT } from '../../../helpers'\n\nconst ExtendDurationModal: React.FC<ExtendDurationModal> = ({\n  modalTitle,\n  stakingToken,\n  onDismiss,\n  currentLockedAmount,\n  currentDuration,\n  currentDurationLeft,\n  currentBalance,\n  lockStartTime,\n  isRenew,\n}) => {\n  const { theme } = useTheme()\n  const ceiling = useIfoCeiling()\n  const { t } = useTranslation()\n\n  const usdValueStaked = useBUSDCakeAmount(currentLockedAmount)\n\n  const validator = useCallback(\n    ({ duration }) => {\n      const isValidAmount = currentLockedAmount && currentLockedAmount > 0\n      const totalDuration = currentDurationLeft + duration\n\n      const isValidDuration = duration > 0 && totalDuration > 0 && totalDuration <= MAX_LOCK_DURATION\n\n      return {\n        isValidAmount,\n        isValidDuration,\n        isOverMax: totalDuration > MAX_LOCK_DURATION,\n      }\n    },\n    [currentLockedAmount, currentDurationLeft],\n  )\n\n  const prepConfirmArg = useCallback(\n    ({ duration }) => ({\n      finalDuration: duration,\n      finalLockedAmount:\n        currentDuration && currentDuration + duration > MAX_LOCK_DURATION\n          ? getBalanceAmount(ENABLE_EXTEND_LOCK_AMOUNT, stakingToken.decimals).toNumber()\n          : 0,\n    }),\n    [stakingToken.decimals, currentDuration],\n  )\n\n  const customOverview = useCallback(\n    ({\n      isValidDuration,\n      duration,\n      isMaxSelected,\n    }: {\n      isValidDuration: boolean\n      duration: number\n      isMaxSelected?: boolean\n    }) => (\n      <Overview\n        lockStartTime={\n          currentDuration + duration > MAX_LOCK_DURATION ? Math.floor(Date.now() / 1000).toString() : lockStartTime\n        }\n        isValidDuration={isValidDuration}\n        openCalculator={_noop}\n        duration={currentDuration || duration}\n        newDuration={\n          isMaxSelected\n            ? MAX_LOCK_DURATION\n            : currentDuration + duration > MAX_LOCK_DURATION\n            ? currentDurationLeft + duration\n            : currentDuration + duration\n        }\n        lockedAmount={currentLockedAmount}\n        usdValueStaked={usdValueStaked}\n        showLockWarning={!+lockStartTime}\n        ceiling={ceiling}\n      />\n    ),\n    [lockStartTime, currentDuration, currentLockedAmount, currentDurationLeft, usdValueStaked, ceiling],\n  )\n\n  return (\n    <RoiCalculatorModalProvider lockedAmount={currentLockedAmount}>\n      <Modal\n        title={modalTitle || t('Extend Lock')}\n        onDismiss={onDismiss}\n        headerBackground={theme.colors.gradientCardHeader}\n      >\n        <Box mb=\"16px\">\n          <StaticAmount\n            stakingAddress={stakingToken.address}\n            stakingSymbol={stakingToken.symbol}\n            lockedAmount={currentLockedAmount}\n            usdValueStaked={usdValueStaked}\n          />\n        </Box>\n        <LockedBodyModal\n          stakingToken={stakingToken}\n          currentBalance={currentBalance}\n          currentDuration={currentDuration}\n          currentDurationLeft={currentDurationLeft}\n          onDismiss={onDismiss}\n          lockedAmount={new BigNumber(currentLockedAmount)}\n          validator={validator}\n          prepConfirmArg={prepConfirmArg}\n          customOverview={customOverview}\n          isRenew={isRenew}\n        />\n      </Modal>\n    </RoiCalculatorModalProvider>\n  )\n}\n\nexport default ExtendDurationModal\n","import { useMemo } from 'react'\nimport { Button, useModal, ButtonProps } from '@pancakeswap/uikit'\nimport { ONE_WEEK_DEFAULT, MAX_LOCK_DURATION } from 'config/constants/pools'\n\nimport ExtendDurationModal from '../Modals/ExtendDurationModal'\nimport { ExtendDurationButtonPropsType } from '../types'\n\nconst ExtendDurationButton: React.FC<React.PropsWithChildren<ExtendDurationButtonPropsType & ButtonProps>> = ({\n  modalTitle,\n  stakingToken,\n  currentLockedAmount,\n  currentBalance,\n  lockEndTime,\n  lockStartTime,\n  children,\n  isRenew,\n  ...rest\n}) => {\n  const nowInSeconds = Math.floor(Date.now() / 1000)\n  const currentDuration = useMemo(() => Number(lockEndTime) - Number(lockStartTime), [lockEndTime, lockStartTime])\n  const currentDurationLeft = useMemo(\n    () => Math.max(Number(lockEndTime) - nowInSeconds, 0),\n    [lockEndTime, nowInSeconds],\n  )\n\n  const [openExtendDurationModal] = useModal(\n    <ExtendDurationModal\n      modalTitle={modalTitle}\n      stakingToken={stakingToken}\n      lockStartTime={lockStartTime}\n      currentBalance={currentBalance}\n      currentLockedAmount={currentLockedAmount}\n      currentDuration={currentDuration}\n      currentDurationLeft={currentDurationLeft}\n      isRenew={isRenew}\n    />,\n    true,\n    true,\n    'ExtendDurationModal',\n  )\n\n  return (\n    <Button\n      disabled={Number.isFinite(currentDurationLeft) && MAX_LOCK_DURATION - currentDurationLeft < ONE_WEEK_DEFAULT}\n      onClick={openExtendDurationModal}\n      width=\"100%\"\n      {...rest}\n    >\n      {children}\n    </Button>\n  )\n}\n\nexport default ExtendDurationButton\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Button, ButtonProps, useToast } from '@pancakeswap/uikit'\nimport { memo, useCallback } from 'react'\n\nimport { useAccount } from 'wagmi'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useVaultPoolContract } from 'hooks/useContract'\nimport { useAppDispatch } from 'state'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { VaultKey } from 'state/types'\nimport { useSWRConfig } from 'swr'\n\nconst ConvertToFlexibleButton: React.FC<React.PropsWithChildren<ButtonProps>> = (props) => {\n  const dispatch = useAppDispatch()\n\n  const { address: account } = useAccount()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const vaultPoolContract = useVaultPoolContract(VaultKey.CakeVault)\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { t } = useTranslation()\n  const { mutate } = useSWRConfig()\n  const { toastSuccess } = useToast()\n\n  const handleUnlock = useCallback(async () => {\n    const callOptions = {\n      gasLimit: vaultPoolConfig[VaultKey.CakeVault].gasLimit,\n    }\n\n    const receipt = await fetchWithCatchTxError(() => {\n      const methodArgs = [account]\n      return callWithGasPrice(vaultPoolContract, 'unlock', methodArgs, callOptions)\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        t('Staked!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your funds have been staked in the pool')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchCakeVaultUserData({ account }))\n      mutate(['userCakeLockStatus', account])\n    }\n  }, [t, toastSuccess, account, callWithGasPrice, dispatch, fetchWithCatchTxError, vaultPoolContract, mutate])\n\n  return (\n    <Button width=\"100%\" disabled={pendingTx} onClick={handleUnlock} variant=\"secondary\" {...props}>\n      {pendingTx ? t('Converting...') : t('Convert to Flexible')}\n    </Button>\n  )\n}\n\nexport default memo(ConvertToFlexibleButton)\n","import { memo, ReactNode } from 'react'\nimport { Message, MessageText, Box, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport Trans from 'components/Trans'\nimport { VaultPosition } from 'utils/cakePool'\n\nimport ConvertToFlexibleButton from '../Buttons/ConvertToFlexibleButton'\nimport ExtendButton from '../Buttons/ExtendDurationButton'\nimport { AfterLockedActionsPropsType } from '../types'\n\nconst msg: Record<VaultPosition, ReactNode> = {\n  [VaultPosition.None]: null,\n  [VaultPosition.Flexible]: null,\n  [VaultPosition.Locked]: null,\n  [VaultPosition.LockedEnd]: (\n    <Trans>\n      Renew your staking position to continue enjoying the benefits of farm yield boosting, participating in IFOs,\n      voting power boosts, and so much more!\n    </Trans>\n  ),\n  [VaultPosition.AfterBurning]: (\n    <Trans>\n      The lock period has ended. To avoid more rewards being burned, renew your staking position to continue enjoying\n      the benefits from locked staking.\n    </Trans>\n  ),\n}\n\nconst AfterLockedActions: React.FC<React.PropsWithChildren<AfterLockedActionsPropsType>> = ({\n  currentLockedAmount,\n  stakingToken,\n  position,\n  isInline,\n}) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n  const isDesktopView = isInline && isDesktop\n  const Container = isDesktopView ? Flex : Box\n\n  return (\n    <Message\n      variant=\"warning\"\n      mb=\"16px\"\n      action={\n        <Container mt={!isDesktopView && '8px'} ml=\"10px\">\n          <ExtendButton\n            modalTitle={t('Renew')}\n            lockEndTime=\"0\"\n            lockStartTime=\"0\"\n            stakingToken={stakingToken}\n            currentLockedAmount={currentLockedAmount}\n            minWidth=\"186px\"\n            variant=\"primary\"\n            mr={isDesktopView && '14px'}\n            mb={!isDesktopView && '8px'}\n            isRenew\n          >\n            {t('Renew')}\n          </ExtendButton>\n          <ConvertToFlexibleButton minWidth={isDesktopView && '200px'} />\n        </Container>\n      }\n      actionInline={isDesktopView}\n    >\n      <MessageText>{msg[position]}</MessageText>\n    </Message>\n  )\n}\n\nexport default memo(AfterLockedActions)\n","import { BalanceInput, Button, Flex, Image, Slider, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Dispatch, useMemo, memo, SetStateAction, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport { getFullDecimalMultiplier } from '@pancakeswap/utils/getFullDecimalMultiplier'\nimport { useUserEnoughCakeValidator } from '../hooks/useUserEnoughCakeValidator'\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\ninterface PropsType {\n  stakingAddress: string\n  stakingSymbol: string\n  stakingDecimals: number\n  lockedAmount: string\n  stakingMax: BigNumber\n  setLockedAmount: Dispatch<SetStateAction<string>>\n  usedValueStaked: number | undefined\n  stakingTokenBalance: BigNumber\n  needApprove: boolean\n}\n\nconst BalanceField: React.FC<React.PropsWithChildren<PropsType>> = ({\n  stakingAddress,\n  stakingSymbol,\n  stakingDecimals,\n  lockedAmount,\n  stakingMax,\n  setLockedAmount,\n  usedValueStaked,\n  stakingTokenBalance,\n  needApprove,\n}) => {\n  const { t } = useTranslation()\n  const { userNotEnoughCake, notEnoughErrorMessage } = useUserEnoughCakeValidator(lockedAmount, stakingTokenBalance)\n\n  const percent = useMemo(() => {\n    const amount = new BigNumber(lockedAmount)\n    if (amount.gt(0)) {\n      const convertedInput = amount.multipliedBy(getFullDecimalMultiplier(stakingDecimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      return percentage > 100 ? 100 : percentage\n    }\n    return 0\n  }, [lockedAmount, stakingDecimals, stakingMax])\n\n  const handleStakeInputChange = useCallback(\n    (input: string) => {\n      setLockedAmount(input)\n    },\n    [setLockedAmount],\n  )\n\n  const handleChangePercent = useCallback(\n    (sliderPercent: number) => {\n      if (sliderPercent > 0) {\n        const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n        const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingDecimals, stakingDecimals)\n\n        setLockedAmount(amountToStake)\n      } else {\n        setLockedAmount('')\n      }\n    },\n    [stakingMax, setLockedAmount, stakingDecimals],\n  )\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('CAKE to lock')}\n        </Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingAddress}.png`} width={24} height={24} alt={stakingSymbol} />\n          <Text ml=\"4px\" bold>\n            {stakingSymbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        isWarning={userNotEnoughCake || needApprove}\n        value={lockedAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={`~${usedValueStaked || 0} USD`}\n        decimals={stakingDecimals}\n      />\n      {needApprove && !userNotEnoughCake ? (\n        <Text color=\"failure\" textAlign=\"right\" fontSize=\"12px\" mt=\"8px\">\n          {t('Insufficient token allowance. Click \"Enable\" to approve.')}\n        </Text>\n      ) : null}\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\" mt=\"4px\" mb=\"12px\">\n        <Flex justifyContent=\"flex-end\" flexDirection=\"column\">\n          {userNotEnoughCake && (\n            <Text fontSize=\"12px\" color=\"failure\">\n              {notEnoughErrorMessage}\n            </Text>\n          )}\n        </Flex>\n      </Flex>\n      <Text mt=\"8px\" textAlign=\"end\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingDecimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n    </>\n  )\n}\n\nexport default memo(BalanceField)\n","import { useState, useCallback, memo, useMemo } from 'react'\nimport { useInterval } from '@pancakeswap/hooks'\n\nimport getTimePeriods from '@pancakeswap/utils/getTimePeriods'\nimport { UNLOCK_FREE_DURATION } from 'config/constants/pools'\nimport addSeconds from 'date-fns/addSeconds'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\nimport { convertTimeToSeconds } from 'utils/timeHelper'\n\ninterface PropsType {\n  lockEndTime: string\n}\n\nconst BurningCountDown: React.FC<React.PropsWithChildren<PropsType>> = ({ lockEndTime }) => {\n  const [remainingSeconds, setRemainingSeconds] = useState(0)\n\n  // 1 week after lockEndTime\n  const burnDate = useMemo(() => addSeconds(convertTimeToSeconds(lockEndTime), UNLOCK_FREE_DURATION), [lockEndTime])\n\n  const updateRemainingSeconds = useCallback(() => {\n    setRemainingSeconds(differenceInSeconds(burnDate, new Date()))\n  }, [burnDate])\n\n  // Update every minute\n  useInterval(updateRemainingSeconds, 1000 * 60)\n\n  const { days, hours, minutes } = getTimePeriods(remainingSeconds)\n\n  return <>{`${days}d: ${hours}h: ${minutes}m`}</>\n}\n\nexport default memo(BurningCountDown)\n","import { Token } from '@pancakeswap/sdk'\nimport { Flex, Message, MessageText, useMatchBreakpoints, SkeletonV2 } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { memo } from 'react'\nimport { useVaultApy } from 'hooks/useVaultApy'\n\nimport ExtendButton from '../Buttons/ExtendDurationButton'\nimport useAvgLockDuration from '../hooks/useAvgLockDuration'\n\ninterface ConvertToLockProps {\n  stakingToken: Token\n  currentStakedAmount: number\n  isInline?: boolean\n}\n\nconst ConvertToLock: React.FC<React.PropsWithChildren<ConvertToLockProps>> = ({\n  stakingToken,\n  currentStakedAmount,\n  isInline,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const isTableView = isInline && !isMobile\n  const { avgLockDurationsInSeconds } = useAvgLockDuration()\n  const { lockedApy } = useVaultApy({ duration: avgLockDurationsInSeconds })\n\n  return (\n    <Message\n      variant=\"warning\"\n      action={\n        <Flex mt={!isTableView && '8px'} flexGrow={1} ml={isTableView && '80px'}>\n          <ExtendButton\n            modalTitle={t('Convert to Lock')}\n            lockEndTime=\"0\"\n            lockStartTime=\"0\"\n            stakingToken={stakingToken}\n            currentLockedAmount={currentStakedAmount}\n          >\n            {t('Convert to Lock')}\n          </ExtendButton>\n        </Flex>\n      }\n      actionInline={isTableView}\n    >\n      <SkeletonV2 isDataReady={!!(avgLockDurationsInSeconds && lockedApy)} wrapperProps={{ height: 'fit-content' }}>\n        <MessageText>\n          {t('Lock staking users are earning an average of %amount%% APR. More benefits are coming soon.', {\n            amount: lockedApy ? parseFloat(lockedApy).toFixed(2) : 0,\n          })}\n        </MessageText>\n      </SkeletonV2>\n    </Message>\n  )\n}\n\nexport default memo(ConvertToLock)\n","import { useEffect, useMemo } from 'react'\nimport { Text, Flex, Button, Input, Box, Message, MessageText } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport _toNumber from 'lodash/toNumber'\nimport { ONE_WEEK_DEFAULT, MAX_LOCK_DURATION } from 'config/constants/pools'\nimport { secondsToWeeks, weeksToSeconds } from '../../utils/formatSecondsToWeeks'\nimport { LockDurationFieldPropsType } from '../types'\n\nconst DURATIONS = [1, 5, 10, 25]\n\nconst StyledInput = styled(Input)`\n  text-align: right;\n  margin-right: 8px;\n`\n\nconst LockDurationField: React.FC<React.PropsWithChildren<LockDurationFieldPropsType>> = ({\n  duration,\n  setDuration,\n  isOverMax,\n  currentDuration,\n  currentDurationLeft,\n  isMaxSelected,\n  setIsMaxSelected,\n}) => {\n  const { t } = useTranslation()\n\n  const maxAvailableDuration = currentDurationLeft ? MAX_LOCK_DURATION - currentDurationLeft : MAX_LOCK_DURATION\n\n  useEffect(() => {\n    if (isMaxSelected) {\n      setDuration(maxAvailableDuration)\n    }\n  }, [isMaxSelected, maxAvailableDuration, setDuration])\n\n  // When user extends the duration due to time passed when approving\n  // transaction the extended duration will be a couple of seconds off to max duration,\n  // therefore it is better to compare based on weeks\n  const currentDurationInWeeks = useMemo(() => currentDuration && secondsToWeeks(currentDuration), [currentDuration])\n\n  const maxDurationInWeeks = useMemo(() => secondsToWeeks(MAX_LOCK_DURATION), [])\n\n  return (\n    <>\n      <Box mb=\"16px\">\n        <Flex mb=\"8px\">\n          <Text fontSize=\"12px\" color=\"secondary\" bold mr=\"2px\" textTransform=\"uppercase\">\n            {t('Add')}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            {t('duration')}\n          </Text>\n        </Flex>\n        <Flex flexWrap=\"wrap\">\n          {DURATIONS.map((week) => {\n            const weekSeconds = weeksToSeconds(week)\n            return (\n              <Button\n                key={week}\n                onClick={() => {\n                  setIsMaxSelected(false)\n                  setDuration(weekSeconds)\n                }}\n                mt=\"4px\"\n                mr={['2px', '2px', '4px', '4px']}\n                scale=\"sm\"\n                disabled={weekSeconds > maxAvailableDuration}\n                variant={weekSeconds === duration ? 'subtle' : 'tertiary'}\n              >\n                {week}W\n              </Button>\n            )\n          })}\n          <Button\n            key=\"max\"\n            onClick={() => {\n              setIsMaxSelected(true)\n            }}\n            mt=\"4px\"\n            mr={['2px', '2px', '4px', '4px']}\n            scale=\"sm\"\n            disabled={maxAvailableDuration < ONE_WEEK_DEFAULT}\n            variant={isMaxSelected ? 'subtle' : 'tertiary'}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n      </Box>\n      <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"8px\">\n        <StyledInput\n          value={secondsToWeeks(duration)}\n          autoComplete=\"off\"\n          pattern=\"^[0-9]+$\"\n          inputMode=\"numeric\"\n          onChange={(e) => {\n            setIsMaxSelected(false)\n            const weeks = _toNumber(e?.target?.value)\n\n            // Prevent large number input which cause NaN\n            // Why 530, just want to avoid user get laggy experience\n            // For example, allow user put 444 which they still get warning no more than 52\n            if (e.currentTarget.validity.valid && weeks < 530) {\n              setDuration(weeksToSeconds(_toNumber(e?.target?.value)))\n            }\n          }}\n        />\n        <Text>{t('Week')}</Text>\n      </Flex>\n      {isOverMax && (\n        <Text fontSize=\"12px\" textAlign=\"right\" color=\"failure\">\n          {t('Total lock duration exceeds 52 weeks')}\n        </Text>\n      )}\n      {currentDurationLeft && currentDurationInWeeks === maxDurationInWeeks && !isMaxSelected ? (\n        <Message variant=\"warning\">\n          <MessageText maxWidth=\"240px\">\n            {t('Recommend choosing \"MAX\" to renew your staking position in order to keep similar yield boost.')}\n          </MessageText>\n        </Message>\n      ) : null}\n    </>\n  )\n}\n\nexport default LockDurationField\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst LockDurationRow = ({ weekDuration }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n        {t('Lock Duration')}\n      </Text>\n      <Text color=\"text\" bold fontSize=\"16px\">\n        {weekDuration}\n      </Text>\n    </Flex>\n  )\n}\n\nexport default LockDurationRow\n","import { useTranslation } from '@pancakeswap/localization'\n\nexport default function LockedAprTooltipContent({ boostedYieldAmount }) {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {t('Boosted yield applies to the original locked amount: %boostedYieldAmount%', { boostedYieldAmount })}\n      <br />\n      <br />\n      {t(\n        'Calculated based on current rates and subject to change based on various external variables. It is a rough estimate provided for convenience only, and by no means represents guaranteed returns.',\n      )}\n    </>\n  )\n}\n","import { useState, useCallback, Dispatch, SetStateAction } from 'react'\nimport { useAccount } from 'wagmi'\nimport { useSWRConfig } from 'swr'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useAppDispatch } from 'state'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport { useVaultPoolContract } from 'hooks/useContract'\nimport BigNumber from 'bignumber.js'\nimport { getDecimalAmount } from '@pancakeswap/utils/formatBalance'\nimport { useToast } from '@pancakeswap/uikit'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Token } from '@pancakeswap/sdk'\nimport { ONE_WEEK_DEFAULT, vaultPoolConfig } from 'config/constants/pools'\nimport { VaultKey } from 'state/types'\n\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { PrepConfirmArg } from '../types'\n\ninterface HookArgs {\n  lockedAmount: BigNumber\n  stakingToken: Token\n  onDismiss: () => void\n  prepConfirmArg: PrepConfirmArg\n  defaultDuration?: number\n}\n\ninterface HookReturn {\n  usdValueStaked: number\n  duration: number\n  setDuration: Dispatch<SetStateAction<number>>\n  pendingTx: boolean\n  handleConfirmClick: () => Promise<void>\n}\n\nexport default function useLockedPool(hookArgs: HookArgs): HookReturn {\n  const { lockedAmount, stakingToken, onDismiss, prepConfirmArg, defaultDuration = ONE_WEEK_DEFAULT } = hookArgs\n\n  const dispatch = useAppDispatch()\n\n  const { address: account } = useAccount()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const vaultPoolContract = useVaultPoolContract(VaultKey.CakeVault)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { t } = useTranslation()\n  const { mutate } = useSWRConfig()\n  const { toastSuccess } = useToast()\n  const [duration, setDuration] = useState(() => defaultDuration)\n  const usdValueStaked = useBUSDCakeAmount(lockedAmount.toNumber())\n\n  const handleDeposit = useCallback(\n    async (convertedStakeAmount: BigNumber, lockDuration: number) => {\n      const callOptions = {\n        gasLimit: vaultPoolConfig[VaultKey.CakeVault].gasLimit,\n      }\n\n      const receipt = await fetchWithCatchTxError(() => {\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        const methodArgs = [convertedStakeAmount.toString(), lockDuration]\n        return callWithGasPrice(vaultPoolContract, 'deposit', methodArgs, callOptions)\n      })\n\n      if (receipt?.status) {\n        toastSuccess(\n          t('Staked!'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your funds have been staked in the pool')}\n          </ToastDescriptionWithTx>,\n        )\n        onDismiss?.()\n        dispatch(fetchCakeVaultUserData({ account }))\n        mutate(['userCakeLockStatus', account])\n      }\n    },\n    [fetchWithCatchTxError, toastSuccess, dispatch, onDismiss, account, vaultPoolContract, t, callWithGasPrice, mutate],\n  )\n\n  const handleConfirmClick = useCallback(async () => {\n    const { finalLockedAmount = lockedAmount, finalDuration = duration } =\n      typeof prepConfirmArg === 'function' ? prepConfirmArg({ duration }) : {}\n\n    const convertedStakeAmount: BigNumber = getDecimalAmount(new BigNumber(finalLockedAmount), stakingToken.decimals)\n\n    handleDeposit(convertedStakeAmount, finalDuration)\n  }, [prepConfirmArg, stakingToken, handleDeposit, duration, lockedAmount])\n\n  return { usdValueStaked, duration, setDuration, pendingTx, handleConfirmClick }\n}\n","import { useMemo, useState, useEffect } from 'react'\nimport dynamic from 'next/dynamic'\nimport { Button, AutoRenewIcon, Box, Flex, Message, MessageText, Text } from '@pancakeswap/uikit'\nimport _noop from 'lodash/noop'\nimport { useTranslation } from '@pancakeswap/localization'\nimport isUndefinedOrNull from '@pancakeswap/utils/isUndefinedOrNull'\nimport { MAX_LOCK_DURATION } from 'config/constants/pools'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceAmount, getDecimalAmount } from '@pancakeswap/utils/formatBalance'\nimport { useIfoCeiling } from 'state/pools/hooks'\nimport { VaultKey } from 'state/types'\n\nimport { LockedModalBodyPropsType, ModalValidator } from '../types'\n\nimport Overview from './Overview'\nimport LockDurationField from './LockDurationField'\nimport useLockedPool from '../hooks/useLockedPool'\nimport useAvgLockDuration from '../hooks/useAvgLockDuration'\nimport { ENABLE_EXTEND_LOCK_AMOUNT } from '../../../helpers'\nimport { useCheckVaultApprovalStatus, useVaultApprove } from '../../../hooks/useApprove'\n\nconst ExtendEnable = dynamic(() => import('./ExtendEnable'), { ssr: false })\n\nconst LockedModalBody: React.FC<React.PropsWithChildren<LockedModalBodyPropsType>> = ({\n  stakingToken,\n  onDismiss,\n  lockedAmount,\n  currentBalance,\n  currentDuration,\n  currentDurationLeft,\n  editAmountOnly,\n  prepConfirmArg,\n  validator,\n  customOverview,\n  isRenew,\n}) => {\n  const { t } = useTranslation()\n  const ceiling = useIfoCeiling()\n  const { avgLockDurationsInSeconds } = useAvgLockDuration()\n  const { usdValueStaked, duration, setDuration, pendingTx, handleConfirmClick } = useLockedPool({\n    stakingToken,\n    onDismiss,\n    lockedAmount,\n    prepConfirmArg,\n    defaultDuration: isRenew && avgLockDurationsInSeconds,\n  })\n  const [isMaxSelected, setIsMaxSelected] = useState(false)\n\n  const { isValidAmount, isValidDuration, isOverMax }: ModalValidator = useMemo(() => {\n    return typeof validator === 'function'\n      ? validator({\n          duration,\n        })\n      : {\n          isValidAmount: lockedAmount?.toNumber() > 0 && getBalanceAmount(currentBalance).gte(lockedAmount),\n          isValidDuration: duration > 0 && duration <= MAX_LOCK_DURATION,\n          isOverMax: duration > MAX_LOCK_DURATION,\n        }\n  }, [validator, currentBalance, lockedAmount, duration])\n\n  const cakeNeeded = useMemo(\n    () => isValidDuration && currentDuration && currentDuration + duration > MAX_LOCK_DURATION,\n    [isValidDuration, currentDuration, duration],\n  )\n\n  const hasEnoughBalanceToExtend = useMemo(() => currentBalance?.gte(ENABLE_EXTEND_LOCK_AMOUNT), [currentBalance])\n\n  const needsEnable = useMemo(() => cakeNeeded && !hasEnoughBalanceToExtend, [cakeNeeded, hasEnoughBalanceToExtend])\n\n  const { allowance, setLastUpdated } = useCheckVaultApprovalStatus(VaultKey.CakeVault)\n  const { handleApprove, pendingTx: approvePendingTx } = useVaultApprove(VaultKey.CakeVault, setLastUpdated)\n  const [showApproveWarning, setShowApproveWarning] = useState(false)\n\n  const needsApprove = useMemo(() => {\n    if (prepConfirmArg) {\n      const { finalLockedAmount } = prepConfirmArg({ duration })\n      if (!isUndefinedOrNull(finalLockedAmount)) {\n        return getDecimalAmount(new BigNumber(finalLockedAmount)).gt(allowance)\n      }\n    }\n    const amount = getDecimalAmount(new BigNumber(lockedAmount))\n    return amount.gt(allowance)\n  }, [allowance, lockedAmount, prepConfirmArg, duration])\n\n  const [showEnableConfirmButtons, setShowEnableConfirmButtons] = useState(needsEnable)\n\n  useEffect(() => {\n    if (needsEnable) {\n      setShowEnableConfirmButtons(true)\n    }\n  }, [needsEnable])\n\n  useEffect(() => {\n    if (!showApproveWarning && prepConfirmArg) {\n      const { finalLockedAmount } = prepConfirmArg({ duration })\n      if (!isUndefinedOrNull(finalLockedAmount)) {\n        setShowApproveWarning(true)\n      }\n    }\n  }, [showApproveWarning, prepConfirmArg, duration])\n\n  return (\n    <>\n      <Box mb=\"16px\">\n        {editAmountOnly || (\n          <>\n            <LockDurationField\n              isOverMax={isOverMax}\n              currentDuration={currentDuration}\n              currentDurationLeft={currentDurationLeft}\n              setDuration={setDuration}\n              duration={duration}\n              isMaxSelected={isMaxSelected}\n              setIsMaxSelected={setIsMaxSelected}\n            />\n          </>\n        )}\n      </Box>\n      {customOverview ? (\n        customOverview({\n          isValidDuration,\n          duration,\n          isMaxSelected,\n        })\n      ) : (\n        <Overview\n          isValidDuration={isValidDuration}\n          openCalculator={_noop}\n          duration={duration}\n          lockedAmount={lockedAmount?.toNumber()}\n          usdValueStaked={usdValueStaked}\n          showLockWarning\n          ceiling={ceiling}\n        />\n      )}\n\n      {!needsApprove && cakeNeeded ? (\n        hasEnoughBalanceToExtend ? (\n          <Text fontSize=\"12px\" mt=\"24px\">\n            {t('0.0001 CAKE will be spent to extend')}\n          </Text>\n        ) : (\n          <Message variant=\"warning\" mt=\"24px\">\n            <MessageText maxWidth=\"200px\">{t('0.0001 CAKE required for enabling extension')}</MessageText>\n          </Message>\n        )\n      ) : null}\n\n      {showApproveWarning && needsApprove ? (\n        <Message variant=\"warning\" mt=\"24px\">\n          <MessageText maxWidth=\"200px\">{t('Insufficient token allowance. Click \"Enable\" to approve.')}</MessageText>\n        </Message>\n      ) : null}\n\n      <Flex mt=\"24px\" flexDirection=\"column\">\n        {needsApprove ? (\n          <Button\n            width=\"100%\"\n            isLoading={approvePendingTx}\n            endIcon={approvePendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            onClick={handleApprove}\n          >\n            {approvePendingTx ? t('Enabling') : t('Enable')}\n          </Button>\n        ) : showEnableConfirmButtons ? (\n          <ExtendEnable\n            hasEnoughCake={hasEnoughBalanceToExtend}\n            handleConfirmClick={handleConfirmClick}\n            pendingConfirmTx={pendingTx}\n            isValidAmount={isValidAmount}\n            isValidDuration={isValidDuration}\n          />\n        ) : (\n          <Button\n            width=\"100%\"\n            isLoading={pendingTx}\n            endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            onClick={handleConfirmClick}\n            disabled={!(isValidAmount && isValidDuration)}\n          >\n            {pendingTx ? t('Confirming') : t('Confirm')}\n          </Button>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default LockedModalBody\n","import { Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst CrossText = styled(Text)`\n  text-decoration: line-through;\n`\n\nexport default CrossText\n","import { Text, Flex } from '@pancakeswap/uikit'\nimport isUndefinedOrNull from '@pancakeswap/utils/isUndefinedOrNull'\nimport CrossText from './CrossText'\n\ninterface DiffTextPropsType {\n  value: string\n  newValue?: string\n}\n\nconst DiffText: React.FC<React.PropsWithChildren<DiffTextPropsType>> = ({ value, newValue }) => {\n  if (isUndefinedOrNull(newValue) || isUndefinedOrNull(value) || value === newValue) {\n    return (\n      <Text bold fontSize=\"16px\">\n        {value || '-'}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CrossText bold fontSize=\"16px\" mr=\"4px\">\n        {value}\n      </CrossText>\n      {`->`}\n      <Text bold color=\"failure\" ml=\"4px\" fontSize=\"16px\">\n        {newValue}\n      </Text>\n    </>\n  )\n}\n\ninterface TextRowPropsType extends DiffTextPropsType {\n  title: string\n}\n\nconst TextRow: React.FC<React.PropsWithChildren<TextRowPropsType>> = ({ title, value, newValue }) => (\n  <Flex alignItems=\"center\" justifyContent=\"space-between\">\n    <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n      {title}\n    </Text>\n    <Flex alignItems=\"center\">\n      <DiffText value={value} newValue={newValue} />\n    </Flex>\n  </Flex>\n)\n\nexport default TextRow\n","import { memo } from 'react'\nimport { Text, Flex, TooltipText, useTooltip, BalanceWithLoading } from '@pancakeswap/uikit'\nimport isUndefinedOrNull from '@pancakeswap/utils/isUndefinedOrNull'\nimport _toNumber from 'lodash/toNumber'\nimport CrossText from './CrossText'\n\ninterface DiffBalancePropsType {\n  value: number | string\n  newValue?: number | string\n  decimals: number\n  unit?: string\n  prefix?: string\n}\n\nconst DiffBalance: React.FC<React.PropsWithChildren<DiffBalancePropsType>> = ({\n  value,\n  newValue,\n  decimals,\n  unit,\n  prefix,\n}) => {\n  if (isUndefinedOrNull(newValue) || !value || value === newValue || _toNumber(newValue) === 0) {\n    return <BalanceWithLoading bold fontSize=\"16px\" value={value} decimals={decimals} unit={unit} prefix={prefix} />\n  }\n\n  return (\n    <>\n      <CrossText>\n        <BalanceWithLoading\n          bold\n          fontSize=\"16px\"\n          mr=\"4px\"\n          value={value}\n          decimals={decimals}\n          unit={unit}\n          prefix={prefix}\n        />\n      </CrossText>\n      {`->`}\n      <BalanceWithLoading\n        bold\n        color=\"failure\"\n        fontSize=\"16px\"\n        ml=\"4px\"\n        value={newValue}\n        decimals={decimals}\n        unit={unit}\n        prefix={prefix}\n      />\n    </>\n  )\n}\n\ninterface BalanceRowPropsType extends DiffBalancePropsType {\n  title: string\n  tooltipContent?: string\n  suffix?: React.ReactNode\n}\n\nconst BalanceRow: React.FC<React.PropsWithChildren<BalanceRowPropsType>> = ({\n  title,\n  value,\n  newValue,\n  unit,\n  decimals,\n  prefix,\n  suffix,\n  tooltipContent,\n}) => {\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      {tooltipContent ? (\n        <TooltipText>\n          <Text ref={targetRef} color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {title}\n          </Text>\n        </TooltipText>\n      ) : (\n        <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {title}\n        </Text>\n      )}\n      <Flex alignItems=\"center\">\n        <DiffBalance newValue={newValue} value={value} decimals={decimals} unit={unit} prefix={prefix} />\n        {suffix}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default memo(BalanceRow)\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Text, Flex, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { format } from 'date-fns'\n\ninterface PropsType {\n  title: React.ReactNode\n  value: Date\n  color: string\n}\n\nconst DateRow: React.FC<React.PropsWithChildren<PropsType>> = ({ title, value, color }) => {\n  const { t } = useTranslation()\n  const tooltipContent = t(\n    'You will be able to withdraw the staked CAKE and profit only when the staking position is unlocked, i.e. when the staking period ends.',\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText>\n        <Text ref={targetRef} color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {title}\n        </Text>\n      </TooltipText>\n      <Text bold color={color}>\n        {value ? format(value, 'MMM do, yyyy HH:mm') : '-'}\n      </Text>\n    </Flex>\n  )\n}\n\nexport default DateRow\n","interface FormatRoiArgs {\n  lockedApy: string\n  usdValueStaked: number\n  duration: number\n}\n\nexport default function formatRoi(roiArgs: FormatRoiArgs): string {\n  const { lockedApy, usdValueStaked, duration } = roiArgs\n\n  const roi = usdValueStaked * (Number(lockedApy) / 100) * (duration / 31449600)\n  const roiFractionDigits = roi > 10000 ? 0 : 2\n\n  return roi.toLocaleString('en', {\n    minimumFractionDigits: roiFractionDigits,\n    maximumFractionDigits: roiFractionDigits,\n  })\n}\n","import BigNumber from 'bignumber.js'\n\ninterface FormatiCake {\n  lockedAmount: any\n  duration: number\n  ceiling: BigNumber\n}\n\nexport default function formatiCake({ lockedAmount, duration, ceiling }: FormatiCake) {\n  const durationAsBn = new BigNumber(duration)\n  if (durationAsBn.gte(ceiling)) {\n    return new BigNumber(lockedAmount).toNumber()\n  }\n\n  if (durationAsBn.lt(ceiling) && durationAsBn.gte(0)) {\n    return durationAsBn.times(lockedAmount).div(ceiling).toNumber()\n  }\n\n  return 0\n}\n","import { useContext } from 'react'\nimport { IconButton, CalculateIcon } from '@pancakeswap/uikit'\n\nimport { RoiCalculatorModalContext } from '../Modals/RoiCalculatorModalProvider'\n\nconst CalculatorButton = () => {\n  const setShowRoiCalculator = useContext(RoiCalculatorModalContext)\n\n  return (\n    <IconButton variant=\"text\" scale=\"sm\" mr=\"-8px\" onClick={() => setShowRoiCalculator && setShowRoiCalculator(true)}>\n      <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default CalculatorButton\n","import { useMemo } from 'react'\nimport { Box, Text, Flex, MessageText, Message } from '@pancakeswap/uikit'\n\nimport { LightGreyCard } from 'components/Card'\nimport { addSeconds } from 'date-fns'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { useTranslation } from '@pancakeswap/localization'\nimport _toNumber from 'lodash/toNumber'\nimport { convertTimeToSeconds } from 'utils/timeHelper'\nimport formatSecondsToWeeks from '../../../utils/formatSecondsToWeeks'\nimport TextRow from './TextRow'\nimport BalanceRow from './BalanceRow'\nimport DateRow from './DateRow'\nimport formatRoi from '../../utils/formatRoi'\nimport formatiCake from '../../utils/formatICake'\nimport { OverviewPropsType } from '../../types'\nimport CalculatorButton from '../../Buttons/CalculatorButton'\n\nconst Overview: React.FC<React.PropsWithChildren<OverviewPropsType>> = ({\n  usdValueStaked,\n  lockedAmount,\n  duration,\n  isValidDuration,\n  newDuration,\n  newLockedAmount,\n  lockStartTime,\n  lockEndTime,\n  showLockWarning,\n  ceiling,\n}) => {\n  const { getLockedApy, getBoostFactor } = useVaultApy()\n  const { t } = useTranslation()\n\n  const lockedApy = useMemo(() => getLockedApy(duration), [getLockedApy, duration])\n  const boostFactor = useMemo(() => getBoostFactor(duration), [getBoostFactor, duration])\n  const newLockedApy = useMemo(() => (newDuration && getLockedApy(newDuration)) || 0, [getLockedApy, newDuration])\n  const newBoost = useMemo(() => (newDuration && getBoostFactor(newDuration)) || 0, [getBoostFactor, newDuration])\n\n  const formattedRoi = useMemo(() => {\n    return formatRoi({ usdValueStaked, lockedApy, duration })\n  }, [lockedApy, usdValueStaked, duration])\n\n  const newFormattedRoi = useMemo(() => {\n    return newLockedApy && formatRoi({ usdValueStaked, lockedApy: newLockedApy, duration: newDuration })\n  }, [newLockedApy, usdValueStaked, newDuration])\n\n  const now = new Date()\n\n  const unlockDate = newDuration\n    ? addSeconds(Number(lockStartTime) ? new Date(convertTimeToSeconds(lockStartTime)) : now, newDuration)\n    : Number(lockEndTime)\n    ? new Date(convertTimeToSeconds(lockEndTime))\n    : addSeconds(now, duration)\n\n  const formattediCake = useMemo(() => {\n    return formatiCake({ lockedAmount, duration, ceiling })\n  }, [lockedAmount, duration, ceiling])\n\n  const newFormattediCake = useMemo(() => {\n    const amount = Number(newLockedAmount) ? newLockedAmount : lockedAmount\n    const lockDuration = Number(newDuration) ? newDuration : duration\n\n    return formatiCake({ lockedAmount: amount, duration: lockDuration, ceiling })\n  }, [lockedAmount, newLockedAmount, duration, newDuration, ceiling])\n\n  return (\n    <>\n      <Box>\n        <Flex mb=\"4px\">\n          <Text fontSize=\"12px\" color=\"secondary\" bold mr=\"2px\" textTransform=\"uppercase\">\n            {t('Lock')}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            {t('Overview')}\n          </Text>\n        </Flex>\n        <LightGreyCard>\n          <BalanceRow title={t('Cake to be locked')} value={lockedAmount} newValue={newLockedAmount} decimals={2} />\n          <BalanceRow title=\"iCake\" decimals={2} value={formattediCake} newValue={newFormattediCake} />\n          <BalanceRow\n            title=\"apr\"\n            unit=\"%\"\n            value={_toNumber(lockedApy)}\n            decimals={2}\n            newValue={_toNumber(newLockedApy)}\n            tooltipContent={t(\n              'Calculated based on current rates and subject to change based on pool conditions. It is an estimate provided for your convenience only, and by no means represents guaranteed returns.',\n            )}\n          />\n          <TextRow\n            title={t('duration')}\n            value={isValidDuration && formatSecondsToWeeks(duration)}\n            newValue={isValidDuration && newDuration && formatSecondsToWeeks(newDuration)}\n          />\n          <BalanceRow\n            title={t('Yield boost')}\n            unit=\"x\"\n            value={_toNumber(boostFactor)}\n            decimals={2}\n            newValue={_toNumber(newBoost)}\n            tooltipContent={t(\n              'Your yield will be boosted based on the total lock duration of your current fixed term staking position.',\n            )}\n          />\n          <DateRow\n            color={_toNumber(newDuration) ? 'failure' : 'text'}\n            title={t('Unlock on')}\n            value={isValidDuration && unlockDate}\n          />\n          <BalanceRow\n            title={t('Expected ROI')}\n            value={formattedRoi}\n            newValue={newFormattedRoi}\n            prefix=\"$\"\n            decimals={2}\n            suffix={<CalculatorButton />}\n            tooltipContent={t(\n              'Calculated based on current rates and subject to change based on pool conditions. It is an estimate provided for your convenience only, and by no means represents guaranteed returns.',\n            )}\n          />\n        </LightGreyCard>\n      </Box>\n      {showLockWarning && (\n        <Box mt=\"16px\" maxWidth=\"370px\">\n          <Message variant=\"warning\">\n            <MessageText>\n              {t('You will be able to withdraw the staked CAKE and profit only when the staking position is unlocked')}\n            </MessageText>\n          </Message>\n        </Box>\n      )}\n    </>\n  )\n}\n\nexport default Overview\n","import { Flex, Text, TooltipText, useTooltip, BalanceWithLoading } from '@pancakeswap/uikit'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst YieldBoostRow = ({ secondDuration }) => {\n  const { boostFactor } = useVaultApy({ duration: secondDuration })\n  const { t } = useTranslation()\n\n  const tooltipContent = t(\n    'Your yield will be boosted based on the total lock duration of your current fixed term staking position.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText>\n        <Text ref={targetRef} color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('Yield boost')}\n        </Text>\n      </TooltipText>\n      <BalanceWithLoading\n        color=\"text\"\n        bold\n        fontSize=\"16px\"\n        value={boostFactor ? boostFactor?.toString() : '0'}\n        decimals={2}\n        unit=\"x\"\n      />\n    </Flex>\n  )\n}\n\nexport default YieldBoostRow\n","import { useState, useMemo } from 'react'\nimport { Modal, Box } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport { VaultKey } from 'state/types'\nimport { getDecimalAmount } from '@pancakeswap/utils/formatBalance'\nimport { useTranslation } from '@pancakeswap/localization'\nimport _toNumber from 'lodash/toNumber'\nimport BigNumber from 'bignumber.js'\nimport { GenericModalProps } from '../types'\nimport BalanceField from '../Common/BalanceField'\nimport LockedBodyModal from '../Common/LockedModalBody'\nimport RoiCalculatorModalProvider from './RoiCalculatorModalProvider'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nconst LockedStakeModal: React.FC<React.PropsWithChildren<GenericModalProps>> = ({\n  onDismiss,\n  currentBalance,\n  stakingToken,\n  stakingTokenBalance,\n}) => {\n  const { theme } = useTheme()\n  const [lockedAmount, setLockedAmount] = useState('')\n  const { t } = useTranslation()\n\n  const usdValueStaked = useBUSDCakeAmount(_toNumber(lockedAmount))\n\n  const { allowance } = useCheckVaultApprovalStatus(VaultKey.CakeVault)\n  const needApprove = useMemo(() => {\n    const amount = getDecimalAmount(new BigNumber(lockedAmount))\n    return amount.gt(allowance)\n  }, [allowance, lockedAmount])\n\n  return (\n    <RoiCalculatorModalProvider lockedAmount={lockedAmount}>\n      <Modal title={t('Lock CAKE')} onDismiss={onDismiss} headerBackground={theme.colors.gradientCardHeader}>\n        <Box mb=\"16px\">\n          <BalanceField\n            stakingAddress={stakingToken.address}\n            stakingSymbol={stakingToken.symbol}\n            stakingDecimals={stakingToken.decimals}\n            lockedAmount={lockedAmount}\n            usedValueStaked={usdValueStaked}\n            stakingMax={currentBalance}\n            setLockedAmount={setLockedAmount}\n            stakingTokenBalance={stakingTokenBalance}\n            needApprove={needApprove}\n          />\n        </Box>\n        <LockedBodyModal\n          currentBalance={currentBalance}\n          stakingToken={stakingToken}\n          onDismiss={onDismiss}\n          lockedAmount={new BigNumber(lockedAmount)}\n        />\n      </Modal>\n    </RoiCalculatorModalProvider>\n  )\n}\n\nexport default LockedStakeModal\n","import React, { useState, createContext } from 'react'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { usePool } from 'state/pools/hooks'\nimport _toString from 'lodash/toString'\n\nimport { VaultRoiCalculatorModal } from '../../Vault/VaultRoiCalculatorModal'\n\nexport const RoiCalculatorModalContext = createContext(null)\n\nconst RoiCalculatorModalProvider: React.FC<\n  React.PropsWithChildren<{ children: React.ReactNode; lockedAmount: string | number }>\n> = ({ children, lockedAmount }) => {\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  // Get Vault pool\n  const { pool } = usePool(0)\n\n  const stakingTokenAddress = pool?.stakingToken?.address ? pool.stakingToken.address.toLowerCase() : null\n\n  if (showRoiCalculator) {\n    return (\n      <VaultRoiCalculatorModal\n        pool={pool}\n        linkLabel={t('Get %symbol%', { symbol: 'CAKE' })}\n        linkHref={stakingTokenAddress ? `/swap?outputCurrency=${stakingTokenAddress}` : '/swap'}\n        stakingTokenBalance={pool?.userData?.stakingTokenBalance}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={_toString(lockedAmount)}\n        initialView={1}\n      />\n    )\n  }\n\n  return (\n    <RoiCalculatorModalContext.Provider value={setShowRoiCalculator}>{children}</RoiCalculatorModalContext.Provider>\n  )\n}\n\nexport default RoiCalculatorModalProvider\n","import { useMemo } from 'react'\nimport { BOOST_WEIGHT, DURATION_FACTOR } from 'config/constants/pools'\nimport BigNumber from 'bignumber.js'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { getFullDecimalMultiplier } from '@pancakeswap/utils/getFullDecimalMultiplier'\n\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport formatSecondsToWeeks, { secondsToWeeks } from '../../utils/formatSecondsToWeeks'\n\nexport default function useAvgLockDuration() {\n  const { totalLockedAmount, totalShares, totalCakeInVault, pricePerFullShare } = useCakeVault()\n\n  const avgLockDurationsInSeconds = useMemo(() => {\n    const flexibleCakeAmount = totalCakeInVault.minus(totalLockedAmount)\n    const flexibleCakeShares = flexibleCakeAmount.div(pricePerFullShare).times(DEFAULT_TOKEN_DECIMAL)\n    const lockedCakeBoostedShares = totalShares.minus(flexibleCakeShares)\n    const lockedCakeOriginalShares = totalLockedAmount.div(pricePerFullShare).times(DEFAULT_TOKEN_DECIMAL)\n    const avgBoostRatio = lockedCakeBoostedShares.div(lockedCakeOriginalShares)\n\n    return (\n      Math.round(\n        avgBoostRatio\n          .minus(1)\n          .times(new BigNumber(DURATION_FACTOR.toString()))\n          .div(new BigNumber(BOOST_WEIGHT.toString()).div(getFullDecimalMultiplier(12)))\n          .toNumber(),\n      ) || 0\n    )\n  }, [totalCakeInVault, totalLockedAmount, pricePerFullShare, totalShares])\n\n  const avgLockDurationsInWeeks = useMemo(\n    () => formatSecondsToWeeks(avgLockDurationsInSeconds),\n    [avgLockDurationsInSeconds],\n  )\n\n  const avgLockDurationsInWeeksNum = useMemo(\n    () => secondsToWeeks(avgLockDurationsInSeconds),\n    [avgLockDurationsInSeconds],\n  )\n\n  return {\n    avgLockDurationsInWeeks,\n    avgLockDurationsInWeeksNum,\n    avgLockDurationsInSeconds,\n  }\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { convertTimeToSeconds, distanceToNowStrict } from 'utils/timeHelper'\nimport formatSecondsToWeeks from '../../utils/formatSecondsToWeeks'\n\ninterface UserData {\n  lockEndTime: string\n  lockStartTime: string\n  burnStartTime?: string\n}\n\ninterface UserDataInVaultPresenter {\n  weekDuration: string\n  remainingTime: string\n  lockEndDate: string\n  secondDuration: number\n  burnStartTime?: string\n}\n\ntype UserDataInVaultPresenterFn = (args: UserData) => UserDataInVaultPresenter\n\nconst useUserDataInVaultPresenter: UserDataInVaultPresenterFn = ({ lockEndTime, lockStartTime }) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const secondDuration = Number(lockEndTime) - Number(lockStartTime)\n\n  const lockEndTimeSeconds = convertTimeToSeconds(lockEndTime)\n\n  let lockEndDate = ''\n  let burnStartTime = ''\n\n  try {\n    const _lockEndDate = new Date(lockEndTimeSeconds)\n    lockEndDate = _lockEndDate.toLocaleString(locale, {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false,\n    })\n\n    const _burnStartTime = new Date(lockEndTimeSeconds + 7 * 24 * 60 * 60 * 1000)\n    burnStartTime = _burnStartTime.toLocaleString(locale, {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false,\n    })\n  } catch (_) {\n    // ignore invalid format\n  }\n\n  return {\n    weekDuration: formatSecondsToWeeks(secondDuration),\n    remainingTime: distanceToNowStrict(lockEndTimeSeconds),\n    lockEndDate,\n    secondDuration,\n    burnStartTime,\n  }\n}\n\nexport default useUserDataInVaultPresenter\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getBalanceAmount } from '@pancakeswap/utils/formatBalance'\n\nimport { useMemo } from 'react'\n\nexport const useUserEnoughCakeValidator = (cakeAmount: string, stakingTokenBalance: BigNumber) => {\n  const { t } = useTranslation()\n  const errorMessage = t('Insufficient CAKE balance')\n\n  const userNotEnoughCake = useMemo(() => {\n    if (new BigNumber(cakeAmount).gt(getBalanceAmount(stakingTokenBalance, 18))) return true\n    return false\n  }, [cakeAmount, stakingTokenBalance])\n  return { userNotEnoughCake, notEnoughErrorMessage: errorMessage }\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<React.PropsWithChildren<NotEnoughTokensModalProps>> = ({\n  tokenSymbol,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradientCardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href=\"/swap\">\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React from 'react'\nimport { Flex, Link, Text, TimerIcon, Balance } from '@pancakeswap/uikit'\nimport { getBlockExploreLink } from 'utils'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport { Token } from '@pancakeswap/sdk'\n\ninterface MaxStakeRowProps {\n  small?: boolean\n  stakingLimit: BigNumber\n  currentBlock: number\n  stakingLimitEndBlock: number\n  stakingToken: Token\n  hasPoolStarted: boolean\n  endBlock: number\n}\n\nconst MaxStakeRow: React.FC<React.PropsWithChildren<MaxStakeRowProps>> = ({\n  small = false,\n  stakingLimit,\n  currentBlock,\n  stakingLimitEndBlock,\n  stakingToken,\n  hasPoolStarted,\n  endBlock,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small={small}>{t('Max. stake per user')}:</Text>\n        <Text small={small}>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${\n          stakingToken.symbol\n        }`}</Text>\n      </Flex>\n      {hasPoolStarted && endBlock !== stakingLimitEndBlock && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small={small}>{t('Max. stake limit ends in')}:</Text>\n          <Link external href={getBlockExploreLink(stakingLimitEndBlock, 'countdown')}>\n            <Balance\n              small={small}\n              value={Math.max(stakingLimitEndBlock - currentBlock, 0)}\n              decimals={0}\n              color=\"primary\"\n            />\n            <Text small={small} ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default MaxStakeRow\n","import { Flex, Text, TooltipText, useTooltip, Pool } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { isLocked, isStaked } from 'utils/cakePool'\nimport { Token } from '@pancakeswap/sdk'\nimport useAvgLockDuration from './LockedPool/hooks/useAvgLockDuration'\nimport Apr from './Apr'\n\nexport const PerformanceFee: React.FC<\n  React.PropsWithChildren<{ userData?: Pool.DeserializedVaultUser; performanceFeeAsDecimal?: number }>\n> = ({ userData, performanceFeeAsDecimal }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Performance fee only applies to the flexible staking rewards.'),\n    { placement: 'bottom-start' },\n  )\n\n  const isLock = isLocked(userData)\n  const isStake = isStaked(userData)\n\n  if (!performanceFeeAsDecimal || isLock) {\n    return null\n  }\n\n  return (\n    <Pool.StatWrapper\n      label={\n        <TooltipText ref={targetRef} small>\n          {t('Performance Fee')}\n        </TooltipText>\n      }\n    >\n      {tooltipVisible && tooltip}\n      <Text ml=\"4px\" small>\n        {isStake ? `${performanceFeeAsDecimal}%` : `0~${performanceFeeAsDecimal}%`}\n      </Text>\n    </Pool.StatWrapper>\n  )\n}\n\nexport const TotalLocked: React.FC<React.PropsWithChildren<{ totalLocked: BigNumber; lockedToken: Token }>> = ({\n  totalLocked,\n  lockedToken,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Pool.StatWrapper label={<Text small>{t('Total locked')}:</Text>}>\n      <Pool.TotalToken\n        total={totalLocked}\n        tokenDecimals={lockedToken.decimals}\n        decimalsToShow={0}\n        symbol={lockedToken.symbol}\n      />\n    </Pool.StatWrapper>\n  )\n}\n\nexport const DurationAvg = () => {\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('The average lock duration of all the locked staking positions of other users'),\n    { placement: 'bottom-start' },\n  )\n\n  const { avgLockDurationsInWeeks } = useAvgLockDuration()\n\n  return (\n    <Pool.StatWrapper\n      label={\n        <TooltipText ref={targetRef} small>\n          {t('Average lock duration')}:\n        </TooltipText>\n      }\n    >\n      {tooltipVisible && tooltip}\n      <Text ml=\"4px\" small>\n        {avgLockDurationsInWeeks}\n      </Text>\n    </Pool.StatWrapper>\n  )\n}\n\nexport const AprInfo: React.FC<\n  React.PropsWithChildren<{ pool: Pool.DeserializedPool<Token>; stakedBalance: BigNumber }>\n> = ({ pool, stakedBalance }) => {\n  const { t } = useTranslation()\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small>{t('APR')}:</Text>\n      <Apr pool={pool} showIcon stakedBalance={stakedBalance} performanceFee={0} fontSize=\"14px\" />\n    </Flex>\n  )\n}\n","import { Flex, Link, LinkExternal, Skeleton, Text, TimerIcon, Balance, Pool } from '@pancakeswap/uikit'\nimport AddToWalletButton, { AddToWalletTextOptions } from 'components/AddToWallet/AddToWalletButton'\nimport { bsc } from 'wagmi/chains'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Token } from '@pancakeswap/sdk'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { memo } from 'react'\nimport { useCurrentBlock } from 'state/block/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { VaultKey } from 'state/types'\nimport { getBlockExploreLink } from 'utils'\nimport { getAddress, getVaultPoolAddress } from 'utils/addressHelpers'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport MaxStakeRow from './MaxStakeRow'\nimport { AprInfo, DurationAvg, PerformanceFee, TotalLocked } from './Stat'\n\ninterface ExpandedFooterProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n  showTotalStaked?: boolean\n  alignLinksToRight?: boolean\n}\n\nconst PoolStatsInfo: React.FC<React.PropsWithChildren<ExpandedFooterProps>> = ({\n  pool,\n  account,\n  showTotalStaked = true,\n  alignLinksToRight = true,\n}) => {\n  const { t } = useTranslation()\n  const currentBlock = useCurrentBlock()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    stakingLimitEndBlock,\n    contractAddress,\n    vaultKey,\n    profileRequirement,\n    isFinished,\n    userData: poolUserData,\n  } = pool\n\n  const stakedBalance = poolUserData?.stakedBalance ? poolUserData.stakedBalance : BIG_ZERO\n\n  const {\n    totalCakeInVault,\n    totalLockedAmount,\n    fees: { performanceFeeAsDecimal },\n    userData,\n  } = useVaultPoolByKey(vaultKey)\n\n  const tokenAddress = earningToken.address || ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getVaultPoolAddress(vaultKey)\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  return (\n    <>\n      {profileRequirement && (profileRequirement.required || profileRequirement.thresholdPoints.gt(0)) && (\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Text small>{t('Requirement')}:</Text>\n          <Text small textAlign=\"right\">\n            {profileRequirement.required && t('Pancake Profile')}{' '}\n            {profileRequirement.thresholdPoints.gt(0) && (\n              <Text small>\n                {profileRequirement.thresholdPoints.toNumber().toLocaleString()} {t('Profile Points')}\n              </Text>\n            )}\n          </Text>\n        </Flex>\n      )}\n      {!vaultKey && <AprInfo pool={pool} stakedBalance={stakedBalance} />}\n      {showTotalStaked && (\n        <Pool.TotalStaked\n          totalStaked={vaultKey ? totalCakeInVault : totalStaked}\n          tokenDecimals={stakingToken.decimals}\n          symbol={stakingToken.symbol}\n          decimalsToShow={0}\n        />\n      )}\n      {vaultKey === VaultKey.CakeVault && <TotalLocked totalLocked={totalLockedAmount} lockedToken={stakingToken} />}\n      {vaultKey === VaultKey.CakeVault && <DurationAvg />}\n      {!isFinished && stakingLimit && stakingLimit.gt(0) && (\n        <MaxStakeRow\n          small\n          currentBlock={currentBlock}\n          hasPoolStarted={hasPoolStarted}\n          stakingLimit={stakingLimit}\n          stakingLimitEndBlock={stakingLimitEndBlock}\n          stakingToken={stakingToken}\n          endBlock={endBlock}\n        />\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBlockExploreLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {vaultKey && <PerformanceFee userData={userData} performanceFeeAsDecimal={performanceFeeAsDecimal} />}\n      <Flex mb=\"2px\" justifyContent={alignLinksToRight ? 'flex-end' : 'flex-start'}>\n        <LinkExternal href={`/info/token/${earningToken.address}`} bold={false} small>\n          {t('See Token Info')}\n        </LinkExternal>\n      </Flex>\n      {!vaultKey && (\n        <Flex mb=\"2px\" justifyContent={alignLinksToRight ? 'flex-end' : 'flex-start'}>\n          <LinkExternal href={earningToken.projectLink} bold={false} small>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {vaultKey && (\n        <Flex mb=\"2px\" justifyContent={alignLinksToRight ? 'flex-end' : 'flex-start'}>\n          <LinkExternal href=\"https://docs.pancakeswap.finance/products/syrup-pool/new-cake-pool\" bold={false} small>\n            {t('View Tutorial')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent={alignLinksToRight ? 'flex-end' : 'flex-start'}>\n          <LinkExternal\n            isBscScan\n            href={`${bsc.blockExplorers.default.url}/address/${\n              vaultKey ? cakeVaultContractAddress : poolContractAddress\n            }`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && tokenAddress && (\n        <Flex justifyContent={alignLinksToRight ? 'flex-end' : 'flex-start'}>\n          <AddToWalletButton\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            style={{ fontSize: '14px', fontWeight: '400', lineHeight: 'normal' }}\n            marginTextBetweenLogo=\"4px\"\n            textOptions={AddToWalletTextOptions.TEXT}\n            tokenAddress={tokenAddress}\n            tokenSymbol={earningToken.symbol}\n            tokenDecimals={earningToken.decimals}\n            tokenLogo={`https://tokens.pancakeswap.finance/images/${tokenAddress}.png`}\n          />\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default memo(PoolStatsInfo)\n","import { useTranslation } from '@pancakeswap/localization'\nimport { useTooltip, Farm as FarmUI } from '@pancakeswap/uikit'\n\nconst { CompoundingPoolTag, ManualPoolTag, LockedPoolTag, LockedOrAutoPoolTag } = FarmUI.Tags\n\nconst PoolTypeTag = ({ account, vaultKey, isLocked, children }) => {\n  const { t } = useTranslation()\n\n  let tooltipText\n\n  if (!vaultKey) {\n    tooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  } else if (!account) {\n    tooltipText = t(\n      'In flexible staking, rewards are distributed and included in your total staking balance. In locked staking, Rewards are locked until the end of the staking position.',\n    )\n  } else if (isLocked) {\n    tooltipText = t('Rewards are locked until the end of the staking position.')\n  } else {\n    tooltipText = t('Rewards are distributed and included in your total staking balance.')\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <>\n      {vaultKey ? (\n        account ? (\n          isLocked ? (\n            <LockedPoolTag />\n          ) : (\n            <CompoundingPoolTag />\n          )\n        ) : (\n          <LockedOrAutoPoolTag />\n        )\n      ) : (\n        <ManualPoolTag />\n      )}\n      {tooltipVisible && tooltip}\n      {children(targetRef)}\n    </>\n  )\n}\n\nexport default PoolTypeTag\n","import {\n  Tag,\n  TagProps,\n  Text,\n  SplitIcon,\n  LockIcon,\n  UnlockIcon,\n  HotIcon,\n  Box,\n  FlexGap,\n  FlexGapProps,\n} from '@pancakeswap/uikit'\nimport Trans from 'components/Trans'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { ReactNode, useMemo } from 'react'\nimport { DeserializedLockedVaultUser } from 'state/types'\nimport { VaultPosition, getVaultPosition } from 'utils/cakePool'\n\nconst tagConfig: Record<VaultPosition, TagProps> = {\n  [VaultPosition.None]: {},\n  [VaultPosition.Flexible]: {\n    variant: 'success',\n  },\n  [VaultPosition.Locked]: {\n    variant: 'secondary',\n  },\n  [VaultPosition.LockedEnd]: {\n    variant: 'secondary',\n    outline: true,\n  },\n  [VaultPosition.AfterBurning]: {\n    variant: 'failure',\n    outline: true,\n  },\n}\nconst iconConfig: Record<VaultPosition, any> = {\n  [VaultPosition.None]: null,\n  [VaultPosition.Flexible]: SplitIcon,\n  [VaultPosition.Locked]: LockIcon,\n  [VaultPosition.LockedEnd]: UnlockIcon,\n  [VaultPosition.AfterBurning]: HotIcon,\n}\n\nconst positionLabel: Record<VaultPosition, ReactNode> = {\n  [VaultPosition.None]: '',\n  [VaultPosition.Flexible]: <Trans>Flexible</Trans>,\n  [VaultPosition.Locked]: <Trans>Locked</Trans>,\n  [VaultPosition.LockedEnd]: <Trans>Locked End</Trans>,\n  [VaultPosition.AfterBurning]: <Trans>After Burning</Trans>,\n}\n\nconst VaultPositionTag: React.FC<React.PropsWithChildren<{ position: VaultPosition }>> = ({ position }) => {\n  return (\n    <Tag {...tagConfig[position]}>\n      <Box as={iconConfig[position]} mr=\"4px\" />\n      {positionLabel[position]}\n    </Tag>\n  )\n}\n\nexport const VaultPositionTagWithLabel: React.FC<\n  React.PropsWithChildren<{ userData: DeserializedLockedVaultUser } & FlexGapProps>\n> = ({ userData, ...props }) => {\n  const { t } = useTranslation()\n\n  const position = useMemo(() => getVaultPosition(userData), [userData])\n\n  if (position) {\n    return (\n      <FlexGap alignItems=\"center\" justifyContent=\"space-between\" marginX=\"8px\" mb=\"8px\" gap=\"12px\" {...props}>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('My Position')}\n        </Text>\n        <VaultPositionTag position={position} />\n      </FlexGap>\n    )\n  }\n\n  return null\n}\n","import {\n  Box,\n  ButtonMenu,\n  ButtonMenuItem,\n  RoiCalculatorModal,\n  RoiCalculatorModalProps,\n  CalculatorMode,\n  Pool,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { useEffect, useState, useMemo } from 'react'\nimport { VaultKey } from 'state/types'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { getRoi } from '@pancakeswap/utils/compoundApyHelpers'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Token } from '@pancakeswap/sdk'\n\nimport LockDurationField from '../LockedPool/Common/LockDurationField'\nimport { weeksToSeconds } from '../utils/formatSecondsToWeeks'\n\nexport const VaultRoiCalculatorModal = ({\n  pool,\n  initialView,\n  ...rest\n}: { pool: Pool.DeserializedPool<Token>; initialView?: number } & Partial<RoiCalculatorModalProps>) => {\n  const {\n    userData: {\n      balance: { cakeAsBigNumber },\n    },\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  const { getLockedApy, flexibleApy } = useVaultApy()\n  const { t } = useTranslation()\n  const { account } = useActiveWeb3React()\n\n  const [cakeVaultView, setCakeVaultView] = useState(initialView || 0)\n\n  const [duration, setDuration] = useState(() => weeksToSeconds(1))\n\n  const buttonMenuItems = useMemo(\n    () => [\n      <ButtonMenuItem key=\"Flexible\">{t('Flexible')}</ButtonMenuItem>,\n      <ButtonMenuItem key=\"Locked\">{t('Locked')}</ButtonMenuItem>,\n    ],\n    [t],\n  )\n\n  const apy = useMemo(() => {\n    return cakeVaultView === 0 ? flexibleApy : getLockedApy(duration)\n  }, [cakeVaultView, getLockedApy, flexibleApy, duration])\n\n  const [isMaxSelected, setIsMaxSelected] = useState(false)\n\n  return (\n    <RoiCalculatorModal\n      isLocked={cakeVaultView === 1}\n      account={account}\n      stakingTokenSymbol={pool.stakingToken.symbol}\n      apy={+apy}\n      initialState={{\n        controls: {\n          compounding: false, // no compounding if apy is specify\n        },\n      }}\n      linkHref=\"/swap\"\n      linkLabel={t('Get %symbol%', { symbol: pool.stakingToken.symbol })}\n      earningTokenPrice={pool.earningTokenPrice}\n      stakingTokenPrice={pool.stakingTokenPrice}\n      stakingTokenBalance={\n        pool.userData?.stakingTokenBalance ? cakeAsBigNumber.plus(pool.userData?.stakingTokenBalance) : cakeAsBigNumber\n      }\n      stakingTokenDecimals={pool.stakingToken.decimals}\n      autoCompoundFrequency={1}\n      strategy={\n        cakeVaultView\n          ? (state, dispatch) => (\n              <LockedRoiStrategy\n                state={state}\n                dispatch={dispatch}\n                stakingTokenPrice={pool.stakingTokenPrice}\n                earningTokenPrice={pool.earningTokenPrice}\n                duration={duration}\n              />\n            )\n          : null\n      }\n      header={\n        pool.vaultKey === VaultKey.CakeVault ? (\n          <ButtonMenu\n            mb=\"24px\"\n            fullWidth\n            scale=\"sm\"\n            variant=\"subtle\"\n            activeIndex={cakeVaultView}\n            onItemClick={setCakeVaultView}\n          >\n            {buttonMenuItems}\n          </ButtonMenu>\n        ) : (\n          <></>\n        )\n      }\n      {...rest}\n    >\n      {cakeVaultView && (\n        <Box mt=\"16px\">\n          <LockDurationField\n            duration={duration}\n            setDuration={setDuration}\n            isOverMax={false}\n            isMaxSelected={isMaxSelected}\n            setIsMaxSelected={setIsMaxSelected}\n          />\n        </Box>\n      )}\n    </RoiCalculatorModal>\n  )\n}\n\nfunction LockedRoiStrategy({ state, dispatch, earningTokenPrice, duration, stakingTokenPrice }) {\n  const { getLockedApy } = useVaultApy()\n  const { principalAsUSD, roiUSD } = state.data\n  const { compounding, compoundingFrequency, stakingDuration, mode } = state.controls\n\n  useEffect(() => {\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n      const principalInUSDAsNumber = parseFloat(principalAsUSD)\n      const interest =\n        (principalInUSDAsNumber / earningTokenPrice) * (+getLockedApy(duration) / 100) * (duration / 31449600)\n\n      const hasInterest = !Number.isNaN(interest)\n      const roiTokens = hasInterest ? interest : 0\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0\n      const roiPercentage = hasInterest\n        ? getRoi({\n            amountEarned: roiAsUSD,\n            amountInvested: principalInUSDAsNumber,\n          })\n        : 0\n      dispatch({ type: 'setRoi', payload: { roiUSD: roiAsUSD, roiTokens, roiPercentage } })\n    }\n  }, [\n    principalAsUSD,\n    stakingDuration,\n    earningTokenPrice,\n    compounding,\n    compoundingFrequency,\n    mode,\n    duration,\n    dispatch,\n    getLockedApy,\n  ])\n\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      const principalUSD = roiUSD / (+getLockedApy(duration) / 100) / (duration / 31449600)\n      const roiPercentage = getRoi({\n        amountEarned: roiUSD,\n        amountInvested: principalUSD,\n      })\n      const principalToken = principalUSD / stakingTokenPrice\n      dispatch({\n        type: 'setPrincipalForTargetRoi',\n        payload: {\n          principalAsUSD: principalUSD.toFixed(2),\n          principalAsToken: principalToken.toFixed(10),\n          roiPercentage,\n        },\n      })\n    }\n  }, [dispatch, duration, getLockedApy, mode, roiUSD, stakingTokenPrice])\n\n  return null\n}\n","import { Box, Button, TooltipText, useTooltip, FlexGap } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nexport const VaultStakeButtonGroup = ({\n  onFlexibleClick,\n  onLockedClick,\n}: {\n  onFlexibleClick: () => void\n  onLockedClick: () => void\n}) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Box>\n      {t(\n        'Flexible staking offers flexibility for staking/unstaking whenever you want. Locked staking offers higher APY as well as other benefits.',\n      )}\n    </Box>,\n    {},\n  )\n  return (\n    <Box width=\"100%\">\n      <FlexGap gap=\"12px\">\n        <Button style={{ flex: 1 }} onClick={onFlexibleClick}>\n          {t('Flexible')}\n        </Button>\n        {onLockedClick && (\n          <Button style={{ flex: 1 }} onClick={onLockedClick}>\n            {t('Locked')}\n          </Button>\n        )}\n      </FlexGap>\n      {tooltipVisible && tooltip}\n      {onLockedClick && (\n        <TooltipText mt=\"16px\" small ref={targetRef}>\n          {t('What’s the difference?')}\n        </TooltipText>\n      )}\n    </Box>\n  )\n}\n","import formatDuration from 'date-fns/formatDuration'\nimport differenceInWeeks from 'date-fns/differenceInWeeks'\nimport differenceInDays from 'date-fns/differenceInDays'\nimport addSeconds from 'date-fns/addSeconds'\n\nexport const secondsToWeeks = (seconds) => {\n  const now = new Date()\n  const addedDate = addSeconds(now, seconds)\n\n  return differenceInWeeks(new Date(addedDate), now, { roundingMethod: 'round' })\n}\n\nexport const secondsToDays = (seconds) => {\n  const now = new Date()\n  const addedDate = addSeconds(now, seconds)\n\n  return differenceInDays(new Date(addedDate), now)\n}\n\nexport const weeksToSeconds = (weeks) => weeks * 7 * 24 * 60 * 60\n\nconst formatSecondsToWeeks = (secondDuration) => formatDuration({ weeks: secondsToWeeks(secondDuration) })\n\nexport default formatSecondsToWeeks\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useCallback } from 'react'\nimport { useAccount } from 'wagmi'\nimport { Contract } from '@ethersproject/contracts'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { VaultKey } from 'state/types'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useSousChef, useVaultPoolContract } from 'hooks/useContract'\nimport { useToast } from '@pancakeswap/uikit'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useCakeApprovalStatus from 'hooks/useCakeApprovalStatus'\nimport useCakeApprove from 'hooks/useCakeApprove'\n\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { address: account } = useAccount()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return callWithGasPrice(lpContract, 'approve', [sousChefContract.address, MaxUint256])\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        t('Contract Enabled'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol })}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(updateUserAllowance({ sousId, account }))\n    }\n  }, [\n    account,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    t,\n    toastSuccess,\n    callWithGasPrice,\n    fetchWithCatchTxError,\n  ])\n\n  return { handleApprove, pendingTx }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (vaultKey: VaultKey, setLastUpdated: () => void) => {\n  const vaultPoolContract = useVaultPoolContract(vaultKey)\n  const { t } = useTranslation()\n\n  return useCakeApprove(\n    setLastUpdated,\n    vaultPoolContract?.address,\n    t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }),\n  )\n}\n\nexport const useCheckVaultApprovalStatus = (vaultKey: VaultKey) => {\n  const vaultPoolContract = useVaultPoolContract(vaultKey)\n\n  return useCakeApprovalStatus(vaultPoolContract?.address)\n}\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nexport const getHasWithdrawFee = (lastDepositedTime: number, withdrawalFeePeriod = 259200) => {\n  const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n  const currentSeconds = Math.floor(Date.now() / 1000)\n  const secondsRemainingCalc = feeEndTime - currentSeconds\n  return secondsRemainingCalc > 0\n}\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(() => Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nexport const DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    totalDays: 0,\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.totalDays = Math.floor(delta / DAY_IN_SECONDS)\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n"],"names":["AddToWalletTextOptions","_async_to_generator","Z","tokenAddress","tokenSymbol","tokenDecimals","tokenLogo","image","BAD_SRCS","undefined","window","ethereum","request","method","params","type","options","address","symbol","decimals","_state","sent","canRegisterToken","isSafePal","isMetaMask","isTrust","isCoinbaseWallet","isTokenPocket","NO_TEXT","TEXT","TEXT_WITH_ASSET","Icons","Binance","BinanceChainIcon","CoinbaseWalletIcon","Opera","OperaIcon","TokenPocket","TokenPocketIcon","TrustWalletIcon","MetaMask","MetamaskIcon","getWalletIcon","marginTextBetweenLogo","name","iconProps","_object_spread","width","ml","Icon","jsx_runtime","jsx","AddToWallet_AddToWalletButton","_param","textOptions","_param_textOptions","_param_marginTextBetweenLogo","props","t","useTranslation","useAccount","connector","isConnected","isCanRegisterToken","watchAsset","jsxs","Button","onClick","asset","Divider","styled","param","theme","colors","cardBorder","__webpack_exports__","spender","reader","useCake","key","useMemo","account","contract","cakeContract","methodName","useSWRContract","data","mutate","isVaultApproved","gt","allowance","BigNumber","toString","setLastUpdated","successMsg","toastSuccess","useToast","useCatchTxError","fetchWithCatchTxError","loading","callWithGasPrice","useCallWithGasPrice","signer","handleApprove","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_7__","receipt","MaxUint256","status","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","ToastDescriptionWithTx","txHash","transactionHash","pendingTx","masterChefAddress","getMasterChefAddress","PRECISION_FACTOR","_getBoostFactor","boostWeight","duration","durationFactor","FixedNumber","mulUnsafe","Math","max","divUnsafe","getLockedApy","flexibleApy","boostFactor","addUnsafe","useVaultApy","_ref","arguments","length","_ref_duration","MAX_LOCK_DURATION","useCakeVault","totalShares","BIG_ZERO","pricePerFullShare","tmp","fees","performanceFeeAsDecimal","totalSharesAsEtherBN","pricePerFullShareAsEtherBN","useSWRImmutable","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_13__","calls","specialFarmsPerBlock","cakePoolInfo","totalSpecialAllocPoint","cakePoolSharesInSpecialFarms","multicallv2","abi","masterChefAbi","_swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_15__","apply","allocPoint","BLOCKS_PER_YEAR","totalCakePoolEmissionPerYear","isZero","getFlexibleApy","WeiPerEther","BOOST_WEIGHT","DURATION_FACTOR","lockedApy","getBoostFactor","useCallback","adjustDuration","rewardPercentageNoFee","_toString","secondsToDay","s","floor","convertTimeToSeconds","time","parseInt","distanceToNowStrict","timeInMilliSeconds","endTime","Date","Number","isFinite","formatDistanceToNowStrict","unit","distanceToNowStrictWithUnit","AprComp","Pool","vaultPoolConfig","useActiveWeb3React","currentBlock","useCurrentBlock","getPoolBlockInfo","pool","shouldShowBlockCountdown","hasPoolStarted","autoCompoundFrequency","vaultKey","shouldShowApr","currentLanguage","locale","earningTokenPrice","useVaultPoolByKey","userData","getCakeVaultEarnings","cakeAtLastUserAction","userShares","VaultKey","currentPerformanceFee","plus","currentOverdueFee","userBoostedShare","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","lastUserActionTime","hourDiffSinceLastAction","differenceInHours","now","earnedCakePerHour","earnedUsdPerHour","Fragment","Text","bold","toLocaleString","month","day","year","hour","minute","hour12","Box","mt","toFixed","display","concat","CakeVaultCard_WithdrawalFeeTimer","secondsRemaining","getTimePeriods","days","hours","minutes","fontSize","CakeVaultCard_UnstakingFeeCountdownRow","isTableVariant","lastDepositedTime","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","withdrawalDayPeriod","useTooltip","mb","fee","num","placement","targetRef","tooltip","tooltipVisible","useWithdrawalFeeTimer","hasUnstakingFee","noFeeToPay","shouldShowTimer","withdrawalFeePeriodHour","secondsToHours","Flex","alignItems","justifyContent","flexDirection","TooltipText","ref","small","textTransform","WithdrawalFeeTimer","CakeVaultCard_FeeSummary","stakingTokenSymbol","stakeAmount","feeInCake","parseFloat","hasFeeToPay","getHasWithdrawFee","UnstakingFeeCountdownRow","StyledButton","AnnualRoiContainer","AnnualRoiDisplay","CakeVaultCard_VaultStakeModal","stakingMax","performanceFee","isRemovingStake","_param_isRemovingStake","onDismiss","dispatch","useAppDispatch","stakingToken","vaultPoolContract","useVaultPoolContract","balance","cakeAsBigNumber","cakeAsNumberBalance","useTheme","useState","setStakeAmount","percent","setPercent","showRoiCalculator","setShowRoiCalculator","cakePriceBusd","usePriceCakeBusd","usdValueStaked","times","formattedUsdValueStaked","formatNumber","toNumber","useCheckVaultApprovalStatus","useVaultApprove","needEnable","amount","getDecimalAmount","callOptions","gasLimit","annualRoi","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","apr","compoundFrequency","formattedAnnualRoi","getTokenLink","convertedStakeAmount","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","getFullDisplayBalance","handleWithdrawal","isWithdrawingAll","minus","lte","MIN_LOCK_AMOUNT","sharesAsBigNumber","convertCakeToShares","fetchCakeVaultUserData","handleDeposit","lockDuration","extraArgs","_to_consumable_array","handleConfirmClick","VaultRoiCalculatorModal","linkLabel","linkHref","stakingTokenBalance","onBack","initialValue","Modal","title","headerBackground","gradientCardHeader","minWidth","Image","src","height","alt","BalanceInput","value","isWarning","onUserInput","input","percentage","convertedInput","getFullDecimalMultiplier","currencyValue","color","textAlign","m","Slider","min","onValueChanged","valueLabel","step","scale","mx","p","variant","FeeSummary","mr","IconButton","CalculateIcon","Skeleton","maxWidth","ConvertToLock","currentStakedAmount","isLoading","cakePendingTx","endIcon","AutoRenewIcon","spin","handleCakeApprove","disabled","lt","as","external","href","RenewDuration","setCheckedState","checkedState","Message","MessageText","Checkbox","checked","onChange","prev","Modals_AddAmountModal","currentBalance","currentLockedAmount","lockStartTime","lockEndTime","ceiling","useIfoCeiling","lockedAmount","setLockedAmount","lockedAmountAsBigNumber","totalLockedAmount","getBalanceNumber","currentLockedAmountAsBalance","getBalanceAmount","useBUSDCakeAmount","usdValueNewStaked","remainingDuration","differenceInSeconds","roundingMethod","passedDuration","atLeastOneWeekNewDuration","ONE_WEEK_DEFAULT","prepConfirmArg","finalDuration","customOverview","Overview","isValidDuration","openCalculator","_noop","newDuration","newLockedAmount","needApprove","RoiCalculatorModalProvider","BalanceField","stakingAddress","stakingSymbol","stakingDecimals","usedValueStaked","LockedBodyModal","editAmountOnly","Buttons_AddCakeButton","memo","usePool","userDataLoaded","openAddAmountModal","useModal","AddAmountModal","onPresentTokenRequired","NotEnoughTokensModal","handleClicked","style","whiteSpace","paddingLeft","paddingRight","Common_StaticAmount","BalanceWithLoading","prefix","Modals_ExtendDurationModal","modalTitle","currentDuration","currentDurationLeft","isRenew","validator","totalDuration","isValidAmount","isOverMax","finalLockedAmount","ENABLE_EXTEND_LOCK_AMOUNT","isMaxSelected","showLockWarning","StaticAmount","Buttons_ExtendDurationButton","children","rest","nowInSeconds","openExtendDurationModal","ExtendDurationModal","_obj","Buttons_ConvertToFlexibleButton","useSWRConfig","handleUnlock","msg","_define_property","VaultPosition","Trans","Common_AfterLockedActions","position","isInline","isDesktop","useMatchBreakpoints","isDesktopView","Container","action","ExtendButton","ConvertToFlexibleButton","actionInline","useUserEnoughCakeValidator","userNotEnoughCake","notEnoughErrorMessage","handleStakeInputChange","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","remainingSeconds","setRemainingSeconds","burnDate","addSeconds","UNLOCK_FREE_DURATION","updateRemainingSeconds","useInterval","isMobile","isTableView","avgLockDurationsInSeconds","useAvgLockDuration","flexGrow","SkeletonV2","isDataReady","wrapperProps","DURATIONS","StyledInput","Input","setDuration","setIsMaxSelected","maxAvailableDuration","useEffect","currentDurationInWeeks","secondsToWeeks","maxDurationInWeeks","flexWrap","map","week","weekSeconds","weeksToSeconds","autoComplete","pattern","inputMode","e","weeks","_toNumber","target","currentTarget","validity","valid","weekDuration","LockedAprTooltipContent","boostedYieldAmount","br","ExtendEnable","dynamic","Promise","all","__webpack_require__","then","bind","ssr","Common_LockedModalBody","hookArgs","defaultDuration","useLockedPool","_ref_finalLockedAmount","gte","cakeNeeded","hasEnoughBalanceToExtend","needsEnable","showApproveWarning","setShowApproveWarning","needsApprove","isUndefinedOrNull","showEnableConfirmButtons","setShowEnableConfirmButtons","LockDurationField","approvePendingTx","hasEnoughCake","pendingConfirmTx","CrossText","DiffText","newValue","Overview_TextRow","DiffBalance","Overview_BalanceRow","suffix","tooltipContent","Overview_DateRow","format","formatRoi","roiArgs","roi","roiFractionDigits","minimumFractionDigits","maximumFractionDigits","formatiCake","durationAsBn","div","Buttons_CalculatorButton","useContext","RoiCalculatorModalContext","Common_Overview","newLockedApy","newBoost","formattedRoi","newFormattedRoi","unlockDate","formattediCake","newFormattediCake","LightGreyCard","BalanceRow","TextRow","formatSecondsToWeeks","DateRow","CalculatorButton","secondDuration","createContext","stakingTokenAddress","toLowerCase","initialView","Provider","totalCakeInVault","flexibleCakeShares","flexibleCakeAmount","DEFAULT_TOKEN_DECIMAL","lockedCakeBoostedShares","lockedCakeOriginalShares","round","avgBoostRatio","avgLockDurationsInWeeks","avgLockDurationsInWeeksNum","lockEndTimeSeconds","lockEndDate","burnStartTime","_lockEndDate","_burnStartTime","_","remainingTime","cakeAmount","errorMessage","StyledLink","Link","OpenNewIcon","components_MaxStakeRow","_param_small","stakingLimit","stakingLimitEndBlock","endBlock","getBlockExploreLink","Balance","TimerIcon","PerformanceFee","isLock","isLocked","isStake","isStaked","label","TotalLocked","totalLocked","lockedToken","total","decimalsToShow","DurationAvg","AprInfo","stakedBalance","Apr","showIcon","components_PoolStatsInfo","showTotalStaked","_param_alignLinksToRight","alignLinksToRight","earningToken","totalStaked","startBlock","contractAddress","profileRequirement","isFinished","poolUserData","poolContractAddress","getAddress","cakeVaultContractAddress","getVaultPoolAddress","blocksUntilStart","blocksRemaining","blocksToDisplay","required","thresholdPoints","_param_showTotalStaked","MaxStakeRow","LinkExternal","projectLink","isBscScan","bsc","AddToWalletButton","fontWeight","lineHeight","FarmUI","CompoundingPoolTag","ManualPoolTag","LockedPoolTag","LockedOrAutoPoolTag","tooltipText","_obj1","_obj2","tagConfig","_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_5__","outline","iconConfig","SplitIcon","LockIcon","UnlockIcon","HotIcon","positionLabel","VaultPositionTag","Tag","VaultPositionTagWithLabel","getVaultPosition","FlexGap","marginX","gap","cakeVaultView","setCakeVaultView","buttonMenuItems","ButtonMenuItem","apy","RoiCalculatorModal","initialState","controls","compounding","stakingTokenPrice","stakingTokenDecimals","strategy","state","LockedRoiStrategy","header","ButtonMenu","fullWidth","activeIndex","onItemClick","principalAsUSD","roiUSD","compoundingFrequency","stakingDuration","mode","CalculatorMode","principalInUSDAsNumber","interest","hasInterest","roiTokens","roiAsUSD","roiPercentage","getRoi","amountEarned","amountInvested","payload","principalUSD","principalAsToken","principalToken","VaultStakeButtonGroup","onFlexibleClick","onLockedClick","flex","seconds","addedDate","differenceInWeeks","secondsToDays","differenceInDays","formatDuration","useApprovePool","lpContract","sousId","earningTokenSymbol","sousChefContract","useSousChef","updateUserAllowance","useCakeApprove","useCakeApprovalStatus","secondsRemainingCalc","setSecondsRemaining","setHasUnstakingFee","currentSeconds","setCurrentSeconds","feeEndTime","doesUnstakingFeeApply","tick","prevSeconds","timerInterval","setInterval","clearInterval","DAY_IN_SECONDS","delta","abs","timeLeft","years","months","totalDays"],"sourceRoot":""}