{"version":3,"file":"static/chunks/pages/migration-da3017bc1dc194c1.js","mappings":"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","sources":["webpack://_N_E/?5c01","webpack://_N_E/./src/state/farmsV1/hooks.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchPoolsUser.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useFetchUserPools.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useFetchPublicPoolsData.ts","webpack://_N_E/./src/views/Migration/components/ProgressSteps.tsx","webpack://_N_E/./src/views/Migration/components/MigrationSticky.tsx","webpack://_N_E/./src/views/Migration/components/MigrationTable/TableHeader.tsx","webpack://_N_E/./src/views/Migration/components/MigrationTable/EmptyText.tsx","webpack://_N_E/./src/views/Migration/components/MigrationTable/StyledTable.tsx","webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchIfoPoolUser.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchIfoPoolPublic.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchPublicVaultData.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useFetchIfoPool.ts","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/NameCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/StakedCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/AutoEarningsCell.tsx","webpack://_N_E/./src/views/Migration/components/Pool/Cells/EarningsCell.tsx","webpack://_N_E/./src/views/Migration/components/Pool/Cells/TotalStakedCell.tsx","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useUnstakePool.ts","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/UnstakeButton.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/Unstaked.tsx","webpack://_N_E/./src/views/Migration/components/Cells/ExpandActionCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/Stake.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/AutoEarning.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/Earning.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/TotalStaked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/ActionPanel.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/PoolRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/PoolTable.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/index.tsx","webpack://_N_E/./src/views/Migration/components/Farm/Cells/Farm.tsx","webpack://_N_E/./src/views/Migration/components/Farm/Cells/Staked.tsx","webpack://_N_E/./src/views/Migration/components/Farm/Cells/Multiplier.tsx","webpack://_N_E/./src/views/Migration/components/Farm/Cells/Liquidity.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/Cells/AprCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/Cells/StakeButtonCells.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/StakeButton.tsx","webpack://_N_E/./src/views/Migration/components/Farm/ActionPanel/Multiplier.tsx","webpack://_N_E/./src/views/Migration/components/Farm/ActionPanel/Liquidity.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/ActionPanel/Staked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/ActionPanel/AprRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/ActionPanel/ActionPanel.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/FarmRow.tsx","webpack://_N_E/./src/views/Migration/components/Farm/Cells/Earned.tsx","webpack://_N_E/./src/views/Migration/hook/V1/Farms/useUnstakeFarms.ts","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/UnstakeButton.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/Cells/Unstake.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Staked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Earned.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/ActionPanel.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/FarmRow.tsx","webpack://_N_E/./src/views/Migration/components/types.ts","webpack://_N_E/./src/views/Migration/components/MigrationFarmTable.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/index.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/Cells/StakedCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/PoolRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/PoolTable.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/index.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/index.tsx","webpack://_N_E/./src/views/Migration/index.tsx","webpack://_N_E/./src/pages/migration.tsx","webpack://_N_E/../../packages/uikit/src/components/Spinner/Spinner.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/migration\",\n      function () {\n        return require(\"private-next-pages/migration.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/migration\"])\n      });\n    }\n  ","import { useAccount } from 'wagmi'\nimport { ChainId } from '@pancakeswap/sdk'\nimport BigNumber from 'bignumber.js'\nimport { getFarmConfig } from '@pancakeswap/farms/constants'\nimport { useFastRefreshEffect, useSlowRefreshEffect } from 'hooks/useRefreshEffect'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useCakeBusdPrice } from 'hooks/useBUSDPrice'\nimport { deserializeToken } from '@pancakeswap/token-lists'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getBalanceAmount } from '@pancakeswap/utils/formatBalance'\nimport { DeserializedFarm, DeserializedFarmsState, DeserializedFarmUserData, SerializedFarm } from '@pancakeswap/farms'\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from '.'\nimport { State } from '../types'\n\nconst deserializeFarmUserData = (farm: SerializedFarm): DeserializedFarmUserData => {\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\nconst deserializeFarm = (farm: SerializedFarm): DeserializedFarm => {\n  const { lpAddress, lpSymbol, v1pid, dual, multiplier, isCommunity, quoteTokenPriceBusd, tokenPriceBusd } = farm\n\n  return {\n    lpAddress,\n    lpSymbol,\n    pid: v1pid,\n    dual,\n    multiplier,\n    isCommunity,\n    quoteTokenPriceBusd,\n    tokenPriceBusd,\n    token: deserializeToken(farm.token),\n    quoteToken: deserializeToken(farm.quoteToken),\n    userData: deserializeFarmUserData(farm),\n    tokenAmountTotal: farm.tokenAmountTotal ? new BigNumber(farm.tokenAmountTotal) : BIG_ZERO,\n    lpTotalInQuoteToken: farm.lpTotalInQuoteToken ? new BigNumber(farm.lpTotalInQuoteToken) : BIG_ZERO,\n    lpTotalSupply: farm.lpTotalSupply ? new BigNumber(farm.lpTotalSupply) : BIG_ZERO,\n    tokenPriceVsQuote: farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO,\n    poolWeight: farm.poolWeight ? new BigNumber(farm.poolWeight) : BIG_ZERO,\n  }\n}\n\nexport const usePollFarmsV1WithUserData = () => {\n  const dispatch = useAppDispatch()\n  const { address: account } = useAccount()\n\n  useSlowRefreshEffect(() => {\n    getFarmConfig(ChainId.BSC).then((farmsConfig) => {\n      const pids = farmsConfig.filter((farmToFetch) => farmToFetch.v1pid).map((farmToFetch) => farmToFetch.v1pid)\n\n      dispatch(fetchFarmsPublicDataAsync(pids))\n\n      if (account) {\n        dispatch(fetchFarmUserDataAsync({ account, pids }))\n      }\n    })\n  }, [dispatch, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n\n  useFastRefreshEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\n  }, [dispatch])\n}\n\nexport const useFarmsV1 = (): DeserializedFarmsState => {\n  const farms = useSelector((state: State) => state.farmsV1)\n  const deserializedFarmsData = farms.data.map(deserializeFarm)\n  const { loadArchivedFarmsData, userDataLoaded, poolLength } = farms\n  return {\n    loadArchivedFarmsData,\n    userDataLoaded,\n    data: deserializedFarmsData,\n    poolLength,\n  }\n}\n\nexport const useFarmsPoolLength = (): number => {\n  return useSelector((state: State) => state.farmsV1.poolLength)\n}\n\nexport const useFarmFromPid = (pid: number): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farmsV1.data.find((f) => f.v1pid === pid))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farmsV1.data.find((f) => f.lpSymbol === lpSymbol))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmUser = (pid): DeserializedFarmUserData => {\n  const { userData } = useFarmFromPid(pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = userData\n  return {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  }\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.tokenPriceBusd)\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply.gt(0) && farm.lpTotalInQuoteToken.gt(0)) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(farm.lpTotalSupply)\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n/**\n * @deprecated use the BUSD hook in /hooks\n */\nexport const usePriceCakeBusd = (): BigNumber => {\n  const price = useCakeBusdPrice()\n  return useMemo(() => (price ? new BigNumber(price.toSignificant(6)) : BIG_ZERO), [price])\n}\n","import BigNumber from 'bignumber.js'\nimport { getMasterchefV1Contract } from 'utils/contractHelpers'\n\nexport const fetchUserStakeBalances = async (account) => {\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await getMasterchefV1Contract().userInfo('0', account)\n  return new BigNumber(masterPoolAmount.toString()).toJSON()\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  // Cake / Cake pool\n  const pendingReward = await getMasterchefV1Contract().pendingCake('0', account)\n  return new BigNumber(pendingReward.toString()).toJSON()\n}\n","import { useCallback, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useFastRefreshEffect } from 'hooks/useRefreshEffect'\nimport { SerializedPool } from 'state/types'\nimport { transformPool } from 'state/pools/helpers'\nimport { getCakeContract } from 'utils/contractHelpers'\nimport { PoolCategory } from 'config/constants/types'\nimport { bscTokens } from '@pancakeswap/tokens'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { fetchUserStakeBalances, fetchUserPendingRewards } from './fetchPoolsUser'\n\nexport interface PoolsState {\n  data: SerializedPool\n  userDataLoaded: boolean\n}\n\nconst cakeContract = getCakeContract()\n\nconst initialData = {\n  data: {\n    sousId: 0,\n    stakingToken: bscTokens.cake.serialize,\n    earningToken: bscTokens.cake.serialize,\n    contractAddress: {\n      97: '0x1d32c2945C8FDCBc7156c553B7cEa4325a17f4f9',\n      56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n    },\n    poolCategory: PoolCategory.CORE,\n    tokenPerBlock: '10',\n    isFinished: false,\n    totalStaked: '0',\n  },\n  userDataLoaded: false,\n}\n\nexport const useFetchUserPools = (account) => {\n  const { chainId } = useActiveChainId()\n  const [userPoolsData, setPoolsUserData] = useState<PoolsState>(initialData)\n\n  const fetchUserPoolsData = useCallback(() => {\n    if (account) {\n      const fetchPoolsUserDataAsync = async () => {\n        try {\n          const [stakedBalances, pendingRewards, totalStaking] = await Promise.all([\n            fetchUserStakeBalances(account),\n            fetchUserPendingRewards(account),\n            cakeContract.balanceOf(initialData.data.contractAddress[chainId]),\n          ])\n\n          const userData = {\n            sousId: initialData.data.sousId,\n            allowance: '0',\n            stakingTokenBalance: '0',\n            stakedBalance: stakedBalances,\n            pendingReward: pendingRewards,\n          }\n\n          setPoolsUserData((old) => ({\n            data: {\n              ...old.data,\n              userData,\n              totalStaked: new BigNumber(totalStaking.toString()).toJSON(),\n            },\n            userDataLoaded: true,\n          }))\n        } catch (error) {\n          console.error('[Pools Action] Error fetching pool user data', error)\n        }\n      }\n\n      fetchPoolsUserDataAsync()\n    }\n  }, [account, chainId])\n\n  useFastRefreshEffect(() => {\n    fetchUserPoolsData()\n  }, [fetchUserPoolsData])\n\n  return {\n    data: transformPool(userPoolsData.data),\n    userDataLoaded: userPoolsData.userDataLoaded,\n    fetchUserPoolsData,\n  }\n}\n","import { ChainId } from '@pancakeswap/sdk'\nimport { useAppDispatch } from 'state'\nimport { getFarmConfig } from '@pancakeswap/farms/constants'\nimport { useSlowRefreshEffect } from 'hooks/useRefreshEffect'\nimport { fetchFarmsPublicDataAsync } from 'state/farmsV1/index'\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n\n  useSlowRefreshEffect(() => {\n    const fetchPoolsDataWithFarms = async () => {\n      const farmsConfig = await getFarmConfig(ChainId.BSC)\n      const activeFarms = farmsConfig.filter((farm) => farm.v1pid !== 0)\n      await dispatch(fetchFarmsPublicDataAsync(activeFarms.map((farm) => farm.v1pid)))\n    }\n\n    fetchPoolsDataWithFarms()\n  })\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst Circle = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  width: 32px;\n  min-width: 32px;\n  height: 32px;\n  line-height: 32px;\n  font-size: 21px;\n  color: #ffffff;\n  border-radius: 50%;\n  background: linear-gradient(180deg, #8051d6 0%, #492286 100%);\n  z-index: 1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 48px;\n    min-width: 48px;\n    height: 48px;\n    line-height: 48px;\n    font-size: 32px;\n  }\n`\n\nconst Step = styled.div<{ confirmed?: boolean; disabled?: boolean; canHover?: boolean }>`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  margin-top: 28px;\n  &:before {\n    content: '';\n    position: absolute;\n    width: 1px;\n    height: calc(100% - 16px);\n    top: calc(-100% + 10px);\n    left: 16px;\n    z-index: 0;\n    pointer-events: none;\n    background-color: ${({ theme, confirmed }) => (confirmed ? theme.colors.secondary : theme.colors.textDisabled)};\n  }\n\n  &:hover {\n    cursor: ${({ canHover }) => (canHover ? 'pointer' : 'initial')};\n    ${Circle} {\n      opacity: ${({ canHover }) => (canHover ? 0.65 : null)};\n    }\n    ${Text} {\n      opacity: ${({ canHover }) => (canHover ? 0.65 : null)};\n    }\n  }\n\n  &:active {\n    ${Circle} {\n      opacity: ${({ canHover }) => (canHover ? 0.85 : null)};\n    }\n    ${Text} {\n      opacity: ${({ canHover }) => (canHover ? 0.85 : null)};\n    }\n  }\n\n  ${Circle} {\n    background: ${({ theme, confirmed, disabled }) =>\n      disabled\n        ? theme.colors.textDisabled\n        : confirmed\n        ? 'linear-gradient(180deg, #8051D6 0%, #492286 100%)'\n        : theme.colors.textSubtle};\n  }\n\n  ${Text} {\n    color: ${({ theme, confirmed, disabled }) =>\n      disabled ? theme.colors.textDisabled : confirmed ? theme.colors.secondary : theme.colors.textSubtle};\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: column;\n    align-items: center;\n    margin-top: 0;\n\n    &:before {\n      width: 100%;\n      height: 1px;\n      left: calc(-100% + 48px);\n      top: 24px;\n    }\n  }\n`\n\nconst ProgressWrap = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin: 0 auto 24px auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 653px;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  ${Step} {\n    &:first-child {\n      margin-top: 0;\n      &:before {\n        display: none;\n      }\n    }\n  }\n`\n\nconst StepText = styled(Text)`\n  width: 100%;\n  text-align: left;\n  margin-left: 24px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 250px;\n    text-align: center;\n    margin: 19px 0 0 0;\n  }\n`\n\nexport enum ProgressStepsType {\n  'STEP1' = 1,\n  'STEP2' = 2,\n}\n\nexport interface Step {\n  stepId: ProgressStepsType\n  text: string\n  canHover?: boolean\n}\n\ninterface ProgressArrayProps {\n  pickedStep: ProgressStepsType\n  steps: Step[]\n  onClick?: (id: ProgressStepsType) => void\n}\n\nconst ProgressSteps: React.FC<React.PropsWithChildren<ProgressArrayProps>> = ({ pickedStep, steps, onClick }) => {\n  return (\n    <ProgressWrap>\n      {steps.map((step: Step, index: number) => {\n        return (\n          <Step\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            canHover={step.canHover}\n            confirmed={step.stepId === pickedStep}\n            disabled={step.stepId !== pickedStep && index + 1 > pickedStep}\n            onClick={() => onClick(step.stepId)}\n          >\n            <Circle>{index + 1}</Circle>\n            <StepText bold>{step.text}</StepText>\n          </Step>\n        )\n      })}\n    </ProgressWrap>\n  )\n}\n\nexport default ProgressSteps\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAccount } from 'wagmi'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Text, Button, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ProgressStepsType } from './ProgressSteps'\n\nconst Container = styled.div`\n  position: sticky;\n  bottom: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin: auto;\n  padding: 16px;\n  z-index: 6;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    bottom: 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    width: 1120px;\n    padding: 24px 40px;\n  }\n\n  border-top: 1px ${({ theme }) => theme.colors.secondary} solid;\n  border-left: 1px ${({ theme }) => theme.colors.secondary} solid;\n  border-right: 1px ${({ theme }) => theme.colors.secondary} solid;\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card}`} 0 0;\n  background: ${({ theme }) =>\n    theme.isDark\n      ? 'linear-gradient(360deg, rgba(61, 42, 84, 0.9) 0%, rgba(49, 61, 92, 0.9) 100%)'\n      : 'linear-gradient(180deg, rgba(206, 236, 243, 0.9) 0%,  rgba(204, 220, 239, 0.9) 51.04%, rgba(202, 194, 236, 0.9) 100%)'};\n`\n\nconst TextGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-right: 16px;\n`\n\nconst TextTitle = styled(Text)`\n  font-size: 16px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 20px;\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst TextSubTitle = styled(Text)`\n  font-size: 12px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 16px;\n  }\n`\n\ninterface MigrationStickyProps {\n  step: ProgressStepsType\n  handleClick: () => void\n}\n\nconst MigrationSticky: React.FC<React.PropsWithChildren<MigrationStickyProps>> = ({ step, handleClick }) => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const { isMobile } = useMatchBreakpoints()\n\n  const isStep1: boolean = step === ProgressStepsType.STEP1\n  const title: string = isStep1 ? t('Unstaking LP Tokens and CAKE') : t('Stake in the new contract.')\n  const subTitle: string = isStep1\n    ? t('All the earned CAKE will be harvested to your wallet upon unstake.')\n    : t('Each farm and pool has to be individually enabled before staking.')\n  const buttonText: string = isStep1 ? t('Go to Stake') : t('Skip')\n\n  if (!account) {\n    return (\n      <Container>\n        <TextGroup>\n          <TextTitle bold>{t('MasterChef v2 Migration')}</TextTitle>\n          <TextSubTitle>{t('Please connect wallet to check your pools & farms status.')}</TextSubTitle>\n        </TextGroup>\n        <ConnectWalletButton width={isMobile ? '131px' : '178px'} />\n      </Container>\n    )\n  }\n\n  return (\n    <Container>\n      <TextGroup>\n        <TextTitle bold>{title}</TextTitle>\n        <TextSubTitle>{subTitle}</TextSubTitle>\n      </TextGroup>\n      <Button minWidth={isMobile ? '145px' : '178px'} onClick={handleClick}>\n        {buttonText}\n      </Button>\n    </Container>\n  )\n}\n\nexport default MigrationSticky\n","import React from 'react'\nimport { Text, CardHeader } from '@pancakeswap/uikit'\n\nexport interface TableHeaderProps {\n  title: string\n}\n\nconst TableHeader: React.FC<React.PropsWithChildren<TableHeaderProps>> = ({ title }) => {\n  return (\n    <CardHeader>\n      <Text fontSize=\"20px\" bold>\n        {title}\n      </Text>\n    </CardHeader>\n  )\n}\n\nexport default TableHeader\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface EmptyTextProps {\n  text: string\n}\n\nconst EmptyText: React.FC<React.PropsWithChildren<EmptyTextProps>> = ({ text }) => {\n  return (\n    <Text padding=\"24px\" fontSize=\"16px\" textAlign=\"center\">\n      {text}\n    </Text>\n  )\n}\n\nexport default EmptyText\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledTable = styled.div`\n  border-radius: 0px 0px 16px 16px;\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n  }\n\n  > div:last-child {\n    border-radius: 0px 0px 16px 16px;\n  }\n`\n\nconst TableStyle: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return <StyledTable role=\"table\">{children}</StyledTable>\n}\n\nexport default TableStyle\n","import BigNumber from 'bignumber.js'\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\nimport { multicallv2 } from 'utils/multicall'\n\nconst fetchIfoPoolUser = async (account: string, ifoPoolAddress: string) => {\n  try {\n    const calls = ['userInfo', 'getUserCredit'].map((method) => ({\n      address: ifoPoolAddress,\n      name: method,\n      params: [account],\n    }))\n    const [userContractResponse, creditResponse] = await multicallv2({ abi: ifoPoolAbi, calls })\n\n    return {\n      isLoading: false,\n      userShares: new BigNumber(userContractResponse.shares.toString()).toJSON(),\n      lastDepositedTime: userContractResponse.lastDepositedTime.toString(),\n      lastUserActionTime: userContractResponse.lastUserActionTime.toString(),\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),\n      credit: new BigNumber(creditResponse.avgBalance.toString()).toJSON(),\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      userShares: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n      cakeAtLastUserAction: null,\n      credit: null,\n    }\n  }\n}\n\nexport default fetchIfoPoolUser\n","import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\n\nexport const fetchPublicIfoPoolData = async (ifoPoolAddress: string) => {\n  try {\n    const calls = ['getPricePerFullShare', 'totalShares', 'startBlock', 'endBlock'].map((method) => ({\n      address: ifoPoolAddress,\n      name: method,\n    }))\n\n    const [[sharePrice], [shares], [startBlock], [endBlock]] = await multicallv2({ abi: ifoPoolAbi, calls })\n\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      creditStartBlock: startBlock.toNumber(),\n      creditEndBlock: endBlock.toNumber(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n    }\n  }\n}\n\nexport const fetchIfoPoolFeesData = async (ifoPoolAddress: string) => {\n  try {\n    const calls = ['performanceFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\n      address: ifoPoolAddress,\n      name: method,\n    }))\n\n    const [[performanceFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2({ abi: ifoPoolAbi, calls })\n\n    return {\n      performanceFee: performanceFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\n    }\n  } catch (error) {\n    return {\n      performanceFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicIfoPoolData\n","import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport cakeVaultAbi from 'config/abi/cakeVaultV2.json'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\n\nexport const fetchPublicVaultData = async (cakeVaultAddress: string) => {\n  try {\n    const calls = ['getPricePerFullShare', 'totalShares', 'totalLockedAmount'].map((method) => ({\n      address: cakeVaultAddress,\n      name: method,\n    }))\n    const [[sharePrice], [shares], totalLockedAmount] = await multicallv2({\n      abi: cakeVaultAbi,\n      calls,\n      options: { requireSuccess: false },\n    })\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const totalLockedAmountAsBigNumber = totalLockedAmount ? new BigNumber(totalLockedAmount[0].toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      totalLockedAmount: totalLockedAmountAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      totalLockedAmount: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n    }\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { useAccount } from 'wagmi'\nimport fetchIfoPoolUser from 'views/Migration/hook/V1/Pool/fetchIfoPoolUser'\nimport { fetchPublicIfoPoolData, fetchIfoPoolFeesData } from 'views/Migration/hook/V1/Pool/fetchIfoPoolPublic'\nimport { initialPoolVaultState } from 'state/pools/index'\nimport useSWR from 'swr'\nimport { fetchVaultFees } from 'state/pools/fetchVaultPublic'\nimport type { Signer } from '@ethersproject/abstract-signer'\nimport type { Provider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { bscRpcProvider } from 'utils/providers'\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\nimport { FAST_INTERVAL } from 'config/constants'\nimport { VaultKey } from 'state/types'\nimport { fetchPublicVaultData } from './fetchPublicVaultData'\n\nexport const ifoPoolV1Contract = '0x1B2A2f6ed4A1401E8C73B4c2B6172455ce2f78E8'\nexport const cakeVaultAddress = '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC'\n\nconst getCakeVaultContract = (signer?: Signer | Provider) => {\n  const signerOrProvider = signer ?? bscRpcProvider\n  return new Contract(cakeVaultAddress, cakeVaultAbi, signerOrProvider) as any\n}\n\nconst fetchVaultUserV1 = async (account: string) => {\n  const contract = getCakeVaultContract()\n  try {\n    const userContractResponse = await contract.userInfo(account)\n    return {\n      isLoading: false,\n      userShares: new BigNumber(userContractResponse.shares.toString()).toJSON(),\n      lastDepositedTime: userContractResponse.lastDepositedTime.toString(),\n      lastUserActionTime: userContractResponse.lastUserActionTime.toString(),\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      userShares: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n      cakeAtLastUserAction: null,\n    }\n  }\n}\n\nconst getIfoPoolData = async (account) => {\n  const [ifoData, userData, feesData] = await Promise.all([\n    fetchPublicIfoPoolData(ifoPoolV1Contract),\n    fetchIfoPoolUser(account, ifoPoolV1Contract),\n    fetchIfoPoolFeesData(ifoPoolV1Contract),\n  ])\n  const ifoPoolData = {\n    ...ifoData,\n    fees: { ...feesData },\n    userData: { ...userData, isLoading: false },\n  }\n  return transformData(ifoPoolData)\n}\n\nconst getCakePoolData = async (account) => {\n  const [vaultData, userData, feesData] = await Promise.all([\n    fetchPublicVaultData(cakeVaultAddress),\n    fetchVaultUserV1(account),\n    fetchVaultFees(cakeVaultAddress),\n  ])\n  const cakeData = {\n    ...vaultData,\n    fees: { ...feesData },\n    userData: { ...userData, isLoading: false },\n  }\n  return transformData(cakeData)\n}\n\nconst transformData = ({\n  totalShares,\n  pricePerFullShare,\n  totalCakeInVault,\n  fees: { performanceFee, withdrawalFee, withdrawalFeePeriod },\n  userData: { isLoading, userShares, cakeAtLastUserAction, lastDepositedTime, lastUserActionTime },\n}) => {\n  return {\n    totalShares: new BigNumber(totalShares),\n    pricePerFullShare: new BigNumber(pricePerFullShare),\n    totalCakeInVault: new BigNumber(totalCakeInVault),\n    fees: {\n      performanceFeeAsDecimal: performanceFee && performanceFee / 100,\n      performanceFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares: new BigNumber(userShares),\n      cakeAtLastUserAction: new BigNumber(cakeAtLastUserAction),\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\nexport const useVaultPoolByKeyV1 = (key: VaultKey) => {\n  const { address: account } = useAccount()\n  const { data, mutate } = useSWR(\n    account ? [key, 'v1'] : null,\n    async () => {\n      if (key === VaultKey.IfoPool) {\n        return getIfoPoolData(account)\n      }\n      return getCakePoolData(account)\n    },\n    {\n      revalidateOnFocus: false,\n      refreshInterval: FAST_INTERVAL,\n      dedupingInterval: FAST_INTERVAL,\n    },\n  )\n\n  return {\n    vaultPoolData: data || initialPoolVaultState,\n    fetchPoolData: mutate,\n  }\n}\n","import styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, TokenPairImage as UITokenPairImage, useMatchBreakpoints, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Token } from '@pancakeswap/sdk'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\n\ninterface NameCellProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<React.PropsWithChildren<NameCellProps>> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, vaultKey } = pool\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { userShares } = vaultPoolData.userData\n  const hasVaultShares = userShares?.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = vaultKey ? hasVaultShares : isStaked\n\n  let title: React.ReactNode = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle: React.ReactNode = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isMobile)\n\n  if (vaultKey) {\n    title = vaultPoolConfig[vaultKey].name\n    subtitle = vaultPoolConfig[vaultKey].description\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {vaultKey ? (\n        <UITokenPairImage {...vaultPoolConfig[vaultKey].tokenImage} mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <Pool.CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isMobile} small={isMobile}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import { Box, Flex, Text, useMatchBreakpoints, Balance, Pool } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Token } from '@pancakeswap/sdk'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\n\ninterface StakedCellProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex: 0;\n  padding: 0 0 24px 0;\n  margin-left: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 2 0 100px;\n    margin-left: 10px;\n    padding: 24px 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-left: 20px;\n  }\n`\n\nconst StakedCell: React.FC<React.PropsWithChildren<StakedCellProps>> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  // vault\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { pricePerFullShare } = vaultPoolData\n  const { userShares } = vaultPoolData.userData\n  const hasSharesStaked = userShares?.gt(0)\n  const isVaultWithShares = pool.vaultKey && hasSharesStaked\n\n  let cakeAsNumberBalance = 0\n  if (pricePerFullShare) {\n    const { cakeAsNumberBalance: cakeBalance } = convertSharesToCake(userShares, pricePerFullShare)\n    cakeAsNumberBalance = cakeBalance\n  }\n\n  // pool\n  const { stakingToken, userData } = pool\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n\n  const labelText = `${pool.stakingToken.symbol} ${t('Staked')}`\n\n  const hasStaked = stakedBalance.gt(0) || isVaultWithShares\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Box mr=\"8px\" height=\"32px\">\n            <Balance\n              mt=\"4px\"\n              fontSize={isMobile ? '14px' : '16px'}\n              color={hasStaked ? 'text' : 'textDisabled'}\n              decimals={hasStaked ? 5 : 1}\n              value={pool.vaultKey ? (Number.isNaN(cakeAsNumberBalance) ? 0 : cakeAsNumberBalance) : stakedTokenBalance}\n            />\n          </Box>\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default StakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, useMatchBreakpoints, Balance, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\ninterface AutoEarningsCellProps {\n  hasEarnings: boolean\n  earningTokenBalance: number\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n    flex: 2 0 100px;\n  }\n`\n\nconst AutoEarningsCell: React.FC<React.PropsWithChildren<AutoEarningsCellProps>> = ({\n  hasEarnings,\n  earningTokenBalance,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const labelText = t('Recent CAKE profit')\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Box mr=\"8px\" height=\"32px\">\n            <Balance\n              mt=\"4px\"\n              fontSize={isMobile ? '14px' : '16px'}\n              color={hasEarnings ? 'text' : 'textDisabled'}\n              decimals={hasEarnings ? 5 : 1}\n              value={hasEarnings ? earningTokenBalance : 0}\n            />\n          </Box>\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoEarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, useMatchBreakpoints, Balance, Pool } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Token } from '@pancakeswap/sdk'\n\ninterface EarningsCellProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n    flex: 2 0 100px;\n  }\n`\n\nconst EarningsCell: React.FC<React.PropsWithChildren<EarningsCellProps>> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { earningToken, userData } = pool\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const hasEarnings = account && earnings.gt(0)\n\n  const labelText = t('%asset% Earned', { asset: earningToken.symbol })\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Balance\n            mt=\"4px\"\n            fontSize={isMobile ? '14px' : '16px'}\n            color={hasEarnings ? 'text' : 'textDisabled'}\n            decimals={hasEarnings ? 5 : 1}\n            value={hasEarnings ? earningTokenBalance : 0}\n          />\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React, { useMemo } from 'react'\nimport { Flex, Text, Skeleton, Balance, Pool } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { Token } from '@pancakeswap/sdk'\n\ninterface TotalStakedCellProps {\n  pool: Pool.DeserializedPool<Token>\n  totalCakeInVault: BigNumber\n  cakeInVaults: BigNumber\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  display: none;\n  flex: 2 0 100px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst TotalStakedCell: React.FC<React.PropsWithChildren<TotalStakedCellProps>> = ({\n  pool,\n  totalCakeInVault,\n  cakeInVaults,\n}) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, vaultKey } = pool\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (vaultKey) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(cakeInVaults)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [vaultKey, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals, cakeInVaults])\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {totalCakeInVault && totalCakeInVault.gte(0) ? (\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          ) : (\n            <Skeleton width=\"80px\" height=\"16px\" />\n          )}\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import BigNumber from 'bignumber.js'\nimport { useCallback } from 'react'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { parseUnits } from '@ethersproject/units'\nimport { useMasterchefV1, useSousChef } from 'hooks/useContract'\nimport { useGasPrice } from 'state/user/hooks'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousUnstake = (sousChefContract: any, amount: string, decimals: number, gasPrice: string) => {\n  const units = parseUnits(amount, decimals)\n\n  return sousChefContract.withdraw(units.toString(), {\n    ...options,\n    gasPrice,\n  })\n}\n\nconst sousEmergencyUnstake = (sousChefContract: any, gasPrice: string) => {\n  return sousChefContract.emergencyWithdraw({ ...options, gasPrice })\n}\n\nconst useUnstakePool = (sousId: number, enableEmergencyWithdraw = false) => {\n  const masterChefV1Contract = useMasterchefV1()\n  const sousChefContract = useSousChef(sousId)\n  const gasPrice = useGasPrice()\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n        return masterChefV1Contract.leaveStaking(value, {\n          ...options,\n          gasPrice,\n        })\n      }\n\n      if (enableEmergencyWithdraw) {\n        return sousEmergencyUnstake(sousChefContract, gasPrice)\n      }\n\n      return sousUnstake(sousChefContract, amount, decimals, gasPrice)\n    },\n    [enableEmergencyWithdraw, masterChefV1Contract, sousChefContract, sousId, gasPrice],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakePool\n","import { useTranslation } from '@pancakeswap/localization'\nimport { AutoRenewIcon, Button, useToast, Pool } from '@pancakeswap/uikit'\nimport { useAccount, useSigner } from 'wagmi'\nimport BigNumber from 'bignumber.js'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport cakeVaultAbi from 'config/abi/cakeVaultV2.json'\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport React, { useMemo } from 'react'\nimport { VaultKey } from 'state/types'\nimport { getContract } from 'utils/contractHelpers'\nimport { getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport { cakeVaultAddress, ifoPoolV1Contract, useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { Token } from '@pancakeswap/sdk'\nimport { useFetchUserPools } from '../../../hook/V1/Pool/useFetchUserPools'\nimport useUnstakePool from '../../../hook/V1/Pool/useUnstakePool'\n\nexport interface UnstakeButtonProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst UnstakeButton: React.FC<React.PropsWithChildren<UnstakeButtonProps>> = ({ pool }) => {\n  const { sousId, stakingToken, earningToken, userData, vaultKey } = pool\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const { data: signer } = useSigner()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess } = useToast()\n  const { fetchUserPoolsData } = useFetchUserPools(account)\n\n  const { vaultPoolData, fetchPoolData } = useVaultPoolByKeyV1(vaultKey)\n  const { userShares } = vaultPoolData.userData\n\n  const vaultPoolContract = useMemo(() => {\n    return vaultKey === VaultKey.CakeVaultV1\n      ? getContract({ abi: cakeVaultAbi, address: cakeVaultAddress, signer })\n      : getContract({ abi: ifoPoolAbi, address: ifoPoolV1Contract, signer })\n  }, [signer, vaultKey])\n\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\n\n  const isNeedUnstake = vaultKey ? userShares?.gt(0) : new BigNumber(userData.stakedBalance).gt(0)\n\n  const handleUnstake = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    if (vaultKey) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const onPresentVaultUnstake = async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return callWithGasPrice(vaultPoolContract, 'withdrawAll', undefined, {\n        gasLimit: vaultPoolConfig[pool.vaultKey].gasLimit,\n      })\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        t('Unstaked!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      fetchPoolData()\n    }\n  }\n\n  const onPresentUnstake = async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      const stakedAmount = getFullDisplayBalance(userData.stakedBalance, stakingToken.decimals, stakingToken.decimals)\n      return onUnstake(stakedAmount, stakingToken.decimals)\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          })}\n        </ToastDescriptionWithTx>,\n      )\n      fetchUserPoolsData()\n    }\n  }\n\n  return (\n    <>\n      {pendingTx ? (\n        <Button\n          width=\"138px\"\n          marginLeft=\"auto\"\n          isLoading={pendingTx}\n          endIcon={<AutoRenewIcon spin color=\"currentColor\" />}\n        >\n          {t('Confirming')}\n        </Button>\n      ) : (\n        <Button width=\"138px\" marginLeft=\"auto\" disabled={!isNeedUnstake} onClick={handleUnstake}>\n          {isNeedUnstake ? t('Unstake All') : t('Unstaked')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default UnstakeButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Token } from '@pancakeswap/sdk'\nimport { Pool } from '@pancakeswap/uikit'\n\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 30px 14px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 14px 0 0;\n    align-items: center;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 32px;\n  }\n`\n\nexport interface UnstakeProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst Unstake: React.FC<React.PropsWithChildren<UnstakeProps>> = ({ pool }) => {\n  return (\n    <Container>\n      <UnstakeButton pool={pool} />\n    </Container>\n  )\n}\n\nexport default Unstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  showExpandedText: boolean\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0 12px 0px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 24px 0 0;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst ExpandActionCell: React.FC<React.PropsWithChildren<ExpandActionCellProps>> = ({ expanded, showExpandedText }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {showExpandedText && (\n        <Text color=\"primary\" mr=\"10px\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default ExpandActionCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Text, Balance, Pool } from '@pancakeswap/uikit'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport BigNumber from 'bignumber.js'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { Token } from '@pancakeswap/sdk'\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled(ActionContainer)`\n  flex: 3;\n`\n\ninterface StackedActionProps {\n  pool: Pool.DeserializedPool<Token>\n}\n\nconst Staked: React.FC<React.PropsWithChildren<StackedActionProps>> = ({ pool }) => {\n  const { stakingToken, userData, stakingTokenPrice, vaultKey } = pool\n  const { t } = useTranslation()\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { pricePerFullShare } = vaultPoolData\n  const { userShares } = vaultPoolData.userData\n\n  let cakeAsBigNumber = BIG_ZERO\n  let cakeAsNumberBalance = 0\n  if (pricePerFullShare) {\n    const { cakeAsBigNumber: cakeBigBumber, cakeAsNumberBalance: cakeBalance } = convertSharesToCake(\n      userShares,\n      pricePerFullShare,\n    )\n    cakeAsBigNumber = cakeBigBumber\n    cakeAsNumberBalance = cakeBalance\n  }\n\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const balance = vaultKey ? (Number.isNaN(cakeAsNumberBalance) ? 0 : cakeAsNumberBalance) : stakedTokenBalance\n  const isBalanceZero = balance === 0\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {`${pool.stakingToken.symbol} ${t('Staked')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <Balance\n            lineHeight=\"1\"\n            bold\n            color={isBalanceZero ? 'textDisabled' : 'text'}\n            fontSize=\"20px\"\n            decimals={5}\n            value={balance}\n          />\n          <Balance\n            fontSize=\"12px\"\n            display=\"inline\"\n            color={isBalanceZero ? 'textDisabled' : 'textSubtle'}\n            decimals={2}\n            value={vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </Flex>\n        <UnstakeButton pool={pool} />\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Heading, useMatchBreakpoints, Balance } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { ActionContainer, ActionTitles, ActionContent } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n  align-self: stretch;\n`\n\ninterface AutoEarningProps {\n  earningTokenBalance: number\n  earningTokenDollarBalance: number\n  earningTokenPrice: number\n}\n\nconst AutoEarning: React.FunctionComponent<React.PropsWithChildren<AutoEarningProps>> = ({\n  earningTokenBalance,\n  earningTokenDollarBalance,\n  earningTokenPrice,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const actionTitle = (\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n      {t('Recent CAKE profit')}\n    </Text>\n  )\n\n  if (isMobile) {\n    return (\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Recent CAKE profit')}</Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {earningTokenBalance > 0 ? (\n            <Balance fontSize=\"16px\" value={earningTokenBalance} decimals={5} />\n          ) : (\n            <Text fontSize=\"16px\">0</Text>\n          )}\n        </Flex>\n      </Flex>\n    )\n  }\n\n  return (\n    <Container>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\">\n          <>\n            {earningTokenBalance > 0 ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default AutoEarning\n","import React from 'react'\nimport { Text, Flex, Heading, useMatchBreakpoints, Balance, Pool } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { ActionContainer, ActionTitles, ActionContent } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { Token } from '@pancakeswap/sdk'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n`\n\nconst Earning: React.FunctionComponent<React.PropsWithChildren<Pool.DeserializedPool<Token>>> = ({\n  earningToken,\n  userData,\n  earningTokenPrice,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const hasEarnings = earnings.gt(0)\n\n  const actionTitle = (\n    <>\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n        {earningToken.symbol} {t('Earned')}\n      </Text>\n    </>\n  )\n\n  if (isMobile) {\n    return (\n      <Flex justifyContent=\"space-between\">\n        <Text>\n          {earningToken.symbol} {t('Earned')}{' '}\n        </Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {hasEarnings ? (\n            <Balance fontSize=\"16px\" value={earningTokenBalance} decimals={5} />\n          ) : (\n            <Text fontSize=\"16px\">0</Text>\n          )}\n        </Flex>\n      </Flex>\n    )\n  }\n\n  return (\n    <Container>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Earning\n","import React, { useMemo } from 'react'\nimport { Flex, Text, Balance, Pool } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { Token } from '@pancakeswap/sdk'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0px;\n    padding: 0 12px;\n  }\n`\n\ninterface TotalStakedProps {\n  pool: Pool.DeserializedPool<Token>\n  totalCakeInVault: BigNumber\n  cakeInVaults: BigNumber\n}\n\nconst TotalStaked: React.FC<React.PropsWithChildren<TotalStakedProps>> = ({ pool, totalCakeInVault, cakeInVaults }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, vaultKey } = pool\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (vaultKey) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(cakeInVaults)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [vaultKey, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals, cakeInVaults])\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('Total staked')}</Text>\n      <Flex height=\"20px\" alignItems=\"center\">\n        <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n      </Flex>\n    </Containter>\n  )\n}\n\nexport default TotalStaked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { VaultKey } from 'state/types'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { Token } from '@pancakeswap/sdk'\nimport { Pool } from '@pancakeswap/uikit'\n\nimport Staked from './Stake'\nimport AutoEarning from './AutoEarning'\nimport Earning from './Earning'\nimport TotalStaked from './TotalStaked'\n\nconst expandAnimation = keyframes`\n  from {\n    opacity: 0;\n    max-height: 0px;\n  }\n  to {\n    opacity: 1;\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    opacity: 1;\n    max-height: 700px;\n  }\n  to {\n    opacity: 0;\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  opacity: 1;\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 12px 10px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-bottom: 24px;\n  }\n`\n\ninterface ActionPanelProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n  expanded: boolean\n}\n\nconst ActionPanel: React.FC<React.PropsWithChildren<ActionPanelProps>> = ({ pool, account, expanded }) => {\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { totalCakeInVault, pricePerFullShare } = vaultPoolData\n  const { cakeAtLastUserAction, userShares } = vaultPoolData.userData\n\n  const vaultPools = {\n    [VaultKey.CakeVaultV1]: useVaultPoolByKeyV1(VaultKey.CakeVaultV1).vaultPoolData,\n    [VaultKey.IfoPool]: useVaultPoolByKeyV1(VaultKey.IfoPool).vaultPoolData,\n  }\n  const cakeInVaults = Object.values(vaultPools).reduce((total, vault) => {\n    return total.plus(vault.totalCakeInVault)\n  }, BIG_ZERO)\n\n  // Auto Earning\n  let earningTokenBalance = 0\n  let earningTokenDollarBalance = 0\n  if (pricePerFullShare) {\n    const { autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n      account,\n      cakeAtLastUserAction,\n      userShares,\n      pricePerFullShare,\n      pool.earningTokenPrice,\n    )\n    earningTokenBalance = autoCakeToDisplay\n    earningTokenDollarBalance = autoUsdToDisplay\n  }\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <ActionContainer>\n        {pool.vaultKey ? (\n          <AutoEarning\n            earningTokenBalance={earningTokenBalance}\n            earningTokenDollarBalance={earningTokenDollarBalance}\n            earningTokenPrice={pool.earningTokenPrice}\n          />\n        ) : (\n          <Earning {...pool} />\n        )}\n        <Staked pool={pool} />\n      </ActionContainer>\n      <TotalStaked pool={pool} totalCakeInVault={totalCakeInVault} cakeInVaults={cakeInVaults} />\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { VaultKey } from 'state/types'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { useMatchBreakpoints, Pool } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { useDelayedUnmount } from '@pancakeswap/hooks'\nimport NameCell from './Cells/NameCell'\nimport StakedCell from './Cells/StakedCell'\nimport AutoEarningsCell from './Cells/AutoEarningsCell'\nimport EarningsCell from '../../Pool/Cells/EarningsCell'\nimport TotalStakedCell from '../../Pool/Cells/TotalStakedCell'\nimport Unstaked from './Cells/Unstaked'\nimport ExpandActionCell from '../../Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    cursor: initial;\n  }\n`\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    align-self: center;\n    flex-direction: row;\n  }\n`\n\nconst RightContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 24px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n  }\n`\n\nconst PoolRow: React.FC<React.PropsWithChildren<PoolRowProps>> = ({ pool, account }) => {\n  const { isMobile, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n  const isCakePool = pool.sousId === 0\n\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { totalCakeInVault, pricePerFullShare } = vaultPoolData\n  const { cakeAtLastUserAction, userShares } = vaultPoolData.userData\n\n  const vaultPools = {\n    [VaultKey.CakeVaultV1]: useVaultPoolByKeyV1(VaultKey.CakeVaultV1).vaultPoolData,\n    [VaultKey.IfoPool]: useVaultPoolByKeyV1(VaultKey.IfoPool).vaultPoolData,\n  }\n  const cakeInVaults = Object.values(vaultPools).reduce((total, vault) => {\n    return total.plus(vault.totalCakeInVault)\n  }, BIG_ZERO)\n\n  // Auto Earning\n  let earningTokenBalance = 0\n  if (pricePerFullShare) {\n    const { autoCakeToDisplay } = getCakeVaultEarnings(\n      account,\n      cakeAtLastUserAction,\n      userShares,\n      pricePerFullShare,\n      pool.earningTokenPrice,\n    )\n    earningTokenBalance = autoCakeToDisplay\n  }\n  const hasEarnings = account && cakeAtLastUserAction?.gt(0) && userShares?.gt(0)\n\n  const toggleExpanded = () => {\n    if (!isLargerScreen) {\n      setExpanded((prev) => !prev)\n    }\n  }\n\n  const EarningComponent = () => {\n    if (isLargerScreen || !expanded) {\n      return pool.vaultKey === VaultKey.IfoPool || pool.vaultKey === VaultKey.CakeVaultV1 ? (\n        <AutoEarningsCell hasEarnings={hasEarnings} earningTokenBalance={earningTokenBalance} />\n      ) : (\n        <EarningsCell pool={pool} account={account} />\n      )\n    }\n    return null\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <LeftContainer>\n          <NameCell pool={pool} />\n          {isLargerScreen || !expanded ? <StakedCell pool={pool} account={account} /> : null}\n          {EarningComponent()}\n          {isLargerScreen && isCakePool && (\n            <TotalStakedCell pool={pool} totalCakeInVault={totalCakeInVault} cakeInVaults={cakeInVaults} />\n          )}\n        </LeftContainer>\n        <RightContainer>\n          {isLargerScreen || !expanded ? <Unstaked pool={pool} /> : null}\n          {!isLargerScreen && <ExpandActionCell expanded={expanded} showExpandedText={expanded || isMobile} />}\n        </RightContainer>\n      </StyledRow>\n      {!isLargerScreen && shouldRenderActionPanel && <ActionPanel pool={pool} account={account} expanded={expanded} />}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Spinner, Pool } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport TableHeader from '../../MigrationTable/TableHeader'\nimport EmptyText from '../../MigrationTable/EmptyText'\nimport TableStyle from '../../MigrationTable/StyledTable'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool.DeserializedPool<Token>[]\n  userDataReady: boolean\n  account: string\n}\n\nconst Container = styled.div`\n  overflow: hidden;\n  margin-bottom: 32px;\n  border-radius: 24px 24px 16px 16px;\n  background-color: ${({ theme }) => theme.colors.disabled};\n  padding: 1px 1px 3px 1px;\n`\n\nconst PoolsTable: React.FC<React.PropsWithChildren<PoolsTableProps>> = ({ pools, userDataReady, account }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Container>\n      <TableHeader title={t('Old Pools')} />\n      <TableStyle>\n        {!userDataReady && (\n          <Flex padding=\"50px 10px\" justifyContent=\"center\">\n            <Spinner />\n          </Flex>\n        )}\n        {!account && <EmptyText text={t('Please connect wallet to check your pool status.')} />}\n        {account && userDataReady && pools.length === 0 && (\n          <EmptyText text={t('You are not currently staking in any v1 pools.')} />\n        )}\n        {account &&\n          userDataReady &&\n          pools.map((pool) => <PoolRow key={pool.vaultKey ?? pool.sousId} pool={pool} account={account} />)}\n      </TableStyle>\n    </Container>\n  )\n}\n\nexport default PoolsTable\n","import { Token } from '@pancakeswap/sdk'\nimport { Pool } from '@pancakeswap/uikit'\nimport React from 'react'\nimport PoolsTable from './PoolTable'\n\ninterface OldPoolProps {\n  account: string\n  pools: Pool.DeserializedPool<Token>[]\n  userDataLoaded: boolean\n}\n\nconst OldPool: React.FC<React.PropsWithChildren<OldPoolProps>> = ({ account, pools, userDataLoaded }) => {\n  const userDataReady: boolean = !account || (!!account && userDataLoaded)\n  return <PoolsTable pools={pools} account={account} userDataReady={userDataReady} />\n}\n\nexport default OldPool\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Pool } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { FarmWithStakedValue } from '@pancakeswap/farms'\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex: 0;\n  margin-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 100px;\n    margin-left: 30px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nexport interface FarmProps extends FarmWithStakedValue {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n  lpSymbol: string\n}\n\nconst Farm: React.FC<React.PropsWithChildren<FarmProps>> = ({ token, quoteToken, label }) => {\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Flex>\n          <TokenWrapper>\n            <TokenPairImage\n              variant=\"inverted\"\n              primaryToken={token}\n              secondaryToken={quoteToken}\n              width={40}\n              height={40}\n            />\n          </TokenWrapper>\n          <Flex flexDirection=\"column\" alignSelf=\"center\">\n            <Text bold>{label}</Text>\n          </Flex>\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Farm\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text, useMatchBreakpoints, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { formatLpBalance } from '@pancakeswap/utils/formatBalance'\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex: 0;\n  padding: 0 0 24px 0;\n  margin-left: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 3;\n    padding: 24px 8px;\n    margin-left: 30px;\n  }\n`\n\nexport interface StakedProps {\n  label: string\n  pid: number\n  stakedBalance: BigNumber\n}\n\nconst Staked: React.FC<React.PropsWithChildren<StakedProps>> = ({ label, stakedBalance }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const labelText = t('%asset% Staked', { asset: label })\n\n  const displayBalance = useMemo(() => {\n    return formatLpBalance(stakedBalance, 18)\n  }, [stakedBalance])\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex mt=\"4px\">\n          <Text fontSize={isMobile ? '14px' : '16px'} color={stakedBalance.gt(0) ? 'text' : 'textDisabled'}>\n            {displayBalance}\n          </Text>\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Text, HelpIcon, useTooltip, Pool, Link } from '@pancakeswap/uikit'\n\nconst StyledCell = styled(Pool.BaseCell)`\n  display: none;\n  flex: 1 0 100px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n  }\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst Multiplier: React.FC<React.PropsWithChildren<MultiplierProps>> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : `0x`\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>\n        {t(\n          'We have recently rebased multipliers by a factor of 10, this is only a visual change and does not affect the amount of CAKE each farm receives.',\n        )}\n      </Text>\n      <Link\n        mt=\"8px\"\n        display=\"inline\"\n        href=\"https://medium.com/pancakeswap/farm-mutlipliers-visual-update-1f5f5f615afd\"\n        external\n      >\n        {t('Read more')}\n      </Link>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Multiplier')}\n        </Text>\n        <Flex mt=\"4px\">\n          <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n          <ReferenceElement ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </ReferenceElement>\n          {tooltipVisible && tooltip}\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, Text, Pool, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport BigNumber from 'bignumber.js'\n\nconst StyledCell = styled(Pool.BaseCell)`\n  flex: 1 0 100px;\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst Liquidity: React.FC<React.PropsWithChildren<LiquidityProps>> = ({ liquidity }) => {\n  const { t } = useTranslation()\n  const displayLiquidity =\n    liquidity && liquidity.gt(0)\n      ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : `$0`\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pair'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Liquidity')}\n        </Text>\n        <Flex mt=\"4px\">\n          <LiquidityWrapper>\n            <Text>{displayLiquidity}</Text>\n          </LiquidityWrapper>\n          <ReferenceElement ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </ReferenceElement>\n          {tooltipVisible && tooltip}\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Liquidity\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport Apr, { AprProps } from 'views/Farms/components/FarmTable/Apr'\n\nconst StyledCell = styled(Pool.BaseCell)`\n  display: none;\n  flex: 2 0 100px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n  }\n`\n\nconst AprCell: React.FC<React.PropsWithChildren<AprProps>> = (apr) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('APR')}\n        </Text>\n        <Flex mt=\"4px\">\n          <Apr {...apr} />\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import styled from 'styled-components'\n\nconst StakeButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 30px 14px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 14px 0 0;\n    align-items: center;\n    width: 120px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 32px;\n    width: 142px;\n    justify-content: center;\n  }\n`\n\nconst StakeButtonCells = ({ children }: { children: JSX.Element }) => {\n  return <StakeButtonContainer>{children}</StakeButtonContainer>\n}\n\nexport default StakeButtonCells\n","import { useTranslation } from '@pancakeswap/localization'\nimport {\n  AddIcon,\n  Button,\n  IconButton,\n  MinusIcon,\n  useMatchBreakpoints,\n  useModal,\n  useToast,\n  Farm as FarmUI,\n} from '@pancakeswap/uikit'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useERC20 } from 'hooks/useContract'\nimport React, { useCallback, useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useFarmUser, usePriceCakeBusd, useFarmFromPid } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { FarmWithStakedValue } from '@pancakeswap/farms'\nimport useApproveFarm from 'views/Farms/hooks/useApproveFarm'\nimport useStakeFarms from 'views/Farms/hooks/useStakeFarms'\nimport useUnstakeFarms from 'views/Farms/hooks/useUnstakeFarms'\nimport BCakeCalculator from 'views/Farms/components/YieldBooster/components/BCakeCalculator'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst StakeButton: React.FC<React.PropsWithChildren<StackedActionProps>> = ({\n  pid,\n  vaultPid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpTokenPrice,\n  lpAddress,\n  quoteToken,\n  token,\n  displayApr,\n  lpTotalSupply,\n}) => {\n  const { t } = useTranslation()\n  const { account, chainId } = useActiveWeb3React()\n  const { isDesktop } = useMatchBreakpoints()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const stakedPid = vaultPid ?? pid\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(stakedPid)\n  const { onUnstake } = useUnstakeFarms(stakedPid)\n  const cakePrice = usePriceCakeBusd()\n  const { lpTokenStakedAmount } = useFarmFromPid(pid)\n  const [bCakeMultiplier, setBCakeMultiplier] = useState<number | null>(() => null)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n    chainId,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onStake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Staked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your funds have been staked in the farm')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chainId }))\n    }\n  }\n\n  const handleUnstake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onUnstake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chainId }))\n    }\n  }\n\n  const bCakeCalculatorSlot = (calculatorBalance) => (\n    <BCakeCalculator\n      targetInputBalance={calculatorBalance}\n      earningTokenPrice={cakePrice.toNumber()}\n      lpTokenStakedAmount={lpTokenStakedAmount}\n      setBCakeMultiplier={setBCakeMultiplier}\n    />\n  )\n\n  const [onPresentDeposit] = useModal(\n    <FarmUI.DepositModal\n      account={account}\n      pid={pid}\n      lpTotalSupply={lpTotalSupply}\n      max={tokenBalance}\n      lpPrice={lpTokenPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n      bCakeMultiplier={bCakeMultiplier}\n      decimals={18}\n      bCakeCalculatorSlot={bCakeCalculatorSlot}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <FarmUI.WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} decimals={18} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract, chainId)\n\n  const handleApprove = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    handlePoolApprove()\n  }\n\n  const handlePoolApprove = useCallback(async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onApprove()\n    })\n    if (receipt?.status) {\n      toastSuccess(t('Contract Enabled'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chainId }))\n    }\n  }, [onApprove, dispatch, chainId, account, pid, t, toastSuccess, fetchWithCatchTxError])\n\n  const handleDeposit = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentDeposit()\n  }\n\n  const handleWithdraw = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentWithdraw()\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <IconButtonWrapper>\n          <IconButton variant=\"secondary\" onClick={handleWithdraw} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"14px\" />\n          </IconButton>\n          <IconButton variant=\"secondary\" onClick={handleDeposit}>\n            <AddIcon color=\"primary\" width=\"14px\" />\n          </IconButton>\n        </IconButtonWrapper>\n      )\n    }\n\n    return (\n      <Button width={isDesktop ? '142px' : '120px'} onClick={onPresentDeposit} marginLeft=\"auto\">\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return (\n    <Button\n      disabled={pendingTx}\n      onClick={handleApprove}\n      variant=\"tertiary\"\n      marginLeft=\"auto\"\n      width={isDesktop ? '142px' : '120px'}\n    >\n      {t('Enable')}\n    </Button>\n  )\n}\n\nexport default StakeButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Text, HelpIcon, useTooltip, Link } from '@pancakeswap/uikit'\nimport { MultiplierProps } from '../Cells/Multiplier'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 12px;\n  }\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n  align-self: center;\n`\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  margin-right: 6px;\n  align-self: center;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-right: 0;\n  }\n`\n\nconst TotalStaked: React.FC<React.PropsWithChildren<MultiplierProps>> = ({ multiplier }) => {\n  const { t } = useTranslation()\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : '0x'\n\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>\n        {t(\n          'We have recently rebased multipliers by a factor of 10, this is only a visual change and does not affect the amount of CAKE each farm receives.',\n        )}\n      </Text>\n      <Link\n        mt=\"8px\"\n        display=\"inline\"\n        href=\"https://medium.com/pancakeswap/farm-mutlipliers-visual-update-1f5f5f615afd\"\n        external\n      >\n        {t('Read more')}\n      </Link>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('Multiplier')}</Text>\n      <Flex>\n        <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n        <ReferenceElement ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </ReferenceElement>\n        {tooltipVisible && tooltip}\n      </Flex>\n    </Containter>\n  )\n}\n\nexport default TotalStaked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Text, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { LiquidityProps } from '../Cells/Liquidity'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 12px;\n  }\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n  align-self: center;\n`\n\nconst LiquidityWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  min-width: 110px;\n  align-self: center;\n  text-align: right;\n  margin-right: 6px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-right: 0;\n  }\n`\n\nconst Liquidity: React.FC<React.PropsWithChildren<LiquidityProps>> = ({ liquidity }) => {\n  const { t } = useTranslation()\n  const displayLiquidity =\n    liquidity && liquidity.gt(0)\n      ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : '$0'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pair'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('Liquidity')}</Text>\n      <Flex>\n        <LiquidityWrapper>\n          <Text>{displayLiquidity}</Text>\n        </LiquidityWrapper>\n        <ReferenceElement ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </ReferenceElement>\n        {tooltipVisible && tooltip}\n      </Flex>\n    </Containter>\n  )\n}\n\nexport default Liquidity\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Heading, Text, Balance } from '@pancakeswap/uikit'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { EarnedProps } from 'views/Migration/components/Farm/Cells/Earned'\nimport { FarmProps } from 'views/Migration/components/Farm/Cells/Farm'\nimport StakeButton from '../StakeButton'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n  height: 100%;\n`\n\ninterface StakedProps {\n  earned: EarnedProps\n  farm: FarmProps\n}\n\nconst Staked: React.FC<React.PropsWithChildren<StakedProps>> = ({ earned, farm }) => {\n  const { t } = useTranslation()\n  const { earnings } = earned\n  const earningsBigNumber = new BigNumber(earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earningsBusd = 0\n  let displayBalance = earnings.toLocaleString()\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earningsBusd = earningsBigNumber.multipliedBy(cakePrice).toNumber()\n    displayBalance = earningsBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {`CAKE ${t('Earned')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading color={earningsBigNumber.gt(0) ? 'text' : 'textDisabled'}>{displayBalance}</Heading>\n          <Balance\n            fontSize=\"12px\"\n            color={earningsBusd > 0 ? 'textSubtle' : 'textDisabled'}\n            decimals={2}\n            value={earningsBusd}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </div>\n        <StakeButton {...farm} />\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport Apr, { AprProps } from 'views/Farms/components/FarmTable/Apr'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0px;\n    padding: 0 12px;\n  }\n`\n\nconst AprRow: React.FC<React.PropsWithChildren<AprProps>> = (apr) => {\n  const { t } = useTranslation()\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('APR')}</Text>\n      <Apr {...apr} />\n    </Containter>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport Multiplier from 'views/Migration/components/Farm/ActionPanel/Multiplier'\nimport Liquidity from 'views/Migration/components/Farm/ActionPanel/Liquidity'\nimport { EarnedProps } from 'views/Migration/components/Farm/Cells/Earned'\nimport { FarmProps } from 'views/Migration/components/Farm/Cells/Farm'\nimport { AprProps } from 'views/Farms/components/FarmTable/Apr'\nimport { MultiplierProps } from 'views/Migration/components/Farm/Cells/Multiplier'\nimport { LiquidityProps } from 'views/Migration/components/Farm/Cells/Liquidity'\nimport Staked from './Staked'\nimport AprRow from './AprRow'\n\nconst expandAnimation = keyframes`\n  from {\n    opacity: 0;\n    max-height: 0px;\n  }\n  to {\n    opacity: 1;\n    max-height: 1000px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    opacity: 1;\n    max-height: 1000px;\n  }\n  to {\n    opacity: 0;\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  opacity: 1;\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 12px 10px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-bottom: 24px;\n  }\n`\n\ninterface ActionPanelProps {\n  expanded: boolean\n  earned: EarnedProps\n  farm: FarmProps\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n}\n\nconst ActionPanel: React.FC<React.PropsWithChildren<ActionPanelProps>> = ({\n  expanded,\n  earned,\n  farm,\n  apr,\n  multiplier,\n  liquidity,\n}) => {\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <ActionContainer>\n        <Staked earned={earned} farm={farm} />\n      </ActionContainer>\n      <AprRow {...apr} />\n      <Multiplier {...multiplier} />\n      <Liquidity {...liquidity} />\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Farm from 'views/Migration/components/Farm/Cells/Farm'\nimport Staked from 'views/Migration/components/Farm/Cells/Staked'\nimport Multiplier from 'views/Migration/components/Farm/Cells/Multiplier'\nimport Liquidity from 'views/Migration/components/Farm/Cells/Liquidity'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useDelayedUnmount } from '@pancakeswap/hooks'\nimport AprCell from './Cells/AprCell'\nimport StakeButtonCells from './Cells/StakeButtonCells'\nimport StakeButton from './StakeButton'\nimport ActionPanel from './ActionPanel/ActionPanel'\nimport { RowProps } from '../../types'\nimport ExpandActionCell from '../../Cells/ExpandActionCell'\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    cursor: initial;\n  }\n`\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-self: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst RightContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 24px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n  }\n`\n\nconst FarmRow: React.FunctionComponent<React.PropsWithChildren<RowProps>> = ({\n  earned,\n  farm,\n  staked,\n  apr,\n  multiplier,\n  liquidity,\n}) => {\n  const { isMobile, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.replace(/pancake/gi, '')\n\n  const { stakedBalance } = useFarmUser(farm.pid)\n\n  const toggleExpanded = () => {\n    if (!isLargerScreen) {\n      setExpanded((prev) => !prev)\n    }\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <LeftContainer>\n          <Farm {...farm} />\n          {isLargerScreen || !expanded ? (\n            <>\n              <Staked {...staked} stakedBalance={stakedBalance} />\n              <AprCell {...apr} />\n              <Multiplier {...multiplier} />\n            </>\n          ) : null}\n          {isLargerScreen && <Liquidity {...liquidity} />}\n        </LeftContainer>\n        <RightContainer>\n          {isLargerScreen || !expanded ? (\n            <StakeButtonCells>\n              <StakeButton {...farm} lpLabel={lpLabel} displayApr={apr.value} />\n            </StakeButtonCells>\n          ) : null}\n          {!isLargerScreen && <ExpandActionCell expanded={expanded} showExpandedText={expanded || isMobile} />}\n        </RightContainer>\n      </StyledRow>\n      {!isLargerScreen && shouldRenderActionPanel && (\n        <ActionPanel\n          farm={farm}\n          earned={earned}\n          apr={apr}\n          multiplier={multiplier}\n          liquidity={liquidity}\n          expanded={expanded}\n        />\n      )}\n    </>\n  )\n}\n\nexport default FarmRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst StyledCell = styled(Pool.BaseCell)`\n  display: none;\n  flex: 1 0 100px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n    flex: 3;\n  }\n`\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Earned: React.FC<React.PropsWithChildren<EarnedProps>> = ({ earnings }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const labelText = t('%asset% Earned', { asset: 'CAKE' })\n\n  return (\n    <StyledCell role=\"cell\">\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex mt=\"4px\">\n          <Text fontSize={isMobile ? '14px' : '16px'} color={earnings > 0 ? 'text' : 'textDisabled'}>\n            {earnings.toLocaleString()}\n          </Text>\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Earned\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\nimport { useCallback } from 'react'\nimport { useMasterchefV1 } from 'hooks/useContract'\nimport { useGasPrice } from 'state/user/hooks'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchefV1()\n  const gasPrice = useGasPrice()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n      if (pid === 0) {\n        return masterChefContract.leaveStaking(value, {\n          ...options,\n          gasPrice,\n        })\n      }\n\n      return masterChefContract.withdraw(pid, value, {\n        ...options,\n        gasPrice,\n      })\n    },\n    [masterChefContract, pid, gasPrice],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useTranslation } from '@pancakeswap/localization'\nimport { AutoRenewIcon, Button, useToast } from '@pancakeswap/uikit'\nimport { useAccount } from 'wagmi'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport React from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farmsV1'\nimport { useFarmUser } from 'state/farmsV1/hooks'\nimport { getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport useUnstakeFarms from '../../../hook/V1/Farms/useUnstakeFarms'\n\nexport interface UnstakeButtonProps {\n  pid: number\n}\n\nconst UnstakeButton: React.FC<React.PropsWithChildren<UnstakeButtonProps>> = ({ pid }) => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { stakedBalance } = useFarmUser(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const dispatch = useAppDispatch()\n\n  const isNeedUnstake = stakedBalance.gt(0)\n\n  const handleUnstake = async (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n\n    const receipt = await fetchWithCatchTxError(() => {\n      const balance = getFullDisplayBalance(stakedBalance)\n      return onUnstake(balance)\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  return (\n    <>\n      {pendingTx ? (\n        <Button\n          width=\"138px\"\n          marginLeft=\"auto\"\n          isLoading={pendingTx}\n          endIcon={<AutoRenewIcon spin color=\"currentColor\" />}\n        >\n          {t('Confirming')}\n        </Button>\n      ) : (\n        <Button width=\"138px\" marginLeft=\"auto\" disabled={!isNeedUnstake} onClick={handleUnstake}>\n          {isNeedUnstake ? t('Unstake All') : t('Unstaked')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default UnstakeButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 30px 14px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 14px 0 0;\n    align-items: center;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 32px;\n  }\n`\nexport interface UnstakeProps {\n  pid: number\n}\n\nconst Unstake: React.FC<React.PropsWithChildren<UnstakeProps>> = ({ pid }) => {\n  return (\n    <Container>\n      <UnstakeButton pid={pid} />\n    </Container>\n  )\n}\n\nexport default Unstake\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Heading, Text, Balance } from '@pancakeswap/uikit'\nimport { getBalanceNumber, formatLpBalance } from '@pancakeswap/utils/formatBalance'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { useFarmUser, useLpTokenPrice } from 'state/farmsV1/hooks'\nimport { FarmProps } from '../../../Farm/Cells/Farm'\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled(ActionContainer)`\n  flex: 3;\n`\n\nconst Staked: React.FC<React.PropsWithChildren<FarmProps>> = ({ pid, lpSymbol }) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { stakedBalance } = useFarmUser(pid)\n\n  const displayBalance = useMemo(() => {\n    return formatLpBalance(stakedBalance, 18)\n  }, [stakedBalance])\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {`${lpSymbol} ${t('Staked')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading color={stakedBalance.gt(0) ? 'text' : 'textDisabled'}>{displayBalance}</Heading>\n          <Balance\n            fontSize=\"12px\"\n            color={stakedBalance.gt(0) && lpPrice.gt(0) ? 'textSubtle' : 'textDisabled'}\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </div>\n        <UnstakeButton pid={pid} />\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Heading, Text, useMatchBreakpoints, Balance } from '@pancakeswap/uikit'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { usePriceCakeBusd } from 'state/farmsV1/hooks'\nimport { EarnedProps } from '../../../Farm/Cells/Earned'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n  height: 100%;\n`\n\nconst Earned: React.FC<React.PropsWithChildren<EarnedProps>> = ({ earnings }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const earningsBigNumber = new BigNumber(earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earningsBusd = 0\n  let displayBalance = earnings.toLocaleString()\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earningsBusd = earningsBigNumber.multipliedBy(cakePrice).toNumber()\n    displayBalance = earningsBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  if (isMobile) {\n    return (\n      <Flex justifyContent=\"space-between\">\n        <Text>{`CAKE ${t('Earned')}`}</Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {Number(displayBalance) ? (\n            <Balance fontSize=\"16px\" value={Number(displayBalance)} />\n          ) : (\n            <Text fontSize=\"16px\">0</Text>\n          )}\n        </Flex>\n      </Flex>\n    )\n  }\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {`CAKE ${t('Earned')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading color={earningsBigNumber.gt(0) ? 'text' : 'textDisabled'}>{displayBalance}</Heading>\n          <Balance\n            fontSize=\"12px\"\n            color={earningsBusd > 0 ? 'textSubtle' : 'textDisabled'}\n            decimals={2}\n            value={earningsBusd}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </div>\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport Staked from './Staked'\nimport Earned from './Earned'\nimport Multiplier from '../../../Farm/ActionPanel/Multiplier'\nimport Liquidity from '../../../Farm/ActionPanel/Liquidity'\nimport { EarnedProps } from '../../../Farm/Cells/Earned'\nimport { FarmProps } from '../../../Farm/Cells/Farm'\nimport { MultiplierProps } from '../../../Farm/Cells/Multiplier'\nimport { LiquidityProps } from '../../../Farm/Cells/Liquidity'\n\nconst expandAnimation = keyframes`\n  from {\n    opacity: 0;\n    max-height: 0px;\n  }\n  to {\n    opacity: 1;\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    opacity: 1;\n    max-height: 700px;\n  }\n  to {\n    opacity: 0;\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  opacity: 1;\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 12px 10px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-bottom: 24px;\n  }\n`\n\ninterface ActionPanelProps {\n  earned: EarnedProps\n  farm: FarmProps\n  expanded: boolean\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n}\n\nconst ActionPanel: React.FC<React.PropsWithChildren<ActionPanelProps>> = ({\n  expanded,\n  earned,\n  farm,\n  multiplier,\n  liquidity,\n}) => {\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <ActionContainer>\n        <Earned {...earned} />\n        <Staked {...farm} />\n      </ActionContainer>\n      <Multiplier {...multiplier} />\n      <Liquidity {...liquidity} />\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farmsV1/hooks'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useDelayedUnmount } from '@pancakeswap/hooks'\nimport Farm from '../../Farm/Cells/Farm'\nimport Staked from '../../Farm/Cells/Staked'\nimport Earned from '../../Farm/Cells/Earned'\nimport Multiplier from '../../Farm/Cells/Multiplier'\nimport Liquidity from '../../Farm/Cells/Liquidity'\nimport Unstake from './Cells/Unstake'\nimport ActionPanel from './ActionPanel/ActionPanel'\nimport { RowProps } from '../../types'\nimport ExpandActionCell from '../../Cells/ExpandActionCell'\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    cursor: initial;\n  }\n`\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-self: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst RightContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 24px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n  }\n`\n\nconst FarmRow: React.FunctionComponent<React.PropsWithChildren<RowProps>> = ({\n  farm,\n  staked,\n  earned,\n  multiplier,\n  liquidity,\n  unstake,\n}) => {\n  const { isMobile, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const { stakedBalance } = useFarmUser(farm.pid)\n\n  const toggleExpanded = () => {\n    if (!isLargerScreen) {\n      setExpanded((prev) => !prev)\n    }\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <LeftContainer>\n          <Farm {...farm} />\n          {isLargerScreen || !expanded ? (\n            <>\n              <Staked {...staked} stakedBalance={stakedBalance} />\n              <Earned {...earned} />\n              <Multiplier {...multiplier} />\n            </>\n          ) : null}\n          {isLargerScreen && <Liquidity {...liquidity} />}\n        </LeftContainer>\n        <RightContainer>\n          {isLargerScreen || !expanded ? <Unstake {...unstake} /> : null}\n          {!isLargerScreen && <ExpandActionCell expanded={expanded} showExpandedText={expanded || isMobile} />}\n        </RightContainer>\n      </StyledRow>\n      {!isLargerScreen && shouldRenderActionPanel && (\n        <ActionPanel earned={earned} farm={farm} multiplier={multiplier} liquidity={liquidity} expanded={expanded} />\n      )}\n    </>\n  )\n}\n\nexport default FarmRow\n","import { FarmProps } from './Farm/Cells/Farm'\nimport { AprProps } from '../../Farms/components/FarmTable/Apr'\nimport { EarnedProps } from './Farm/Cells/Earned'\nimport { StakedProps } from './Farm/Cells/Staked'\nimport { MultiplierProps } from './Farm/Cells/Multiplier'\nimport { LiquidityProps } from './Farm/Cells/Liquidity'\nimport { UnstakeProps } from './MigrationStep1/OldFarm/Cells/Unstake'\n\nexport interface RowProps {\n  farm: FarmProps\n  earned: EarnedProps\n  staked: StakedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  unstake?: UnstakeProps\n  apr?: AprProps\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'staked',\n    sortable: true,\n    label: 'Staked',\n  },\n  {\n    id: 3,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 4,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 5,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 6,\n    name: 'unstake',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopV2ColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'staked',\n    sortable: true,\n    label: 'Staked',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'Apr',\n  },\n  {\n    id: 4,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'liquidity',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { Flex, Spinner, RowType } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from '@pancakeswap/farms'\nimport TableHeader from './MigrationTable/TableHeader'\nimport EmptyText from './MigrationTable/EmptyText'\nimport TableStyle from './MigrationTable/StyledTable'\nimport NewRow from './MigrationStep2/NewFarm/FarmRow'\nimport OldRow from './MigrationStep1/OldFarm/FarmRow'\nimport { getDisplayApr } from '../../Farms/components/getDisplayApr'\nimport { ColumnsDefTypes, DesktopV2ColumnSchema, RowProps } from './types'\n\nconst Container = styled.div`\n  overflow: hidden;\n  margin-bottom: 32px;\n  border-radius: 24px 24px 16px 16px;\n  background-color: ${({ theme }) => theme.colors.disabled};\n  padding: 1px 1px 3px 1px;\n`\n\nexport interface ITableProps {\n  title: string\n  noStakedFarmText: string\n  account: string\n  cakePrice: BigNumber\n  columnSchema: ColumnsDefTypes[]\n  farms: FarmWithStakedValue[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst MigrationFarmTable: React.FC<React.PropsWithChildren<ITableProps>> = ({\n  title,\n  noStakedFarmText,\n  account,\n  cakePrice,\n  columnSchema,\n  farms,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n\n  const rowData = farms.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.replace(/pancake/gi, '')\n    const customRows =\n      columnSchema === DesktopV2ColumnSchema\n        ? {\n            apr: {\n              value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n              pid: farm.pid,\n              multiplier: farm.multiplier,\n              lpLabel,\n              lpSymbol: farm.lpSymbol,\n              lpTokenPrice: farm.lpTokenPrice,\n              tokenAddress,\n              quoteTokenAddress,\n              cakePrice,\n              lpRewardsApr: farm.lpRewardsApr,\n              originalValue: farm.apr,\n            },\n          }\n        : { unstake: { pid: farm.pid } }\n\n    const row: RowProps = {\n      ...customRows,\n      farm: {\n        ...farm,\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        lpSymbol: farm.lpSymbol,\n        quoteToken: farm.quoteToken,\n      },\n      staked: {\n        label: lpLabel,\n        pid: farm.pid,\n        stakedBalance: farm.userData.stakedBalance,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n    }\n\n    return row\n  })\n\n  const columns = useMemo(\n    () =>\n      columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      })),\n    [columnSchema],\n  )\n\n  const sortedRows = rowData.map((row) => {\n    // @ts-ignore\n    const newRow: RowProps = {}\n    columns.forEach((column) => {\n      if (!(column.name in row)) {\n        throw new Error(`Invalid row data, ${column.name} not found`)\n      }\n      newRow[column.name] = row[column.name]\n    })\n    return newRow\n  })\n\n  return (\n    <Container>\n      <TableHeader title={title} />\n      <TableStyle>\n        {!userDataReady && (\n          <Flex padding=\"50px 10px\" justifyContent=\"center\">\n            <Spinner />\n          </Flex>\n        )}\n        {!account && <EmptyText text={t('Please connect wallet to check your farms status.')} />}\n        {account && userDataReady && sortedRows.length === 0 && <EmptyText text={noStakedFarmText} />}\n        {account &&\n          userDataReady &&\n          sortedRows.map((row) => {\n            if (columnSchema === DesktopV2ColumnSchema) {\n              return <NewRow {...row} key={`table-row-${row.farm.pid}`} />\n            }\n            return <OldRow {...row} key={`table-row-${row.farm.pid}`} />\n          })}\n      </TableStyle>\n    </Container>\n  )\n}\n\nexport default MigrationFarmTable\n","import React, { useMemo, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useAccount } from 'wagmi'\nimport { getFarmApr } from 'utils/apr'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { CAKE_PER_YEAR } from 'config'\nimport { useFarmsV1, usePriceCakeBusd } from 'state/farmsV1/hooks'\nimport { DeserializedFarm, FarmWithStakedValue } from '@pancakeswap/farms'\nimport MigrationFarmTable from '../../MigrationFarmTable'\nimport { DesktopColumnSchema } from '../../types'\n\nconst OldFarmStep1: React.FC<React.PropsWithChildren> = () => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const { data: farmsLP, userDataLoaded } = useFarmsV1()\n  const cakePrice = usePriceCakeBusd()\n\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const farms = farmsLP.filter((farm) => farm.pid !== 0)\n\n  const stakedOrHasTokenBalance = farms.filter((farm) => {\n    return (\n      farm.userData &&\n      (new BigNumber(farm.userData.stakedBalance).isGreaterThan(0) ||\n        new BigNumber(farm.userData.tokenBalance).isGreaterThan(0))\n    )\n  })\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n          56,\n          new BigNumber(farm.poolWeight),\n          cakePrice,\n          totalLiquidity,\n          farm.lpAddress,\n          CAKE_PER_YEAR,\n        )\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice],\n  )\n\n  const chosenFarmsMemoized = useMemo(() => {\n    return farmsList(stakedOrHasTokenBalance)\n  }, [stakedOrHasTokenBalance, farmsList])\n\n  return (\n    <MigrationFarmTable\n      title={t('Old Farms')}\n      noStakedFarmText={t('You are not currently staking in any v1 farms.')}\n      account={account}\n      cakePrice={cakePrice}\n      columnSchema={DesktopColumnSchema}\n      farms={chosenFarmsMemoized}\n      userDataReady={userDataReady}\n    />\n  )\n}\n\nexport default OldFarmStep1\n","import { Box, Flex, Text, useMatchBreakpoints, Balance, Pool } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport React from 'react'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { Token } from '@pancakeswap/sdk'\n\ninterface StakedCellProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n}\n\nconst StyledCell = styled(Pool.BaseCell)`\n  padding: 0 0 24px 0;\n  margin-left: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 10px;\n    padding: 24px 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-left: 20px;\n  }\n`\n\nconst StakedCell: React.FC<React.PropsWithChildren<StakedCellProps>> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  // vault\n  const {\n    userData: {\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n    },\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  // pool\n  const { stakingTokenPrice, stakingToken, userData } = pool\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const labelText = `${pool.stakingToken.symbol} ${t('Staked')}`\n  const hasStaked = pool.vaultKey ? (Number.isNaN(cakeAsNumberBalance) ? 0 : cakeAsNumberBalance) : stakedTokenBalance\n\n  return (\n    <StyledCell role=\"cell\" flex={pool.vaultKey ? '1 0 100px' : '2 0 100px'}>\n      <Pool.CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Box mr=\"8px\" height=\"32px\">\n            <Balance\n              mt=\"4px\"\n              bold={!isMobile}\n              fontSize={isMobile ? '14px' : '16px'}\n              color={hasStaked ? 'primary' : 'textDisabled'}\n              decimals={hasStaked ? 5 : 1}\n              value={hasStaked}\n            />\n            {hasStaked ? (\n              <Balance\n                display=\"inline\"\n                fontSize=\"12px\"\n                color=\"textSubtle\"\n                decimals={2}\n                prefix=\"~\"\n                value={pool.vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n                unit=\" USD\"\n              />\n            ) : (\n              <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                0 USD\n              </Text>\n            )}\n          </Box>\n        </Flex>\n      </Pool.CellContent>\n    </StyledCell>\n  )\n}\n\nexport default StakedCell\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport NameCell from 'views/Pools/components/PoolsTable/Cells/NameCell'\nimport AprCell from 'views/Pools/components/PoolsTable/Cells/AprCell'\nimport AutoAprCell from 'views/Pools/components/PoolsTable/Cells/AutoAprCell'\nimport ActionPanel from 'views/Pools/components/PoolsTable/ActionPanel/ActionPanel'\nimport AutoEarningsCell from 'views/Pools/components/PoolsTable/Cells/AutoEarningsCell'\nimport { useMatchBreakpoints, Pool } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { useDelayedUnmount } from '@pancakeswap/hooks'\nimport EarningsCell from '../../Pool/Cells/EarningsCell'\nimport TotalStakedCell from '../../Pool/Cells/TotalStakedCell'\nimport StakedCell from './Cells/StakedCell'\n\ninterface PoolRowProps {\n  pool: Pool.DeserializedPool<Token>\n  account: string\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<React.PropsWithChildren<PoolRowProps>> = ({ pool, account }) => {\n  const { isXl, isXxl, isLg, isTablet, isDesktop } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n  const isXLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const { totalCakeInVault } = useVaultPoolByKey(pool.vaultKey)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        {isXLargerScreen && pool.vaultKey && <StakedCell pool={pool} account={account} />}\n        {pool.vaultKey ? (\n          isXLargerScreen && pool.vaultKey && <AutoEarningsCell pool={pool} account={account} />\n        ) : (\n          <EarningsCell pool={pool} account={account} />\n        )}\n        {pool.vaultKey ? <AutoAprCell pool={pool} /> : <AprCell pool={pool} />}\n        {isLargerScreen && <TotalStakedCell pool={pool} totalCakeInVault={totalCakeInVault} cakeInVaults={BIG_ZERO} />}\n        <Pool.ExpandActionCell expanded={expanded} isFullLayout={isTablet || isDesktop} />\n      </StyledRow>\n      {shouldRenderActionPanel && <ActionPanel account={account} pool={pool} expanded={expanded} />}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Spinner, Pool } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport TableHeader from '../../MigrationTable/TableHeader'\nimport EmptyText from '../../MigrationTable/EmptyText'\nimport TableStyle from '../../MigrationTable/StyledTable'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool.DeserializedPool<Token>[]\n  userDataReady: boolean\n  account: string\n}\n\nconst Container = styled.div`\n  overflow: hidden;\n  margin-bottom: 32px;\n  border-radius: 24px 24px 16px 16px;\n  background-color: ${({ theme }) => theme.colors.disabled};\n  padding: 1px 1px 3px 1px;\n`\n\nconst PoolsTable: React.FC<React.PropsWithChildren<PoolsTableProps>> = ({ pools, userDataReady, account }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Container>\n      <TableHeader title={t('Pools')} />\n      <TableStyle>\n        {!userDataReady && (\n          <Flex padding=\"50px 10px\" justifyContent=\"center\">\n            <Spinner />\n          </Flex>\n        )}\n        {!account && <EmptyText text={t('Please connect wallet to check your pool status.')} />}\n        {account && userDataReady && pools.length === 0 && (\n          <EmptyText text={t('You are not currently staking in any pools.')} />\n        )}\n        {account &&\n          userDataReady &&\n          pools.map((pool) => <PoolRow key={pool.vaultKey ?? pool.sousId} pool={pool} account={account} />)}\n      </TableStyle>\n    </Container>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo } from 'react'\nimport { useAccount } from 'wagmi'\nimport { useCakeVault, usePoolsWithVault } from 'state/pools/hooks'\nimport { useFastRefreshEffect } from 'hooks/useRefreshEffect'\nimport { useAppDispatch } from 'state'\nimport {\n  fetchCakePoolUserDataAsync,\n  fetchCakeVaultFees,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakePoolPublicDataAsync,\n  fetchCakeFlexibleSideVaultPublicData,\n  fetchCakeFlexibleSideVaultUserData,\n  fetchCakeFlexibleSideVaultFees,\n} from 'state/pools'\nimport { batch } from 'react-redux'\nimport { Pool } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport PoolsTable from './PoolTable'\n\nconst NewPool: React.FC<React.PropsWithChildren> = () => {\n  const { address: account } = useAccount()\n  const { pools } = usePoolsWithVault()\n  const cakeVault = useCakeVault()\n\n  const stakedOnlyOpenPools = useMemo(\n    () => pools.filter((pool) => pool.userData && pool.sousId === 0 && !pool.isFinished),\n    [pools],\n  ) as Pool.DeserializedPool<Token>[]\n\n  const userDataReady: boolean = !account || (!!account && !cakeVault.userData?.isLoading)\n\n  const dispatch = useAppDispatch()\n\n  useFastRefreshEffect(() => {\n    batch(() => {\n      dispatch(fetchCakeVaultPublicData())\n      dispatch(fetchCakeFlexibleSideVaultPublicData())\n      dispatch(fetchCakePoolPublicDataAsync())\n      if (account) {\n        dispatch(fetchCakeVaultUserData({ account }))\n        dispatch(fetchCakeFlexibleSideVaultUserData({ account }))\n        dispatch(fetchCakePoolUserDataAsync(account))\n      }\n    })\n  }, [account, dispatch])\n\n  useEffect(() => {\n    batch(() => {\n      dispatch(fetchCakeVaultFees())\n      dispatch(fetchCakeFlexibleSideVaultFees())\n    })\n  }, [dispatch])\n\n  return <PoolsTable pools={stakedOnlyOpenPools} account={account} userDataReady={userDataReady} />\n}\n\nexport default NewPool\n","import React, { useMemo, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useAccount } from 'wagmi'\nimport { getFarmApr } from 'utils/apr'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useFarms, usePriceCakeBusd, usePollFarmsWithUserData } from 'state/farms/hooks'\nimport { useFarmsV1 } from 'state/farmsV1/hooks'\nimport { DeserializedFarm, FarmWithStakedValue } from '@pancakeswap/farms'\nimport MigrationFarmTable from '../../MigrationFarmTable'\nimport { DesktopV2ColumnSchema } from '../../types'\n\nconst NewFarmStep2: React.FC<React.PropsWithChildren> = () => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const { data: farmsLP, userDataLoaded, regularCakePerBlock } = useFarms()\n  const { data: farmsV1LP } = useFarmsV1()\n  const cakePrice = usePriceCakeBusd()\n\n  usePollFarmsWithUserData()\n\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const activeFarmsV1 = farmsV1LP.filter((farm) => farm.pid !== 0)\n\n  const v1StakedOrHasTokenBalance = activeFarmsV1.filter((farm) => {\n    const hasStakedBalance = new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)\n    const hasTokenBalance = new BigNumber(farm.userData.tokenBalance).isGreaterThan(0)\n    return farm.userData && (hasStakedBalance || hasTokenBalance)\n  })\n\n  // Only show farms that has staked or has balance in v1 & v2\n  const stakedOrHasTokenBalance = activeFarms.filter((farm) => {\n    const hasStakedBalance = new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)\n    const hasTokenBalance = new BigNumber(farm.userData.tokenBalance).isGreaterThan(0)\n    const farms = v1StakedOrHasTokenBalance.find(\n      (v1Farm) => v1Farm.pid === farm.pid && v1Farm.lpSymbol === farm.lpSymbol,\n    )\n    return farm.userData && (hasStakedBalance || hasTokenBalance || farms)\n  })\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n          56,\n          new BigNumber(farm.poolWeight),\n          cakePrice,\n          totalLiquidity,\n          farm.lpAddress,\n          regularCakePerBlock,\n        )\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, regularCakePerBlock],\n  )\n\n  const chosenFarmsMemoized = useMemo(() => {\n    return farmsList(stakedOrHasTokenBalance)\n  }, [stakedOrHasTokenBalance, farmsList])\n\n  return (\n    <MigrationFarmTable\n      title={t('Farms')}\n      noStakedFarmText={t('You are not currently staking in any farms.')}\n      account={account}\n      cakePrice={cakePrice}\n      columnSchema={DesktopV2ColumnSchema}\n      farms={chosenFarmsMemoized}\n      userDataReady={userDataReady}\n    />\n  )\n}\n\nexport default NewFarmStep2\n","import React, { memo, useState, useRef, useMemo } from 'react'\nimport { useRouter } from 'next/router'\nimport { useAccount } from 'wagmi'\nimport { Heading, Text, Button, ArrowForwardIcon, Link, PageHeader, Pool } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { usePollFarmsV1WithUserData } from 'state/farmsV1/hooks'\nimport { VaultKey } from 'state/types'\nimport { useFetchUserPools } from 'views/Migration/hook/V1/Pool/useFetchUserPools'\nimport { useFetchPublicPoolsData } from 'views/Migration/hook/V1/Pool/useFetchPublicPoolsData'\nimport Page from 'components/Layout/Page'\nimport { Token } from '@pancakeswap/sdk'\nimport ProgressSteps, { Step, ProgressStepsType } from './components/ProgressSteps'\nimport MigrationSticky from './components/MigrationSticky'\nimport OldPool from './components/MigrationStep1/OldPool'\nimport OldFarm from './components/MigrationStep1/OldFarm'\nimport NewPool from './components/MigrationStep2/NewPool'\nimport NewFarm from './components/MigrationStep2/NewFarm'\n\nconst MigrationPage: React.FC<React.PropsWithChildren> = () => {\n  const { t } = useTranslation()\n  const { address: account } = useAccount()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const router = useRouter()\n  const [step, setStep] = useState<ProgressStepsType>(ProgressStepsType.STEP1)\n  const steps: Step[] = [\n    {\n      stepId: ProgressStepsType.STEP1,\n      canHover: true,\n      text: t('Unstake LP tokens and CAKE from the old MasterChef contract.'),\n    },\n    {\n      stepId: ProgressStepsType.STEP2,\n      canHover: true,\n      text: t('Stake LP tokens and CAKE to the new MasterChef v2 contract.'),\n    },\n  ]\n\n  // v1 Farms\n  usePollFarmsV1WithUserData()\n\n  // v1 Pools\n  useFetchPublicPoolsData()\n  const { data: cakePool, userDataLoaded } = useFetchUserPools(account)\n\n  const v1Pools = useMemo(() => {\n    const ifoPoolVault = { ...cakePool, vaultKey: VaultKey.IfoPool }\n    const cakeAutoVault = { ...cakePool, vaultKey: VaultKey.CakeVaultV1 }\n\n    return [ifoPoolVault, cakeAutoVault, cakePool]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cakePool]) as Pool.DeserializedPool<Token>[]\n\n  const scrollToTop = (): void => {\n    window.scrollTo({\n      top: tableWrapperEl.current.offsetTop,\n      behavior: 'smooth',\n    })\n  }\n\n  const handleMigrationStickyClick = () => {\n    scrollToTop()\n    if (step === ProgressStepsType.STEP1) {\n      setStep(ProgressStepsType.STEP2)\n    } else {\n      router.push('/')\n    }\n  }\n\n  return (\n    <div ref={tableWrapperEl}>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Migration')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Migrate your stakings to the new MasterChef contract.')}\n        </Heading>\n        <Link href=\"https://docs.pancakeswap.finance/code/migration/migrate-your-stakings\" external>\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Learn more')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </Link>\n      </PageHeader>\n      <Page>\n        <ProgressSteps pickedStep={step} steps={steps} onClick={setStep} />\n        {step === ProgressStepsType.STEP1 ? (\n          <>\n            <OldPool pools={v1Pools} account={account} userDataLoaded={userDataLoaded} />\n            <OldFarm />\n          </>\n        ) : (\n          <>\n            <NewPool />\n            <NewFarm />\n          </>\n        )}\n      </Page>\n      <MigrationSticky step={step} handleClick={handleMigrationStickyClick} />\n    </div>\n  )\n}\n\nexport default memo(MigrationPage)\n","import Migration from '../views/Migration'\n\nexport default Migration\n","import React from \"react\";\nimport { Image, Box } from \"@pancakeswap/uikit\";\nimport { SpinnerProps } from \"./types\";\n\nconst Spinner: React.FC<React.PropsWithChildren<SpinnerProps>> = ({ size = 128 }) => {\n  return (\n    <Box width={size} height={size * 1.197} position=\"relative\">\n      <Image\n        width={size}\n        height={size * 1.197}\n        src=\"https://assets.pancakeswap.finance/web/pancake-3d-spinner-v2.gif\"\n        alt=\"pancake-3d-spinner\"\n      />\n    </Box>\n  );\n};\n\nexport default Spinner;\n"],"names":["window","__NEXT_P","push","__webpack_require__","ProgressStepsType","deserializeFarm","farm","lpAddress","lpSymbol","pid","v1pid","dual","multiplier","isCommunity","quoteTokenPriceBusd","tokenPriceBusd","token","deserializeToken","quoteToken","userData","allowance","BigNumber","BIG_ZERO","tokenBalance","stakedBalance","earnings","tokenAmountTotal","lpTotalInQuoteToken","lpTotalSupply","tokenPriceVsQuote","poolWeight","usePollFarmsV1WithUserData","dispatch","useAppDispatch","address","useAccount","useSlowRefreshEffect","getFarmConfig","ChainId","then","farmsConfig","pids","filter","farmToFetch","map","fetchFarmsPublicDataAsync","account","fetchFarmUserDataAsync","useFarmsV1","farms","useSelector","state","farmsV1","deserializedFarmsData","data","loadArchivedFarmsData","userDataLoaded","poolLength","useFarmFromPid","find","f","useFarmUser","useBusdPriceFromPid","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","gt","overallValueOfAllTokensInFarm","valueOfBaseTokenInFarm","times","totalLpTokens","getBalanceAmount","div","usePriceCakeBusd","price","useCakeBusdPrice","useMemo","toSignificant","fetchUserStakeBalances","_async_to_generator","Z","masterPoolAmount","getMasterchefV1Contract","userInfo","_ref","sent","amount","toString","toJSON","fetchUserPendingRewards","pendingReward","pendingCake","_state","cakeContract","getCakeContract","initialData","sousId","stakingToken","bscTokens","earningToken","contractAddress","poolCategory","PoolCategory","tokenPerBlock","isFinished","totalStaked","useFetchUserPools","chainId","useActiveChainId","useState","userPoolsData","setPoolsUserData","fetchUserPoolsData","useCallback","fetchPoolsUserDataAsync","stakedBalances","pendingRewards","totalStaking","Promise","all","balanceOf","_sliced_to_array","apply","stakingTokenBalance","old","_object_spread_props","_object_spread","console","error","useFastRefreshEffect","transformPool","useFetchPublicPoolsData","fetchPoolsDataWithFarms","activeFarms","Circle","styled","param","theme","mediaQueries","lg","Step","confirmed","colors","secondary","textDisabled","canHover","Text","disabled","textSubtle","ProgressWrap","StepText","components_ProgressSteps","pickedStep","steps","onClick","jsx_runtime","jsx","step","index","jsxs","stepId","bold","text","Container","sm","xxl","radii","card","concat","isDark","TextGroup","TextTitle","TextSubTitle","components_MigrationSticky","handleClick","t","useTranslation","isMobile","useMatchBreakpoints","isStep1","title","subTitle","buttonText","Button","minWidth","ConnectWalletButton","width","MigrationTable_TableHeader","CardHeader","fontSize","MigrationTable_EmptyText","padding","textAlign","StyledTable","background","MigrationTable_StyledTable","children","role","fetchIfoPoolUser","ifoPoolAddress","calls","userContractResponse","creditResponse","method","name","params","multicallv2","abi","ifoPoolAbi","isLoading","userShares","shares","lastDepositedTime","lastUserActionTime","cakeAtLastUserAction","credit","avgBalance","fetchPublicIfoPoolData","sharePrice","startBlock","endBlock","totalSharesAsBigNumber","sharePriceAsBigNumber","totalCakeInVaultEstimate","convertSharesToCake","totalShares","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","creditStartBlock","toNumber","creditEndBlock","fetchIfoPoolFeesData","performanceFee","withdrawalFee","withdrawalFeePeriod","fetchPublicVaultData","cakeVaultAddress","totalLockedAmount","totalLockedAmountAsBigNumber","cakeVaultAbi","options","requireSuccess","ifoPoolV1Contract","getCakeVaultContract","signer","signerOrProvider","bscRpcProvider","Contract","fetchVaultUserV1","contract","getIfoPoolData","ifoData","feesData","transformData","fees","getCakePoolData","vaultData","fetchVaultFees","performanceFeeAsDecimal","useVaultPoolByKeyV1","key","useSWR","VaultKey","revalidateOnFocus","refreshInterval","FAST_INTERVAL","dedupingInterval","mutate","vaultPoolData","initialPoolVaultState","fetchPoolData","StyledCell","Pool","withConfig","Cells_NameCell","pool","vaultKey","hasVaultShares","stakingTokenSymbol","earningTokenSymbol","isStaked","subtitle","vaultPoolConfig","description","toLocaleLowerCase","UITokenPairImage","tokenImage","mr","height","TokenPairImage","primaryToken","secondaryToken","showStakedTag","color","textTransform","small","showSubtitle","Cells_StakedCell","hasSharesStaked","isVaultWithShares","cakeAsNumberBalance","stakedTokenBalance","getBalanceNumber","decimals","labelText","hasStaked","Flex","Box","Balance","mt","value","Number","isNaN","md","Cells_AutoEarningsCell","hasEarnings","earningTokenBalance","Cells_EarningsCell","asset","Cells_TotalStakedCell","cakeInVaults","isManualCakePool","totalStakedBalance","manualCakeTotalMinusAutoVault","minus","alignItems","gte","unit","Skeleton","gasLimit","DEFAULT_GAS_LIMIT","sousUnstake","sousChefContract","gasPrice","units","parseUnits","withdraw","Pool_useUnstakePool","enableEmergencyWithdraw","masterChefV1Contract","useMasterchefV1","useSousChef","useGasPrice","onUnstake","DEFAULT_TOKEN_DECIMAL","leaveStaking","emergencyWithdraw","OldPool_UnstakeButton","useSigner","useCatchTxError","fetchWithCatchTxError","loading","callWithGasPrice","useCallWithGasPrice","toastSuccess","useToast","vaultPoolContract","getContract","useUnstakePool","isNeedUnstake","onPresentVaultUnstake","receipt","undefined","status","ToastDescriptionWithTx","txHash","transactionHash","onPresentUnstake","getFullDisplayBalance","Fragment","pendingTx","marginLeft","endIcon","AutoRenewIcon","spin","event","stopPropagation","Unstaked","UnstakeButton","ArrowIcon","ChevronDownIcon","toggled","Cells_ExpandActionCell","expanded","showExpandedText","ActionContainer","Stake","stakingTokenPrice","stakedTokenDollarBalance","multipliedBy","cakeBigBumber","cakeBalance","stakedAutoDollarValue","balance","isBalanceZero","ActionTitles","as","ActionContent","flex","pt","flexDirection","alignSelf","lineHeight","display","prefix","ActionPanel_AutoEarning","earningTokenDollarBalance","earningTokenPrice","actionTitle","justifyContent","Heading","ActionPanel_Earning","Containter","ActionPanel_TotalStaked","expandAnimation","keyframes","collapseAnimation","StyledActionPanel","css","dropdown","ActionPanel_ActionPanel","_obj","Object","values","_define_property","reduce","total","vault","plus","getCakeVaultEarnings","autoCakeToDisplay","autoUsdToDisplay","AutoEarning","Earning","Staked","TotalStaked","StyledRow","LeftContainer","RightContainer","OldPool_PoolRow","isXl","isXxl","isLargerScreen","setExpanded","shouldRenderActionPanel","useDelayedUnmount","isCakePool","prev","NameCell","StakedCell","AutoEarningsCell","EarningsCell","TotalStakedCell","ExpandActionCell","ActionPanel","PoolTable","pools","userDataReady","TableHeader","TableStyle","Spinner","EmptyText","length","PoolRow","MigrationStep1_OldPool","PoolsTable","TokenWrapper","Cells_Farm","label","variant","Cells_Staked","displayBalance","formatLpBalance","ReferenceElement","MultiplierWrapper","Cells_Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","Link","href","external","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","HelpIcon","LiquidityWrapper","Cells_Liquidity","liquidity","displayLiquidity","toLocaleString","maximumFractionDigits","Cells_AprCell","apr","Apr","StakeButtonContainer","Cells_StakeButtonCells","IconButtonWrapper","NewFarm_StakeButton","vaultPid","lpLabel","displayApr","useActiveWeb3React","isDesktop","stakedPid","onStake","useStakeFarms","useUnstakeFarms","cakePrice","lpTokenStakedAmount","bCakeMultiplier","setBCakeMultiplier","isApproved","isGreaterThan","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","addLiquidityUrl","BASE_ADD_LIQUIDITY_URL","handleStake","handleUnstake","onPresentDeposit","useModal","FarmUI","max","lpPrice","onConfirm","tokenName","bCakeCalculatorSlot","calculatorBalance","BCakeCalculator","targetInputBalance","onPresentWithdraw","lpContract","useERC20","onApprove","useApproveFarm","handlePoolApprove","IconButton","MinusIcon","AddIcon","ActionPanel_Multiplier","ActionPanel_Liquidity","ActionPanel_Staked","earned","earningsBigNumber","earningsBusd","isZero","toFixed","pr","StakeButton","ActionPanel_AprRow","NewFarm_ActionPanel_ActionPanel","AprRow","Multiplier","Liquidity","NewFarm_FarmRow","staked","replace","Farm","AprCell","StakeButtonCells","Cells_Earned","Farms_useUnstakeFarms","masterChefContract","OldFarm_UnstakeButton","Cells_Unstake","OldFarm_ActionPanel_Staked","ActionPanel_Earned","OldFarm_ActionPanel_ActionPanel","Earned","OldFarm_FarmRow","unstake","Unstake","DesktopColumnSchema","id","sortable","DesktopV2ColumnSchema","components_MigrationFarmTable","noStakedFarmText","columnSchema","rowData","customRows","getDisplayApr","lpRewardsApr","originalValue","columns","column","sort","a","b","sortedRows","row","newRow","forEach","react","createElement","NewRow","OldRow","OldFarm","stakedOrHasTokenBalance","farmsList","farmsToDisplay","totalLiquidity","getFarmApr","CAKE_PER_YEAR","cakeRewardsApr","chosenFarmsMemoized","MigrationFarmTable","NewPool_Cells_StakedCell","useVaultPoolByKey","NewPool_PoolRow","isLg","isTablet","isXLargerScreen","AutoAprCell","isFullLayout","NewPool_PoolTable","MigrationStep2_NewPool","cakeVault","usePoolsWithVault","useCakeVault","stakedOnlyOpenPools","batch","fetchCakeVaultPublicData","fetchCakeFlexibleSideVaultPublicData","fetchCakePoolPublicDataAsync","fetchCakeVaultUserData","fetchCakeFlexibleSideVaultUserData","fetchCakePoolUserDataAsync","useEffect","fetchCakeVaultFees","fetchCakeFlexibleSideVaultFees","NewFarm","useFarms","regularCakePerBlock","usePollFarmsWithUserData","farmsLP","v1StakedOrHasTokenBalance","activeFarmsV1","hasStakedBalance","hasTokenBalance","v1Farm","migration","memo","tableWrapperEl","useRef","router","useRouter","setStep","v1Pools","cakePool","scrollToTop","scrollTo","top","current","offsetTop","behavior","PageHeader","scale","mb","p","ArrowForwardIcon","Page","ProgressSteps","OldPool","NewPool","MigrationSticky","__webpack_exports__","size","_param_size","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","position","Image","src","alt"],"sourceRoot":""}