{"version":3,"file":"static/chunks/pages/add/[[...currency]]-be2e49f2ef3a098d.js","mappings":"wKAsBe,SAAAA,EAAAC,CAAA,CAAAC,CAAA,EACb,GAAAC,EAAAC,CAAA,EAAY,EAAAC,WACd,IAAAC,EAAa,GAAAC,EAAAH,CAAA,EAAMH,GACnBO,EAAe,GAAAC,EAAAL,CAAA,EAASF,GAExB,GAAAQ,MAAAF,GACA,WAAAG,KAAAC,IACA,CAEA,IAAAJ,EAEA,OAAAF,CACA,CAEA,IAAAO,EAAAP,EAAAQ,OAAA,GASAC,EAAA,IAAAJ,KAAAL,EAAAU,OAAA,UAIA,CAHAD,EAAAE,QAAA,CAAAX,EAAAY,QAAA,GAAAV,EAAA,KAGAK,GAFAE,EAAAD,OAAA,IAKAC,GASAT,EAAAa,WAAA,CAAAJ,EAAAK,WAAA,GAAAL,EAAAG,QAAA,GAAAL,GACAP,EACA,gGC1Ce,SAAAe,EAAApB,CAAA,EACb,GAAAE,EAAAC,CAAA,EAAY,EAAAC,WACd,IAAAC,EAAa,GAAAC,EAAAH,CAAA,EAAMH,GAEnB,OADAK,EAAAgB,UAAA,QACAhB,CACA,sHE1BA,SAAAiB,EAAAC,CAAA,EAAoW,MAAAD,CAAtOA,EAA3E,mBAAAE,QAAA,iBAAAA,OAAAC,QAAA,CAA2E,SAAAF,CAAA,EAAkC,cAAAA,CAAA,EAA+B,SAAAA,CAAA,EAAkC,OAAAA,GAAA,mBAAAC,QAAAD,EAAAG,WAAA,GAAAF,QAAAD,IAAAC,OAAAG,SAAA,iBAAAJ,CAAA,GAAmIA,EAAA,CA8CrV,SAAAK,EAAAvB,CAAA,CAAAwB,CAAA,EAEf,GADE,GAAAC,EAAA3B,CAAA,EAAY,EAAAC,WACd,CAAAyB,GAAAP,WAAAA,EAAAO,GAAA,WAAAnB,KAAAC,IAAA,CACA,IAAAoB,EAAAF,EAAAE,KAAA,CAA+B,GAAAC,EAAA7B,CAAA,EAAS0B,EAAAE,KAAA,IACxCE,EAAAJ,EAAAI,MAAA,CAAiC,GAAAD,EAAA7B,CAAA,EAAS0B,EAAAI,MAAA,IAC1CC,EAAAL,EAAAK,KAAA,CAA+B,GAAAF,EAAA7B,CAAA,EAAS0B,EAAAK,KAAA,IACxCC,EAAAN,EAAAM,IAAA,CAA6B,GAAAH,EAAA7B,CAAA,EAAS0B,EAAAM,IAAA,IACtCC,EAAAP,EAAAO,KAAA,CAA+B,GAAAJ,EAAA7B,CAAA,EAAS0B,EAAAO,KAAA,IACxCC,EAAAR,EAAAQ,OAAA,CAAmC,GAAAL,EAAA7B,CAAA,EAAS0B,EAAAQ,OAAA,IAC5CC,EAAAT,EAAAS,OAAA,CAAmC,GAAAN,EAAA7B,CAAA,EAAS0B,EAAAS,OAAA,IAE5CC,EAA0BC,SDnCXxC,CAAA,CAAAC,CAAA,EACb,GAAA6B,EAAA3B,CAAA,EAAY,EAAAC,WACd,IAAAG,EAAe,GAAAyB,EAAA7B,CAAA,EAASF,GACxB,MAAS,GAAAF,EAAAI,CAAA,EAASH,EAAA,CAAAO,EAClB,EC+BmCF,EAAA4B,EAAAF,GAAAA,GAEnCU,EAAwB,GAAAC,EAAAvC,CAAA,EAAOoC,EAAAJ,EAAAD,EAAAA,GAM/B,OADA,IAAAxB,KAAA+B,EAAA1B,OAAA,GADA4B,IADAL,CAAAA,EAAAM,GADAP,CAAAA,EAAAD,GAAAA,CAAA,CACA,EAIA,yBClEA,IAAAS,EAAeC,EAAQ,MA2BvBC,CAAAA,EAAAC,OAAA,CAJA,SAAAC,CAAA,EACA,OAAAJ,EAAAI,GAAAC,WAAA,EACA,yBCzBA,IAAAC,EAAkBL,EAAQ,OAC1BM,EAAeN,EAAQ,OACvBO,EAAeP,EAAQ,OACvBQ,EAAwBR,EAAQ,OAkBhCS,EAAAH,EAAA,SAAAI,CAAA,EACA,OAAAH,EAAAF,EAAAK,EAAA,EAAAF,EAAA,IACA,EAEAP,CAAAA,EAAAC,OAAA,CAAAO,wBCxBA,CAAAE,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,uBACA,WACA,OAAeb,EAAQ,MACvB,EACA,wLCCMc,EAAiC,CACrCC,QAAS,SACTC,SAAU,GACVC,SAAU,GAAAC,EAAAC,GAAA,EAACC,EAAAA,CAAKA,CAAAA,UAAC,iBACnB,EAEaC,EAAe,SAACC,CAAAA,CAAuB,CAClD,IAAMC,EAAqBC,CAAAA,EAAAA,EAAAA,CAAAA,IAAnBD,cAAAA,CACDE,EAAwBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,IAAuBA,EAAvBA,CAAAA,EAAAA,CACzBC,EAAsBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAWC,EAAAA,CAAyBA,EAEhE,MACE,GAAAX,EAAAC,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EACDR,GAAAA,CACJS,QAAS,SAACC,CAAAA,CAAM,CACd,GAAIT,EACFI,EAAoB,QACf,KACLL,CAAAA,CAAa,OAAbA,CAAAA,EAAAA,EAAMS,OAAO,GAAbT,KAAAA,IAAAA,GAAAA,EAAAA,IAAAA,CAAAA,EAAgBU,EAClB,CAAC,IAEEP,GAAwB,CAAET,SAAU,EAAK,EACzCO,GAAkBT,GAG7B,6VC7BA,IAAMmB,EAAqBC,QAAAA,EAAAA,CAAAA,KAAAA,CAAAA,UAAY,oCAGvB,SAAAC,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACC,UAAU,EAEhC,SAAAH,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACE,UAAU,GAK/CC,EAAc,SAAClB,CAAAA,CAAU,CACpC,MACE,GAAAmB,EAAAtB,GAAA,EAACc,EAAAA,UACC,GAAAQ,EAAAtB,GAAA,EAACuB,EAAAA,CAAQA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,MAAM,MAASrB,KAG/B,ugBCJA,IAAMsB,EAAgBV,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,UAAU,oCAMrB,SAAAC,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACQ,IAAI,EACrB,SAAAV,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACS,gBAAgB,GAI5DC,EAA6D,SAAAZ,CAAA,CAA+B,KAA5Ba,EAAAA,EAAAA,UAAAA,CAAYC,EAAAA,EAAAA,SAAAA,CAC1EC,EAAc1B,CAAAA,EAAAA,EAAAA,CAAAA,IAAZ0B,OAAAA,CACFC,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACFE,EACJH,GAAWF,EACPA,EAAWM,GAAG,CAAC,SAACC,CAAAA,CAAa,CAC3B,MAAOC,CAAAA,EAAAA,EAAAA,EAAAA,EAAgBD,EAAUL,EACnC,GACA,EAAE,CAEFO,EAAkDC,CAAAA,EAAAA,EAAAA,EAAAA,IAExD,MACE,GAAAjB,EAAAtB,GAAA,EAACwC,EAAAA,EAAKA,CAAAA,CAACC,MAAOT,EAAE,sBAAuBF,UAAWA,WAChD,GAAAR,EAAAoB,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,eACbV,EAAOC,GAAG,CAAC,SAACU,CAAAA,CAAU,KAKAA,EAJrB,OACEA,GACAP,GACAQ,OAAOC,IAAI,CAACT,GAAmBU,QAAQ,CAACH,EAAMI,OAAO,GACnD,GAAA3B,EAAAoB,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAA8CC,IAAI,iBAC3D,GAAAtB,EAAAoB,IAAA,EAACQ,EAAAA,EAAOA,CAAAA,CAACN,IAAI,MAAMO,MAAM,mBACvB,GAAA7B,EAAAtB,GAAA,EAACoD,EAAAA,CAAYA,CAAAA,CAAChB,SAAUS,EAAOQ,KAAK,SACpC,GAAA/B,EAAAtB,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAET,EAAMU,MAAM,MAEpBxB,GACC,GAAAT,EAAAtB,GAAA,EAACwD,EAAAA,CAAIA,CAAAA,CACHC,SAAQ,GACRC,MAAK,GACLC,MAAM,cACNC,KAAMC,CAAAA,EAAAA,EAAAA,CAAAA,EAAoBhB,EAAMI,OAAO,CAAE,UAAWlB,YAEnDc,EAAMI,OAAO,KAZHJ,IAAa,GAAbA,CAAAA,EAAAA,EAAMI,OAAO,GAAbJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAeiB,MAAAA,CAAO,iBAkB7C,GACA,GAAAxC,EAAAtB,GAAA,EAAC2C,EAAAA,EAAUA,CAAAA,CAACC,IAAI,cACd,GAAAtB,EAAAtB,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UACFtB,EACC,4KAOd,EAEe,SAAS+B,EAA0B/C,CAAwD,CAAE,KAA1Da,EAAAb,EAAEa,UAAAA,CAC5CG,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACDgC,EAAkBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,GAAA3C,EAAAtB,GAAA,EAAC4B,EAAAA,CAAiBC,WAAYA,OAAvCoC,CAAAA,EAAAA,CAEzB,MACE,GAAA3C,EAAAtB,GAAA,EAACyB,EAAAA,UACC,GAAAH,EAAAtB,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAACf,QAAQ,OAAOgB,QAASoD,WAC7BhC,EAAE,yCAIX,gGCnFe,SAASkC,GAAkD,CACxE,IACOC,EAAAA,EADDC,EAAYC,CAAAA,EAAAA,EAAAA,EAAAA,IAClB,OAAOF,IAA+B,GAA/BA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAoBC,EAAW,8BAA/BD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,IAA4DG,GAA5DH,CAAAA,EAAAA,EAA4DG,MAAAA,GAAAA,KAAAA,IAAAA,EAA5DH,KAAAA,EAAAA,CAAoE,CAAC,EAAE,qHCI1EI,EAAiC,GAAAC,EAAAtI,CAAA,GACrCuI,gBAN6B,MACM,CACnCC,gBAAiB,EACjBC,mBAAoB,GACtB,GAMaC,EAAmB,SAAC3B,CAAAA,CAAwC,CACvE,IAAM4B,EAAYC,CAAAA,EAAAA,EAAAA,EAAAA,IACZC,EAAWC,CAAAA,EAAAA,EAAAA,CAAAA,EACf/B,GAAW,CAAE,uBAA8Ba,MAAA,CAARb,EAAQ,KAAI4B,EAAU,CACzD,iBAAMI,CAAAA,EAAAA,EAAAA,CAAAA,EAAqBhC,IAC3BsB,GAHMQ,IAAAA,CAKR,OAAOA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMG,QAAQ,4GChBR,SAASC,GAAgD,CACtE,IAAMC,EAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAA8B,SAACC,CAAAA,CAAAA,QAAUA,EAAMC,IAAI,CAACC,YAAY,GACtEC,EAAiBvB,CAAAA,EAAAA,EAAAA,CAAAA,IACvB,MAAOwB,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,CACnB,GAAID,GAAkBL,EAAK,OAAOK,EAAeE,GAAG,CAACP,EAAAA,EAEpD,CAACK,EAAgBL,EAAI,CAC1B,sHQ2DKQ,EAALA,sqBPhBAC,GAlDA,SAAsB7E,CAUrB,CAAE,KAUmBa,EACAA,EAKLiE,EAGKjE,EACAA,EAbLiE,EAGKjE,EACAA,EAKLiE,EAGKjE,EACAA,EAQLkE,EArCflE,EADoBb,EACpBa,UAAAA,CACAmE,EAFoBhF,EAEpBgF,WAAAA,CACAD,EAHoB/E,EAGpB+E,mBAAAA,CACAD,EAJoB9E,EAIpB8E,KAAAA,CAOM9D,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CAER,MACE,GAAAiE,EAAAjG,GAAA,EAAC2C,EAAAA,EAAUA,CAAAA,CAACC,IAAI,cACd,GAAAqD,EAAAvD,IAAA,EAACQ,EAAAA,EAAOA,CAAAA,CAACgD,QAAQ,eAAetD,IAAI,gBAClC,GAAAqD,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACuD,QAAQ,mBAClB,GAAAD,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEwC,IAAqB,GAArBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOK,aAAa,CAAC,KAArBL,KAAAA,IAAAA,EAAAA,EAA2B,GAAG,GACrC,GAAAG,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,OAAOC,GAAI,WACvBrE,EAAE,wBAAyB,CAC1BsE,OAAQzE,IAAoC,GAApCA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,EAAAA,EAAwC,EAAE,CAClD2E,OAAQ3E,IAAoC,GAApCA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,EAAAA,EAAwC,EAAE,QAIxD,GAAAoE,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACuD,QAAQ,mBAClB,GAAAD,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEwC,IAA+B,GAA/BA,CAAAA,EAAAA,IAAa,GAAbA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOW,MAAM,KAAbX,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiBK,aAAAA,CAAc,KAA/BL,KAAAA,IAAAA,EAAAA,EAAqC,GAAG,GAC/C,GAAAG,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,OAAOC,GAAI,WACvBrE,EAAE,wBAAyB,CAC1BsE,OAAQzE,IAAoC,GAApCA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,EAAAA,EAAwC,EAAE,CAClD2E,OAAQ3E,IAAoC,GAApCA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,EAAAA,EAAwC,EAAE,QAIxD,GAAAoE,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACuD,QAAQ,mBAClB,GAAAD,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,WACF0C,GAAeF,EACZ,MACA,IAAoF,GAAnFC,CAAAA,EAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAqBW,QAAQ,CAACC,EAAAA,EAAQA,CAAAA,EAAI,QAAUZ,MAAAA,EAAAA,KAAAA,EAAAA,EAAqBa,OAAO,CAAC,EAAE,GAAnFb,KAAAA,IAAAA,EAAAA,EAAwF,GAAG,CAAC,OAGnG,GAAAE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,OAAOC,GAAI,WACvBrE,EAAE,kCAMf,uRC5CA,IAAM6E,GAAM9F,CAAAA,EAAAA,GAAAA,EAAAA,EAAO+F,GAAAA,EAAGA,EAAAA,UAAAA,CAAAA,qCAMhBC,GAAY,SAAAC,CAAA,CAChB,SADmBC,OAAAA,CAAUC,EAAAF,EAAGG,MAAAA,CAAuBhH,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAApC8G,UAAaE,iBAChC,GAAAlB,EAAAvD,IAAA,EAAC0E,GAAAA,CAAGA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACC,MAAM,OAAOC,OAAO,OAAOC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCtH,GAAAA,WACrG,GAAA8F,EAAAvD,IAAA,EAACgF,IAAAA,CAAEC,OAAO,wCACR,GAAA1B,EAAAjG,GAAA,EAAC4H,SAAAA,CAAOC,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKP,KAAK,YACpC,GAAAvB,EAAAjG,GAAA,EAAC4H,SAAAA,CACCC,EAAE,IACFC,GAAG,KACHC,GAAG,KACHP,KAAK,cACLL,OAT0BA,KAAAA,IAAAA,EAAS,UAAAD,CAAA,CAUnCc,YAAY,KACZC,gBAAiB,QAAsBnE,MAAA,CAAdmD,IAXZA,CAAAA,KAAAA,IAAAA,EAAU,EAAAiB,CAAA,EAWgB,yBACvCC,UAAU,kCAGd,GAAAlC,EAAAjG,GAAA,EAACoI,OAAAA,UACC,GAAAnC,EAAAvD,IAAA,EAACiF,SAAAA,CACCU,GAAG,wBACHC,EAAG,EACHC,EAAG,EACHlB,MAAO,GACPC,OAAQ,GACRkB,YAAY,iBACZC,0BAA0B,iBAE1B,GAAAxC,EAAAjG,GAAA,EAAC0I,UAAAA,CAAQC,aAAc,EAAGrE,OAAO,uBACjC,GAAA2B,EAAAjG,GAAA,EAAC4I,UAAAA,CAAQC,GAAG,gBAAgBC,IAAI,qBAAqBxE,OAAO,UAC5D,GAAA2B,EAAAjG,GAAA,EAAC+I,gBAAAA,CAAcF,GAAG,cAAcG,OAAO,4CAA4C1E,OAAO,cAC1F,GAAA2B,EAAAjG,GAAA,EAACiJ,WAAAA,CAASC,GAAI,KACd,GAAAjD,EAAAjG,GAAA,EAACmJ,cAAAA,CAAYL,IAAI,YAAYM,SAAS,aAAaC,GAAI,GAAIC,GAAI,IAC/D,GAAArD,EAAAjG,GAAA,EAAC+I,gBAAAA,CAAcC,OAAO,8CACtB,GAAA/C,EAAAjG,GAAA,EAAC4I,UAAAA,CAAQE,IAAI,QAAQxE,OAAO,4CAG7B,EAGDiF,GAA8C,SAAAvI,CAAA,CAAkB,KAAflB,EAAAA,EAAAA,QAAAA,CACrD,MACE,GAAAmG,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,OAAOoD,cAAc,YAAYC,KAAI,GAAC9F,MAAM,qBACxD7D,GAGP,EAEa4J,GAAmB,SAAA1I,CAAA,CAgB1B,KACAmG,EAhBJ1E,EAAAA,EAAAA,KAAAA,CACAwE,EAAAA,EAAAA,OAAAA,CACA0C,EAAAA,EAAAA,SAAAA,CACAC,EAAAA,EAAAA,SAAAA,CACAC,EAAAA,EAAAA,cAAAA,CACAC,EAAAA,EAAAA,cAAAA,CACAC,EAAAA,EAAAA,gBAAAA,CAgBA,OAJgB,MAAZ9C,GACFE,CAAAA,EAAS0C,EAAiB,UAAY,WAAW,EAIjD,GAAA5D,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,gBACd,GAAAqD,EAAAjG,GAAA,EAACuJ,GAAAA,UAAU9G,IACX,GAAAwD,EAAAvD,IAAA,EAACsH,GAAAA,CAAIA,CAAAA,WACF,KAAmB,IAAZ/C,GACN,GAAAhB,EAAAjG,GAAA,EAACiK,MAAAA,CAAIC,IAAKH,WACR,GAAA9D,EAAAjG,GAAA,EAAC+G,GAAAA,CAAUI,OAAQA,EAAQF,QAASA,EAASkD,GAAG,WAGpD,GAAAlE,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACyH,MAAO,CAAE/C,MAAO,MAAO,YAChCsC,GACC,GAAA1D,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAvD,IAAA,EAACQ,EAAAA,EAAOA,CAAAA,CAACN,IAAI,gBACX,GAAAqD,EAAAjG,GAAA,EAAC6G,GAAAA,CAAIyD,GAAG,YACR,GAAArE,EAAAjG,GAAA,EAACoD,GAAAA,CAAYA,CAAAA,CAAChB,SAAUuH,IACxB,GAAA1D,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEqG,MAAAA,EAAAA,KAAAA,EAAAA,EAAWpG,MAAM,MAE1B,GAAA0C,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEuG,GAAkB,SAI5BD,GACC,GAAA3D,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAvD,IAAA,EAACQ,EAAAA,EAAOA,CAAAA,CAACN,IAAI,gBACX,GAAAqD,EAAAjG,GAAA,EAAC6G,GAAAA,CAAIyD,GAAG,cACR,GAAArE,EAAAjG,GAAA,EAACoD,GAAAA,CAAYA,CAAAA,CAAChB,SAAUwH,IACxB,GAAA3D,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEsG,MAAAA,EAAAA,KAAAA,EAAAA,EAAWrG,MAAM,MAE1B,GAAA0C,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEwG,GAAkB,iBAOvC,EAYaS,GAA0B,SAAAvJ,CAAA,CAQH,KAqBnBa,EACCA,EAEEA,EACAA,EACAA,EAkBAA,EACJA,EAMIA,EACJA,EA3DdA,EAAAA,EAAAA,UAAAA,CACAkE,EAAAA,EAAAA,mBAAAA,CACAyE,EAAAA,EAAAA,eAAAA,CACA1E,EAAAA,EAAAA,KAAAA,CACA2E,EAAAA,EAAAA,eAAAA,CACAzE,EAAAA,EAAAA,WAAAA,CACAlG,EAAAA,EAAAA,QAAAA,CAEMkC,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACuC0I,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC7C1I,EAAE,mGAAoG,CACpG2I,SAAUF,EAAkB,GAC9B,IAHMG,EAAuCF,EAAvCE,OAAAA,CAASC,EAA8BH,EAA9BG,cAAAA,CAAgBC,EAAcJ,EAAdI,SAAAA,CAMjC,MACE,GAAA7E,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,iBACd,GAAAqD,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,gBACd,GAAAqD,EAAAjG,GAAA,EAACuJ,GAAAA,UAAUvH,EAAE,sBACb,GAAAiE,EAAAjG,GAAA,EAAC+K,EAAAA,EAAQA,CAAAA,UACP,GAAA9E,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAvD,IAAA,EAACQ,EAAAA,EAAOA,CAAAA,CAACN,IAAI,gBACX,GAAAqD,EAAAjG,GAAA,EAACgL,GAAAA,CAAkBA,CAAAA,CACjBC,UAAWpJ,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,CACvC2E,UAAWrJ,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,CACvClD,KAAM,KAER,GAAA4C,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAACK,MAAM,sBACT9B,CAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GACnC1B,CAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GACpC4H,CAAAA,EAAAA,EAAAA,CAAAA,EACEtJ,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CACpC1B,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CACpC1B,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BE,OAAO,OAI7C,GAAAkE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8H,GAAG,eAAOZ,MAAAA,EAAAA,KAAAA,EAAAA,EAAiBrE,aAAa,CAAC,aAIrD,GAAAF,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAjG,GAAA,EAACuJ,GAAAA,UAAUvH,EAAE,4BACb,GAAAiE,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,WAAE0C,EAAc,MAAQD,MAAAA,EAAAA,KAAAA,EAAAA,EAAqBI,aAAa,CAAC,EAAE,CAAC,UAErE,GAAAF,EAAAjG,GAAA,EAAC2C,EAAAA,EAAUA,CAAAA,CAACC,IAAI,eAAO9C,IACtB,CAAC,CAACgG,GACD,GAAAG,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,WACT,GAAAsD,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAjG,GAAA,EAACuJ,GAAAA,UAAUvH,EAAE,WACb,GAAAiE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UACF,KAAAQ,MAAA,CAAKjC,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CAAC,OACzC1B,MAAAA,CAD8CiE,MAAAA,EAAAA,KAAAA,EAAAA,EAAOK,aAAa,CAAC,GAAG,KAEvErC,MAAA,CADCjC,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,OAI1C,GAAA0C,EAAAjG,GAAA,EAACqK,EAAAA,EAAUA,CAAAA,CAACD,MAAO,CAAEiB,eAAgB,UAAW,WAC9C,GAAApF,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UACF,KAA+CwC,MAAAA,CAA1CjE,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CAAC,OACzC1B,MAAAA,CAD8CiE,MAAAA,EAAAA,KAAAA,EAAAA,EAAOW,MAAM,GAAGN,aAAa,CAAC,EAAE,CAAC,KAEhFrC,MAAA,CADCjC,IAA4B,GAA5BA,CAAAA,EAAAA,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,SAM7C,CAACyC,GACA,GAAAC,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAjG,GAAA,EAACuJ,GAAAA,UAAUvH,EAAE,wBACb,GAAAiE,EAAAvD,IAAA,EAAC4I,EAAAA,CAAWA,CAAAA,CAACpB,IAAKY,YAAYL,EAAkB,IAAI,OACnDI,GAAkBD,OAK7B,ECpFAW,GA7FI,SAAAvK,CAAA,CAkBE,KAjBJyB,EAAAA,EAAAA,KAAAA,CACAX,EAAAA,EAAAA,SAAAA,CACA0J,EAAAA,EAAAA,eAAAA,CACAC,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACA7F,EAAAA,EAAAA,KAAAA,CACAjE,EAAAA,EAAAA,UAAAA,CACAmE,EAAAA,EAAAA,WAAAA,CACAyE,EAAAA,EAAAA,eAAAA,CACAmB,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,qBAAAA,CACAC,EAAAA,EAAAA,KAAAA,CACA/F,EAAAA,EAAAA,mBAAAA,CACAyE,EAAAA,EAAAA,eAAAA,CACAuB,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,QAAAA,CAEMhK,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CAEJiF,EAAU,GAGd,GAAI+E,GAAaJ,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,EAAKqF,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,CAAE,CACpF,IACcqF,EAMAA,EAPRK,EAAkBL,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,CACnD2F,KAAUN,IAA+B,GAA/BA,CAAAA,EAAAA,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,IACzD,CAAC,CAGCgG,EAA4BC,CADLC,WAAWvG,MAAAA,EAAAA,KAAAA,EAAAA,EAAOK,aAAa,CAAC,KAAO,GACX8F,EAKzDhF,EAAUkF,EAA6BA,CAAAA,EAJfP,CAAAA,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,CACnD2F,KAAUN,IAA+B,GAA/BA,CAAAA,EAAAA,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,IACzD,CAAC,CAE8DmG,CACrE,CAAC,IAEKC,EAAcC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,KAcdZ,EAEAA,EAftB,MACE,GAAA3F,EAAAjG,GAAA,EAACuK,GAAuBA,CACtBE,gBAAiBA,EACjB5I,WAAYA,EACZ2I,gBAAiBA,EACjBzE,oBAAqBA,EACrBD,MAAOA,EACPE,YAAaA,WAEb,GAAAC,EAAAjG,GAAA,EAAC0J,GAAgBA,CACfjH,MAAOT,EAAE,SACTiF,QAASA,EACT0C,UAAW9H,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,CACvCsD,eAAgB+B,IAA+B,GAA/BA,CAAAA,EAAAA,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,GAC/DyD,UAAW/H,CAAU,CAAC0E,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,CACvCuD,eAAgB8B,IAA+B,GAA/BA,CAAAA,EAAAA,CAAa,CAACrF,GAAAA,CAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,MAIvE,EAAG,CAACsE,EAAiBxD,EAASpF,EAAY2I,EAAiBxE,EAAa4F,EAAe7F,EAAqBD,EAAO9D,EAAE,EAE/GyK,EAAcD,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,CACpC,MACE,GAAAvG,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAAC0G,MAAM,OAAOzG,QAASkL,EAAOY,GAAG,gBACrC1G,EAAchE,EAAE,wBAA0BA,EAAE,iBAAiB,EAGpE,EAAG,CAACgE,EAAa8F,EAAO9J,EAAE,EAEpB2K,EAAsBH,CAAAA,EAAAA,EAAAA,WAAAA,EAC1B,kBACEX,EACE,GAAA5F,EAAAjG,GAAA,EAAC4M,GAAAA,CAAuBA,CAAAA,CAAC9K,UAAWA,EAAW+K,QAAShB,IAExD,GAAA5F,EAAAjG,GAAA,EAAC8M,GAAAA,CAAwBA,CAAAA,CAACC,WAAYR,EAAaS,cAAeP,GACnE,EACH,CAAC3K,EAAW2K,EAAaF,EAAaV,EAAsB,EAG9D,MACE,GAAA5F,EAAAjG,GAAA,EAACiN,GAAAA,CAA4BA,CAAAA,CAC3BC,SAAU,CAAC,QAAU,QAAQ,CAC7BzK,MAAOA,EACPX,UAAWA,EACX0J,gBAAiBA,EACjBC,cAAeA,EACfM,cAAeA,EACfL,KAAMA,EACNyB,QAASR,EACThB,YAAaA,GAGnB,gDCsKAyB,GA1O0G,SAAApM,CAAA,CAsBpG,KAWYa,EACAA,EAGAA,EACAA,EArChBY,EAAAA,EAAAA,KAAAA,CACAX,EAAAA,EAAAA,SAAAA,CACA0J,EAAAA,EAAAA,eAAAA,CACAC,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACA7F,EAAAA,EAAAA,KAAAA,CACAjE,EAAAA,EAAAA,UAAAA,CACAwL,EAAAA,EAAAA,iBAAAA,CACAC,EAAAA,EAAAA,oBAAAA,CACA7C,EAAAA,EAAAA,eAAAA,CACAmB,EAAAA,EAAAA,aAAAA,CACAC,EAAAA,EAAAA,qBAAAA,CACAC,EAAAA,EAAAA,KAAAA,CACA/F,EAAAA,EAAAA,mBAAAA,CACAyE,EAAAA,EAAAA,eAAAA,CACA+C,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,cAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACAC,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,aAAAA,CAEM3L,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACFD,EAAc1B,CAAAA,EAAAA,GAAAA,CAAAA,IAAZ0B,OAAAA,CAEF6L,EAAkBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAeN,EAAKO,cAAc,EACpDC,EAAuBnC,CAAa,CAACyB,EAAkB,CACvDW,EAAwBpC,CAAa,CAAC0B,EAAqB,CAElB5C,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC7CqD,GAAwB,CAACC,EACrBhM,EAAE,kGAAmG,CACnGiM,OAAQpM,IAA6B,GAA7BA,CAAAA,EAAAA,CAAU,CAACwL,EAAkB,GAA7BxL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+B0B,MAAM,CAC7C2K,OAAQrM,IAAgC,GAAhCA,CAAAA,EAAAA,CAAU,CAACyL,EAAqB,GAAhCzL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkC0B,MAAM,GAElDvB,EAAE,oGAAqG,CACrGiM,OAAQpM,IAA6B,GAA7BA,CAAAA,EAAAA,CAAU,CAACwL,EAAkB,GAA7BxL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+B0B,MAAM,CAC7C2K,OAAQrM,IAAgC,GAAhCA,CAAAA,EAAAA,CAAU,CAACyL,EAAqB,GAAhCzL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkC0B,MAAM,EAChD,CACN,CACE4K,UAAW,YACb,GAZMrD,EAAuCJ,EAAvCI,SAAAA,CAAWF,EAA4BF,EAA5BE,OAAAA,CAASC,EAAmBH,EAAnBG,cAAAA,CAgB1BuD,EAAA,GAAAC,EAAAnS,CAAA,KACE0R,GACApD,GAEF8D,EAAAA,EAAAA,CAAAA,kBAAuB,CAACV,EAAgBW,QAAQ,CAAE/D,EAAgB+D,QAAQ,EACtE,CACEhB,EAAKiB,iBAAiB,CAACjB,EAAKU,MAAM,CAAEL,EAAiBpD,EAAiB,IACtE+C,EAAKiB,iBAAiB,CAACjB,EAAKW,MAAM,CAAEN,EAAiBpD,EAAiB,IACvE,CACD,CAACiE,KAAAA,EAAWA,KAAAA,EAAU,IAVrBC,EACLN,CAAA,IADsBO,EACtBP,CAAA,IAWIQ,EAAoBlJ,CAAAA,EAAAA,EAAAA,OAAAA,EACxB,kBACE8H,GACAqB,EAAAA,EAAAA,CAAAA,aAA4B,CAC1BxM,CAAAA,EAAAA,GAAAA,EAAAA,EAAgBR,CAAU,CAACwL,EAAkB,CAAEtL,GAC/CyL,EAAesB,YAAY,CAAClQ,QAAQ,KAExC,CAACmD,EAASF,EAAY2L,EAAgBH,EAAkB,EAGpD0B,EAAqBrJ,CAAAA,EAAAA,EAAAA,OAAAA,EACzB,WACE8H,MAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBwB,aAAa,GAC7BH,EAAAA,EAAAA,CAAAA,aAA4B,CAC1BxM,CAAAA,EAAAA,GAAAA,EAAAA,EAAgBR,CAAU,CAACyL,EAAqB,CAAEvL,GAClDyL,EAAewB,aAAa,CAACpQ,QAAQ,KAEzC,CAACmD,EAASF,EAAY2L,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBwB,aAAa,CAAE1B,EAAqB,EAGtE2B,EAAevJ,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,CACjC,OAAOqI,GAAwBC,EAhFsBkB,KAAKC,GAAG,CAACD,KAAKE,GAAG,CAmFhE,CAACrB,EAAqBsB,OAAO,GAC3B,CAACrB,EAAsBqB,OAAO,GAC7B,EAAC9B,EAAK+B,OAAO,CAACtB,EAAsB5L,QAAQ,CAACmN,OAAO,EAAEpJ,aAAa,IAClE,CAAC4H,EAAqBsB,OAAO,GAAK,CAACrB,EAAsBqB,OAAO,IACpE,KACA,KAEFtB,GAAwB,CAACC,EACzB,EACAS,KAAAA,CAAS,EACZ,CAAClB,EAAMQ,EAAsBC,EAAsB,EAEhDwB,EAAiB9J,CAAAA,EAAAA,EAAAA,OAAAA,EACrB,eAAO+J,EAAA,OAAAA,EAAA,GACL,GAAAC,EAAAxT,CAAA,EADKuT,EACJpC,EACCuB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAmBxM,QAAQ,GAAImL,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMU,MAAM,EACvCV,EAAKU,MAAM,CAAC0B,MAAM,CAACf,EAAkBxM,QAAQ,EAC3CsM,EACAC,CAAe,CACjBF,KAAAA,CAAS,EACf,GAAAiB,EAAAxT,CAAA,EAPKuT,EAOJnC,EACCyB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAoB3M,QAAQ,GAAImL,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMW,MAAM,EACxCX,EAAKW,MAAM,CAACyB,MAAM,CAACZ,EAAmB3M,QAAQ,EAC5CuM,EACAD,CAAe,CACjBD,KAAAA,CAAS,EAZVgB,CAAA,EAcP,CACElC,EAAKU,MAAM,CACXV,EAAKW,MAAM,CACXU,MAAAA,EAAAA,KAAAA,EAAAA,EAAmBxM,QAAQ,CAC3B2M,MAAAA,EAAAA,KAAAA,EAAAA,EAAoB3M,QAAQ,CAC5BsM,EACAC,EACArB,EACAD,EACD,EAGGd,EAAcC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,KA8CZgD,EAEAA,EA/CxB,MACE,GAAAvJ,EAAAvD,IAAA,EAAC6H,GAAuBA,CACtBE,gBAAiBA,EACjB5I,WAAYA,EACZ2I,gBAAiBA,EACjBzE,oBAAqBA,EACrBD,MAAOA,YAEP,GAAAG,EAAAjG,GAAA,EAAC0J,GAAgBA,CACfjH,MAAOT,EAAE,SACTiF,QAASgI,EACTtF,UAAWoE,EAAuBlM,CAAU,CAACwL,EAAkB,CAAGoB,KAAAA,CAAS,CAC3E5E,eAAgBkE,MAAAA,EAAAA,KAAAA,EAAAA,EAAsB5H,aAAa,CAAC,GACpDyD,UAAWoE,EAAwBnM,CAAU,CAACyL,EAAqB,CAAGmB,KAAAA,CAAS,CAC/E3E,eAAgBkE,MAAAA,EAAAA,KAAAA,EAAAA,EAAuB7H,aAAa,CAAC,KAEtD4I,GACCH,GACA/M,CAAU,CAACwL,EAAkB,EAC7BxL,CAAU,CAACyL,EAAqB,EAC9B,GAAArH,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACuD,QAAQ,SAAStD,IAAI,iBAC/B,GAAAqD,EAAAjG,GAAA,EAAC4P,GAAAA,CAAaA,CAAAA,CAACjM,MAAM,eACrB,GAAAsC,EAAAvD,IAAA,EAACQ,EAAAA,EAAOA,CAAAA,CAACN,IAAI,MAAMsD,QAAQ,mBACzB,GAAAD,EAAAvD,IAAA,EAACmN,EAAAA,EAAQA,CAAAA,CAACjN,IAAI,gBACZ,GAAAqD,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEsL,MAAAA,EAAAA,KAAAA,EAAAA,EAAmBzI,aAAa,CAAC,KACxC,GAAAF,EAAAjG,GAAA,EAACoD,GAAAA,CAAYA,CAAAA,CAAChB,SAAUP,CAAU,CAACwL,EAAkB,GACrD,GAAApH,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEzB,CAAU,CAACwL,EAAkB,CAAC9J,MAAM,MAE7C,GAAA0C,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEtB,EAAE,QACT,GAAAiE,EAAAvD,IAAA,EAACmN,EAAAA,EAAQA,CAAAA,CAACjN,IAAI,gBACZ,GAAAqD,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEyL,MAAAA,EAAAA,KAAAA,EAAAA,EAAoB5I,aAAa,CAAC,KACzC,GAAAF,EAAAjG,GAAA,EAACoD,GAAAA,CAAYA,CAAAA,CAAChB,SAAUP,CAAU,CAACyL,EAAqB,GACxD,GAAArH,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEzB,CAAU,CAACyL,EAAqB,CAAC/J,MAAM,SAGlD,GAAA0C,EAAAjG,GAAA,EAAC4P,GAAAA,CAAaA,CAAAA,CAACjM,MAAM,kBAG3B,GAAAsC,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,gBACbiI,GAAkBD,EACnB,GAAA3E,EAAAjG,GAAA,EAAC0J,GAAgBA,CACfK,iBAAkBe,EAClBrI,MAAOT,EAAE,UACTiF,QAAS,GACT0C,UAAW9H,CAAU,CAACwL,EAAkB,CACxCxD,eAAgB2F,MAAAA,EAAAA,KAAAA,EAAAA,IAAmC,GAAnCA,CAAAA,EAAAA,CAAgB,CAACnC,EAAkB,GAAnCmC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAqCrJ,aAAAA,CAAc,GACnEyD,UAAW/H,CAAU,CAACyL,EAAqB,CAC3CxD,eAAgB0F,MAAAA,EAAAA,KAAAA,EAAAA,IAAsC,GAAtCA,CAAAA,EAAAA,CAAgB,CAAClC,EAAqB,GAAtCkC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwCrJ,aAAAA,CAAc,UAKhF,EAAG,CACDsE,EACA5I,EACA2I,EACAzE,EACAD,EACA9D,EACAiN,EACAlB,EACAV,EACAW,EACAV,EACAyB,EACAH,EACAhE,EACAC,EACAC,EACA0E,EACD,EAEK/C,GAAcD,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,CACpC,MACE,GAAAvG,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAAC0G,MAAM,OAAOzG,QAASkL,EAAOY,GAAG,gBACrC1K,EAAE,mBAGT,EAAG,CAAC8J,EAAO9J,EAAE,EAEP2K,GAAsBH,CAAAA,EAAAA,EAAAA,WAAAA,EAC1B,kBACEX,EACE,GAAA5F,EAAAvD,IAAA,EAAAuD,EAAA6J,QAAA,YACE,GAAA7J,EAAAjG,GAAA,EAAC+P,GAAAA,CAAgBA,CAAAA,CACfC,cAAe,CAACvC,EAChBC,QAASA,EACTC,cAAeA,EACfsC,eAAgBnO,IAElB,GAAAmE,EAAAjG,GAAA,EAAC4M,GAAAA,CAAuBA,CAAAA,CAAC9K,UAAWA,EAAW+K,QAAShB,OAG1D,GAAA5F,EAAAjG,GAAA,EAAC8M,GAAAA,CAAwBA,CAAAA,CAACC,WAAYR,EAAaS,cAAeP,IACnE,EACH,CAACZ,EAAuB4B,EAAaC,EAASC,EAAe7L,EAAWyK,EAAaE,GAAY,EAGnG,MACE,GAAAxG,EAAAjG,GAAA,EAACiN,GAAAA,CAA4BA,CAAAA,CAC3BC,SAAU,CAAC,QAAU,QAAQ,CAC7BzK,MAAOA,EACPX,UAAWA,EACX0J,gBAAiBA,EACjBC,cAAeA,EACfM,cAAewB,MAAAA,EAAAA,KAAAA,EAAAA,EAAMO,cAAc,CACnCpC,KAAMA,EACNyB,QAASR,GACThB,YAAaA,GAGnB,0zBClRA,IAAMuE,GAAiBnP,GAAAA,EAAAA,CAAAA,GAAAA,CAAAA,UAAU,qCAOjB,SAAAC,CAAA,SAAeC,EAAZA,KAAAA,CAAkBkP,OAAO,CAACC,KAAK,EAC5B,SAAApP,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACmP,cAAc,EAEhD,SAAArP,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACoP,KAAK,GAI3CC,GAAoBxP,CAAAA,EAAAA,GAAAA,EAAAA,EAAOJ,EAAAA,CAAMA,EAAAA,UAAAA,CAAAA,oCAIvB,SAAAK,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACoP,KAAK,EAO7C,SAAAtP,CAAA,SAAeC,EAAZA,KAAAA,CAAkBuP,YAAY,CAACC,EAAE,GAgB3BC,GAAiB,SAAA1J,CAAA,CAQH,KAqDQ2J,EA5DjCC,EAAAA,EAAAA,gBAAAA,CACAC,EAAAA,EAAAA,gBAAAA,CACAC,EAAAA,EAAAA,qBAAAA,CACAC,EAAAA,EAAAA,eAAAA,CACAC,EAAAA,EAAAA,eAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACG9Q,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CANHyQ,mBACAC,mBACAC,wBACAC,kBACAC,kBACAC,gBAGQhO,EAAqBiO,CAAAA,EAAAA,GAAAA,EAAAA,IAArBjO,OAAAA,CAEF0N,EAA0BQ,CAAAA,EAAAA,GAAAA,EAAAA,EAC9BC,MAAAA,EAAAA,EAAW3C,KAAAA,CAAS,CACpB,CAACwC,GAAeJ,EAAmBA,EAAmBpC,KAAAA,CAAS,EAG3DzM,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CAEDqP,EAA0BpN,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC/B,GAAAgC,EAAAjG,GAAA,EAACsR,GAAAA,CAAmBA,CAAAA,CAClBV,iBAAkBA,EAClBC,iBAAkBA,EAClBC,sBAAuBA,EACvBC,gBAAiBA,EACjBC,gBAAiBA,OANY/M,CAAAA,EAAAA,CAU3B6B,EAAQyL,CAAAA,EAAAA,GAAAA,EAAAA,EAAaZ,GAA2BE,EAAmBA,EAAmBpC,KAAAA,CAAS,EAC/F+C,EAASb,GAA2B7K,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAO2L,KAAK,CAACd,EAAAA,EAEvD,MACE,GAAA1K,EAAAvD,IAAA,EAACoE,GAAAA,EAAGA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACO,MAAM,QAAWlH,GAAAA,WACpB,GAAA8F,EAAAvD,IAAA,EAAC6N,GAAAA,CAAkBmB,EAAG,EAAG9Q,QAASyQ,YAChC,GAAApL,EAAAjG,GAAA,EAACkQ,GAAAA,UACC,GAAAjK,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC+E,GAAG,OAAO1E,MAAO,EAA6B8K,KAAAA,EAAT,MAAkB,UAC1D,EAGC,GAAAxI,EAAAvD,IAAA,EAACsH,GAAAA,CAAIA,CAAAA,CAAC2H,WAAW,SAAStG,eAAe,0BACvC,GAAApF,EAAAjG,GAAA,EAACoD,GAAAA,CAAYA,CAAAA,CAAChB,SAAUyO,EAAkBxN,KAAK,OAAO+G,MAAO,CAAEwH,YAAa,KAAM,IAClF,GAAA3L,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC+E,GAAG,OAAOoB,KAAI,YACjBoH,GAAoBA,EAAiBtN,MAAM,EAAIsN,EAAiBtN,MAAM,CAACsO,MAAM,CAAG,GAC7E,GAA4ChB,MAAAA,CAAzCA,EAAiBtN,MAAM,CAACuO,KAAK,CAAC,EAAG,GAAG,OAGrChO,MAAA,CAH0C+M,EAAiBtN,MAAM,CAACuO,KAAK,CACvEjB,EAAiBtN,MAAM,CAACsO,MAAM,CAAG,EACjChB,EAAiBtN,MAAM,CAACsO,MAAM,GAEhChB,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBtN,MAAM,MAVhC,GAAA0C,EAAAjG,GAAA,EAAAiG,EAAA6J,QAAA,WAAG9N,EAAE,WAaN,KAGL,GAAAiE,EAAAjG,GAAA,EAAC+R,GAAAA,CAAiBA,CAAAA,CAACpO,MAAM,OAAOqO,UAAU,iBAE3CZ,GAAW,CAAC,CAACP,GAAoB,CAACI,GACjC,GAAAhL,EAAAvD,IAAA,EAACoE,GAAAA,EAAGA,CAAAA,WACF,GAAAb,EAAAvD,IAAA,EAACQ,EAAAA,EAAOA,CAAAA,CAACgD,QAAQ,gBAAgBtD,IAAI,gBACnC,GAAAqD,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACK,MAAM,aAAayC,SAAS,iBAC/BpE,EAAE,WAAW,OAEhB,GAAAiE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,gBAAQuK,IAAuC,GAAvCA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAyBxK,aAAa,CAAC,KAAvCwK,KAAAA,IAAAA,EAAAA,EAA6C3O,EAAE,UAAU,MAElF,GAAAiE,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAjG,GAAA,EAACiK,MAAAA,CAAAA,GACAgI,OAAOC,QAAQ,CAAC,CAACV,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQnC,OAAO,MAC/B,GAAApJ,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,OAAOzC,MAAM,uBAAa,KACpCwO,CAAAA,EAAAA,GAAAA,EAAAA,EAAa,CAACX,EAAOnC,OAAO,gBAQ/C,sCCvHa+C,GAAyB,UAAM,CAC1C,IAKEC,EAA0BC,EAA1BD,EALIE,EAASC,CAAAA,EAAAA,EAAAA,CAAAA,IACTC,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACT3Q,EAAc1B,CAAAA,EAAAA,GAAAA,CAAAA,IAAZ0B,OAAAA,CAC2B0Q,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAOE,KAAK,CAACvQ,QAAQ,EAAI,CAC1DmQ,EAAOhP,MAAM,CACb8O,IAAsB,GAAtBA,CAAAA,EAAAA,IAAa,GAAbA,CAAAA,EAAAA,EAAAA,EAAI,CAACtQ,EAAQ,GAAbsQ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAepP,OAAO,GAAtBoP,KAAAA,IAAAA,EAAAA,EAA0BC,IAAa,GAAbA,CAAAA,EAAAA,EAAAA,EAAI,CAACvQ,EAAQ,GAAbuQ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAerP,OAAO,CACjD,IAHM2P,EAA4BH,CAAAA,CAAAA,EAAAA,CAAfI,EAAeJ,CAAAA,CAAAA,EAAAA,CAkCnC,MAAO,CACLK,sBA9B4BtG,CAAAA,EAAAA,EAAAA,WAAAA,EAC5B,SAACuG,CAAAA,CAAyB,CACxB,IAAMC,EAAiBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAWF,EAC9BC,CAAAA,IAAmBH,EACrBJ,EAAOS,OAAO,CAAC,QAAuBN,MAAAA,CAAfC,EAAY,KAAe/O,MAAA,CAAZ8O,GAAenE,KAAAA,EAAW,CAAE0E,QAAS,EAAK,GACvEN,EACTJ,EAAOS,OAAO,CAAC,QAA0BL,MAAAA,CAAlBG,EAAe,KAAelP,MAAA,CAAZ+O,GAAepE,KAAAA,EAAW,CAAE0E,QAAS,EAAK,GAEnFV,EAAOS,OAAO,CAAC,QAAuBpP,MAAA,CAAfkP,GAAkBvE,KAAAA,EAAW,CAAE0E,QAAS,EAAK,EAExE,EACA,CAACN,EAAaJ,EAAQG,EAAY,EAoBlCQ,sBAlB4B5G,CAAAA,EAAAA,EAAAA,WAAAA,EAC5B,SAAC6G,CAAAA,CAAyB,CACxB,IAAMC,EAAiBL,CAAAA,EAAAA,GAAAA,CAAAA,EAAWI,EAC9BT,CAAAA,IAAgBU,EACdT,EACFJ,EAAOS,OAAO,CAAC,QAAuBI,MAAAA,CAAfT,EAAY,KAAkB/O,MAAA,CAAfwP,GAAkB7E,KAAAA,EAAW,CAAE0E,QAAS,EAAK,GAEnFV,EAAOS,OAAO,CAAC,QAAuBpP,MAAA,CAAfwP,GAAkB7E,KAAAA,EAAW,CAAE0E,QAAS,EAAK,GAGtEV,EAAOS,OAAO,CAAC,QAAwCI,MAAAA,CAAhCV,GAAeL,EAAOhP,MAAM,CAAC,KAAkBO,MAAA,CAAfwP,GAAkB7E,KAAAA,EAAW,CAAE0E,QAAS,EAAK,EAExG,EACA,CAACP,EAAaH,EAAQI,EAAaN,EAAO,CAM5C,CACF,ECnCO,SAASgB,GAAWvS,CAU1B,CAAE,KATD2I,EADyB3I,EACzB2I,SAAAA,CACAC,EAFyB5I,EAEzB4I,SAAAA,CACA4J,EAHyBxS,EAGzBwS,KAAAA,CACAC,EAJyBzS,EAIzByS,MAAAA,CAOMrC,EAAcsC,CAAAA,EAAAA,EAAAA,CAAAA,IAAZtC,OAAAA,CACFpP,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACF2R,EAAU,CAACH,EACwCpB,EAAAA,KAAjDU,EAAiDV,EAAjDU,qBAAAA,CAAuBM,EAA0BhB,EAA1BgB,qBAAAA,CACtB7F,EAAQqG,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAQjK,EAAWC,GAAAA,EAAnBgK,CAAAA,EAAAA,CACXC,EAAWC,CAAAA,EAAAA,EAAAA,CAAAA,EAASvG,GACqB7C,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC7C1I,EAAG,4EACH,CACEmM,UAAW,QACb,GAJMrD,EAAuCJ,EAAvCI,SAAAA,CAAWF,EAA4BF,EAA5BE,OAAAA,CAASC,EAAmBH,EAAnBG,cAAAA,CAO5B,MACE,GAAA5E,EAAAvD,IAAA,EAAAuD,EAAA6J,QAAA,YACE,GAAA7J,EAAAjG,GAAA,EAAC+T,EAAAA,CAASA,CAAAA,CACRtR,MAAOT,EAAE,iBACTgS,SAAUhS,EAAE,iDACZiS,OAAQjS,EACN,2IAEFkS,OAAO,eAET,GAAAjO,EAAAjG,GAAA,EAACmU,EAAAA,CAAQA,CAAAA,UACP,GAAAlO,EAAAvD,IAAA,EAACoE,GAAAA,EAAGA,CAAAA,WACF,GAAAb,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAACkG,cAAc,YAAY7F,MAAM,YAAY8F,KAAI,GAAC/F,MAAK,GAAC0Q,GAAG,gBAC7DpS,EAAE,yBAEL,GAAAiE,EAAAvD,IAAA,EAAC2R,GAAAA,CAAOA,CAAAA,CAACzR,IAAI,gBACX,GAAAqD,EAAAjG,GAAA,EAAC0Q,GAAcA,CACbrI,GAAG,8BACHwI,iBAAkBlH,EAClBiH,iBAAkBkC,EAClB/B,gBAAe,GACfC,gBAAiBsD,GAAAA,EAAAA,CAAAA,SAAyB,GAE5C,GAAArO,EAAAjG,GAAA,EAACuU,EAAAA,CAAOA,CAAAA,CAAC5Q,MAAM,eACf,GAAAsC,EAAAjG,GAAA,EAAC0Q,GAAcA,CACbrI,GAAG,8BACHwI,iBAAkBjH,EAClBgH,iBAAkBwC,EAClBrC,gBAAe,GACfC,gBAAiBsD,GAAAA,EAAAA,CAAAA,SAAyB,MAG7C/G,GAAQsG,GACP,GAAA5N,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,CAACqC,GAAG,iBACb,GAAAzG,EAAAjG,GAAA,EAACsL,EAAAA,CAAWA,CAAAA,CAACpB,IAAKY,EAAWrB,KAAI,GAACrD,SAAS,OAAOzC,MAAM,qBACrD3B,EAAE,mBAEJ6I,GAAkBD,EACnB,GAAA3E,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAAC9F,MAAM,oBACd6Q,CAAAA,EAAAA,GAAAA,CAAAA,EAAaX,EAASY,OAAO,EAAE,eAM1C,GAAAxO,EAAAjG,GAAA,EAAC0U,GAAAA,CAAUA,CAAAA,UACR,EAGC,GAAAzO,EAAAjG,GAAA,EAACE,EAAAA,CAAYA,CAAAA,CACXyU,YAAU,mBACVtN,MAAM,OACNzH,QAAS,EAAsB,UAAX,QAAoB,CACxCgB,QAAS6S,EACT5T,SAAU,CAAC8T,WAEVH,MAAAA,EAAAA,EAASxR,EAAE,gBAAgB,GAT9B,GAAAiE,EAAAjG,GAAA,EAAC4U,GAAAA,CAAmBA,CAAAA,CAACvN,MAAM,QAW5B,KAIT,yCCvBe,SAASwN,GAAa7T,CAAwB,CAAE,KAiEjB8T,EACAA,EAgL7BlJ,EACA/J,EACA+J,EACA/J,EAGA+J,EACA/J,EACA+J,GACA/J,GAqQDA,GAAwCA,GAkCtBiT,GAuCAA,GAqCCjT,GAOwBA,GAGzBA,GACAA,GAUkBA,GAsBSA,GAMrBA,GACAA,GAIFA,GACAA,GAuF8BA,GAETA,GAWSA,GAETA,GAlpBH+J,GAyHvCA,GACA/J,GACA+J,GACA/J,GAGA+J,GACA/J,GACA+J,GACA/J,GA3PsB8H,GAAF3I,EAAE2I,SAAAA,CAAWC,GAAb5I,EAAa4I,SAAAA,CAC1C6I,GAASC,CAAAA,EAAAA,EAAAA,SAAAA,IAC8BgB,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,IAArCtC,GAAqCsC,GAArCtC,OAAAA,CAASrP,GAA4B2R,GAA5B3R,OAAAA,CAAS3B,GAAmBsT,GAAnBtT,cAAAA,CAEpB2U,GAAUC,CAAAA,EAAAA,GAAAA,EAAAA,IACTtH,GAAWuH,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,IAAiBA,EAAjBA,CAAAA,EAAAA,CACZC,GAAaC,CAAAA,EAAAA,GAAAA,EAAAA,IACbC,GAAaC,CAAAA,EAAAA,EAAAA,EAAAA,EAActT,IAEmBuT,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAAI,GAA1DC,GAA6CD,EAAAA,CAAAA,EAAAA,CAAzBE,GAAyBF,EAAAA,CAAAA,EAAAA,CAE1BA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAS1P,EAAM6P,MAAM,KAAxCC,GAAmBJ,EAAAA,CAAAA,EAAAA,CAAZK,GAAYL,EAAAA,CAAAA,EAAAA,CAEpBtT,GAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACF4T,GAAWC,CAAAA,EAAAA,GAAAA,EAAAA,IAEjBC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CACY,MAAtBrD,GAAOE,KAAK,CAACoD,IAAI,EACnBJ,GAAS/P,EAAMoQ,GAAG,CAEtB,EAAG,CAACvD,GAAOE,KAAK,CAAC,EAEjB,IAAMsD,GAAgBvQ,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,iBAAM,CAAC,CAACgI,IAAW6H,IAAoB,CAAC7H,GAAS6H,GAAmB,EAGxCW,GAAAA,CAAAA,EAAAA,GAAAA,EAAAA,IAAlDC,GAAkDD,GAAlDC,gBAAAA,CAAkBC,GAAgCF,GAAhCE,UAAAA,CAAYC,GAAoBH,GAApBG,eAAAA,CAclCC,GAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAmB3M,MAAAA,GAAAA,GAAa8E,KAAAA,CAAS,CAAE7E,MAAAA,GAAAA,GAAa6E,KAAAA,CAAS,EAZnE8H,GAYED,GAZFC,cAAAA,CACA1U,GAWEyU,GAXFzU,UAAAA,CACA0L,GAUE+I,GAVF/I,IAAAA,CACAiJ,GASEF,GATFE,SAAAA,CACA1B,GAQEwB,GARFxB,gBAAAA,CACAlJ,GAOE0K,GAPF1K,aAAAA,CACA9F,GAMEwQ,GANFxQ,KAAAA,CACAE,GAKEsQ,GALFtQ,WAAAA,CACAwE,GAIE8L,GAJF9L,eAAAA,CACAzE,GAGEuQ,GAHFvQ,mBAAAA,CACAyN,GAEE8C,GAFF9C,KAAAA,CACAiD,GACEH,GADFG,QAAAA,CAGI5C,GAAWC,CAAAA,EAAAA,EAAAA,CAAAA,EAASvG,IACqB7C,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC7C1I,GAAG,4EACH,CACEmM,UAAW,QACb,GAJMrD,GAAuCJ,GAAvCI,SAAAA,CAAWF,GAA4BF,GAA5BE,OAAAA,CAASC,GAAmBH,GAAnBG,cAAAA,CAOa6L,GAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAsB1Q,IAAvD2Q,GAAiCD,GAAjCC,aAAAA,CAAeC,GAAkBF,GAAlBE,aAAAA,CAGuDtB,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAI3E,CACD7J,cAAe,GACfI,sBAAuB4C,KAAAA,EACvBoI,OAAQpI,KAAAA,CACV,MAAAqI,GAR8ExB,EAAAA,CAAAA,EAAAA,CAArE7J,GAAAA,GAAAA,aAAAA,CAAeI,GAAAA,GAAAA,qBAAAA,CAAuBgL,GAAAA,GAAAA,MAAAA,CAAUE,GAAqBzB,EAAAA,CAAAA,EAAAA,CAWhCA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAAI,GAApD0B,GAAuC1B,EAAAA,CAAAA,EAAAA,CAAtB2B,GAAsB3B,EAAAA,CAAAA,EAAAA,CACAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAAI,GAApD4B,GAAuC5B,EAAAA,CAAAA,EAAAA,CAAtB6B,GAAsB7B,EAAAA,CAAAA,EAAAA,CACxC8B,GAAmBJ,IAAmBlC,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,IAAoC,GAApCA,CAAAA,EAAAA,EAAkB,CAACvO,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAApCuO,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsCuC,WAAAA,CAAY,IACxFC,GAAmBJ,IAAmBpC,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,IAAoC,GAApCA,CAAAA,EAAAA,EAAkB,CAACvO,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAApCuO,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsCuC,WAAAA,CAAY,IAGxFE,GAAWpS,CAAAA,EAAAA,GAAAA,CAAAA,IACVsF,GAAmB+M,QAAAA,CAAAA,EAAAA,GAAAA,EAAAA,IAAwBA,EAAxBA,CAAAA,EAAAA,CAGpBC,GAA2D,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAEA,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAACmR,MAAM,CAC1G,SAACC,CAAAA,CAAaC,CAAAA,CAAU,CACtB,MAAO,GAAAC,EAAA3b,CAAA,KAAA4b,EAAA5b,CAAA,KACFyb,GACH,GAAAjI,EAAAxT,CAAA,KAAC0b,EAAQG,CAAAA,EAAAA,GAAAA,CAAAA,EAAejD,EAAgB,CAAC8C,EAAM,GAEnD,EACA,CAAC,GAGGI,GAAStS,CAAAA,EAAAA,EAAAA,OAAAA,EACb,iBACE,CAAC,CAACuQ,IACF,CAACjQ,IACDiS,EAAAA,CAAAA,CAAAA,QAAoB,CAAClW,KACrB,CACEwL,CAAAA,IAASe,EAAAA,EAAAA,CAAAA,QAAa,CAACf,GAAK2K,QAAQ,CAAC3J,QAAQ,CAAE4J,EAAAA,EAAiBA,GAC/D5K,IAAQe,EAAAA,EAAAA,CAAAA,QAAa,CAACf,GAAK6K,QAAQ,CAAC7J,QAAQ,CAAE4J,EAAAA,EAAiBA,CAAAA,GAEpE,CAACpW,GAASiE,GAAauH,GAAM0I,GAAc,EAGY7D,GAAAA,KAAjDU,GAAiDV,GAAjDU,qBAAAA,CAAuBM,GAA0BhB,GAA1BgB,qBAAAA,CAEoBiF,GAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAS,CAC1D9K,KAAAA,GACAyK,OAAAA,GACArO,UAAAA,GACAC,UAAAA,GACAkL,iBAAAA,GACAsC,iBAAAA,GACAE,iBAAAA,GACAG,WAAAA,EACF,GATQa,GAA2CD,GAA3CC,eAAAA,CAAiB7K,GAA0B4K,GAA1B5K,WAAAA,CAAgB8K,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAUF,GAAAA,CAA3CC,kBAAiB7K,gBAWnB7B,GAAgBoM,GAASO,GAAM3M,aAAa,CAAG4M,EAAiB,CAEhEC,GAAmBT,IAAU,CAACO,GAAMG,SAAS,CAG7CC,GAAmBjT,CAAAA,EAAAA,EAAAA,OAAAA,EACvB,eAOoDkG,EAP7C6D,EAAA,OAAAA,EAAA,GACL,GAAAC,EAAAxT,CAAA,EADKuT,EACJ0G,GACC6B,CAAAA,IACC7B,CAAAA,KAAsB5P,EAAAA,EAAAA,CAAAA,UAAgB,EAAK6Q,EAAAA,GACzCjB,CAAAA,KAAqB5P,EAAAA,EAAAA,CAAAA,UAAgB,EAAK+Q,EAAAA,EAEzClB,GADA,EACU,EAChB,GAAA1G,EAAAxT,CAAA,EAPKuT,EAOJ8G,GAAiBvQ,GAAcqQ,GAAkBzK,IAA6C,GAA7CA,CAAAA,GAAAA,IAA6B,GAA7BA,CAAAA,EAAAA,EAAa,CAAC2K,GAAe,GAA7B3K,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+BzF,aAAAA,CAAc,KAA7CyF,KAAAA,IAAAA,GAAAA,GAAmD,EAAE,EAPlG6D,CAAA,EASP,CACEuI,GACAzB,GACAJ,GACAnQ,GACAqQ,GACAzK,GACAwK,GACAgB,GACAE,GACD,EAImCsB,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EACpChN,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAC/BkS,GAAmBrD,GAAayD,EAAAA,EAAc,CAAC9W,GAAQ,KAFlD+W,GAA+BF,EAAAA,CAAAA,EAAAA,CAApBG,GAAoBH,EAAAA,CAAAA,EAAAA,CAIAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EACpChN,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAC/BkS,GAAmBrD,GAAayD,EAAAA,EAAc,CAAC9W,GAAQ,KAFlDiX,GAA+BJ,EAAAA,CAAAA,EAAAA,CAApBK,GAAoBL,EAAAA,CAAAA,EAAAA,CAKhCM,GAAiBC,CAAAA,EAAAA,GAAAA,EAAAA,IAEjBC,GAAiBC,CAAAA,EAAAA,GAAAA,EAAAA,aAERvN,IAAAA,QAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAAA,oBAAAA,IAAAA,OAAAA,CAAAA,GAAf,GAAAwN,EAAApd,CAAA,YAAuB,KAGOqd,EAAmCC,EAK5C/J,EAKfgK,EACAC,EACAC,EACA3a,EAMC4a,EAAAA,EAJGA,EAIJC,EAYAlQ,EACAC,EADAD,EACAC,kEAlCJ,GAAI,CAAC7H,IAAW,CAACqP,IAAW,CAACgI,KAEDG,EAAqDf,EAAAA,CAAxEjS,EAAAA,EAAAA,CAAAA,UAAgB,EAAsCiT,EAAkBhB,EAAAA,CAArCjS,EAAAA,EAAAA,CAAAA,UAAgB,EACxD,CAACgT,GAAiB,CAACC,GAAiB,CAAC7P,IAAa,CAACC,IAAa,CAAC2N,IAHxB,UA8C7C,OAvCmB9H,EAAA,GACjB,GAAAC,EAAAxT,CAAA,EADiBuT,EAChBlJ,EAAAA,EAAAA,CAAAA,UAAgB,CAAGuT,CAAAA,EAAAA,GAAAA,EAAAA,EAAwBP,EAAevT,GAAc,EAAIyE,EAAe,CAAC,CAAC,EAAE,EAChG,GAAAiF,EAAAxT,CAAA,EAFiBuT,EAEhBlJ,EAAAA,EAAAA,CAAAA,UAAgB,CAAGuT,CAAAA,EAAAA,GAAAA,EAAAA,EAAwBN,EAAexT,GAAc,EAAIyE,EAAe,CAAC,CAAC,EAAE,EAO9Fd,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GAAWoQ,QAAQ,GAAInQ,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GAAWmQ,QAAQ,GACtCH,EAAiBhQ,MAAAA,GAAAA,KAAAA,EAAAA,GAAWmQ,QAAQ,CAC1CN,EAAWL,GAAeY,WAAW,CAACC,eAAe,CACrDP,EAASN,GAAea,eAAe,CACvCN,EAAO,CACL,IAAiD,GAAjDE,CAAAA,EAAA,IAAuC,GAAtCD,CAAAA,EAAAA,EAAiBjQ,GAAYC,EAAS,GAAtCgQ,KAAAA,IAAAA,EAAD,WAA0CrK,GAA1C2K,CAAAA,EAACN,EAAyCrK,OAAAA,GAAAA,KAAAA,IAAAA,EAA1C,OAAA2K,EAAmDjX,OAAF,GAAjD4W,KAAA,IAAAA,EAAAA,EAA8D,EAAE,CAC/DD,CAAAA,EAAiBL,EAAgBC,CAAa,EAAEjL,QAAQ,CAAC3P,QAAQ,GAClEub,CAAU,CAACP,EAAiBrT,EAAAA,EAAAA,CAAAA,UAAgB,CAAGA,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAC3H,QAAQ,GACzEub,CAAU,CAACP,EAAiBrT,EAAAA,EAAAA,CAAAA,UAAgB,CAAGA,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAC3H,QAAQ,GACzEwS,GACAmG,GAAS6C,WAAW,GACrB,CACDpb,EAAQqb,EAAAA,EAAAA,CAAAA,IAAc,CAAC,CAACT,EAAiBJ,EAAgBD,CAAa,EAAEhL,QAAQ,CAAC3P,QAAQ,MAEzF6a,EAAWL,GAAeY,WAAW,CAACM,YAAY,CAClDZ,EAASN,GAAekB,YAAY,CACpCX,EAAO,CACLhQ,IAAkB,GAAlBA,CAAAA,EAAAA,MAAAA,GAAAA,KAAAA,EAAAA,IAAkB,GAAlBA,CAAAA,EAAAA,GAAW4F,OAAO,GAAlB5F,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoB1G,OAAF,GAAlB0G,KAAAA,IAAAA,EAAAA,EAA+B,EAAE,CACjCC,IAAkB,GAAlBA,CAAAA,EAAAA,MAAAA,GAAAA,KAAAA,EAAAA,IAAkB,GAAlBA,CAAAA,EAAAA,GAAW2F,OAAO,GAAlB3F,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoB3G,OAAF,GAAlB2G,KAAAA,IAAAA,EAAAA,EAA+B,EAAE,CACjC2P,EAAchL,QAAQ,CAAC3P,QAAQ,GAC/B4a,EAAcjL,QAAQ,CAAC3P,QAAQ,GAC/Bub,CAAU,CAAC5T,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAC3H,QAAQ,GACrCub,CAAU,CAAC5T,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAC3H,QAAQ,GACrCwS,GACAmG,GAAS6C,WAAW,GACrB,CACDpb,EAAQ,IAAI,EAGd+X,GAAkB,CAAEtL,cAAe,GAAMI,sBAAuB4C,KAAAA,EAAWoI,OAAQpI,KAAAA,CAAU,GAC7F,GAAMgL,EAAAA,KAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAYE,GAAAA,MAAAA,CAAAA,CAAM3a,EAAQ,CAAEA,MAAAA,CAAM,EAAI,CAAC,CAAC,IAC3Cub,IAAI,CAAC,SAACC,CAAAA,CAAAA,CACLd,OAAAA,EAAAA,KAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAUC,GAAAA,MAAAA,CAAVD,CAAgB,GAAA7B,EAAA3b,CAAA,KAAA4b,EAAA5b,CAAA,KACV8C,EAAQ,CAAEA,MAAAA,CAAM,EAAI,CAAC,CAAC,GAC1Byb,SAAUC,CAAAA,EAAAA,GAAAA,EAAAA,EAAmBF,GAC7B5E,SAAAA,KACA,GAAC2E,IAAI,CAAC,SAACI,CAAAA,CAAa,CACpB5D,GAAkB,CAAEtL,cAAe,GAAOI,sBAAuB4C,KAAAA,EAAWoI,OAAQ8D,EAASjP,IAAI,GAEjG,IAAgB7J,EACA+J,EACA/J,EACA+J,EAHVgP,EAAU/Y,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CAC9CsX,EAAUjP,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,GACzD2U,EAAUjZ,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CAC9CwX,EAAUnP,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,GAC/D+S,GAAeyB,EAAU,CACvBK,QAAS,OAAkBJ,MAAAA,CAAXC,EAAQ,KAAkBE,MAAAA,CAAfH,EAAQ,SAAkBE,MAAAA,CAAXC,EAAQ,KAAWjX,MAAA,CAARgX,GACrDG,oBAAqB,CACnBvZ,KAAM,kDACNqD,KAAM,CAAE8V,QAAAA,EAASD,QAAAA,EAASG,QAAAA,EAASD,QAAAA,CAAQ,CAC7C,EACAI,KAAM,eACR,GAEI3N,IACFwH,GAAQxH,GAEZ,KAED4N,KAAK,CAAC,SAACC,CAAAA,CAAQ,CACVA,GAAOA,OAAAA,EAAIC,IAAI,GACjBC,CAAAA,EAAAA,EAAAA,CAAAA,EAASF,GACTG,QAAQ/H,KAAK,CAAE,uBAAuB4H,EAAKzB,EAAM3a,IAEnD+X,GAAkB,CAChBtL,cAAe,GACfI,sBACEuP,GAAOA,OAAAA,EAAIC,IAAI,CACXrZ,GAAE,kCAAmC,CAAE6K,QAAS2O,CAAAA,EAAAA,EAAAA,CAAAA,EAAsCJ,EAAKpZ,GAAG,GAC9FyM,KAAAA,CAAS,CACfoI,OAAQpI,KAAAA,CACV,EACF,kBAxCFgN,EAAAC,IAAA,SAyCF,IAxFe5P,KAAAA,CAAAA,IAAAA,CAAAA,WA0Ff,IAAMH,GAAc8M,GAChBzW,GAAE,sDAAuD,CACvD6Y,QAASjP,IAA+C,GAA/CA,CAAAA,GAAAA,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,KAA/CyF,KAAAA,IAAAA,GAAAA,GAAqD,GAAG,CACjEgP,QAAS/Y,IAAoC,GAApCA,CAAAA,GAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,GAAAA,GAAwC,EAAE,CACnDkZ,QAASnP,IAA+C,GAA/CA,CAAAA,GAAAA,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,KAA/CyF,KAAAA,IAAAA,GAAAA,GAAqD,GAAG,CACjEkP,QAASjZ,IAAoC,GAApCA,CAAAA,GAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,GAAAA,GAAwC,EAAE,GAErDG,GAAE,wDAAyD,CACzD6Y,QAASjP,IAA+C,GAA/CA,CAAAA,GAAAA,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,KAA/CyF,KAAAA,IAAAA,GAAAA,GAAqD,EAAE,CAChEgP,QAAS/Y,IAAoC,GAApCA,CAAAA,GAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,GAAAA,GAAwC,EAAE,CACnDkZ,QAASnP,IAA+C,GAA/CA,CAAAA,GAAAA,IAA+B,GAA/BA,CAAAA,GAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAiCzF,aAAAA,CAAc,KAA/CyF,KAAAA,IAAAA,GAAAA,GAAqD,EAAE,CAChEkP,QAASjZ,IAAoC,GAApCA,CAAAA,GAAAA,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,GAAAA,GAAwC,EAAE,EACnD,CAEA8Z,GAA4BnP,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,CAE9CqK,IACFF,GAAc,GAElB,EAAG,CAACA,GAAeE,GAAO,EAEpB+E,GAAmBC,CAAAA,EAAAA,EAAAA,EAAAA,EAA4Bha,MAAAA,GAAAA,KAAAA,EAAAA,GAAYia,UAAU,CAAEja,MAAAA,GAAAA,KAAAA,EAAAA,GAAYka,UAAU,EAC7FC,GAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAAwBpa,MAAAA,GAAAA,KAAAA,EAAAA,GAAYia,UAAU,CAAEja,MAAAA,GAAAA,KAAAA,EAAAA,GAAYka,UAAU,EAErFG,GAAcC,CAAAA,EAAAA,EAAAA,EAAAA,IAEbC,GAA8BnY,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EACnC,GAAAgC,EAAAjG,GAAA,EAACqc,GAAwBA,CACvB5Z,MAAOuD,GAAchE,GAAE,mCAAqCA,GAAE,mBAAmB,CACjFwJ,gBAAiBmQ,GACjBlQ,cAAeA,GACfC,KAAMmL,GACNlL,YAAaA,GACbI,cAAewB,MAAAA,GAAAA,KAAAA,EAAAA,GAAMO,cAAc,CACnCrD,gBAAiBA,GACjBqB,MAAOA,GACPF,cAAeA,GACf/J,WAAYA,GACZgK,sBAAuBA,GACvB/F,MAAOA,GACPE,YAAaA,GACbD,oBAAqBA,GACrByE,gBAAiBA,KAEnB,GACA,GACA,uBApBmCvG,CAAAA,EAAAA,UAuBtBqY,IAAAA,OAAAA,CAAAA,GAAf,GAAAhD,EAAApd,CAAA,YAAyB,KA+CZ2F,EA1CP6X,EACAC,EACA3a,EACAgc,EACAC,EACEsB,EAGY3Q,EACA/J,EACA+J,EACA/J,EAJV2a,EACA3B,EACAD,EACAG,EACAD,EAOE2B,EA2BO7Q,EAATtP,EACAiH,EAeSqI,EAATtP,EACEiH,EACFmZ,kDAnEH1E,IAAWpM,IAAkB2M,GAAM/K,cAAc,EAAKzL,IAAYma,KASjEK,EAAehE,GAAM/K,cAAc,CAACwB,aAAa,CAAC2N,GAAG,CAAC,IAAQlS,IAAiBR,GAAG,CAAC,KACrFwD,IACI+O,EAAcjE,GAAM/K,cAAc,CAACsB,YAAY,CAAC6N,GAAG,CAAC,IAAQlS,IAAiBR,GAAG,CAAC,KACjF4Q,EAAUjP,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,GACzDyU,EAAU/Y,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CAC9CwX,EAAUnP,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,GACzD2U,EAAUjZ,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CACpDyX,EAAU,OAAkBJ,MAAAA,CAAXC,EAAQ,KAAkBE,MAAAA,CAAfH,EAAQ,SAAkBE,MAAAA,CAAXC,EAAQ,KAAWjX,MAAA,CAARgX,GACtDG,EAAsB,CACpBvZ,KAAM,kDACNqD,KAAM,CAAE8V,QAAAA,EAASD,QAAAA,EAASG,QAAAA,EAASD,QAAAA,CAAQ,CAC7C,EACInR,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GAAWoQ,QAAQ,GAAInQ,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GAAWmQ,QAAQ,GACtC0C,EAAc7S,MAAAA,GAAAA,KAAAA,EAAAA,GAAWmQ,QAAQ,CACvCL,EAAS,sBACTC,EAAO,CACLtX,CAAAA,EAAAA,GAAAA,EAAAA,EAAgBR,EAAU,CAAC4a,EAAclW,EAAAA,EAAAA,CAAAA,UAAgB,CAAGA,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAExE,IAASkB,OAAO,CAC/F2I,EAAa,CAAC6Q,EAAclW,EAAAA,EAAAA,CAAAA,UAAgB,CAAGA,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAACgI,QAAQ,CAAC3P,QAAQ,GAClF2O,GAAKO,cAAc,CAAC7K,OAAO,CAC3BuZ,EACAD,EACAhE,GAAM/K,cAAc,CAACoP,YAAY,EAAI,CAACH,EACvC,CACDzd,EAAQ4M,EAAa,CAAC6Q,EAAclW,EAAAA,EAAAA,CAAAA,UAAgB,CAAGA,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAACgI,QAAQ,CAAC3P,QAAQ,KAE1F8a,EAAS,wBACTC,EAAO,CACLtX,CAAAA,EAAAA,GAAAA,EAAAA,EAAgBR,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAExE,IAASkB,OAAO,CAC9DZ,CAAAA,EAAAA,GAAAA,EAAAA,EAAgBR,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAExE,IAASkB,OAAO,CAC9D2I,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAACgI,QAAQ,CAAC3P,QAAQ,GACjDgN,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAACgI,QAAQ,CAAC3P,QAAQ,GACjD2O,GAAKO,cAAc,CAAC7K,OAAO,CAC3BuZ,EACAD,EACAhE,GAAM/K,cAAc,CAACoP,YAAY,CAClC,GAEM/a,CAAAA,IAAgC,GAAhCA,CAAAA,EAAAA,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,GAAhChb,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkCkY,QAAQ,GACnDL,EAAS,WACTC,EAAO,CAACpM,GAAKO,cAAc,CAAC7K,OAAO,CAAEsZ,EAAa,CAC5CjgB,EAASsP,IAAmC,GAAnCA,CAAAA,EAAAA,EAAa,CAAC2M,GAAMsE,cAAc,CAAC,GAAnCjR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAqCzF,aAAAA,CAAc,GAC5D5C,EAAS4H,CAAAA,EAAAA,EAAAA,CAAAA,EAAYoC,GAAKU,MAAM,CAAC1K,MAAM,CAAEgK,GAAKW,MAAM,CAAC3K,MAAM,CAAExB,IACnEiZ,EAAU,UAA4BzX,MAAAA,CAAlBjH,EAAO,aAAkBwH,MAAA,CAAPP,GACtC0X,EAAsB,CACpBvZ,KAAM,mCACNqD,KAAM,CAAEzI,OAAAA,EAAQiH,OAAAA,CAAO,CACzB,EACAvE,EAAQ4M,EAAa,CAAC2M,GAAMsE,cAAc,CAAC,CAACtO,QAAQ,CAAC3P,QAAQ,KAE7D8a,EAAS,aACTC,EAAO,CACLtX,CAAAA,EAAAA,GAAAA,EAAAA,EAAgBR,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,CAAE9a,IAASkB,OAAO,CAClE2I,EAAa,CAAC2M,GAAMsE,cAAc,CAAC,CAACtO,QAAQ,CAAC3P,QAAQ,GACrD2O,GAAKO,cAAc,CAAC7K,OAAO,CAC3BsZ,EACD,CACKjgB,EAASsP,IAAmC,GAAnCA,CAAAA,EAAAA,EAAa,CAAC2M,GAAMsE,cAAc,CAAC,GAAnCjR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAqCzF,aAAAA,CAAc,GAC1D5C,EAAW1B,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,CAA3CtZ,MAAAA,CACFmZ,EAAWvR,CAAAA,EAAAA,EAAAA,CAAAA,EAAYoC,GAAKU,MAAM,CAAC1K,MAAM,CAAEgK,GAAKW,MAAM,CAAC3K,MAAM,CAAExB,IACrEiZ,EAAU,UAAoBzX,MAAAA,CAAVjH,EAAO,KAAiBogB,MAAAA,CAAdnZ,EAAO,SAAgBO,MAAA,CAAT4Y,GAC5CzB,EAAsB,CACpBvZ,KAAM,0CACNqD,KAAM,CAAEzI,OAAAA,EAAQiH,OAAAA,EAAQmZ,SAAAA,CAAS,CACnC,GAGF3F,GAAkB,CAAEtL,cAAe,GAAMI,sBAAuB4C,KAAAA,EAAWoI,OAAQpI,KAAAA,CAAU,GAE7FqO,CAAAA,EAAAA,EAAAA,EAAAA,EAAoBZ,GAAaxC,EAAQC,EAAM3a,EAAQ,CAAEA,MAAAA,EAAO4W,SAAAA,EAAS,EAAI,CAAEA,SAAAA,EAAS,CAAC,EACtF2E,IAAI,CAAC,SAACI,CAAAA,CAAa,CAClB5D,GAAkB,CAAEtL,cAAe,GAAOI,sBAAuB4C,KAAAA,EAAWoI,OAAQ8D,EAASjP,IAAI,GAEjGwN,GAAeyB,EAAU,CACvBK,QAAAA,EACAC,oBAAAA,EACAC,KAAM,eACR,GAEI3N,IACFwH,GAAQxH,GAEZ,GACC4N,KAAK,CAAC,SAACC,CAAAA,CAAQ,CACVA,GAAOA,OAAAA,EAAIC,IAAI,GACjBC,CAAAA,EAAAA,EAAAA,CAAAA,EAASF,GACTG,QAAQ/H,KAAK,CAAE,uBAAuB4H,EAAKzB,EAAM3a,IAEnD+X,GAAkB,CAChBtL,cAAe,GACfI,sBACEuP,GAAOA,OAAAA,EAAIC,IAAI,CACXrZ,GAAE,kCAAmC,CAAE6K,QAAS2O,CAAAA,EAAAA,EAAAA,CAAAA,EAAsCJ,EAAKpZ,GAAG,GAC9FyM,KAAAA,CAAS,CACfoI,OAAQpI,KAAAA,CACV,EACF,IAvGA,KAwGJ,IA1Ge6N,KAAAA,CAAAA,IAAAA,CAAAA,WA4Gf,IAAOS,GAAuB9Y,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC5B,GAAAgC,EAAAjG,GAAA,EAACgd,GAAiBA,CAChBva,MAAOT,GAAE,oBACTwJ,gBAAiBmQ,GACjBlQ,cAAeA,GACfC,KAAMmL,GACNlL,YAAaA,GACb4B,KAAMA,GACN9C,gBAAiBA,GACjBqB,gBArHWwQ,QAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAAA,YAsHX1Q,cAAeA,GACf/J,WAAYA,GACZgK,sBAAuBA,GACvB/F,MAAOA,GACPC,oBAAqBwS,GAAMxS,mBAAmB,CAC9CyE,gBAAiB+N,GAAM/N,eAAe,CACtC6C,kBAAmBkL,GAAMsE,cAAc,CACvCvP,qBAAsBiL,GAAM0E,iBAAiB,CAC7CzP,eAAgB+K,GAAM/K,cAAc,CACpCC,YAAaA,GACbC,QAASuI,GACTtI,cAAe6H,KAEjB,GACA,GACA,gBAzB4BvR,CAAAA,EAAAA,CAkC1B0P,GAAU,CAACH,GACX0J,GAAY1J,GAEZiF,IACF9E,GAAU,CAACH,IAAS,CAAC+E,GAAM/E,KAAK,CAChC0J,GAAY1J,MAAAA,GAAAA,GAAS+E,GAAM/E,KAAK,GAEhCG,GAAU,CAACH,IAAS,CAACiD,GACrByG,GAAY1J,MAAAA,GAAAA,GAASiD,EAAQ,EAG/B,IAAM0G,GACJ,CAACxJ,IACA,CAAC4E,GAAM3M,aAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAK,CAACkS,IAAoBrB,EAAAA,GAC/D0B,KAAcsE,GAAAA,EAAAA,CAAAA,QAAsB,EACrC,CAAC7E,GAAM3M,aAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAK,CAACkS,IAAoBnB,EAAAA,GAC/D0B,KAAcoE,GAAAA,EAAAA,CAAAA,QAAsB,EACrC7E,GAAM8E,aAAa,CAAG,GAAK5E,GAExB6E,GACJ,CAAClG,IAAoB,CAACqB,EAAAA,GACrBK,CAAAA,KAAcsE,GAAAA,EAAAA,CAAAA,YAA0B,EAAItE,KAAcsE,GAAAA,EAAAA,CAAAA,OAAqB,EAC5EG,GACJ,CAACjG,IAAoB,CAACmB,EAAAA,GACrBO,CAAAA,KAAcoE,GAAAA,EAAAA,CAAAA,YAA0B,EAAIpE,KAAcoE,GAAAA,EAAAA,CAAAA,OAAqB,EAE5EI,GAA0B,CAACF,IAAsBC,EAAAA,GAAuB5J,GAExE8J,GAAuBC,QAC3B3b,IAAY4H,CAAAA,IAAcA,GAAUgG,MAAM,CAACgO,EAAAA,EAAO,CAAC5b,GAAQ,GAAO6H,IAAaA,GAAU+F,MAAM,CAACgO,EAAAA,EAAO,CAAC5b,GAAQ,IAG5G6b,GAAmB,CAAChS,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAI,CAACqF,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAEvFsX,GACJ,CAAE,CAAChc,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAI,CAAC,CAAC1E,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAImP,KAAU9P,EAAMoQ,GAAG,EAAK,CAACgC,GAE1F8F,GACJrF,IACA,CAACmF,IACA,EAAEnQ,IAAe,CAAE,EAAC2J,IAAoB,CAACE,EAAAA,GAAuB7J,IAAe8K,GAAM8E,aAAa,CAAG,GAElGU,GACJtF,IAAqBF,CAAAA,GAAM8E,aAAa,CAAG,GAAK9E,GAAMyF,mBAAmB,GAAKvG,EAAU,CAACc,GAAMsE,cAAc,CAAC,CAE1GoB,GACJ,CAACH,IACD,CAACF,IACD,CAACG,IACDtF,IACAF,GAAM2F,qCAAqC,EAC3CzQ,GAEI0Q,GACJ,CAACzQ,IACD,CAACoQ,IACD,CAACF,IACA,EAACxG,IAAoB,CAACE,EAAAA,GACvB,CAACtR,IACD,CACEuH,CAAAA,IAASe,EAAAA,EAAAA,CAAAA,QAAa,CAACf,GAAK2K,QAAQ,CAAC3J,QAAQ,CAAE4J,EAAAA,EAAiBA,GAC/D5K,IAAQe,EAAAA,EAAAA,CAAAA,QAAa,CAACf,GAAK6K,QAAQ,CAAC7J,QAAQ,CAAE4J,EAAAA,EAAiBA,CAAAA,EAG7DiG,GAA0Bna,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,GAAAgC,EAAAjG,GAAA,EAACqe,GAAAA,CAAaA,CAAAA,CAACC,KAAMC,GAAAA,CAAAA,CAAAA,cAA2B,MAAzDta,CAAAA,EAAAA,CAEjC,MACE,GAAAgC,EAAAvD,IAAA,EAAC8b,GAAAA,CAAIA,CAAAA,WACH,GAAAvY,EAAAvD,IAAA,EAAC+b,EAAAA,CAAOA,CAAAA,WACL,CAACZ,IACA,GAAA5X,EAAAjG,GAAA,EAACuT,GAAUA,CACTC,MAAOA,GACP7J,UAAW9H,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACvCqD,UAAW/H,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACvCkN,OAAQ,kBAAMkC,GAAS/P,EAAMoQ,GAAG,KAGnC6H,IACC,GAAA5X,EAAAvD,IAAA,EAAAuD,EAAA6J,QAAA,YACE,GAAA7J,EAAAjG,GAAA,EAAC+T,EAAAA,CAASA,CAAAA,CACRtR,MACEZ,CAAAA,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,GAAI1B,CAAAA,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,EACxE,GAAkGO,MAAA,CAA/FqH,CAAAA,EAAAA,EAAAA,CAAAA,EAAYtJ,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAChD,MAAM,CAAE1B,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAChD,MAAM,CAAExB,KACzFC,GAAE,gBAAgB,CAExBgS,SAAUhS,GAAE,iDACZiS,OAAQjS,GACN,2IAEFkS,OAAQ8D,GAAS,kBAAMrC,GAAS/P,EAAM6P,MAAM,GAAI,YAAY,GAE9D,GAAAxP,EAAAjG,GAAA,EAACmU,EAAAA,CAAQA,CAAAA,UACP,GAAAlO,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,iBACboD,IACC,GAAAC,EAAAjG,GAAA,EAAC0e,EAAAA,EAAYA,CAAAA,UACX,GAAAzY,EAAAjG,GAAA,EAAC2e,EAAAA,CAAOA,CAAAA,CAAC/e,QAAQ,mBACf,GAAAqG,EAAAvD,IAAA,EAACuH,MAAAA,WACC,GAAAhE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAACmV,GAAG,eACX5c,GAAE,2CAEL,GAAAiE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAACsb,GAAG,eAAO5c,GAAE,kEAClB,GAAAiE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEtB,GAAE,qEAKjB,GAAAiE,EAAAjG,GAAA,EAAC6e,EAAAA,CAAkBA,CAAAA,CACjBC,sBAAuB9G,GACvB+G,aAAY,GACZC,YAAahH,GAASO,GAAM0G,eAAe,CAAGxQ,KAAAA,CAAS,CACvD+E,MAAO+E,GAAM8E,aAAa,CAAG,GAAK9E,GAAMsE,cAAc,GAAKtW,EAAAA,EAAAA,CAAAA,UAAgB,CAC3E1G,SAAUmY,IAAU,CAACZ,GACrB8H,aACElH,IACE,GAAA/R,EAAAjG,GAAA,EAACqB,GAAAA,CAAWA,CAAAA,CACVxB,SAAUiV,MAAAA,GAAAA,KAAAA,EAAAA,IAAoC,GAApCA,CAAAA,GAAAA,EAAkB,CAACvO,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAApCuO,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAsCqK,OAAAA,CAAQ,GACxDC,QAAShI,GACTiI,SAAU,SAACxe,CAAAA,CAAM,CACfoW,GAAmBpW,EAAEye,MAAM,CAACF,OAAO,CACrC,IAINxO,iBAAkBkC,GAClByM,SAAUvH,GAAS,MAAQ,OAAO,CAClChZ,MAAO2Z,EAAgB,CAACpS,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACzCiZ,YAAa7I,GACb8I,eAAgB,SAACxY,CAAAA,CAAY,CAC3B,GAAIwQ,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAE,KAClBkR,EAAAA,EAAdd,GAAcc,IAA2E,GAA3EA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BiI,QAAAA,CAAS,IAAIC,EAAAA,EAAOA,CAAC1Y,EAAS,MAAMoI,OAAO,EAAE,GAA3EoI,KAAAA,IAAAA,EAAAA,EAA+E,EAAE,CACjG,CAAC,EAEHmI,MAAO,UAAM,KACGnI,EAAAA,EAAdd,GAAcc,IAA8BpI,GAA9BoI,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BpI,OAAAA,EAAAA,GAA9BoI,KAAAA,IAAAA,EAAAA,EAA2C,EAAE,CAC7D,EACAoI,qBAAoB,GACpBC,cAAa,GACbC,UAAWtI,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACvCnE,SAAUP,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACtC8B,GAAG,6BACH0I,gBAAe,GACfC,gBAAiBsD,GAAAA,EAAAA,CAAAA,SAAyB,GAE5C,GAAArO,EAAAjG,GAAA,EAAC0e,EAAAA,EAAYA,CAAAA,UACX,GAAAzY,EAAAjG,GAAA,EAACuU,EAAAA,CAAOA,CAAAA,CAAClN,MAAM,WAEjB,GAAApB,EAAAjG,GAAA,EAAC6e,EAAAA,CAAkBA,CAAAA,CACjBE,aAAY,GACZC,YAAahH,GAASO,GAAM0G,eAAe,CAAGxQ,KAAAA,CAAS,CACvD5O,SAAUmY,IAAU,CAACV,GACrB9D,MAAO+E,GAAM8E,aAAa,CAAG,GAAK9E,GAAMsE,cAAc,GAAKtW,EAAAA,EAAAA,CAAAA,UAAgB,CAC3E2Y,aACElH,IACE,GAAA/R,EAAAjG,GAAA,EAACqB,GAAAA,CAAWA,CAAAA,CACVxB,SAAUiV,MAAAA,GAAAA,KAAAA,EAAAA,IAAoC,GAApCA,CAAAA,GAAAA,EAAkB,CAACvO,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAApCuO,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAsCqK,OAAAA,CAAQ,GACxDC,QAAS9H,GACT+H,SAAU,SAACxe,CAAAA,CAAM,CACfsW,GAAmBtW,EAAEye,MAAM,CAACF,OAAO,CACrC,IAINxO,iBAAkBwC,GAClB0L,sBAAuB9G,GACvBuH,SAAUvH,GAAS,MAAQ,OAAO,CAClChZ,MAAO2Z,EAAgB,CAACpS,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACzCiZ,YAAa5I,GACb6I,eAAgB,SAACxY,CAAAA,CAAY,CAC3B,GAAIwQ,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAE,KAClBkR,EAAAA,EAAdb,GAAca,IAA2E,GAA3EA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BiI,QAAAA,CAAS,IAAIC,EAAAA,EAAOA,CAAC1Y,EAAS,MAAMoI,OAAO,EAAE,GAA3EoI,KAAAA,IAAAA,EAAAA,EAA+E,EAAE,CACjG,CAAC,EAEHmI,MAAO,UAAM,KACGnI,EAAAA,EAAdb,GAAca,IAA8BpI,GAA9BoI,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BpI,OAAAA,EAAAA,GAA9BoI,KAAAA,IAAAA,EAAAA,EAA2C,EAAE,CAC7D,EACAoI,qBAAoB,GACpBC,cAAa,GACbC,UAAWtI,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACvCnE,SAAUP,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACtC8B,GAAG,6BACH0I,gBAAe,GACfC,gBAAiBsD,GAAAA,EAAAA,CAAAA,SAAyB,GAG3CwJ,IACC,GAAA7X,EAAAjG,GAAA,EAAC2e,EAAAA,CAAOA,CAAAA,CAAC/e,QAAS2Y,GAAM8E,aAAa,CAAG,EAAI,SAAW,SAAS,UAC7D9E,GAAM8E,aAAa,CAAG,EACrB,GAAApX,EAAAvD,IAAA,EAACsd,EAAAA,CAAWA,CAAAA,WACThe,GAAE,0BAA2B,IAC9B,GAAAiE,EAAAjG,GAAA,EAACigB,SAAAA,UACEje,GAAE,4CAA6C,CAC9Ca,MAAOhB,IAAgC,GAAhCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,GAAhChb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAkC0B,MAAM,QAKrD,GAAA0C,EAAAvD,IAAA,EAACsd,EAAAA,CAAWA,CAAAA,WACV,GAAA/Z,EAAAjG,GAAA,EAACigB,SAAAA,UACEje,GAAE,oBAAqB,CAAEa,MAAOhB,IAAmC,GAAnCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAM0E,iBAAiB,CAAC,GAAnCpb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAqC0B,MAAM,KACpE,IACTvB,GAAE,uDAAwD,CACzDiM,OAAQpM,IAAgC,GAAhCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,GAAhChb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAkC0B,MAAM,CAChD2K,OAAQrM,IAAmC,GAAnCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAM0E,iBAAiB,CAAC,GAAnCpb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAqC0B,MAAM,KAGxD,GAIJwa,IACC,GAAA9X,EAAAjG,GAAA,EAAC6P,EAAAA,EAAQA,CAAAA,CAACzF,MAAO,CAAE8V,OAAQ,MAAO,EAAGtf,QAAS,kBAAM2X,GAAM4H,oBAAoB,aAC5E,GAAAla,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAACf,QAAQ,YAAY4B,MAAM,cAC/BQ,GAAE,iBAAkB,CAAEa,MAAOhB,IAAgC,GAAhCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,GAAhChb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAkC0B,MAAM,OAK3E4a,IACC,GAAAlY,EAAAjG,GAAA,EAAC2e,EAAAA,CAAOA,CAAAA,CAAC/e,QAAQ,mBACf,GAAAqG,EAAAvD,IAAA,EAACsd,EAAAA,CAAWA,CAAAA,WACThe,GAAE,mEACH,GAAAiE,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAAC+Q,EAAE,QAAQlQ,MAAM,KAAK5B,QAAQ,OAAO0H,OAAO,OAAO1G,QAnOtD,UAAM,CACvB8M,IACH8H,GAAsB,CAAC9H,GAE3B,WAgOuB1L,GAAE,UAEJA,GAAE,gBAKRic,IACC,GAAAhY,EAAAjG,GAAA,EAAC2e,EAAAA,CAAOA,CAAAA,CAAC/e,QAAQ,mBACf,GAAAqG,EAAAjG,GAAA,EAAC2C,EAAAA,EAAUA,CAAAA,UACT,GAAAsD,EAAAvD,IAAA,EAACsd,EAAAA,CAAWA,CAAAA,WACV,GAAA/Z,EAAAjG,GAAA,EAACigB,SAAAA,UACEje,GAAE,sBAAuB,CAAEa,MAAOhB,IAAmC,GAAnCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAM0E,iBAAiB,CAAC,GAAnCpb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAqC0B,MAAM,KACtE,IACTgV,GAAM6H,WAAW,CACdpe,GACE,mHACA,CACEiM,OAAQpM,IAAgC,GAAhCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,GAAhChb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAkC0B,MAAM,CAChD2K,OAAQrM,IAAmC,GAAnCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAM0E,iBAAiB,CAAC,GAAnCpb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAqC0B,MAAM,GAGvDvB,GAAE,uDAAwD,CACxDiM,OAAQpM,IAAgC,GAAhCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAMsE,cAAc,CAAC,GAAhChb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAkC0B,MAAM,CAChD2K,OAAQrM,IAAmC,GAAnCA,CAAAA,GAAAA,EAAU,CAAC0W,GAAM0E,iBAAiB,CAAC,GAAnCpb,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAqC0B,MAAM,EACnD,QAMb0a,IACC,GAAAhY,EAAAjG,GAAA,EAAC6P,EAAAA,EAAQA,CAAAA,CACPzF,MAAO,CAAE8V,OAAQ,MAAO,EACxBtf,QAAS,UAAM,KAEG6W,EAAAA,EAEAA,EAAAA,CAHZlB,CAAAA,KAAmBhQ,EAAAA,EAAAA,CAAAA,UAAgB,CACrCoQ,GAAcc,IAA4BpI,GAA5BoI,CAAAA,EAAAA,IAA0B,GAA1BA,CAAAA,EAAAA,EAAU,CAAClB,GAAe,GAA1BkB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4BpI,OAAAA,EAAAA,GAA5BoI,KAAAA,IAAAA,EAAAA,EAAyC,EAAE,EAEzDb,GAAca,IAA4BpI,GAA5BoI,CAAAA,EAAAA,IAA0B,GAA1BA,CAAAA,EAAAA,EAAU,CAAClB,GAAe,GAA1BkB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4BpI,OAAAA,EAAAA,GAA5BoI,KAAAA,IAAAA,EAAAA,EAAyC,EAAE,CAE7D,WAEA,GAAAxR,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAACf,QAAQ,YAAY4B,MAAM,cAC/BQ,GAAE,qBAKRH,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAI1E,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAIiQ,KAAc6J,GAAAA,EAAAA,CAAAA,OAAiB,EAC9F,GAAApa,EAAAjG,GAAA,EAAAiG,EAAA6J,QAAA,WACE,GAAA7J,EAAAvD,IAAA,EAAC4d,EAAAA,EAASA,CAAAA,CAACC,QAAQ,MAAMC,aAAa,iBACpC,GAAAva,EAAAjG,GAAA,EAACqK,EAAAA,EAAUA,CAAAA,CAACkW,QAAQ,gBAClB,GAAAta,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,gBACZJ,GAAchE,GAAE,wCAA0CA,GAAE,mBAAmB,KAEtE,IACd,GAAAiE,EAAAjG,GAAA,EAACsgB,EAAAA,EAASA,CAAAA,CAACC,QAAQ,OAAOC,aAAa,gBACrC,GAAAva,EAAAjG,GAAA,EAACygB,GAAYA,CACX5e,WAAYA,GACZkE,oBAAqB0S,GAAmBF,GAAMxS,mBAAmB,CAAGA,EAAmB,CACvFC,YAAaA,GACbF,MAAOA,YAOjB,GAAAG,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAACrD,SAAS,OAAOzC,MAAM,sBAC9B3B,GAAE,sBACH,GAAAiE,EAAAjG,GAAA,EAAC0gB,EAAAA,CAAUA,CAAAA,CAAClf,MAAM,KAAK5B,QAAQ,OAAOgB,QAASwd,YAC7C,GAAAnY,EAAAjG,GAAA,EAAC2gB,EAAAA,CAAUA,CAAAA,CAAChd,MAAM,UAAU0D,MAAM,cAGtC,GAAApB,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAAC9F,MAAM,oBACd8G,GAAkB,IAAI,UAI1B8C,IAAQsG,IACP,GAAA5N,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAjG,GAAA,EAACsL,EAAAA,CAAWA,CAAAA,CAACpB,IAAKY,GAAWrB,KAAI,GAACrD,SAAS,OAAOzC,MAAM,qBACrD3B,GAAE,mBAEJ6I,IAAkBD,GACnB,GAAA3E,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAAC9F,MAAM,oBACd6Q,CAAAA,EAAAA,GAAAA,CAAAA,EAAaX,GAASY,OAAO,EAAE,UAKrCmH,IAAoBI,GACnB,GAAA/V,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAACd,SAAQ,GAAC+e,GAAG,eACjB5c,GAAE,uBAEH,GAEA5B,GACF,GAAA6F,EAAAjG,GAAA,EAACE,EAAAA,CAAYA,CAAAA,CAAAA,GAEb,GAAA+F,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,eACb4a,IACC,GAAAvX,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,CAACD,MAAO,CAAExH,IAAK,KAAM,YAC7B0a,IACC,GAAArX,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CACLC,QAASmY,GACTlZ,SAAUiZ,KAAcsE,GAAAA,EAAAA,CAAAA,OAAqB,CAC7C/V,MAAM,gBAELyR,KAAcsE,GAAAA,EAAAA,CAAAA,OAAqB,CAClC,GAAAnX,EAAAjG,GAAA,EAAC4gB,GAAAA,CAAIA,CAAAA,UAAE5e,GAAE,mBAAoB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,KAE1EvB,GAAE,iBAAkB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,EAClE,GAGJga,IACC,GAAAtX,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CACLC,QAASqY,GACTpZ,SAAUmZ,KAAcoE,GAAAA,EAAAA,CAAAA,OAAqB,CAC7C/V,MAAM,gBAEL2R,KAAcoE,GAAAA,EAAAA,CAAAA,OAAqB,CAClC,GAAAnX,EAAAjG,GAAA,EAAC4gB,GAAAA,CAAIA,CAAAA,UAAE5e,GAAE,mBAAoB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,KAE1EvB,GAAE,iBAAkB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,EAClE,MAKT,GAAA0C,EAAAjG,GAAA,EAACE,EAAAA,CAAYA,CAAAA,CACX4gB,UAAWrI,IAAoBH,GAC/B1Y,QAAS,CAAC+T,IAAW4E,GAAM8E,aAAa,CAAG,EAAI,SAAW,SAAS,CACnEzc,QAAS,UAAM,CACb,GAAI6X,GAAkB,CACpB1B,GAAkB,CAChBtL,cAAe,GACfI,sBAAuB4C,KAAAA,EACvBoI,OAAQpI,KAAAA,CACV,GACAsO,KACA,MACF,CAAC,GAECjR,MAEAiL,GAAkB,CAChBtL,cAAe,GACfI,sBAAuB4C,KAAAA,EACvBoI,OAAQpI,KAAAA,CACV,GACA2N,KAEJ,EACAvc,SAAUsd,YAETD,IAAalb,GAAE,cAGrB,CAhEC,GAAAiE,EAAAjG,GAAA,EAAC4U,GAAAA,CAAmBA,CAAAA,CAAAA,EAgErB,YAMV,IAAsBoH,GAOrB,GAAA/V,EAAAjG,GAAA,EAAC+D,EAAAA,CAAyBA,CAAAA,CAAClC,WAAY,CAACA,GAAWia,UAAU,CAAEja,GAAWka,UAAU,CAAC,GANrFxO,IAAQ,CAACvH,IAAewQ,KAAc6J,GAAAA,EAAAA,CAAAA,OAAiB,CACrD,GAAApa,EAAAjG,GAAA,EAAC2C,EAAAA,EAAUA,CAAAA,CAACyH,MAAO,CAAE8C,SAAU,QAAS7F,MAAO,OAAQ0Z,SAAU,QAASC,UAAW,MAAO,WAC1F,GAAA/a,EAAAjG,GAAA,EAACihB,EAAAA,EAAmBA,CAAAA,CAACC,cAAezD,GAAsBlQ,KAAMA,OAEhE,IAAI,GAMhB,CAp0BK3H,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EACH6P,MAAAA,CAAAA,EAAAA,CAAAA,SADG7P,CAAAA,CAAAA,EAEHoQ,GAAAA,CAAAA,EAAAA,CAAAA,6IGvEWmL,GAAgC,IAAIxB,EAAAA,EAAOA,CAACrR,EAAAA,EAAAA,CAAAA,MAAW,CAAC,GAAI8S,EAAAA,EAASA,EACrEC,GAAmC,IAAI1B,EAAAA,EAAOA,CAACrR,EAAAA,EAAAA,CAAAA,MAAW,CAAC,IAAK8S,EAAAA,EAASA,EACzEE,GAAiC,IAAI3B,EAAAA,EAAOA,CAACrR,EAAAA,EAAAA,CAAAA,MAAW,CAAC,IAAK8S,EAAAA,EAASA,EACvEG,GAAuC,IAAI5B,EAAAA,EAAOA,CAACrR,EAAAA,EAAAA,CAAAA,MAAW,CAAC,IAAK8S,EAAAA,EAASA,EAEnF,SAASI,GAAgB7W,CAAkB,CAAqB,QAErE,EAGKA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAUjE,QAAQ,CAAC6a,GAAAA,EACnB5W,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAUjE,QAAQ,CAAC4a,GAAAA,EACnB3W,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAUjE,QAAQ,CAAC2a,GAAAA,EACnB1W,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAUjE,QAAQ,CAACya,GAAAA,EACjB,EAD+C,EADG,EADF,EADM,EAFpD,CACR,CCHI,SAASM,GAAkBzgB,CAAwE,CAAE,KAAxE2J,EAAF3J,EAAE2J,QAAAA,CAAAA,EAAF3J,EAAY0gB,OAAAA,CACtCC,EAAkBhX,EACpBA,EAASjE,QAAQ,CAACC,EAAAA,EAAQA,EACxB,SACA,GAAoE7C,MAAA,CAAjE6G,EAAS/D,OAAO,CAAC,EAAG,CAAEgb,eAAgB,EAAG,EAAGC,EAAAA,EAAAA,CAAAA,UAAmB,EAAE,IAAE,CACxE,GAAG,CAEDngB,EAAOggB,KAP+BA,IAAAA,GAAeI,EAOpC,GAAA7b,EAAAjG,GAAA,EAAC+hB,GAAAA,CAAYA,CAAAA,CAAAA,GAAMJ,CAAe,CACzD,MACE,GAAA1b,EAAAjG,GAAA,EAACgiB,GAAAA,CAASA,CAAAA,CAAC5b,SAAS,OAAO6b,SAAUtX,EAAW6W,GAAgB7W,GAAY,CAAC,UAC1EjJ,GAGP,CEkCe,SAASwgB,GAAmBlhB,CAAwB,CAAE,KJ/CnE6Z,EACAE,EAMMoH,EDwC0BC,EAAuCC,EACjEC,EACAC,EACAC,EAgCAC,EC1EgDC,EAA9CC,EAAaC,EAAUC,EAAWnB,EAIpCoB,EACAC,EAEJD,EADK7U,EAAQC,EAKb4U,GADKE,GAASC,GAEVC,GAWAC,GIsLKvX,GACA/J,GACA+J,GACA/J,GAkECA,GAAwCA,GAiJYA,GAETA,GAOSA,GAETA,GAjO5C+J,GACA/J,GACA+J,GACA/J,GAzKgC8H,GAAF3I,EAAE2I,SAAAA,CAAWC,GAAb5I,EAAa4I,SAAAA,CACT8J,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,IAArCtC,GAAqCsC,GAArCtC,OAAAA,CAASrP,GAA4B2R,GAA5B3R,OAAAA,CAAS3B,GAAmBsT,GAAnBtT,cAAAA,CAEpB8U,GAAaC,CAAAA,EAAAA,GAAAA,EAAAA,IAEbnT,GAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACF4T,GAAWC,CAAAA,EAAAA,GAAAA,EAAAA,IAGyCK,GAAAA,CAAAA,EAAAA,GAAAA,EAAAA,IAAlDC,GAAkDD,GAAlDC,gBAAAA,CAAkBC,GAAgCF,GAAhCE,UAAAA,CAAYC,GAAoBH,GAApBG,eAAAA,CAclC+M,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAA2BzZ,MAAAA,GAAAA,GAAa8E,KAAAA,CAAS,CAAE7E,MAAAA,GAAAA,GAAa6E,KAAAA,CAAS,EAZ3E8H,GAYE6M,GAZF7M,cAAAA,CACA1U,GAWEuhB,GAXFvhB,UAAAA,CACA0L,GAUE6V,GAVF7V,IAAAA,CACAiJ,GASE4M,GATF5M,SAAAA,CACA1B,GAQEsO,GARFtO,gBAAAA,CACAlJ,GAOEwX,GAPFxX,aAAAA,CACA5F,GAMEod,GANFpd,WAAAA,CACAwE,GAKE4Y,GALF5Y,eAAAA,CACAzE,GAIEqd,GAJFrd,mBAAAA,CACAyN,GAGE4P,GAHF5P,KAAAA,CACAiD,GAEE2M,GAFF3M,QAAAA,CACAiL,GACE0B,GADF1B,OAAAA,CAGuChL,GAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAsB,IAAvDC,GAAiCD,GAAjCC,aAAAA,CAAeC,GAAkBF,GAAlBE,aAAAA,CAGuDtB,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAI3E,CACD7J,cAAe,GACfI,sBAAuB4C,KAAAA,EACvBoI,OAAQpI,KAAAA,CACV,MAAAqI,GAR8ExB,EAAAA,CAAAA,EAAAA,CAArE7J,GAAAA,GAAAA,aAAAA,CAAeI,GAAAA,GAAAA,qBAAAA,CAAuBgL,GAAAA,GAAAA,MAAAA,CAAUE,GAAqBzB,EAAAA,CAAAA,EAAAA,CAWvE7K,GAAmB+M,QAAAA,CAAAA,EAAAA,GAAAA,EAAAA,IAAwBA,EAAxBA,CAAAA,EAAAA,CAKtB6L,IJ3FJxI,EI2FqBjP,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CJ1FpDwU,EI0FsDnP,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CJnF7Eoc,EAA8CD,CDuCtBN,ECtC9BD,OAFIA,EAAuBmB,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,GAAAA,EAAmBA,EAAnDpB,gBAAAA,EAENA,KAAAA,EAAAA,EAAkBC,iBAAiB,CDsCkCC,ECrCrEF,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBrU,cAAc,CAAC7K,OAAO,CDsCpCqf,EAAqBkB,CAAAA,EAAAA,EAAAA,EAAAA,EAAYpB,EAAmBqB,IACpDlB,EAAkBiB,CAAAA,EAAAA,EAAAA,EAAAA,EAAYnB,EAAWqB,IACzClB,EAAS9c,CAAAA,EAAAA,EAAAA,OAAAA,EACb,iBAAM,CACJ,CACEie,SAAUrB,EACVsB,WAAY,WACZpB,OAAQ,CAAC,EAAE,EAEb,CACEmB,SAAUrB,EACVsB,WAAY,WACZpB,OAAQ,CAAC,EAAE,EAEb,CACEmB,SAAUrB,EACVsB,WAAY,GACd,EACA,CACED,SAAUpB,EACVqB,WAAY,aACd,EACA,CACED,SAAUrB,EACVsB,WAAY,KACd,EACA,CACED,SAAUrB,EACVsB,WAAY,iBACd,EACD,EACD,CAACtB,EAAoBC,EAAgB,EAGjCE,EAAUoB,CAAAA,EAAAA,GAAAA,EAAAA,EAA8BrB,GC1EQE,ED4E/Chd,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,kBAAMoe,SAtFEC,CAAmB,CAAE,CAO5C,IAAIrC,EAAU,GACVlO,EAAQ,GACRwQ,EAAQ,GACPC,EAAA,GAAAC,EAAA,GAAAC,EAAA1V,KAAAA,MAAL,QATI2V,EACAC,EACAxB,EACAF,EACA2B,EACAC,EAICC,EAAAC,EAA8EV,EAAOW,OAAO,GAAAnnB,OAAAC,QAAA,IAA5F,CAAAymB,CAAAA,EAAA,CAAAO,EAAAC,EAAAE,IAAA,IAAAC,IAAA,EAAAX,EAAA,GAAgG,CAAhG,IAAAY,EAAA,GAAAxW,EAAAnS,CAAA,EAAAsoB,EAAAxlB,KAAA,IAAO8lB,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAKxgB,EAAAA,EAAAA,MAAAA,CAAQod,EAAAA,EAAAA,OAAAA,CAAwBqD,EAAAA,EAAAA,OAAAA,CAASvR,EAAAA,EAAAA,KAAAA,CAExD,OAAQsR,GACN,KAAK,EACHV,EAAW9f,GAAUgK,EAAAA,EAAAA,CAAAA,MAAW,CAAChK,CAAM,CAAC,EAAE,CAAC1F,QAAQ,IACnD,KAAK,MACF,EACHylB,EAAW/f,GAAUgK,EAAAA,EAAAA,CAAAA,MAAW,CAAChK,CAAM,CAAC,EAAE,CAAC1F,QAAQ,IACnD,KAAK,MACF,EACHikB,EAAYve,GAAUgK,EAAAA,EAAAA,CAAAA,MAAW,CAAChK,CAAM,CAAC,EAAE,CAAC1F,QAAQ,IACpD,KAAK,MACF,EACH+jB,EAAcre,GAAUgK,EAAAA,EAAAA,CAAAA,MAAW,CAAChK,CAAM,CAAC,EAAE,CAAC1F,QAAQ,IACtD,KAAK,MACF,EACH0lB,EAAehgB,GAAUgK,EAAAA,EAAAA,CAAAA,MAAW,CAAChK,CAAM,CAAC,EAAE,CAAC1F,QAAQ,IACvD,KAAK,MACF,EACH2lB,EAAiBjgB,GAAUgK,EAAAA,EAAAA,CAAAA,MAAW,CAAChK,CAAM,CAAC,EAAE,CAAC1F,QAAQ,GAI7D,CACAolB,EAAQA,GAAS1f,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQ0gB,WAAW,EACpCtD,EAAUA,GAAWuD,GAAiBF,EACtCvR,EAAQA,GAAS0R,CACnB,WA3BKhB,EAAA,GAAAC,EAAA/I,cAAA6I,GAAAQ,IAAA,EAAAA,EAAAU,MAAA,EAAAV,EAAAU,MAAA,cAAAjB,QAAAC,CAAA,EA4BL,MAAO,CACLvB,SAAU,CAACwB,EAAUC,EAAS,CAC9BxB,UAAAA,EACAF,YAAAA,EACAyC,IAAKd,GAAgBC,GAAkB,IAAI5E,EAAAA,EAAOA,CAAC2E,EAAcC,GACjEP,MAAAA,EACAxQ,MAAAA,EACAkO,QAAAA,CACF,CACF,EAuCuCe,IAAU,CAACA,EAAQ,GC5EhDE,WAAAA,CAAaC,EAAiCF,EAAjCE,QAAAA,CAAUC,EAAuBH,EAAvBG,SAAAA,CAAWnB,EAAYgB,EAAZhB,OAAAA,CAIpCoB,EAAmBjI,MAAAA,EAAAA,KAAAA,EAAAA,EAASzY,QAAQ,CAACmN,OAAO,CAC5CwT,EAAmBhI,MAAAA,EAAAA,KAAAA,EAAAA,EAAS3Y,QAAQ,CAACmN,OAAO,CAC3CtB,EACL6U,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,GAAoBC,GAAoBD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBuC,WAAW,CAACtC,EAAAA,EAClE,CAACD,EAAkBC,EAAiB,CACpC,CAACA,EAAkBD,EAAiB,IAFxCA,CAAAA,EAAAA,CADa5U,EACb4U,CAAAA,CAAAA,EAAAA,CAGKE,GACLF,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,GAAoB7U,GAAUA,EAAO0B,MAAM,CAACmT,GAAoB,CAACjI,EAASE,EAAQ,CAAG,CAACA,EAASF,EAAQ,IAAvGiI,CAAAA,EAAAA,CADcG,GACdH,EAAAA,CAAAA,EAAAA,CACII,GAAexd,CAAAA,EAAAA,EAAAA,OAAAA,EACnB,kBACEuI,GACAC,GACA0U,CAAQ,CAAC,EAAE,EACXA,CAAQ,CAAC,EAAE,EAAI,CACb/T,EAAAA,EAAAA,CAAAA,aAA4B,CAACZ,EAAQ2U,CAAQ,CAAC,EAAE,EAChD/T,EAAAA,EAAAA,CAAAA,aAA4B,CAACX,EAAQ0U,CAAQ,CAAC,EAAE,EACjD,EACH,CAACA,EAAU3U,EAAQC,EAAO,EAEtBiV,GAAoBzd,CAAAA,EAAAA,EAAAA,OAAAA,EACxB,WACEid,OAAAA,GACAR,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBrU,cAAc,GAChCe,EAAAA,EAAAA,CAAAA,aAA4B,CAACsT,EAAiBrU,cAAc,CAAE6U,IAChE,CAACA,EAAaR,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBrU,cAAc,CAAC,EAE1CpI,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,CACnB,IAAM4f,EAAc,CAClB5D,QAAAA,EACA6D,mBAAoB,IAAI,CACxBzf,MAAO,IAAI,EAEb,GAAI,CAACqd,IAAqB,CAACD,IAAgB,CAACF,IAAW,CAACC,GACtD,OAAOqC,CACR,CACD,IAAME,EAAalX,EAAAA,EAAAA,CAAAA,GAAQ,CAAC4U,EAAY,CAAC,EAAE,CAAC3U,QAAQ,CAAE2U,EAAY,CAAC,EAAE,CAAC3U,QAAQ,EAC9E,GAAID,EAAAA,EAAAA,CAAAA,KAAU,CAACkX,EAAYC,EAAAA,EAAYA,EACrC,OAAOH,CACR,CACD,IAAIC,EAAsD,IAAI,CAC1Dzf,EAA0C,IAAI,CAClD,GAAI,CACFyf,EAAqBG,GAAAA,EAAAA,CAAAA,qBAAgC,CAAC,CACpD7C,UAAAA,EACAD,SAAUM,GACVP,YAAaQ,GACbwC,QAAS,CAAC3C,GAASC,GAAQ,GAE7B,IAAM2C,EAAaC,CAAAA,EAAAA,GAAAA,CAAAA,EAAe,IAAKhL,EAAQzY,QAAQ,EACjD0jB,EAAcJ,GAAAA,EAAAA,CAAAA,uBAAkC,CAAC,CACrD7C,UAAAA,EACAD,SAAUM,GACV5mB,OAAQspB,EACRG,eAAgBhL,EAAQ3Y,QAAQ,GAElC0D,EAAQ,IAAIkgB,EAAAA,EAAKA,CAAC,CAAEJ,WAAAA,EAAYE,YAAAA,CAAY,EAC9C,CAAE,MAAOjlB,EAAG,CACV0a,QAAQ/H,KAAK,CAAC3S,EAChB,CACA,MAAO,CACL6gB,QAAAA,EACA6D,mBAAAA,EACAzf,MAAAA,CACF,CACF,EAAG,CAACqd,GAAmBD,GAAcL,EAAWnB,EAASsB,GAASC,GAASpI,EAASE,EAAQ,GIY1FwK,GAGElC,GAHFkC,kBAAAA,CACA7D,GAEE2B,GAFF3B,OAAAA,CACA5b,GACEud,GADFvd,KAAAA,CAEImgB,GAAcvgB,CAAAA,EAAAA,EAAAA,OAAAA,EAClB,kBAAMwgB,IAA4BpM,CAAAA,EAAAA,GAAAA,EAAAA,EAAwBoM,GAA0Bzb,GAAgB,CAAC,EAAE,EACvG,CAACyb,GAA0Bzb,GAAgB,EAEvC0b,GAAoBzgB,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,UAAM,QACtC,IAAyBwgB,GAGlBE,EAAAA,EAAAA,CAAAA,QAA4B,CAAC,IAAIzG,EAAAA,EAAOA,CAACnV,GAAgB+D,QAAQ,CAAE2X,GAAyB3X,QAAQ,GAFlG,IAAI,EAGZ,CAAC/D,GAAiB0b,GAAyB,EAExCG,GAAmB7E,GAAgB2E,IAGnC1O,GAA2D,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAEA,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAACmR,MAAM,CAC1G,SAACC,CAAAA,CAAaC,CAAAA,CAAU,CACtB,MAAO,GAAAC,EAAA3b,CAAA,KAAA4b,EAAA5b,CAAA,KACFyb,GACH,GAAAjI,EAAAxT,CAAA,KAAC0b,EAAQG,CAAAA,EAAAA,GAAAA,CAAAA,EAAejD,EAAgB,CAAC8C,EAAM,GAEnD,EACA,CAAC,GAGsDxF,GAAAA,KAAjDU,GAAiDV,GAAjDU,qBAAAA,CAAuBM,GAA0BhB,GAA1BgB,qBAAAA,CAGzBuF,GAAmBjT,CAAAA,EAAAA,EAAAA,OAAAA,EACvB,eAAO+J,SAAAA,EAAA,GACL,GAAAC,EAAAxT,CAAA,EADKuT,EACJ0G,GAAmBC,IACpB,GAAA1G,EAAAxT,CAAA,EAFKuT,EAEJ8G,GAAiBF,IAFb5G,CAAA,EAIP,CAAC8G,GAAgBJ,GAAkBE,GAAiBD,GAAW,EAGhBkN,GAAAA,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,GAAAA,EAAmBA,EAAvEjB,GAAyCgB,GAAzChB,kBAAAA,CAAoBH,GAAqBmB,GAArBnB,gBAAAA,CACtBmE,GAAY1hB,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB0d,GAAmBrf,OAAO,EACdyH,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC7C1I,GAAG,4EACH,CACEmM,UAAW,QACb,GAJMrD,GAAuCJ,GAAvCI,SAAAA,CAAWF,GAA4BF,GAA5BE,OAAAA,CAASC,GAAmBH,GAAnBG,cAAAA,CAQU+N,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAmBhN,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAE+b,MAAAA,GAAAA,KAAAA,EAAAA,GAAoBrf,OAAO,KAA9G6V,GAA+BF,EAAAA,CAAAA,EAAAA,CAApBG,GAAoBH,EAAAA,CAAAA,EAAAA,CACAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAmBhN,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAE+b,MAAAA,GAAAA,KAAAA,EAAAA,GAAoBrf,OAAO,KAA9G+V,GAA+BJ,EAAAA,CAAAA,EAAAA,CAApBK,GAAoBL,EAAAA,CAAAA,EAAAA,CAEhCM,GAAiBC,CAAAA,EAAAA,GAAAA,EAAAA,aAERrN,IAAAA,QAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAAA,oBAAAA,IAAAA,OAAAA,CAAAA,GAAf,GAAAwN,EAAApd,CAAA,YAAuB,KAiBHqd,EACAC,EAIhB2I,EAAsC5I,EAAAA,EAnBZA,EAAmCC,EAEzD+M,EACAC,EAMAC,EAEAhN,EACAC,EAEAgN,EACAC,EAQAhN,kEAzBN,GAAI,CAAC5X,IAAW,CAACqP,IAAW,CAACkR,KAED/I,EAAqD3N,EAAAA,CAAxErF,EAAAA,EAAAA,CAAAA,UAAgB,EAAsCiT,EAAkB5N,EAAAA,CAArCrF,EAAAA,EAAAA,CAAAA,UAAgB,EAEtDggB,EAA6BhN,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAelC,WAAW,CAAC,KAAMmC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAenC,WAAW,CAAC,IACzFmP,EAAwBjN,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAelC,WAAW,CAAC,KAAMmC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAenC,WAAW,CAAC,IAEtFrR,GAAc,CAACwgB,EAAwB,CAACD,CAA0B,EAPrB,UA8BjD,OAnBME,EAAmB3M,CAAAA,EAAAA,GAAAA,EAAAA,EAAwBtP,GAAiBxE,GAAc,EAAIyE,EAAe,CAAC,CAAC,EAAE,CAEjGgP,EAAW6I,GAAmBtI,WAAW,CAAC4M,aAAa,CACvDlN,EAAS4I,GAAmBsE,aAAa,CAEzCF,EAAYnN,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAuB,GAAvBA,CAAAA,EAAAA,EAAehL,QAAQ,GAAvBgL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyB3a,QAAAA,EAAAA,GAAc,IACnD+nB,EAAYnN,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAuB,GAAvBA,CAAAA,EAAAA,EAAejL,QAAQ,GAAvBiL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyB5a,QAAAA,EAAAA,GAAc,IAQnD+a,EAAAA,CAJJwI,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,IAAwB,GAAxBA,CAAAA,EAAAA,GAAkBlU,MAAM,GAAxBkU,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA0Blf,OAAF,IAAcsW,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAuB,GAAvBA,CAAAA,EAAAA,EAAenX,QAAQ,GAAvBmX,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,IAAyBhK,GAAzBgK,CAAAA,EAAAA,EAAyBhK,OAAAA,GAAAA,KAAAA,IAAAA,EAAzBgK,KAAAA,EAAAA,EAAkCtW,OAAX,GACxDyjB,EAAWC,IACXA,EAAWD,EAAU,CAEAT,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GAAarnB,QAAQ,KAAM6nB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAkB7nB,QAAQ,KAIjFmY,GAAkB,CAAEtL,cAAe,GAAMI,sBAAuB4C,KAAAA,EAAWoI,OAAQpI,KAAAA,CAAU,GAC7F,GAAMgL,EAAAA,KAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAYE,GAAAA,MAAAA,CAAAA,CAA0B,CAAC,KAC1CY,IAAI,CAAC,SAACC,CAAAA,CAAAA,CACLd,OAAAA,EAAAA,KAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAUC,GAAAA,MAAAA,CAAVD,CAAgB,GAAA7B,EAAA3b,CAAA,KAAA4b,EAAA5b,CAAA,KACU,CAAC,GAAC,CAC1Bue,SAAUC,CAAAA,EAAAA,GAAAA,EAAAA,EAAmBF,GAC7B5E,SAAAA,KACA,GAAC2E,IAAI,CAAC,SAACI,CAAAA,CAAa,CACpB5D,GAAkB,CAAEtL,cAAe,GAAOI,sBAAuB4C,KAAAA,EAAWoI,OAAQ8D,EAASjP,IAAI,GAEjG,IAAgB7J,EACA+J,EACA/J,EACA+J,EAHVgP,EAAU/Y,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CAC9CsX,EAAUjP,CAAAA,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,KAAM,IAC/D2U,EAAUjZ,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8B0B,MAAM,CAC9CwX,EAAUnP,CAAAA,IAA+B,GAA/BA,CAAAA,EAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiCzF,aAAAA,CAAc,KAAM,IACrE+S,GAAeyB,EAAU,CACvBK,QAAS,OAAkBJ,MAAAA,CAAXC,EAAQ,KAAkBE,MAAAA,CAAfH,EAAQ,SAAkBE,MAAAA,CAAXC,EAAQ,KAAWjX,MAAA,CAARgX,GACrDG,oBAAqB,CACnBvZ,KAAM,kDACNqD,KAAM,CAAE8V,QAAAA,EAASD,QAAAA,EAASG,QAAAA,EAASD,QAAAA,CAAQ,CAC7C,EACAI,KAAM,eACR,EACF,KAEDC,KAAK,CAAC,SAACC,CAAAA,CAAQ,CACVA,GAAOA,OAAAA,EAAIC,IAAI,GACjBC,CAAAA,EAAAA,EAAAA,CAAAA,EAASF,GACTG,QAAQ/H,KAAK,CAAE,uBAAuB4H,EAAKzB,EA7BnC,IAAI,GA+Bd5C,GAAkB,CAChBtL,cAAe,GACfI,sBACEuP,GAAOA,OAAAA,EAAIC,IAAI,CACXrZ,GAAE,kCAAmC,CAAE6K,QAAS2O,CAAAA,EAAAA,EAAAA,CAAAA,EAAsCJ,EAAKpZ,GAAG,GAC9FyM,KAAAA,CAAS,CACfoI,OAAQpI,KAAAA,CACV,EACF,kBApCFgN,EAAAC,IAAA,SAqCF,IApEe5P,KAAAA,CAAAA,IAAAA,CAAAA,WAsEf,IAAMH,GAAc3J,GAAE,wDAAyD,CAC7E6Y,QAASjP,IAA+C,GAA/CA,CAAAA,GAAAA,IAA+B,GAA/BA,CAAAA,GAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAiCzF,aAAAA,CAAc,KAA/CyF,KAAAA,IAAAA,GAAAA,GAAqD,EAAE,CAChEgP,QAAS/Y,IAAoC,GAApCA,CAAAA,GAAAA,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,GAAAA,GAAwC,EAAE,CACnDkZ,QAASnP,IAA+C,GAA/CA,CAAAA,GAAAA,IAA+B,GAA/BA,CAAAA,GAAAA,EAAa,CAACrF,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA/BqF,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAAiCzF,aAAAA,CAAc,KAA/CyF,KAAAA,IAAAA,GAAAA,GAAqD,EAAE,CAChEkP,QAASjZ,IAAoC,GAApCA,CAAAA,GAAAA,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,GAApC1B,KAAAA,IAAAA,GAAAA,GAAwC,EAAE,GAG/C8Z,GAA4BnP,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,CAE9CqK,KACFF,GAAc,IACdC,GAAc,IAElB,EAAG,CAACD,GAAeC,GAAeC,GAAO,EAElCuF,GAA8BnY,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EACnC,GAAAgC,EAAAjG,GAAA,EAACqc,GAAwBA,CACvB5Z,MAAOuD,GAAchE,GAAE,mCAAqCA,GAAE,mBAAmB,CACjFwJ,gBAAiBmQ,GACjBlQ,cAAeA,GACfC,KAAMmL,GACNlL,YAAaA,GACbI,cAAewB,MAAAA,GAAAA,KAAAA,EAAAA,GAAMO,cAAc,CACnCrD,gBAAiBA,GACjBqB,MAAOA,GACPF,cAAeA,GACf/J,WAAYA,GACZgK,sBAAuBA,GACvB/F,MAAOA,GACPE,YAAaA,GACbD,oBAAqBA,GACrByE,gBAAiBA,GACjBwB,SAAQ,KAEV,GACA,GACA,uBArBmC/H,CAAAA,EAAAA,CAwBjC0P,GAAU,CAACH,GACX0J,GAAY1J,GAEhBG,GAAU,CAACH,IAAS,CAACiD,GACrByG,GAAY1J,MAAAA,GAAAA,GAASiD,EAAQ,CAE7B,IAAQ8C,GAAyE3N,EAAAA,CAAxErF,EAAAA,EAAAA,CAAAA,UAAgB,EAAkBiT,GAAsC5N,EAAAA,CAArCrF,EAAAA,EAAAA,CAAAA,UAAgB,EAEtDsgB,GACJ,CAACtN,MAAAA,GAAAA,KAAAA,EAAAA,GAAelC,WAAW,CAAC,KAAMyB,KAAcsE,GAAAA,EAAAA,CAAAA,QAAsB,EACrE5D,CAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GAAenC,WAAW,CAAC,KAAM2B,KAAcoE,GAAAA,EAAAA,CAAAA,QAAsB,CAElED,GAAiB,CAACxJ,IAAWkT,IAAmBR,GAAmB,GAAK,CAACnR,GAEzEoI,GAAqBxE,KAAcsE,GAAAA,EAAAA,CAAAA,YAA0B,EAAItE,KAAcsE,GAAAA,EAAAA,CAAAA,OAAqB,CACpGG,GAAqBvE,KAAcoE,GAAAA,EAAAA,CAAAA,YAA0B,EAAIpE,KAAcoE,GAAAA,EAAAA,CAAAA,OAAqB,CAEpGI,GAA0B,CAACF,IAAsBC,EAAAA,GAAuB5J,GAExE8J,GAAuBC,QAC3B3b,IAAY4H,CAAAA,IAAcA,GAAUgG,MAAM,CAACgO,EAAAA,EAAO,CAAC5b,GAAQ,GAAO6H,IAAaA,GAAU+F,MAAM,CAACgO,EAAAA,EAAO,CAAC5b,GAAQ,IAG3Gqc,GAA0Bna,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,GAAAgC,EAAAjG,GAAA,EAACqe,GAAAA,CAAaA,CAAAA,CAACC,KAAMC,GAAAA,CAAAA,CAAAA,cAA2B,MAAzDta,CAAAA,EAAAA,CAEjC,MACE,GAAAgC,EAAAvD,IAAA,EAAC8b,GAAAA,CAAIA,CAAAA,WACH,GAAAvY,EAAAjG,GAAA,EAACye,EAAAA,CAAOA,CAAAA,UACN,GAAAxY,EAAAvD,IAAA,EAAAuD,EAAA6J,QAAA,YACE,GAAA7J,EAAAjG,GAAA,EAAC+T,EAAAA,CAASA,CAAAA,CACRtR,MACEZ,CAAAA,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,GAAI1B,CAAAA,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,EACxE,GAA0C1B,MAAAA,CAAvCA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAChD,MAAM,CAAC,KAAuCO,MAAA,CAApCjC,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAChD,MAAM,CAAC,cAC9EvB,GAAE,uBAAuB,CAE/BkS,OAAO,eAET,GAAAjO,EAAAjG,GAAA,EAACmU,EAAAA,CAAQA,CAAAA,UACP,GAAAlO,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,iBACboD,IACC,GAAAC,EAAAjG,GAAA,EAAC0e,EAAAA,EAAYA,CAAAA,UACX,GAAAzY,EAAAjG,GAAA,EAAC2e,EAAAA,CAAOA,CAAAA,CAAC/e,QAAQ,mBACf,GAAAqG,EAAAvD,IAAA,EAACuH,MAAAA,WACC,GAAAhE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAACmV,GAAG,eACX5c,GAAE,2CAEL,GAAAiE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAACsb,GAAG,eAAO5c,GAAE,kEAClB,GAAAiE,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,UAAEtB,GAAE,qEAKjB,GAAAiE,EAAAjG,GAAA,EAAC6e,EAAAA,CAAkBA,CAAAA,CACjBE,aAAY,GACZnO,iBAAkBkC,GAClByM,SAAS,QACTvgB,MAAO2Z,EAAgB,CAACpS,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACzCiZ,YAAa7I,GACb8I,eAAgB,SAACxY,CAAAA,CAAY,CAC3B,GAAIwQ,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAE,KAClBkR,EAAAA,EAAdd,GAAcc,IAA2E,GAA3EA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BiI,QAAAA,CAAS,IAAIC,EAAAA,EAAOA,CAAC1Y,EAAS,MAAMoI,OAAO,EAAE,GAA3EoI,KAAAA,IAAAA,EAAAA,EAA+E,EAAE,CACjG,CAAC,EAEHmI,MAAO,UAAM,KACGnI,EAAAA,EAAdd,GAAcc,IAA8BpI,GAA9BoI,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BpI,OAAAA,EAAAA,GAA9BoI,KAAAA,IAAAA,EAAAA,EAA2C,EAAE,CAC7D,EACAoI,qBAAoB,GACpBC,cAAa,GACbC,UAAWtI,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACvCnE,SAAUP,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACtC8B,GAAG,6BACH0I,gBAAe,GACfC,gBAAiBsD,GAAAA,EAAAA,CAAAA,SAAyB,GAE5C,GAAArO,EAAAjG,GAAA,EAAC0e,EAAAA,EAAYA,CAAAA,UACX,GAAAzY,EAAAjG,GAAA,EAACuU,EAAAA,CAAOA,CAAAA,CAAClN,MAAM,WAEjB,GAAApB,EAAAjG,GAAA,EAAC6e,EAAAA,CAAkBA,CAAAA,CACjBE,aAAY,GACZnO,iBAAkBwC,GAClBmM,SAAS,QACTvgB,MAAO2Z,EAAgB,CAACpS,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACzCiZ,YAAa5I,GACb6I,eAAgB,SAACxY,CAAAA,CAAY,CAC3B,GAAIwQ,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CAAE,KAClBkR,EAAAA,EAAdb,GAAca,IAA2E,GAA3EA,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BiI,QAAAA,CAAS,IAAIC,EAAAA,EAAOA,CAAC1Y,EAAS,MAAMoI,OAAO,EAAE,GAA3EoI,KAAAA,IAAAA,EAAAA,EAA+E,EAAE,CACjG,CAAC,EAEHmI,MAAO,UAAM,KACGnI,EAAAA,EAAdb,GAAca,IAA8BpI,GAA9BoI,CAAAA,EAAAA,IAA4B,GAA5BA,CAAAA,EAAAA,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5BkR,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8BpI,OAAAA,EAAAA,GAA9BoI,KAAAA,IAAAA,EAAAA,EAA2C,EAAE,CAC7D,EACAoI,qBAAoB,GACpBC,cAAa,GACbC,UAAWtI,EAAU,CAAClR,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACvCnE,SAAUP,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,CACtC8B,GAAG,6BACH0I,gBAAe,GACfC,gBAAiBsD,GAAAA,EAAAA,CAAAA,SAAyB,GAG3CzS,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAI1E,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,EAAIiQ,KAAc6J,GAAAA,EAAAA,CAAAA,OAAiB,EAC9F,GAAApa,EAAAjG,GAAA,EAAAiG,EAAA6J,QAAA,WACE,GAAA7J,EAAAvD,IAAA,EAAC4d,EAAAA,EAASA,CAAAA,CAACC,QAAQ,MAAMC,aAAa,iBACpC,GAAAva,EAAAjG,GAAA,EAACqK,EAAAA,EAAUA,CAAAA,CAACkW,QAAQ,gBAClB,GAAAta,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAAC8C,SAAS,gBACZJ,GAAchE,GAAE,wCAA0CA,GAAE,mBAAmB,KAEtE,IACd,GAAAiE,EAAAjG,GAAA,EAACsgB,EAAAA,EAASA,CAAAA,CAACC,QAAQ,OAAOC,aAAa,gBACrC,GAAAva,EAAAjG,GAAA,EAACygB,GAAYA,CACX5e,WAAYA,GACZkE,oBAAqBA,GACrBC,YAAaA,GACbF,MAAOA,YAOjB,GAAAG,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAvD,IAAA,EAACmN,EAAAA,EAAQA,CAAAA,WACP,GAAA5J,EAAAjG,GAAA,EAACsD,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAACrD,SAAS,OAAOzC,MAAM,qBAC9B3B,GAAE,cAEL,GAAAiE,EAAAjG,GAAA,EAAC8mB,GAAAA,CAAcA,CAAAA,CACbplB,KAAMM,GACJ,uGAEFqB,KAAK,OACL+H,GAAG,MACH+C,UAAU,iBAId,GAAAlI,EAAAjG,GAAA,EAACyhB,GAAiBA,CAChB9W,SAAUwb,GACVzE,QAAS,CAACyE,IAAsBzE,CAAAA,IAAWqF,EAAAA,OAI/C,GAAA9gB,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAACrD,SAAS,OAAOzC,MAAM,sBAC9B3B,GAAE,sBACH,GAAAiE,EAAAjG,GAAA,EAAC0gB,EAAAA,CAAUA,CAAAA,CAAClf,MAAM,KAAK5B,QAAQ,OAAOgB,QAASwd,YAC7C,GAAAnY,EAAAjG,GAAA,EAAC2gB,EAAAA,CAAUA,CAAAA,CAAChd,MAAM,UAAU0D,MAAM,cAGtC,GAAApB,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAAC9F,MAAM,oBACd8G,GAAkB,IAAI,UAI1B6b,GACC,GAAArgB,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,WACT,GAAApE,EAAAjG,GAAA,EAACsL,EAAAA,CAAWA,CAAAA,CAACpB,IAAKY,GAAWrB,KAAI,GAACrD,SAAS,OAAOzC,MAAM,qBACrD3B,GAAE,mBAEJ6I,IAAkBD,GACnB,GAAA3E,EAAAvD,IAAA,EAACY,EAAAA,CAAIA,CAAAA,CAACmG,KAAI,GAAC9F,MAAM,oBACd6Q,CAAAA,EAAAA,GAAAA,CAAAA,EAAa8R,IAAW,UAG3B,IAAI,CAEP,GAEGlmB,GACF,GAAA6F,EAAAjG,GAAA,EAACE,EAAAA,CAAYA,CAAAA,CAAAA,GAEb,GAAA+F,EAAAvD,IAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,IAAI,eACb4a,IACC,GAAAvX,EAAAvD,IAAA,EAAC2H,EAAAA,EAAUA,CAAAA,CAACD,MAAO,CAAExH,IAAK,KAAM,YAC7B0a,IACC,GAAArX,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAACC,QAASmY,GAAkBlZ,SAAUiZ,KAAcsE,GAAAA,EAAAA,CAAAA,OAAqB,CAAE/V,MAAM,gBACrFyR,KAAcsE,GAAAA,EAAAA,CAAAA,OAAqB,CAClC,GAAAnX,EAAAjG,GAAA,EAAC4gB,GAAAA,CAAIA,CAAAA,UAAE5e,GAAE,mBAAoB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,KAE1EvB,GAAE,iBAAkB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,EAClE,GAGJga,IACC,GAAAtX,EAAAjG,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAACC,QAASqY,GAAkBpZ,SAAUmZ,KAAcoE,GAAAA,EAAAA,CAAAA,OAAqB,CAAE/V,MAAM,gBACrF2R,KAAcoE,GAAAA,EAAAA,CAAAA,OAAqB,CAClC,GAAAnX,EAAAjG,GAAA,EAAC4gB,GAAAA,CAAIA,CAAAA,UAAE5e,GAAE,mBAAoB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,KAE1EvB,GAAE,iBAAkB,CAAE6e,MAAOhf,IAA4B,GAA5BA,CAAAA,GAAAA,EAAU,CAAC0E,EAAAA,EAAAA,CAAAA,UAAgB,CAAC,GAA5B1E,KAAAA,IAAAA,GAAAA,KAAAA,EAAAA,GAA8B0B,MAAM,EAClE,MAKT,GAAA0C,EAAAjG,GAAA,EAACE,EAAAA,CAAYA,CAAAA,CACXN,QAAS,CAAC+T,IAAW0S,GAAmB,EAAI,SAAW,SAAS,CAChEzlB,QAAS,UAAM,CACTsU,GACFpJ,MAEAiL,GAAkB,CAChBtL,cAAe,GACfI,sBAAuB4C,KAAAA,EACvBoI,OAAQpI,KAAAA,CACV,GACA2N,KAEJ,EACAvc,SAAUsd,YAETD,IAAalb,GAAE,cAGrB,CA9CC,GAAAiE,EAAAjG,GAAA,EAAC4U,GAAAA,CAAmBA,CAAAA,CAAAA,EA8CrB,WAKRrH,IAAQ,CAACvH,IAAewQ,KAAc6J,GAAAA,EAAAA,CAAAA,OAAiB,CACtD,GAAApa,EAAAjG,GAAA,EAAC2C,EAAAA,EAAUA,CAAAA,CAACyH,MAAO,CAAE8C,SAAU,QAAS7F,MAAO,OAAQ0Z,SAAU,QAASC,UAAW,MAAO,WAC1F,GAAA/a,EAAAjG,GAAA,EAACihB,EAAAA,EAAmBA,CAAAA,CAACC,cAAezD,GAAsBlQ,KAAMA,OAEhE,IAAI,GAGd,CCvdA,IAAMyZ,GAAmB,UAAM,CAC7B,IAQE3U,EAA0BC,EAA1BD,EARII,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACT3Q,EAAc1B,CAAAA,EAAAA,GAAAA,CAAAA,IAAZ0B,OAAAA,CACFklB,EAAWC,CAAAA,EAAAA,EAAAA,EAAAA,IAEX3U,EAASC,CAAAA,EAAAA,EAAAA,CAAAA,IAEoBC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAOE,KAAK,CAACvQ,QAAQ,EAAI,CAC1DmQ,EAAOhP,MAAM,CACb8O,IAAsB,GAAtBA,CAAAA,EAAAA,IAAa,GAAbA,CAAAA,EAAAA,EAAAA,EAAI,CAACtQ,EAAQ,GAAbsQ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAepP,OAAO,GAAtBoP,KAAAA,IAAAA,EAAAA,EAA0BC,IAAa,GAAbA,CAAAA,EAAAA,EAAAA,EAAI,CAACvQ,EAAQ,GAAbuQ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAerP,OAAO,CACjD,IAHM2P,EAA4BH,CAAAA,CAAAA,EAAAA,CAAfI,EAAeJ,CAAAA,CAAAA,EAAAA,CAK7B9I,EAAYwd,CAAAA,EAAAA,EAAAA,EAAAA,EAAYvU,GACxBhJ,EAAYud,CAAAA,EAAAA,EAAAA,EAAAA,EAAYtU,GAExBuU,EAAeC,CAAAA,EAAAA,GAAAA,EAAAA,EAAgB,CACnCC,OAAQ3d,EACR4d,OAAQ3d,CACV,GAQA,MANAkM,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CACTlD,GAAgBC,GACnBoU,EAASO,CAAAA,EAAAA,EAAAA,EAAAA,IAEb,EAAG,CAACP,EAAUrU,EAAaC,EAAY,EAEhCuU,EAAajF,gBAAgB,CAClC,GAAAlc,EAAAjG,GAAA,EAACujB,GAAAA,EAAAA,CAAAA,QAA4B,EAACvkB,MAAOooB,WACnC,GAAAnhB,EAAAjG,GAAA,EAACkiB,GAAkBA,CAACvY,UAAWA,EAAWC,UAAWA,MAGvD,GAAA3D,EAAAjG,GAAA,EAAC6U,GAAYA,CAAClL,UAAWA,EAAWC,UAAWA,GAChD,CAGHod,CAAAA,GAAiBS,MAAM,CAAGC,EAAAA,EAASA,WAEnCC,GAAeX,qFCjDF7b,EAAc,SAACyc,CAAAA,CAAsBC,CAAAA,CAAsB9lB,CAAAA,CAAoB,QAC1F,IAAqB4b,EAAAA,EAAO,CAAC5b,EAAQ,CAACwB,MAAM,CACnC,GAA6BskB,MAAAA,CAA1BC,EAAAA,EAAM,CAAC/lB,EAAQ,CAACwB,MAAM,CAAC,KAAgBO,MAAA,CAAb+jB,EAAa,OAE/CA,IAAiBlK,EAAAA,EAAO,CAAC5b,EAAQ,CAACwB,MAAM,CACnC,GAAmBukB,MAAAA,CAAhBF,EAAa,KAA0B9jB,MAAA,CAAvBgkB,EAAAA,EAAM,CAAC/lB,EAAQ,CAACwB,MAAM,CAAC,OAE5C,GAAmBskB,MAAAA,CAAhBD,EAAa,KAAgB9jB,MAAA,CAAb+jB,EAAa,MAJtC,sCCGI,SAASrM,EAAsChI,CAAU,CAAExR,CAAoB,CAAE,CAEtF,KAAOwR,GACLuU,EAASvU,IAAoD,GAApDA,CAAAA,EAAAA,IAAmC,GAAnCA,CAAAA,EAAAA,IAAY,GAAZA,CAAAA,EAAAA,EAAMuU,MAAM,GAAZvU,KAAAA,IAAAA,EAAAA,EAAgBA,IAAU,GAAVA,CAAAA,EAAAA,EAAMzO,IAAI,GAAVyO,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAY3G,OAAO,GAAnC2G,KAAAA,IAAAA,EAAAA,EAAuCA,EAAM3G,OAAO,GAApD2G,KAAAA,IAAAA,EAAAA,EAAwDuU,CAAM,CAEvEvU,EAAQA,IAAW,GAAXA,CAAAA,EAAAA,EAAMA,KAAK,GAAXA,KAAAA,IAAAA,EAAAA,EAAeA,IAAU,GAAVA,CAAAA,EAAAA,EAAMzO,IAAI,GAAVyO,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAYwU,aAAa,CAG9CD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQE,OAAO,CAAC,2BAA4B,GAAGF,CAAAA,EAASA,EAAOG,SAAS,CAAC,GAA6B,EAE1G,IATIH,EAEuBvU,EAEFA,EAFdA,EAAAA,EAAAA,EAEDA,EAKJ2U,EAAqB,SAACtb,CAAAA,CAAAA,OAAoB,CAACA,EAAU,IAAU/I,MAAA,CAAPikB,EAAO,KAAG,CAACK,IAAI,CAAC,MAC9E,OAAQL,GACN,IAAK,yBACH,OAAOI,EACLnmB,EACE,kIAGN,KAAK,4CACL,IAAK,wCACL,IAAK,uCACL,IAAK,uCACL,IAAK,oCACL,IAAK,aACH,OAAOmmB,EACLnmB,EACE,8HAGN,KAAK,uCACH,OAAOmmB,EAAmBnmB,EAAE,sFAC9B,KAAK,2BACH,OAAOmmB,EACLnmB,EAAE,wFAEN,SACE,GAAI+lB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQE,OAAO,CAAC,iCAAkC,GAEpD,OADA1M,QAAQ/H,KAAK,CAACA,EAAOuU,GACd/lB,EACL,oMAEH,CACD,OAAOA,EAAE,iEAAkE,CACzE+lB,OAAQA,EAAS,MAAajkB,MAAA,CAAPikB,EAAO,KAAK,EAAE,EAE3C,CACF,+LC3CahY,EAA6EsY,CAAAA,EAAAA,EAAAA,IAAAA,EACxF,SAAArnB,CAAA,CAA+D,KAA5DgP,EAAAA,EAAAA,aAAAA,CAAetC,EAAAA,EAAAA,OAAAA,CAASC,EAAAA,EAAAA,aAAAA,CAAesC,EAAAA,EAAAA,cAAAA,CAClCjO,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,IAAND,CAAAA,CACFsmB,EAAgBC,CAAAA,EAAAA,EAAAA,CAAAA,IAAdD,SAAAA,CAWR,MACE,GAAAvoB,EAAAC,GAAA,EAAC8G,EAAAA,EAAGA,CAAAA,CAACoZ,OAAO,OAAO7Y,MAAO,CAAC,OAAQ,OAAQ,QAAQ,UACjD,GAAAtH,EAAAC,GAAA,EAAC2e,EAAAA,CAAOA,CAAAA,CAAC/e,QAAQ,UAAUgf,GAAG,gBAC5B,GAAA7e,EAAA2C,IAAA,EAACsH,EAAAA,CAAIA,CAAAA,CAACwe,cAAc,mBAClB,GAAAzoB,EAAAC,GAAA,EAACggB,EAAAA,CAAWA,CAAAA,CAACvW,KAAI,YAAEzH,EAAE,mDACrB,GAAAjC,EAAA2C,IAAA,EAACsd,EAAAA,CAAWA,CAAAA,CAACtc,MAAK,aACfsM,EACGhO,EAAE,2FACFA,EACG,2IACF,CACL,GAAAjC,EAAAC,GAAA,EAACW,EAAAA,CAAMA,CAAAA,CAAC+Q,EAAE,QAAQlQ,MAAM,KAAK5B,QAAQ,OAAO0H,OAAO,OAAO1G,QApB1C,UAAM,CAC9BqP,IAEIvC,IACFC,EAAc,CAACD,GACf4a,EAAUtmB,EAAE,QAASA,EAAE,6BAE3B,WAcaA,EAAE,UAEJA,EAAE,wCAMf,0lEC1CK,IAAMymB,EAAU1nB,CAAAA,EAAAA,EAAAA,EAAAA,EAAOiJ,EAAAA,CAAIA,EAAAA,UAAAA,CAAAA,oCAOrB0e,EAAe3nB,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,UAAU,oCAGlC,SAAAC,CAAA,SACA2nB,EADGA,SAAAA,CAECC,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,KAMH,IAAI,GAGC5G,EAAYjhB,CAAAA,EAAAA,EAAAA,EAAAA,EAAOuC,EAAAA,CAAIA,EAAAA,UAAAA,CAAAA,mCACzB,SAAAtC,CAAA,MAAGC,EAAAA,EAAAA,KAAAA,CAAOghB,EAAAA,EAAAA,QAAAA,QACjBA,IAAAA,GAAkBA,IAAAA,EACdhhB,EAAMC,MAAM,CAAC2nB,OAAO,CACpB5G,IAAAA,EACAhhB,EAAMC,MAAM,CAAC4nB,OAAO,CACpB7G,IAAAA,EACAhhB,EAAMC,MAAM,CAACQ,IAAI,CACjBT,EAAMC,MAAM,CAAC6nB,OAAO,GAGfC,EAAuBjoB,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,UAAa,oCAG3B,SAAAC,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACC,UAAU,EAQjD,SAAAH,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACQ,IAAI,EAOnB,SAAAV,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAAC+nB,QAAQ,EAGpC,SAAAjoB,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAAC+nB,QAAQ,GAK/CC,EAAgBnoB,CAAAA,EAAAA,EAAAA,EAAAA,EAAOuC,EAAAA,CAAIA,EAAE6lB,KAAK,CAAC,CAAEC,SAAU,EAAK,GAAAC,UAAA,qCAI3DC,EAAyBvoB,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,UAAU,oCACnB,SAAAC,CAAA,MAAGC,EAAAA,EAAAA,KAAAA,OAAY,GAA0B6C,MAAA,CAAvB7C,EAAMC,MAAM,CAACqoB,SAAS,GAQnD,SAAAvoB,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAAC2nB,OAAO,GASxCW,EAAsCzoB,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,UAAU,oCAChC,SAAAC,CAAA,MAAGC,EAAAA,EAAAA,KAAAA,OAAY,GAA0B6C,MAAA,CAAvB7C,EAAMC,MAAM,CAACqoB,SAAS,IAUvD,SAASE,EAAkBzoB,CAA4B,CAAE,KAA9BwS,EAAAxS,EAAEwS,KAAAA,CAClC,MACE,GAAAlS,EAAAoB,IAAA,EAAC4mB,EAAAA,WACC,GAAAhoB,EAAAtB,GAAA,EAACwpB,EAAAA,UACC,GAAAloB,EAAAtB,GAAA,EAAC0pB,EAAAA,CAASA,CAAAA,CAACriB,MAAM,WAEnB,GAAA/F,EAAAtB,GAAA,EAAC0R,IAAAA,UAAG8B,MAGV,CAEO,IAAMmW,EAAwB5oB,CAAAA,EAAAA,EAAAA,EAAAA,EAAO4B,EAAAA,EAAUA,EAAAA,UAAAA,CAAAA,mCAChC,SAAA3B,CAAA,MAAGC,EAAAA,EAAAA,KAAAA,OAAY,GAA0B6C,MAAA,CAAvB7C,EAAMC,MAAM,CAAC0oB,SAAS,oLCrG9D,IAAMlV,EAAa3T,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,UAAU,oCACH,SAAAC,CAAA,SAAeC,EAAZA,KAAAA,CAAkBC,MAAM,CAACE,UAAU,EAC5DyoB,EAAAA,EAAKA,CAGTnV,CAAAA,EAAWoV,YAAY,CAAG,CACxBpY,EAAG,MACL,EAEAqY,EAAA,EAAerV,gGCFfqV,CAAAA,EAAA,EAR0D,SAAC5pB,CAAAA,CAAU,CACnE,MACE,GAAAJ,EAAAC,GAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAACG,QAAQ,aAAgBpH,GAAAA,UAC3B,GAAAJ,EAAAC,GAAA,EAACgqB,OAAAA,CAAKC,EAAE,6KAGd,uMCPA,IAAMxB,EAAU1nB,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,UAAU,qCAInB,SAAS+L,EAAyB9L,CAMxC,CAAE,KALDgM,EADuChM,EACvCgM,aAAAA,CACAD,EAFuC/L,EAEvC+L,UAAAA,CAKA,MACE,GAAAzL,EAAAoB,IAAA,EAAC+lB,EAAAA,WACC,GAAAnnB,EAAAtB,GAAA,EAAC8G,EAAAA,EAAGA,CAAAA,UAAEiG,MACN,GAAAzL,EAAAtB,GAAA,EAAC8G,EAAAA,EAAGA,CAAAA,UAAEkG,QAGZ","sources":["webpack://_N_E/../../node_modules/date-fns/esm/addMonths/index.js","webpack://_N_E/../../node_modules/date-fns/esm/startOfHour/index.js","webpack://_N_E/../../node_modules/date-fns/esm/subMonths/index.js","webpack://_N_E/../../node_modules/date-fns/esm/sub/index.js","webpack://_N_E/../../node_modules/lodash/toLower.js","webpack://_N_E/../../node_modules/lodash/union.js","webpack://_N_E/?1f45","webpack://_N_E/./src/components/CommitButton.tsx","webpack://_N_E/./src/components/CurrencyInputPanel/ZapCheckbox.tsx","webpack://_N_E/./src/components/UnsupportedCurrencyFooter.tsx","webpack://_N_E/./src/hooks/useCurrentBlockTimestamp.ts","webpack://_N_E/./src/hooks/useStableSwapAPR.ts","webpack://_N_E/./src/hooks/useTransactionDeadline.ts","webpack://_N_E/./src/views/AddLiquidity/PoolPriceBar.tsx","webpack://_N_E/./src/views/AddLiquidity/components/common.tsx","webpack://_N_E/./src/views/AddLiquidity/components/ConfirmAddLiquidityModal.tsx","webpack://_N_E/./src/views/AddLiquidity/components/ConfirmZapInModal.tsx","webpack://_N_E/./src/components/CurrencySelect/index.tsx","webpack://_N_E/./src/views/AddLiquidity/useCurrencySelectRoute.ts","webpack://_N_E/./src/views/AddLiquidity/ChoosePair.tsx","webpack://_N_E/./src/views/AddLiquidity/index.tsx","webpack://_N_E/./src/hooks/useStableSwapInfo.ts","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/hooks/useDerivedLPInfo.ts","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/utils/slippage.ts","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/components/FormattedSlippage.tsx","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/components/index.ts","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/index.tsx","webpack://_N_E/./src/pages/add/[[...currency]].tsx","webpack://_N_E/./src/utils/getLpSymbol.ts","webpack://_N_E/./src/utils/transactionErrorToUserReadableMessage.ts","webpack://_N_E/./src/views/AddLiquidity/components/ZapErrorMessage.tsx","webpack://_N_E/./src/views/Swap/components/styleds.tsx","webpack://_N_E/../../packages/uikit/src/components/Card/CardFooter.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/ArrowDropDown.tsx","webpack://_N_E/../../packages/uikit/src/widgets/Swap/ConfirmationModalContent.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(date, months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","var toString = require('./toString');\n\n/**\n * Converts `string`, as a whole, to lower case just like\n * [String#toLowerCase](https://mdn.io/toLowerCase).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the lower cased string.\n * @example\n *\n * _.toLower('--Foo-Bar--');\n * // => '--foo-bar--'\n *\n * _.toLower('fooBar');\n * // => 'foobar'\n *\n * _.toLower('__FOO_BAR__');\n * // => '__foo_bar__'\n */\nfunction toLower(value) {\n  return toString(value).toLowerCase();\n}\n\nmodule.exports = toLower;\n","var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nmodule.exports = union;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/add/[[...currency]]\",\n      function () {\n        return require(\"private-next-pages/add/[[...currency]].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/add/[[...currency]]\"])\n      });\n    }\n  ","import { Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useSwitchNetworkLoading } from 'hooks/useSwitchNetworkLoading'\nimport { useSetAtom } from 'jotai'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { hideWrongNetworkModalAtom } from './NetworkModal'\nimport Trans from './Trans'\n\nconst wrongNetworkProps: ButtonProps = {\n  variant: 'danger',\n  disabled: false,\n  children: <Trans>Wrong Network</Trans>,\n}\n\nexport const CommitButton = (props: ButtonProps) => {\n  const { isWrongNetwork } = useActiveChainId()\n  const [switchNetworkLoading] = useSwitchNetworkLoading()\n  const setHideWrongNetwork = useSetAtom(hideWrongNetworkModalAtom)\n\n  return (\n    <Button\n      {...props}\n      onClick={(e) => {\n        if (isWrongNetwork) {\n          setHideWrongNetwork(false)\n        } else {\n          props.onClick?.(e)\n        }\n      }}\n      {...(switchNetworkLoading && { disabled: true })}\n      {...(isWrongNetwork && wrongNetworkProps)}\n    />\n  )\n}\n","import { Checkbox } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst ZapCheckBoxWrapper = styled.label`\n  display: grid;\n  place-content: center;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 8px 0px 0px 0px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-right: none;\n  width: 40px;\n`\n\nexport const ZapCheckbox = (props) => {\n  return (\n    <ZapCheckBoxWrapper>\n      <Checkbox scale=\"sm\" {...props} />\n    </ZapCheckBoxWrapper>\n  )\n}\n","import { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link, AutoColumn } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { CurrencyLogo } from 'components/Logo'\nimport { getBlockExploreLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<React.PropsWithChildren<Props>> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveChainId()\n  const { t } = useTranslation()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title={t('Unsupported Assets')} onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"12px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link\n                    external\n                    small\n                    color=\"primaryDark\"\n                    href={getBlockExploreLink(token.address, 'address', chainId)}\n                  >\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            {t(\n              'Some assets are not available through this interface because they may not work well with our smart contract or we are unable to allow trading for legal reasons.',\n            )}\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const { t } = useTranslation()\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        {t('Read more about unsupported assets')}\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import useSWRImmutable from 'swr/immutable'\nimport { SWRConfiguration } from 'swr'\nimport { getAprsForStableFarm } from 'utils/getAprsForStableFarm'\nimport BigNumber from 'bignumber.js'\nimport { useGetChainName } from '../state/info/hooks'\n\nconst refreshIntervalForInfo = 15000 // 15s\nconst SWR_SETTINGS_WITHOUT_REFETCH = {\n  errorRetryCount: 3,\n  errorRetryInterval: 3000,\n}\nconst SWR_SETTINGS: SWRConfiguration = {\n  refreshInterval: refreshIntervalForInfo,\n  ...SWR_SETTINGS_WITHOUT_REFETCH,\n}\n\nexport const useStableSwapAPR = (address: string | undefined): number => {\n  const chainName = useGetChainName()\n  const { data } = useSWRImmutable<BigNumber>(\n    address && [`info/pool/stableAPR/${address}/`, chainName],\n    () => getAprsForStableFarm(address),\n    SWR_SETTINGS,\n  )\n  return data?.toNumber()\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { Currency, Percent, Price } from '@pancakeswap/sdk'\nimport { Text, AutoColumn } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { ONE_BIPS } from 'config/constants/exchange'\nimport { AutoRow } from '../../components/Layout/Row'\nimport { Field } from '../../state/mint/actions'\n\nfunction PoolPriceBar({\n  currencies,\n  noLiquidity,\n  poolTokenPercentage,\n  price,\n}: {\n  currencies: { [field in Field]?: Currency }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Price<Currency, Currency>\n}) {\n  const { t } = useTranslation()\n\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <Text>{price?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_B]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_A]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>{price?.invert()?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('Share in Trading Pair')}\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n\nexport default PoolPriceBar\n","import React from 'react'\nimport { Currency, Fraction, Percent, CurrencyAmount, Token } from '@pancakeswap/sdk'\nimport { Text, useTooltip, TooltipText, Box, Flex, Svg, SvgProps, AutoColumn } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport styled from 'styled-components'\nimport { AutoRow, RowBetween } from 'components/Layout/Row'\nimport { Field } from 'state/burn/actions'\nimport { DoubleCurrencyLogo, CurrencyLogo } from 'components/Logo'\nimport { GreyCard } from 'components/Card'\nimport { getLPSymbol } from 'utils/getLpSymbol'\n\nconst Dot = styled(Box)<{ scale?: 'sm' | 'md' }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n`\n\nconst CircleSvg = ({ percent = 1, stroke = '#1FC7D4', ...props }: SvgProps & { percent?: number; stroke?: string }) => (\n  <Svg width=\"60px\" height=\"60px\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <g filter=\"url(#filter0_i_1147_113741)\">\n      <circle r=\"10\" cx=\"10\" cy=\"10\" fill=\"#7645D9\" />\n      <circle\n        r=\"5\"\n        cx=\"10\"\n        cy=\"10\"\n        fill=\"transparent\"\n        stroke={stroke}\n        strokeWidth=\"10\"\n        strokeDasharray={`calc(${percent * 100}px * 31.4 / 100) 31.4`}\n        transform=\"rotate(-90) translate(-20)\"\n      />\n    </g>\n    <defs>\n      <filter\n        id=\"filter0_i_1147_113741\"\n        x={0}\n        y={0}\n        width={60}\n        height={60}\n        filterUnits=\"userSpaceOnUse\"\n        colorInterpolationFilters=\"sRGB\"\n      >\n        <feFlood floodOpacity={0} result=\"BackgroundImageFix\" />\n        <feBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n        <feColorMatrix in=\"SourceAlpha\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\" />\n        <feOffset dy={-2} />\n        <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2={-1} k3={1} />\n        <feColorMatrix values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0\" />\n        <feBlend in2=\"shape\" result=\"effect1_innerShadow_1147_113741\" />\n      </filter>\n    </defs>\n  </Svg>\n)\n\nconst Subtitle: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return (\n    <Text fontSize=\"12px\" textTransform=\"uppercase\" bold color=\"secondary\">\n      {children}\n    </Text>\n  )\n}\n\nexport const PairDistribution = ({\n  title,\n  percent,\n  currencyA,\n  currencyB,\n  currencyAValue,\n  currencyBValue,\n  tooltipTargetRef,\n}: {\n  title: React.ReactNode\n  percent?: number\n  currencyA?: Currency\n  currencyB?: Currency\n  currencyAValue?: string\n  currencyBValue?: string\n  tooltipTargetRef?: any\n}) => {\n  let stroke\n\n  if (percent === 100) {\n    stroke = currencyAValue ? 'primary' : 'secondary'\n  }\n\n  return (\n    <AutoColumn gap=\"8px\">\n      <Subtitle>{title}</Subtitle>\n      <Flex>\n        {typeof percent !== 'undefined' && (\n          <div ref={tooltipTargetRef}>\n            <CircleSvg stroke={stroke} percent={percent} mr=\"34px\" />\n          </div>\n        )}\n        <AutoColumn style={{ width: '100%' }}>\n          {currencyA && (\n            <RowBetween>\n              <AutoRow gap=\"4px\">\n                <Dot bg=\"primary\" />\n                <CurrencyLogo currency={currencyA} />\n                <Text>{currencyA?.symbol}</Text>\n              </AutoRow>\n              <Text>{currencyAValue || '0'}</Text>\n            </RowBetween>\n          )}\n\n          {currencyB && (\n            <RowBetween>\n              <AutoRow gap=\"4px\">\n                <Dot bg=\"secondary\" />\n                <CurrencyLogo currency={currencyB} />\n                <Text>{currencyB?.symbol}</Text>\n              </AutoRow>\n              <Text>{currencyBValue || '0'}</Text>\n            </RowBetween>\n          )}\n        </AutoColumn>\n      </Flex>\n    </AutoColumn>\n  )\n}\n\ninterface AddLiquidityModalHeaderProps {\n  currencies: { [field in Field]?: Currency }\n  poolTokenPercentage?: Percent\n  liquidityMinted: CurrencyAmount<Token>\n  price: Fraction\n  allowedSlippage: number\n  children: React.ReactNode\n  noLiquidity?: boolean\n}\n\nexport const AddLiquidityModalHeader = ({\n  currencies,\n  poolTokenPercentage,\n  liquidityMinted,\n  price,\n  allowedSlippage,\n  noLiquidity,\n  children,\n}: AddLiquidityModalHeaderProps) => {\n  const { t } = useTranslation()\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n      slippage: allowedSlippage / 100,\n    }),\n  )\n\n  return (\n    <AutoColumn gap=\"24px\">\n      <AutoColumn gap=\"8px\">\n        <Subtitle>{t('You will receive')}</Subtitle>\n        <GreyCard>\n          <RowBetween>\n            <AutoRow gap=\"4px\">\n              <DoubleCurrencyLogo\n                currency0={currencies[Field.CURRENCY_A]}\n                currency1={currencies[Field.CURRENCY_B]}\n                size={24}\n              />\n              <Text color=\"textSubtle\">\n                {currencies[Field.CURRENCY_A]?.symbol &&\n                  currencies[Field.CURRENCY_B]?.symbol &&\n                  getLPSymbol(\n                    currencies[Field.CURRENCY_A]?.symbol,\n                    currencies[Field.CURRENCY_B]?.symbol,\n                    currencies[Field.CURRENCY_A]?.chainId,\n                  )}\n              </Text>\n            </AutoRow>\n            <Text ml=\"8px\">{liquidityMinted?.toSignificant(6)}</Text>\n          </RowBetween>\n        </GreyCard>\n      </AutoColumn>\n      <RowBetween>\n        <Subtitle>{t('Your share in the pair')}</Subtitle>\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\n      </RowBetween>\n      <AutoColumn gap=\"8px\">{children}</AutoColumn>\n      {!!price && (\n        <AutoColumn>\n          <RowBetween>\n            <Subtitle>{t('Rates')}</Subtitle>\n            <Text>\n              {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\n                currencies[Field.CURRENCY_B]?.symbol\n              }`}\n            </Text>\n          </RowBetween>\n          <RowBetween style={{ justifyContent: 'flex-end' }}>\n            <Text>\n              {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\n                currencies[Field.CURRENCY_A]?.symbol\n              }`}\n            </Text>\n          </RowBetween>\n        </AutoColumn>\n      )}\n      {!noLiquidity && (\n        <RowBetween>\n          <Subtitle>{t('Slippage Tolerance')}</Subtitle>\n          <TooltipText ref={targetRef}>{allowedSlippage / 100}%</TooltipText>\n          {tooltipVisible && tooltip}\n        </RowBetween>\n      )}\n    </AutoColumn>\n  )\n}\n","import React, { useCallback } from 'react'\nimport { Currency, CurrencyAmount, Fraction, Percent, Token } from '@pancakeswap/sdk'\nimport { InjectedModalProps, Button, TransactionErrorContent, ConfirmationModalContent } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport TransactionConfirmationModal from 'components/TransactionConfirmationModal'\nimport { Field } from 'state/burn/actions'\nimport _toNumber from 'lodash/toNumber'\nimport { AddLiquidityModalHeader, PairDistribution } from './common'\n\ninterface ConfirmAddLiquidityModalProps {\n  title: string\n  customOnDismiss: () => void\n  attemptingTxn: boolean\n  hash: string\n  pendingText: string\n  currencies: { [field in Field]?: Currency }\n  noLiquidity: boolean\n  allowedSlippage: number\n  liquidityErrorMessage: string\n  price: Fraction\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  onAdd: () => void\n  poolTokenPercentage: Percent\n  liquidityMinted: CurrencyAmount<Token>\n  currencyToAdd: Token\n  isStable?: boolean\n}\n\nconst ConfirmAddLiquidityModal: React.FC<\n  React.PropsWithChildren<InjectedModalProps & ConfirmAddLiquidityModalProps>\n> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  price,\n  currencies,\n  noLiquidity,\n  allowedSlippage,\n  parsedAmounts,\n  liquidityErrorMessage,\n  onAdd,\n  poolTokenPercentage,\n  liquidityMinted,\n  currencyToAdd,\n  isStable,\n}) => {\n  const { t } = useTranslation()\n\n  let percent = 0.5\n\n  // Calculate distribution percentage for display\n  if ((isStable && parsedAmounts[Field.CURRENCY_A]) || parsedAmounts[Field.CURRENCY_B]) {\n    const amountCurrencyA = parsedAmounts[Field.CURRENCY_A]\n      ? _toNumber(parsedAmounts[Field.CURRENCY_A]?.toSignificant(6))\n      : 0\n    // If there is no price fallback to compare only amounts\n    const currencyAToCurrencyB = parseFloat(price?.toSignificant(4)) || 1\n    const normalizedAmountCurrencyA = currencyAToCurrencyB * amountCurrencyA\n    const amountCurrencyB = parsedAmounts[Field.CURRENCY_B]\n      ? _toNumber(parsedAmounts[Field.CURRENCY_B]?.toSignificant(6))\n      : 0\n\n    percent = normalizedAmountCurrencyA / (normalizedAmountCurrencyA + amountCurrencyB)\n  }\n\n  const modalHeader = useCallback(() => {\n    return (\n      <AddLiquidityModalHeader\n        allowedSlippage={allowedSlippage}\n        currencies={currencies}\n        liquidityMinted={liquidityMinted}\n        poolTokenPercentage={poolTokenPercentage}\n        price={price}\n        noLiquidity={noLiquidity}\n      >\n        <PairDistribution\n          title={t('Input')}\n          percent={percent}\n          currencyA={currencies[Field.CURRENCY_A]}\n          currencyAValue={parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}\n          currencyB={currencies[Field.CURRENCY_B]}\n          currencyBValue={parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}\n        />\n      </AddLiquidityModalHeader>\n    )\n  }, [allowedSlippage, percent, currencies, liquidityMinted, noLiquidity, parsedAmounts, poolTokenPercentage, price, t])\n\n  const modalBottom = useCallback(() => {\n    return (\n      <Button width=\"100%\" onClick={onAdd} mt=\"20px\">\n        {noLiquidity ? t('Create Pair & Supply') : t('Confirm Supply')}\n      </Button>\n    )\n  }, [noLiquidity, onAdd, t])\n\n  const confirmationContent = useCallback(\n    () =>\n      liquidityErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={liquidityErrorMessage} />\n      ) : (\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n      ),\n    [onDismiss, modalBottom, modalHeader, liquidityErrorMessage],\n  )\n\n  return (\n    <TransactionConfirmationModal\n      minWidth={['100%', , '420px']}\n      title={title}\n      onDismiss={onDismiss}\n      customOnDismiss={customOnDismiss}\n      attemptingTxn={attemptingTxn}\n      currencyToAdd={currencyToAdd}\n      hash={hash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n\nexport default ConfirmAddLiquidityModal\n","import React, { useCallback, useMemo } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount, Fraction, JSBI, Pair, Percent, Token } from '@pancakeswap/sdk'\nimport {\n  InjectedModalProps,\n  Text,\n  ArrowDownIcon,\n  Button,\n  useTooltip,\n  TransactionErrorContent,\n  ConfirmationModalContent,\n  AutoColumn,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport TransactionConfirmationModal from 'components/TransactionConfirmationModal'\nimport { AutoRow, RowFixed } from 'components/Layout/Row'\nimport { Field } from 'state/burn/actions'\nimport { CurrencyLogo } from 'components/Logo'\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { PairDistribution, AddLiquidityModalHeader } from './common'\nimport { ZapErrorMessages } from './ZapErrorMessage'\n\ninterface ConfirmZapInModalProps {\n  title: string\n  customOnDismiss: () => void\n  attemptingTxn: boolean\n  hash: string\n  pendingText: string\n  currencies: { [field in Field]?: Currency }\n  allowedSlippage: number\n  liquidityErrorMessage: string\n  price: Fraction\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  onAdd: () => void\n  poolTokenPercentage: Percent\n  liquidityMinted: CurrencyAmount<Token>\n  pair: Pair\n  rebalancing?: boolean\n  zapSwapTokenField: Field\n  zapSwapOutTokenField: Field\n  zapInEstimated: {\n    swapAmountIn: BigNumber\n    swapAmountOut: BigNumber\n    isToken0Sold: boolean\n  }\n  zapMode: boolean\n  toggleZapMode: (value: boolean) => void\n}\n\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max)\n\nconst ConfirmZapInModal: React.FC<React.PropsWithChildren<InjectedModalProps & ConfirmZapInModalProps>> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  price,\n  currencies,\n  zapSwapTokenField,\n  zapSwapOutTokenField,\n  allowedSlippage,\n  parsedAmounts,\n  liquidityErrorMessage,\n  onAdd,\n  poolTokenPercentage,\n  liquidityMinted,\n  pair,\n  zapInEstimated,\n  rebalancing,\n  zapMode,\n  toggleZapMode,\n}) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveChainId()\n\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n  const swapInCurrencyAmount = parsedAmounts[zapSwapTokenField]\n  const swapOutCurrencyAmount = parsedAmounts[zapSwapOutTokenField]\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    swapInCurrencyAmount && !swapOutCurrencyAmount\n      ? t('There is no %token1% input. Half of %token0% input is converted into %token1% to add liquidity.', {\n          token0: currencies[zapSwapTokenField]?.symbol,\n          token1: currencies[zapSwapOutTokenField]?.symbol,\n        })\n      : t('There is not enough %token1% input to match 50/50. Some of %token0% will be converted to %token1%', {\n          token0: currencies[zapSwapTokenField]?.symbol,\n          token1: currencies[zapSwapOutTokenField]?.symbol,\n        }),\n    {\n      placement: 'auto-start',\n    },\n  )\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!liquidityMinted &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, liquidityMinted.quotient)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, liquidityMinted, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, liquidityMinted, false),\n        ]\n      : [undefined, undefined]\n\n  const swapInTokenAmount = useMemo(\n    () =>\n      zapInEstimated &&\n      CurrencyAmount.fromRawAmount(\n        wrappedCurrency(currencies[zapSwapTokenField], chainId),\n        zapInEstimated.swapAmountIn.toString(),\n      ),\n    [chainId, currencies, zapInEstimated, zapSwapTokenField],\n  )\n\n  const swapOutTokenAmount = useMemo(\n    () =>\n      zapInEstimated?.swapAmountOut &&\n      CurrencyAmount.fromRawAmount(\n        wrappedCurrency(currencies[zapSwapOutTokenField], chainId),\n        zapInEstimated.swapAmountOut.toString(),\n      ),\n    [chainId, currencies, zapInEstimated?.swapAmountOut, zapSwapOutTokenField],\n  )\n\n  const inputPercent = useMemo(() => {\n    return swapInCurrencyAmount && swapOutCurrencyAmount\n      ? clamp(\n          // TODO: avoid use number\n          +swapInCurrencyAmount.toExact() /\n            +swapOutCurrencyAmount.toExact() /\n            (+pair.priceOf(swapOutCurrencyAmount.currency.wrapped).toSignificant() +\n              +swapInCurrencyAmount.toExact() / +swapOutCurrencyAmount.toExact()),\n          0.05,\n          0.95,\n        )\n      : swapInCurrencyAmount && !swapOutCurrencyAmount\n      ? 1\n      : undefined\n  }, [pair, swapInCurrencyAmount, swapOutCurrencyAmount])\n\n  const tokenDeposited = useMemo(\n    () => ({\n      [zapSwapTokenField]:\n        swapInTokenAmount?.currency && pair?.token0\n          ? pair.token0.equals(swapInTokenAmount.currency)\n            ? token0Deposited\n            : token1Deposited\n          : undefined,\n      [zapSwapOutTokenField]:\n        swapOutTokenAmount?.currency && pair?.token1\n          ? pair.token1.equals(swapOutTokenAmount.currency)\n            ? token1Deposited\n            : token0Deposited\n          : undefined,\n    }),\n    [\n      pair.token0,\n      pair.token1,\n      swapInTokenAmount?.currency,\n      swapOutTokenAmount?.currency,\n      token0Deposited,\n      token1Deposited,\n      zapSwapOutTokenField,\n      zapSwapTokenField,\n    ],\n  )\n\n  const modalHeader = useCallback(() => {\n    return (\n      <AddLiquidityModalHeader\n        allowedSlippage={allowedSlippage}\n        currencies={currencies}\n        liquidityMinted={liquidityMinted}\n        poolTokenPercentage={poolTokenPercentage}\n        price={price}\n      >\n        <PairDistribution\n          title={t('Input')}\n          percent={inputPercent}\n          currencyA={swapInCurrencyAmount ? currencies[zapSwapTokenField] : undefined}\n          currencyAValue={swapInCurrencyAmount?.toSignificant(6)}\n          currencyB={swapOutCurrencyAmount ? currencies[zapSwapOutTokenField] : undefined}\n          currencyBValue={swapOutCurrencyAmount?.toSignificant(6)}\n        />\n        {swapOutTokenAmount &&\n          swapInTokenAmount &&\n          currencies[zapSwapTokenField] &&\n          currencies[zapSwapOutTokenField] && (\n            <AutoColumn justify=\"center\" gap=\"16px\">\n              <ArrowDownIcon color=\"textSubtle\" />\n              <AutoRow gap=\"6px\" justify=\"center\">\n                <RowFixed gap=\"2px\">\n                  <Text>{swapInTokenAmount?.toSignificant(6)}</Text>\n                  <CurrencyLogo currency={currencies[zapSwapTokenField]} />\n                  <Text>{currencies[zapSwapTokenField].symbol}</Text>\n                </RowFixed>\n                <Text>{t('to')}</Text>\n                <RowFixed gap=\"2px\">\n                  <Text>{swapOutTokenAmount?.toSignificant(6)}</Text>\n                  <CurrencyLogo currency={currencies[zapSwapOutTokenField]} />\n                  <Text>{currencies[zapSwapOutTokenField].symbol}</Text>\n                </RowFixed>\n              </AutoRow>\n              <ArrowDownIcon color=\"textSubtle\" />\n            </AutoColumn>\n          )}\n        <AutoColumn gap=\"4px\">\n          {tooltipVisible && tooltip}\n          <PairDistribution\n            tooltipTargetRef={targetRef}\n            title={t('Pooled')}\n            percent={0.5}\n            currencyA={currencies[zapSwapTokenField]}\n            currencyAValue={tokenDeposited?.[zapSwapTokenField]?.toSignificant(6)}\n            currencyB={currencies[zapSwapOutTokenField]}\n            currencyBValue={tokenDeposited?.[zapSwapOutTokenField]?.toSignificant(6)}\n          />\n        </AutoColumn>\n      </AddLiquidityModalHeader>\n    )\n  }, [\n    allowedSlippage,\n    currencies,\n    liquidityMinted,\n    poolTokenPercentage,\n    price,\n    t,\n    inputPercent,\n    swapInCurrencyAmount,\n    zapSwapTokenField,\n    swapOutCurrencyAmount,\n    zapSwapOutTokenField,\n    swapOutTokenAmount,\n    swapInTokenAmount,\n    tooltip,\n    tooltipVisible,\n    targetRef,\n    tokenDeposited,\n  ])\n\n  const modalBottom = useCallback(() => {\n    return (\n      <Button width=\"100%\" onClick={onAdd} mt=\"20px\">\n        {t('Confirm Supply')}\n      </Button>\n    )\n  }, [onAdd, t])\n\n  const confirmationContent = useCallback(\n    () =>\n      liquidityErrorMessage ? (\n        <>\n          <ZapErrorMessages\n            isSingleToken={!rebalancing}\n            zapMode={zapMode}\n            toggleZapMode={toggleZapMode}\n            onModalDismiss={onDismiss}\n          />\n          <TransactionErrorContent onDismiss={onDismiss} message={liquidityErrorMessage} />\n        </>\n      ) : (\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n      ),\n    [liquidityErrorMessage, rebalancing, zapMode, toggleZapMode, onDismiss, modalHeader, modalBottom],\n  )\n\n  return (\n    <TransactionConfirmationModal\n      minWidth={['100%', , '420px']}\n      title={title}\n      onDismiss={onDismiss}\n      customOnDismiss={customOnDismiss}\n      attemptingTxn={attemptingTxn}\n      currencyToAdd={pair?.liquidityToken}\n      hash={hash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n\nexport default ConfirmZapInModal\n","import styled from 'styled-components'\nimport { ArrowDropDownIcon, Box, Button, Text, useModal, Flex, BoxProps } from '@pancakeswap/uikit'\nimport CurrencySearchModal, { CurrencySearchModalProps } from 'components/SearchModal/CurrencySearchModal'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { formatNumber } from '@pancakeswap/utils/formatBalance'\nimport { useCurrencyBalance } from 'state/wallet/hooks'\nimport useBUSDPrice from 'hooks/useBUSDPrice'\nimport { useAccount } from 'wagmi'\nimport { CurrencyLogo } from '../Logo'\nimport { RowBetween, AutoRow } from '../Layout/Row'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownContainer = styled(Button)`\n  cursor: pointer;\n  width: 100%;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n  z-index: 20;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  .down-icon {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\ninterface CurrencySelectProps extends CurrencySearchModalProps, BoxProps {\n  hideBalance?: boolean\n}\n\nexport const CurrencySelect = ({\n  onCurrencySelect,\n  selectedCurrency,\n  otherSelectedCurrency,\n  showCommonBases,\n  commonBasesType,\n  hideBalance,\n  ...props\n}: CurrencySelectProps) => {\n  const { address: account } = useAccount()\n\n  const selectedCurrencyBalance = useCurrencyBalance(\n    account ?? undefined,\n    !hideBalance && selectedCurrency ? selectedCurrency : undefined,\n  )\n\n  const { t } = useTranslation()\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={selectedCurrency}\n      otherSelectedCurrency={otherSelectedCurrency}\n      showCommonBases={showCommonBases}\n      commonBasesType={commonBasesType}\n    />,\n  )\n\n  const price = useBUSDPrice(selectedCurrencyBalance && selectedCurrency ? selectedCurrency : undefined)\n  const quoted = selectedCurrencyBalance && price?.quote(selectedCurrencyBalance)\n\n  return (\n    <Box width=\"100%\" {...props}>\n      <DropDownContainer p={0} onClick={onPresentCurrencyModal}>\n        <DropDownHeader>\n          <Text id=\"pair\" color={!selectedCurrency ? 'text' : undefined}>\n            {!selectedCurrency ? (\n              <>{t('Select')}</>\n            ) : (\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                <CurrencyLogo currency={selectedCurrency} size=\"24px\" style={{ marginRight: '8px' }} />\n                <Text id=\"pair\" bold>\n                  {selectedCurrency && selectedCurrency.symbol && selectedCurrency.symbol.length > 20\n                    ? `${selectedCurrency.symbol.slice(0, 4)}...${selectedCurrency.symbol.slice(\n                        selectedCurrency.symbol.length - 5,\n                        selectedCurrency.symbol.length,\n                      )}`\n                    : selectedCurrency?.symbol}\n                </Text>\n              </Flex>\n            )}\n          </Text>\n        </DropDownHeader>\n        <ArrowDropDownIcon color=\"text\" className=\"down-icon\" />\n      </DropDownContainer>\n      {account && !!selectedCurrency && !hideBalance && (\n        <Box>\n          <AutoRow justify=\"space-between\" gap=\"2px\">\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {t('Balance')}:\n            </Text>\n            <Text fontSize=\"12px\">{selectedCurrencyBalance?.toSignificant(6) ?? t('Loading')}</Text>\n          </AutoRow>\n          <RowBetween>\n            <div />\n            {Number.isFinite(+quoted?.toExact()) && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                ~${formatNumber(+quoted.toExact())}\n              </Text>\n            )}\n          </RowBetween>\n        </Box>\n      )}\n    </Box>\n  )\n}\n","import { Currency } from '@pancakeswap/sdk'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { useRouter } from 'next/router'\nimport { useCallback } from 'react'\nimport currencyId from 'utils/currencyId'\nimport { CAKE, USDC } from '@pancakeswap/tokens'\n\nexport const useCurrencySelectRoute = () => {\n  const native = useNativeCurrency()\n  const router = useRouter()\n  const { chainId } = useActiveChainId()\n  const [currencyIdA, currencyIdB] = router.query.currency || [\n    native.symbol,\n    CAKE[chainId]?.address ?? USDC[chainId]?.address,\n  ]\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA_: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA_)\n      if (newCurrencyIdA === currencyIdB) {\n        router.replace(`/add/${currencyIdB}/${currencyIdA}`, undefined, { shallow: true })\n      } else if (currencyIdB) {\n        router.replace(`/add/${newCurrencyIdA}/${currencyIdB}`, undefined, { shallow: true })\n      } else {\n        router.replace(`/add/${newCurrencyIdA}`, undefined, { shallow: true })\n      }\n    },\n    [currencyIdB, router, currencyIdA],\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB_: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB_)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          router.replace(`/add/${currencyIdB}/${newCurrencyIdB}`, undefined, { shallow: true })\n        } else {\n          router.replace(`/add/${newCurrencyIdB}`, undefined, { shallow: true })\n        }\n      } else {\n        router.replace(`/add/${currencyIdA || native.symbol}/${newCurrencyIdB}`, undefined, { shallow: true })\n      }\n    },\n    [currencyIdA, router, currencyIdB, native],\n  )\n\n  return {\n    handleCurrencyASelect,\n    handleCurrencyBSelect,\n  }\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency } from '@pancakeswap/sdk'\nimport { AddIcon, Box, CardBody, CardFooter, Text, TooltipText, useTooltip, FlexGap } from '@pancakeswap/uikit'\nimport { CommitButton } from 'components/CommitButton'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { CurrencySelect } from 'components/CurrencySelect'\nimport { RowBetween } from 'components/Layout/Row'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { usePair } from 'hooks/usePairs'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { useLPApr } from 'state/swap/useLPApr'\nimport { AppHeader } from '../../components/App'\nimport { CommonBasesType } from '../../components/SearchModal/types'\nimport { useCurrencySelectRoute } from './useCurrencySelectRoute'\n\nexport function ChoosePair({\n  currencyA,\n  currencyB,\n  error,\n  onNext,\n}: {\n  currencyA?: Currency\n  currencyB?: Currency\n  error?: string\n  onNext?: () => void\n}) {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const isValid = !error\n  const { handleCurrencyASelect, handleCurrencyBSelect } = useCurrencySelectRoute()\n  const [, pair] = usePair(currencyA, currencyB)\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n\n  return (\n    <>\n      <AppHeader\n        title={t('Add Liquidity')}\n        subtitle={t('Receive LP tokens and earn 0.17% trading fees')}\n        helper={t(\n          'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pair.',\n        )}\n        backTo=\"/liquidity\"\n      />\n      <CardBody>\n        <Box>\n          <Text textTransform=\"uppercase\" color=\"secondary\" bold small pb=\"24px\">\n            {t('Choose a valid pair')}\n          </Text>\n          <FlexGap gap=\"4px\">\n            <CurrencySelect\n              id=\"add-liquidity-select-tokena\"\n              selectedCurrency={currencyA}\n              onCurrencySelect={handleCurrencyASelect}\n              showCommonBases\n              commonBasesType={CommonBasesType.LIQUIDITY}\n            />\n            <AddIcon color=\"textSubtle\" />\n            <CurrencySelect\n              id=\"add-liquidity-select-tokenb\"\n              selectedCurrency={currencyB}\n              onCurrencySelect={handleCurrencyBSelect}\n              showCommonBases\n              commonBasesType={CommonBasesType.LIQUIDITY}\n            />\n          </FlexGap>\n          {pair && poolData && (\n            <RowBetween mt=\"24px\">\n              <TooltipText ref={targetRef} bold fontSize=\"12px\" color=\"secondary\">\n                {t('LP reward APR')}\n              </TooltipText>\n              {tooltipVisible && tooltip}\n              <Text bold color=\"primary\">\n                {formatAmount(poolData.lpApr7d)}%\n              </Text>\n            </RowBetween>\n          )}\n        </Box>\n      </CardBody>\n      <CardFooter>\n        {!account ? (\n          <ConnectWalletButton width=\"100%\" />\n        ) : (\n          <CommitButton\n            data-test=\"choose-pair-next\"\n            width=\"100%\"\n            variant={!isValid ? 'danger' : 'primary'}\n            onClick={onNext}\n            disabled={!isValid}\n          >\n            {error ?? t('Add Liquidity')}\n          </CommitButton>\n        )}\n      </CardFooter>\n    </>\n  )\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { JSBI, CurrencyAmount, Token, WNATIVE, MINIMUM_LIQUIDITY, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  AddIcon,\n  CardBody,\n  Message,\n  useModal,\n  TooltipText,\n  useTooltip,\n  MessageText,\n  IconButton,\n  PencilIcon,\n  AutoColumn,\n  ColumnCenter,\n} from '@pancakeswap/uikit'\nimport { logError } from 'utils/sentry'\nimport { useIsTransactionUnsupported, useIsTransactionWarning } from 'hooks/Trades'\nimport { useTranslation } from '@pancakeswap/localization'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport { useZapContract } from 'hooks/useContract'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getZapAddress } from 'utils/addressHelpers'\nimport { CommitButton } from 'components/CommitButton'\nimport { getLPSymbol } from 'utils/getLpSymbol'\nimport { useRouter } from 'next/router'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { SUPPORT_ZAP } from 'config/constants/supportChains'\nimport { ContractMethodName } from 'utils/types'\nimport { transactionErrorToUserReadableMessage } from 'utils/transactionErrorToUserReadableMessage'\nimport { ROUTER_ADDRESS } from 'config/constants/exchange'\nimport { useLPApr } from 'state/swap/useLPApr'\nimport { LightCard } from '../../components/Card'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\n\nimport { PairState } from '../../hooks/usePairs'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState, useZapIn } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport {\n  useGasPrice,\n  useIsExpertMode,\n  usePairAdder,\n  useUserSlippageTolerance,\n  useZapModeManager,\n} from '../../state/user/hooks'\nimport { calculateGasMargin } from '../../utils'\nimport { calculateSlippageAmount, useRouterContract } from '../../utils/exchange'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport Dots from '../../components/Loader/Dots'\nimport PoolPriceBar from './PoolPriceBar'\nimport Page from '../Page'\nimport ConfirmAddLiquidityModal from './components/ConfirmAddLiquidityModal'\nimport ConfirmZapInModal from './components/ConfirmZapInModal'\nimport { ChoosePair } from './ChoosePair'\nimport { ZapCheckbox } from '../../components/CurrencyInputPanel/ZapCheckbox'\nimport { formatAmount } from '../../utils/formatInfoNumbers'\nimport { useCurrencySelectRoute } from './useCurrencySelectRoute'\nimport { CommonBasesType } from '../../components/SearchModal/types'\nimport SettingsModal from '../../components/Menu/GlobalSettings/SettingsModal'\nimport { SettingsMode } from '../../components/Menu/GlobalSettings/types'\n\nenum Steps {\n  Choose,\n  Add,\n}\n\nexport default function AddLiquidity({ currencyA, currencyB }) {\n  const router = useRouter()\n  const { account, chainId, isWrongNetwork } = useActiveWeb3React()\n\n  const addPair = usePairAdder()\n  const [zapMode] = useZapModeManager()\n  const expertMode = useIsExpertMode()\n  const zapAddress = getZapAddress(chainId)\n\n  const [temporarilyZapMode, setTemporarilyZapMode] = useState(true)\n\n  const [steps, setSteps] = useState(Steps.Choose)\n\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  useEffect(() => {\n    if (router.query.step === '1') {\n      setSteps(Steps.Add)\n    }\n  }, [router.query])\n\n  const zapModeStatus = useMemo(() => !!zapMode && temporarilyZapMode, [zapMode, temporarilyZapMode])\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts: mintParsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  // modal and loading\n  const [{ attemptingTxn, liquidityErrorMessage, txHash }, setLiquidityState] = useState<{\n    attemptingTxn: boolean\n    liquidityErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    attemptingTxn: false,\n    liquidityErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // Zap state\n  const [zapTokenToggleA, setZapTokenToggleA] = useState(true)\n  const [zapTokenToggleB, setZapTokenToggleB] = useState(true)\n  const zapTokenCheckedA = zapTokenToggleA && currencyBalances?.[Field.CURRENCY_A]?.greaterThan(0)\n  const zapTokenCheckedB = zapTokenToggleB && currencyBalances?.[Field.CURRENCY_B]?.greaterThan(0)\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Token> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const canZap = useMemo(\n    () =>\n      !!zapModeStatus &&\n      !noLiquidity &&\n      SUPPORT_ZAP.includes(chainId) &&\n      !(\n        (pair && JSBI.lessThan(pair.reserve0.quotient, MINIMUM_LIQUIDITY)) ||\n        (pair && JSBI.lessThan(pair.reserve1.quotient, MINIMUM_LIQUIDITY))\n      ),\n    [chainId, noLiquidity, pair, zapModeStatus],\n  )\n\n  const { handleCurrencyASelect, handleCurrencyBSelect } = useCurrencySelectRoute()\n\n  const { zapInEstimating, rebalancing, ...zapIn } = useZapIn({\n    pair,\n    canZap,\n    currencyA,\n    currencyB,\n    currencyBalances,\n    zapTokenCheckedA,\n    zapTokenCheckedB,\n    maxAmounts,\n  })\n\n  const parsedAmounts = canZap ? zapIn.parsedAmounts : mintParsedAmounts\n\n  const preferZapInstead = canZap && !zapIn.noNeedZap\n\n  // get formatted amounts\n  const formattedAmounts = useMemo(\n    () => ({\n      [independentField]:\n        canZap &&\n        ((independentField === Field.CURRENCY_A && !zapTokenCheckedA) ||\n          (independentField === Field.CURRENCY_B && !zapTokenCheckedB))\n          ? ''\n          : typedValue,\n      [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n    }),\n    [\n      canZap,\n      dependentField,\n      independentField,\n      noLiquidity,\n      otherTypedValue,\n      parsedAmounts,\n      typedValue,\n      zapTokenCheckedA,\n      zapTokenCheckedB,\n    ],\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_A],\n    preferZapInstead ? zapAddress : ROUTER_ADDRESS[chainId],\n  )\n  const [approvalB, approveBCallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_B],\n    preferZapInstead ? zapAddress : ROUTER_ADDRESS[chainId],\n  )\n\n  const addTransaction = useTransactionAdder()\n\n  const routerContract = useRouterContract()\n\n  async function onAdd() {\n    if (!chainId || !account || !routerContract) return\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = mintParsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA?.isNative || currencyB?.isNative) {\n      const tokenBIsNative = currencyB?.isNative\n      estimate = routerContract.estimateGas.addLiquidityETH\n      method = routerContract.addLiquidityETH\n      args = [\n        (tokenBIsNative ? currencyA : currencyB)?.wrapped?.address ?? '', // token\n        (tokenBIsNative ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\n        amountsMin[tokenBIsNative ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsNative ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsNative ? parsedAmountB : parsedAmountA).quotient.toString())\n    } else {\n      estimate = routerContract.estimateGas.addLiquidity\n      method = routerContract.addLiquidity\n      args = [\n        currencyA?.wrapped?.address ?? '',\n        currencyB?.wrapped?.address ?? '',\n        parsedAmountA.quotient.toString(),\n        parsedAmountB.quotient.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setLiquidityState({ attemptingTxn: true, liquidityErrorMessage: undefined, txHash: undefined })\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n          gasPrice,\n        }).then((response) => {\n          setLiquidityState({ attemptingTxn: false, liquidityErrorMessage: undefined, txHash: response.hash })\n\n          const symbolA = currencies[Field.CURRENCY_A]?.symbol\n          const amountA = parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)\n          const symbolB = currencies[Field.CURRENCY_B]?.symbol\n          const amountB = parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)\n          addTransaction(response, {\n            summary: `Add ${amountA} ${symbolA} and ${amountB} ${symbolB}`,\n            translatableSummary: {\n              text: 'Add %amountA% %symbolA% and %amountB% %symbolB%',\n              data: { amountA, symbolA, amountB, symbolB },\n            },\n            type: 'add-liquidity',\n          })\n\n          if (pair) {\n            addPair(pair)\n          }\n        }),\n      )\n      .catch((err) => {\n        if (err && err.code !== 4001) {\n          logError(err)\n          console.error(`Add Liquidity failed`, err, args, value)\n        }\n        setLiquidityState({\n          attemptingTxn: false,\n          liquidityErrorMessage:\n            err && err.code !== 4001\n              ? t('Add liquidity failed: %message%', { message: transactionErrorToUserReadableMessage(err, t) })\n              : undefined,\n          txHash: undefined,\n        })\n      })\n  }\n\n  const pendingText = preferZapInstead\n    ? t('Zapping %amountA% %symbolA% and %amountB% %symbolB%', {\n        amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '0',\n        symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n        amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '0',\n        symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n      })\n    : t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n        amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n        symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n        amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n        symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n      })\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n  }, [onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n  const addIsWarning = useIsTransactionWarning(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const zapContract = useZapContract()\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <ConfirmAddLiquidityModal\n      title={noLiquidity ? t('You are creating a trading pair') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n      allowedSlippage={allowedSlippage}\n      onAdd={onAdd}\n      parsedAmounts={parsedAmounts}\n      currencies={currencies}\n      liquidityErrorMessage={liquidityErrorMessage}\n      price={price}\n      noLiquidity={noLiquidity}\n      poolTokenPercentage={poolTokenPercentage}\n      liquidityMinted={liquidityMinted}\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  async function onZapIn() {\n    if (!canZap || !parsedAmounts || !zapIn.zapInEstimated || !chainId || !zapContract) {\n      return\n    }\n\n    let method: ContractMethodName<typeof zapContract>\n    let args\n    let value: BigNumberish | null\n    let summary: string\n    let translatableSummary: { text: string; data?: Record<string, string | number> }\n    const minAmountOut = zapIn.zapInEstimated.swapAmountOut.mul(10000 - allowedSlippage).div(10000)\n    if (rebalancing) {\n      const maxAmountIn = zapIn.zapInEstimated.swapAmountIn.mul(10000 + allowedSlippage).div(10000)\n      const amountA = parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)\n      const symbolA = currencies[Field.CURRENCY_A]?.symbol\n      const amountB = parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)\n      const symbolB = currencies[Field.CURRENCY_B]?.symbol\n      summary = `Zap ${amountA} ${symbolA} and ${amountB} ${symbolB}`\n      translatableSummary = {\n        text: 'Zap %amountA% %symbolA% and %amountB% %symbolB%',\n        data: { amountA, symbolA, amountB, symbolB },\n      }\n      if (currencyA?.isNative || currencyB?.isNative) {\n        const tokenBIsBNB = currencyB?.isNative\n        method = 'zapInBNBRebalancing'\n        args = [\n          wrappedCurrency(currencies[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B], chainId).address, // token1\n          parsedAmounts[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B].quotient.toString(), // token1AmountIn\n          pair.liquidityToken.address, // lp\n          maxAmountIn, // tokenAmountInMax\n          minAmountOut, // tokenAmountOutMin\n          zapIn.zapInEstimated.isToken0Sold && !tokenBIsBNB, // isToken0Sold\n        ]\n        value = parsedAmounts[tokenBIsBNB ? Field.CURRENCY_B : Field.CURRENCY_A].quotient.toString()\n      } else {\n        method = 'zapInTokenRebalancing'\n        args = [\n          wrappedCurrency(currencies[Field.CURRENCY_A], chainId).address, // token0\n          wrappedCurrency(currencies[Field.CURRENCY_B], chainId).address, // token1\n          parsedAmounts[Field.CURRENCY_A].quotient.toString(), // token0AmountIn\n          parsedAmounts[Field.CURRENCY_B].quotient.toString(), // token1AmountIn\n          pair.liquidityToken.address, // lp\n          maxAmountIn, // tokenAmountInMax\n          minAmountOut, // tokenAmountOutMin\n          zapIn.zapInEstimated.isToken0Sold, // isToken0Sold\n        ]\n      }\n    } else if (currencies[zapIn.swapTokenField]?.isNative) {\n      method = 'zapInBNB'\n      args = [pair.liquidityToken.address, minAmountOut]\n      const amount = parsedAmounts[zapIn.swapTokenField]?.toSignificant(3)\n      const symbol = getLPSymbol(pair.token0.symbol, pair.token1.symbol, chainId)\n      summary = `Zap in ${amount} BNB for ${symbol}`\n      translatableSummary = {\n        text: 'Zap in %amount% BNB for %symbol%',\n        data: { amount, symbol },\n      }\n      value = parsedAmounts[zapIn.swapTokenField].quotient.toString()\n    } else {\n      method = 'zapInToken'\n      args = [\n        wrappedCurrency(currencies[zapIn.swapTokenField], chainId).address,\n        parsedAmounts[zapIn.swapTokenField].quotient.toString(),\n        pair.liquidityToken.address,\n        minAmountOut,\n      ]\n      const amount = parsedAmounts[zapIn.swapTokenField]?.toSignificant(3)\n      const { symbol } = currencies[zapIn.swapTokenField]\n      const lpSymbol = getLPSymbol(pair.token0.symbol, pair.token1.symbol, chainId)\n      summary = `Zap in ${amount} ${symbol} for ${lpSymbol}`\n      translatableSummary = {\n        text: 'Zap in %amount% %symbol% for %lpSymbol%',\n        data: { amount, symbol, lpSymbol },\n      }\n    }\n\n    setLiquidityState({ attemptingTxn: true, liquidityErrorMessage: undefined, txHash: undefined })\n\n    callWithEstimateGas(zapContract, method, args, value ? { value, gasPrice } : { gasPrice })\n      .then((response) => {\n        setLiquidityState({ attemptingTxn: false, liquidityErrorMessage: undefined, txHash: response.hash })\n\n        addTransaction(response, {\n          summary,\n          translatableSummary,\n          type: 'add-liquidity',\n        })\n\n        if (pair) {\n          addPair(pair)\n        }\n      })\n      .catch((err) => {\n        if (err && err.code !== 4001) {\n          logError(err)\n          console.error(`Add Liquidity failed`, err, args, value)\n        }\n        setLiquidityState({\n          attemptingTxn: false,\n          liquidityErrorMessage:\n            err && err.code !== 4001\n              ? t('Add liquidity failed: %message%', { message: transactionErrorToUserReadableMessage(err, t) })\n              : undefined,\n          txHash: undefined,\n        })\n      })\n  }\n\n  const [onPresentZapInModal] = useModal(\n    <ConfirmZapInModal\n      title={t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      pendingText={pendingText}\n      pair={pair}\n      allowedSlippage={allowedSlippage}\n      onAdd={onZapIn}\n      parsedAmounts={parsedAmounts}\n      currencies={currencies}\n      liquidityErrorMessage={liquidityErrorMessage}\n      price={price}\n      poolTokenPercentage={zapIn.poolTokenPercentage}\n      liquidityMinted={zapIn.liquidityMinted}\n      zapSwapTokenField={zapIn.swapTokenField}\n      zapSwapOutTokenField={zapIn.swapOutTokenField}\n      zapInEstimated={zapIn.zapInEstimated}\n      rebalancing={rebalancing}\n      zapMode={zapModeStatus}\n      toggleZapMode={setTemporarilyZapMode}\n    />,\n    true,\n    true,\n    'zapInModal',\n  )\n\n  const handleEnableZap = () => {\n    if (!zapMode) {\n      setTemporarilyZapMode(!zapMode)\n    }\n  }\n\n  let isValid = !error\n  let errorText = error\n\n  if (preferZapInstead) {\n    isValid = !error && !zapIn.error\n    errorText = error ?? zapIn.error\n  } else {\n    isValid = !error && !addError\n    errorText = error ?? addError\n  }\n\n  const buttonDisabled =\n    !isValid ||\n    ((zapIn.parsedAmounts[Field.CURRENCY_A] || (!preferZapInstead && zapTokenCheckedA)) &&\n      approvalA !== ApprovalState.APPROVED) ||\n    ((zapIn.parsedAmounts[Field.CURRENCY_B] || (!preferZapInstead && zapTokenCheckedB)) &&\n      approvalB !== ApprovalState.APPROVED) ||\n    (zapIn.priceSeverity > 3 && preferZapInstead)\n\n  const showFieldAApproval =\n    (zapTokenCheckedA || !preferZapInstead) &&\n    (approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING)\n  const showFieldBApproval =\n    (zapTokenCheckedB || !preferZapInstead) &&\n    (approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING)\n\n  const shouldShowApprovalGroup = (showFieldAApproval || showFieldBApproval) && isValid\n\n  const oneCurrencyIsWNATIVE = Boolean(\n    chainId && ((currencyA && currencyA.equals(WNATIVE[chainId])) || (currencyB && currencyB.equals(WNATIVE[chainId]))),\n  )\n\n  const noAnyInputAmount = !parsedAmounts[Field.CURRENCY_A] && !parsedAmounts[Field.CURRENCY_B]\n\n  const showAddLiquidity =\n    (!!currencies[Field.CURRENCY_A] && !!currencies[Field.CURRENCY_B] && steps === Steps.Add) || !canZap\n\n  const showZapWarning =\n    preferZapInstead &&\n    !noAnyInputAmount &&\n    ((!rebalancing && !(!zapTokenCheckedA && !zapTokenCheckedB)) || (rebalancing && zapIn.priceSeverity > 3))\n\n  const showReduceZapTokenButton =\n    preferZapInstead && (zapIn.priceSeverity > 3 || zapIn.zapInEstimatedError) && maxAmounts[zapIn.swapTokenField]\n\n  const showRebalancingConvert =\n    !showZapWarning &&\n    !noAnyInputAmount &&\n    !showReduceZapTokenButton &&\n    preferZapInstead &&\n    zapIn.isDependentAmountGreaterThanMaxAmount &&\n    rebalancing\n\n  const showZapIsAvailable =\n    !zapMode &&\n    !showZapWarning &&\n    !noAnyInputAmount &&\n    (!zapTokenCheckedA || !zapTokenCheckedB) &&\n    !noLiquidity &&\n    !(\n      (pair && JSBI.lessThan(pair.reserve0.quotient, MINIMUM_LIQUIDITY)) ||\n      (pair && JSBI.lessThan(pair.reserve1.quotient, MINIMUM_LIQUIDITY))\n    )\n\n  const [onPresentSettingsModal] = useModal(<SettingsModal mode={SettingsMode.SWAP_LIQUIDITY} />)\n\n  return (\n    <Page>\n      <AppBody>\n        {!showAddLiquidity && (\n          <ChoosePair\n            error={error}\n            currencyA={currencies[Field.CURRENCY_A]}\n            currencyB={currencies[Field.CURRENCY_B]}\n            onNext={() => setSteps(Steps.Add)}\n          />\n        )}\n        {showAddLiquidity && (\n          <>\n            <AppHeader\n              title={\n                currencies[Field.CURRENCY_A]?.symbol && currencies[Field.CURRENCY_B]?.symbol\n                  ? `${getLPSymbol(currencies[Field.CURRENCY_A].symbol, currencies[Field.CURRENCY_B].symbol, chainId)}`\n                  : t('Add Liquidity')\n              }\n              subtitle={t('Receive LP tokens and earn 0.17% trading fees')}\n              helper={t(\n                'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pair.',\n              )}\n              backTo={canZap ? () => setSteps(Steps.Choose) : '/liquidity'}\n            />\n            <CardBody>\n              <AutoColumn gap=\"20px\">\n                {noLiquidity && (\n                  <ColumnCenter>\n                    <Message variant=\"warning\">\n                      <div>\n                        <Text bold mb=\"8px\">\n                          {t('You are the first liquidity provider.')}\n                        </Text>\n                        <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pair.')}</Text>\n                        <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                      </div>\n                    </Message>\n                  </ColumnCenter>\n                )}\n                <CurrencyInputPanel\n                  disableCurrencySelect={canZap}\n                  showUSDPrice\n                  onInputBlur={canZap ? zapIn.onInputBlurOnce : undefined}\n                  error={zapIn.priceSeverity > 3 && zapIn.swapTokenField === Field.CURRENCY_A}\n                  disabled={canZap && !zapTokenCheckedA}\n                  beforeButton={\n                    canZap && (\n                      <ZapCheckbox\n                        disabled={currencyBalances?.[Field.CURRENCY_A]?.equalTo(0)}\n                        checked={zapTokenCheckedA}\n                        onChange={(e) => {\n                          setZapTokenToggleA(e.target.checked)\n                        }}\n                      />\n                    )\n                  }\n                  onCurrencySelect={handleCurrencyASelect}\n                  zapStyle={canZap ? 'zap' : 'noZap'}\n                  value={formattedAmounts[Field.CURRENCY_A]}\n                  onUserInput={onFieldAInput}\n                  onPercentInput={(percent) => {\n                    if (maxAmounts[Field.CURRENCY_A]) {\n                      onFieldAInput(maxAmounts[Field.CURRENCY_A]?.multiply(new Percent(percent, 100)).toExact() ?? '')\n                    }\n                  }}\n                  onMax={() => {\n                    onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                  }}\n                  showQuickInputButton\n                  showMaxButton\n                  maxAmount={maxAmounts[Field.CURRENCY_A]}\n                  currency={currencies[Field.CURRENCY_A]}\n                  id=\"add-liquidity-input-tokena\"\n                  showCommonBases\n                  commonBasesType={CommonBasesType.LIQUIDITY}\n                />\n                <ColumnCenter>\n                  <AddIcon width=\"16px\" />\n                </ColumnCenter>\n                <CurrencyInputPanel\n                  showUSDPrice\n                  onInputBlur={canZap ? zapIn.onInputBlurOnce : undefined}\n                  disabled={canZap && !zapTokenCheckedB}\n                  error={zapIn.priceSeverity > 3 && zapIn.swapTokenField === Field.CURRENCY_B}\n                  beforeButton={\n                    canZap && (\n                      <ZapCheckbox\n                        disabled={currencyBalances?.[Field.CURRENCY_B]?.equalTo(0)}\n                        checked={zapTokenCheckedB}\n                        onChange={(e) => {\n                          setZapTokenToggleB(e.target.checked)\n                        }}\n                      />\n                    )\n                  }\n                  onCurrencySelect={handleCurrencyBSelect}\n                  disableCurrencySelect={canZap}\n                  zapStyle={canZap ? 'zap' : 'noZap'}\n                  value={formattedAmounts[Field.CURRENCY_B]}\n                  onUserInput={onFieldBInput}\n                  onPercentInput={(percent) => {\n                    if (maxAmounts[Field.CURRENCY_B]) {\n                      onFieldBInput(maxAmounts[Field.CURRENCY_B]?.multiply(new Percent(percent, 100)).toExact() ?? '')\n                    }\n                  }}\n                  onMax={() => {\n                    onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                  }}\n                  showQuickInputButton\n                  showMaxButton\n                  maxAmount={maxAmounts[Field.CURRENCY_B]}\n                  currency={currencies[Field.CURRENCY_B]}\n                  id=\"add-liquidity-input-tokenb\"\n                  showCommonBases\n                  commonBasesType={CommonBasesType.LIQUIDITY}\n                />\n\n                {showZapWarning && (\n                  <Message variant={zapIn.priceSeverity > 3 ? 'danger' : 'warning'}>\n                    {zapIn.priceSeverity > 3 ? (\n                      <MessageText>\n                        {t('Price Impact Too High.')}{' '}\n                        <strong>\n                          {t('Reduce amount of %token% to maximum limit', {\n                            token: currencies[zapIn.swapTokenField]?.symbol,\n                          })}\n                        </strong>\n                      </MessageText>\n                    ) : (\n                      <MessageText>\n                        <strong>\n                          {t('No %token% input.', { token: currencies[zapIn.swapOutTokenField]?.symbol })}\n                        </strong>{' '}\n                        {t('Some of your %token0% will be converted to %token1%.', {\n                          token0: currencies[zapIn.swapTokenField]?.symbol,\n                          token1: currencies[zapIn.swapOutTokenField]?.symbol,\n                        })}\n                      </MessageText>\n                    )}\n                  </Message>\n                )}\n\n                {showReduceZapTokenButton && (\n                  <RowFixed style={{ margin: 'auto' }} onClick={() => zapIn.convertToMaxZappable()}>\n                    <Button variant=\"secondary\" scale=\"sm\">\n                      {t('Reduce %token%', { token: currencies[zapIn.swapTokenField]?.symbol })}\n                    </Button>\n                  </RowFixed>\n                )}\n\n                {showZapIsAvailable && (\n                  <Message variant=\"warning\">\n                    <MessageText>\n                      {t('Zap allows you to add liquidity with only 1 single token. Click')}\n                      <Button p=\"0 4px\" scale=\"sm\" variant=\"text\" height=\"auto\" onClick={handleEnableZap}>\n                        {t('here')}\n                      </Button>\n                      {t('to try.')}\n                    </MessageText>\n                  </Message>\n                )}\n\n                {showRebalancingConvert && (\n                  <Message variant=\"warning\">\n                    <AutoColumn>\n                      <MessageText>\n                        <strong>\n                          {t('Not enough %token%.', { token: currencies[zapIn.swapOutTokenField]?.symbol })}\n                        </strong>{' '}\n                        {zapIn.gasOverhead\n                          ? t(\n                              'Some of your %token0% will be converted to %token1% before adding liquidity, but this may cause higher gas fees.',\n                              {\n                                token0: currencies[zapIn.swapTokenField]?.symbol,\n                                token1: currencies[zapIn.swapOutTokenField]?.symbol,\n                              },\n                            )\n                          : t('Some of your %token0% will be converted to %token1%.', {\n                              token0: currencies[zapIn.swapTokenField]?.symbol,\n                              token1: currencies[zapIn.swapOutTokenField]?.symbol,\n                            })}\n                      </MessageText>\n                    </AutoColumn>\n                  </Message>\n                )}\n\n                {showRebalancingConvert && (\n                  <RowFixed\n                    style={{ margin: 'auto' }}\n                    onClick={() => {\n                      if (dependentField === Field.CURRENCY_A) {\n                        onFieldAInput(maxAmounts[dependentField]?.toExact() ?? '')\n                      } else {\n                        onFieldBInput(maxAmounts[dependentField]?.toExact() ?? '')\n                      }\n                    }}\n                  >\n                    <Button variant=\"secondary\" scale=\"sm\">\n                      {t('Don’t convert')}\n                    </Button>\n                  </RowFixed>\n                )}\n\n                {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n                  <>\n                    <LightCard padding=\"0px\" borderRadius=\"20px\">\n                      <RowBetween padding=\"1rem\">\n                        <Text fontSize=\"14px\">\n                          {noLiquidity ? t('Initial prices and share in the pair') : t('Prices and Share')}\n                        </Text>\n                      </RowBetween>{' '}\n                      <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                        <PoolPriceBar\n                          currencies={currencies}\n                          poolTokenPercentage={preferZapInstead ? zapIn.poolTokenPercentage : poolTokenPercentage}\n                          noLiquidity={noLiquidity}\n                          price={price}\n                        />\n                      </LightCard>\n                    </LightCard>\n                  </>\n                )}\n\n                <RowBetween>\n                  <Text bold fontSize=\"12px\" color=\"secondary\">\n                    {t('Slippage Tolerance')}\n                    <IconButton scale=\"sm\" variant=\"text\" onClick={onPresentSettingsModal}>\n                      <PencilIcon color=\"primary\" width=\"10px\" />\n                    </IconButton>\n                  </Text>\n                  <Text bold color=\"primary\">\n                    {allowedSlippage / 100}%\n                  </Text>\n                </RowBetween>\n\n                {pair && poolData && (\n                  <RowBetween>\n                    <TooltipText ref={targetRef} bold fontSize=\"12px\" color=\"secondary\">\n                      {t('LP reward APR')}\n                    </TooltipText>\n                    {tooltipVisible && tooltip}\n                    <Text bold color=\"primary\">\n                      {formatAmount(poolData.lpApr7d)}%\n                    </Text>\n                  </RowBetween>\n                )}\n\n                {addIsUnsupported || addIsWarning ? (\n                  <Button disabled mb=\"4px\">\n                    {t('Unsupported Asset')}\n                  </Button>\n                ) : !account ? (\n                  <ConnectWalletButton />\n                ) : isWrongNetwork ? (\n                  <CommitButton />\n                ) : (\n                  <AutoColumn gap=\"md\">\n                    {shouldShowApprovalGroup && (\n                      <RowBetween style={{ gap: '8px' }}>\n                        {showFieldAApproval && (\n                          <Button\n                            onClick={approveACallback}\n                            disabled={approvalA === ApprovalState.PENDING}\n                            width=\"100%\"\n                          >\n                            {approvalA === ApprovalState.PENDING ? (\n                              <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                            ) : (\n                              t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                            )}\n                          </Button>\n                        )}\n                        {showFieldBApproval && (\n                          <Button\n                            onClick={approveBCallback}\n                            disabled={approvalB === ApprovalState.PENDING}\n                            width=\"100%\"\n                          >\n                            {approvalB === ApprovalState.PENDING ? (\n                              <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                            ) : (\n                              t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                            )}\n                          </Button>\n                        )}\n                      </RowBetween>\n                    )}\n                    <CommitButton\n                      isLoading={preferZapInstead && zapInEstimating}\n                      variant={!isValid || zapIn.priceSeverity > 2 ? 'danger' : 'primary'}\n                      onClick={() => {\n                        if (preferZapInstead) {\n                          setLiquidityState({\n                            attemptingTxn: false,\n                            liquidityErrorMessage: undefined,\n                            txHash: undefined,\n                          })\n                          onPresentZapInModal()\n                          return\n                        }\n                        if (expertMode) {\n                          onAdd()\n                        } else {\n                          setLiquidityState({\n                            attemptingTxn: false,\n                            liquidityErrorMessage: undefined,\n                            txHash: undefined,\n                          })\n                          onPresentAddLiquidityModal()\n                        }\n                      }}\n                      disabled={buttonDisabled}\n                    >\n                      {errorText || t('Supply')}\n                    </CommitButton>\n                  </AutoColumn>\n                )}\n              </AutoColumn>\n            </CardBody>\n          </>\n        )}\n      </AppBody>\n      {!(addIsUnsupported || addIsWarning) ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWNATIVE} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\n      )}\n    </Page>\n  )\n}\n","import { useMemo } from 'react'\nimport { JSBI, Percent } from '@pancakeswap/sdk'\n\nimport StableSwapABI from 'config/abi/stableSwap.json'\nimport LPTokenABI from 'config/abi/lpToken.json'\nimport { useContract } from 'hooks/useContract'\nimport { useMultiContractsMultiMethods, CallState } from 'state/multicall/hooks'\n\nfunction parseCallStates(states: CallState[]) {\n  let balance0: JSBI | undefined\n  let balance1: JSBI | undefined\n  let amplifier: JSBI | undefined\n  let totalSupply: JSBI | undefined\n  let feeNumerator: JSBI | undefined\n  let feeDenominator: JSBI | undefined\n  let loading = false\n  let error = false\n  let valid = true\n  for (const [i, { result, loading: resultLoading, syncing, error: resultError }] of states.entries()) {\n    // Should match info inputs\n    switch (i) {\n      case 0:\n        balance0 = result && JSBI.BigInt(result[0].toString())\n        break\n      case 1:\n        balance1 = result && JSBI.BigInt(result[0].toString())\n        break\n      case 2:\n        amplifier = result && JSBI.BigInt(result[0].toString())\n        break\n      case 3:\n        totalSupply = result && JSBI.BigInt(result[0].toString())\n        break\n      case 4:\n        feeNumerator = result && JSBI.BigInt(result[0].toString())\n        break\n      case 5:\n        feeDenominator = result && JSBI.BigInt(result[0].toString())\n        break\n      default:\n        break\n    }\n    valid = valid && result?.resultValid\n    loading = loading || resultLoading || syncing\n    error = error || resultError\n  }\n  return {\n    balances: [balance0, balance1],\n    amplifier,\n    totalSupply,\n    fee: feeNumerator && feeDenominator && new Percent(feeNumerator, feeDenominator),\n    valid,\n    error,\n    loading,\n  }\n}\n\nexport function useStableSwapInfo(stableSwapAddress: string | undefined, lpAddress: string | undefined) {\n  const stableSwapContract = useContract(stableSwapAddress, StableSwapABI)\n  const lpTokenContract = useContract(lpAddress, LPTokenABI)\n  const inputs = useMemo(\n    () => [\n      {\n        contract: stableSwapContract,\n        methodName: 'balances',\n        inputs: [0],\n      },\n      {\n        contract: stableSwapContract,\n        methodName: 'balances',\n        inputs: [1],\n      },\n      {\n        contract: stableSwapContract,\n        methodName: 'A',\n      },\n      {\n        contract: lpTokenContract,\n        methodName: 'totalSupply',\n      },\n      {\n        contract: stableSwapContract,\n        methodName: 'fee',\n      },\n      {\n        contract: stableSwapContract,\n        methodName: 'FEE_DENOMINATOR',\n      },\n    ],\n    [stableSwapContract, lpTokenContract],\n  )\n\n  const results = useMultiContractsMultiMethods(inputs)\n\n  return useMemo(() => parseCallStates(results), [results])\n}\n","import { Currency, CurrencyAmount, JSBI, Price } from '@pancakeswap/sdk'\nimport { useContext, useMemo } from 'react'\nimport { StableSwap } from '@pancakeswap/smart-router/evm'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\n\nimport { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport { useStableSwapInfo } from 'hooks/useStableSwapInfo'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\n\nexport function useDerivedLPInfo(\n  amountA: CurrencyAmount<Currency> | undefined,\n  amountB: CurrencyAmount<Currency> | undefined,\n): {\n  lpOutputWithoutFee: CurrencyAmount<Currency> | null\n  price: Price<Currency, Currency> | null\n  loading: boolean\n} {\n  const { stableSwapConfig } = useContext(StableConfigContext)\n  const { totalSupply, balances, amplifier, loading } = useStableSwapInfo(\n    stableSwapConfig?.stableSwapAddress,\n    stableSwapConfig?.liquidityToken.address,\n  )\n  const wrappedCurrencyA = amountA?.currency.wrapped\n  const wrappedCurrencyB = amountB?.currency.wrapped\n  const [token0, token1] =\n    wrappedCurrencyA && wrappedCurrencyB && wrappedCurrencyA?.sortsBefore(wrappedCurrencyB)\n      ? [wrappedCurrencyA, wrappedCurrencyB]\n      : [wrappedCurrencyB, wrappedCurrencyA]\n  const [amount0, amount1] =\n    wrappedCurrencyA && token0 && token0.equals(wrappedCurrencyA) ? [amountA, amountB] : [amountB, amountA]\n  const poolBalances = useMemo<[CurrencyAmount<Currency>, CurrencyAmount<Currency>] | undefined>(\n    () =>\n      token0 &&\n      token1 &&\n      balances[0] &&\n      balances[1] && [\n        CurrencyAmount.fromRawAmount(token0, balances[0]),\n        CurrencyAmount.fromRawAmount(token1, balances[1]),\n      ],\n    [balances, token0, token1],\n  )\n  const totalSupplyAmount = useMemo(\n    () =>\n      totalSupply &&\n      stableSwapConfig?.liquidityToken &&\n      CurrencyAmount.fromRawAmount(stableSwapConfig.liquidityToken, totalSupply),\n    [totalSupply, stableSwapConfig?.liquidityToken],\n  )\n  return useMemo(() => {\n    const emptyResult = {\n      loading,\n      lpOutputWithoutFee: null,\n      price: null,\n    }\n    if (!totalSupplyAmount || !poolBalances || !amount0 || !amount1) {\n      return emptyResult\n    }\n    const totalValue = JSBI.add(poolBalances[0].quotient, poolBalances[1].quotient)\n    if (JSBI.equal(totalValue, BIG_INT_ZERO)) {\n      return emptyResult\n    }\n    let lpOutputWithoutFee: CurrencyAmount<Currency> | null = null\n    let price: Price<Currency, Currency> | null = null\n    try {\n      lpOutputWithoutFee = StableSwap.getLPOutputWithoutFee({\n        amplifier,\n        balances: poolBalances,\n        totalSupply: totalSupplyAmount,\n        amounts: [amount0, amount1],\n      })\n      const baseAmount = tryParseAmount('1', amountA.currency)\n      const quoteAmount = StableSwap.getSwapOutputWithoutFee({\n        amplifier,\n        balances: poolBalances,\n        amount: baseAmount,\n        outputCurrency: amountB.currency,\n      })\n      price = new Price({ baseAmount, quoteAmount })\n    } catch (e) {\n      console.error(e)\n    }\n    return {\n      loading,\n      lpOutputWithoutFee,\n      price,\n    }\n  }, [totalSupplyAmount, poolBalances, amplifier, loading, amount0, amount1, amountA, amountB])\n}\n","import { JSBI, Percent } from '@pancakeswap/sdk'\n\nimport { BIPS_BASE } from 'config/constants/exchange'\n\nexport const ALLOWED_SLIPPAGE_LOW: Percent = new Percent(JSBI.BigInt(9), BIPS_BASE) // 0.09%\nexport const ALLOWED_SLIPPAGE_MEDIUM: Percent = new Percent(JSBI.BigInt(12), BIPS_BASE) // 0.12%\nexport const ALLOWED_SLIPPAGE_HIGH: Percent = new Percent(JSBI.BigInt(15), BIPS_BASE) // 0.15%\nexport const BLOCKED_SLIPPAGE_NON_EXPERT: Percent = new Percent(JSBI.BigInt(20), BIPS_BASE) // 0.2%\n\nexport function warningSeverity(slippage?: Percent): 0 | 1 | 2 | 3 | 4 {\n  // Allow to add liquidity if there's no initial liquidity inside the pool\n  if (!slippage) {\n    return 0\n  }\n  if (!slippage?.lessThan(BLOCKED_SLIPPAGE_NON_EXPERT)) return 4\n  if (!slippage?.lessThan(ALLOWED_SLIPPAGE_HIGH)) return 3\n  if (!slippage?.lessThan(ALLOWED_SLIPPAGE_MEDIUM)) return 2\n  if (!slippage?.lessThan(ALLOWED_SLIPPAGE_LOW)) return 1\n  return 0\n}\n","import { Percent, Rounding } from '@pancakeswap/sdk'\n\nimport CircleLoader from 'components/Loader/CircleLoader'\nimport { ONE_BIPS } from 'config/constants/exchange'\nimport { ErrorText } from 'views/Swap/components/styleds'\nimport { warningSeverity } from '../utils/slippage'\n\n/**\n * Formatted version of price impact text with warning colors\n */\nexport function FormattedSlippage({ slippage, loading = false }: { slippage?: Percent; loading?: boolean }) {\n  const slippageDisplay = slippage\n    ? slippage.lessThan(ONE_BIPS)\n      ? '<0.01%'\n      : `${slippage.toFixed(2, { groupSeparator: '' }, Rounding.ROUND_DOWN)}%`\n    : '-'\n\n  const text = loading ? <CircleLoader /> : slippageDisplay\n  return (\n    <ErrorText fontSize=\"14px\" severity={slippage ? warningSeverity(slippage) : 0}>\n      {text}\n    </ErrorText>\n  )\n}\n","export * from './FormattedSlippage'\n","import { useCallback, useContext, useMemo, useState } from 'react'\nimport { CurrencyAmount, Token, WNATIVE, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  AddIcon,\n  CardBody,\n  Message,\n  useModal,\n  QuestionHelper,\n  TooltipText,\n  useTooltip,\n  IconButton,\n  PencilIcon,\n  AutoColumn,\n  ColumnCenter,\n} from '@pancakeswap/uikit'\nimport { logError } from 'utils/sentry'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { CommitButton } from 'components/CommitButton'\nimport { transactionErrorToUserReadableMessage } from 'utils/transactionErrorToUserReadableMessage'\nimport { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport { LightCard } from 'components/Card'\nimport { ONE_HUNDRED_PERCENT } from 'config/constants/exchange'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { useStableSwapAPR } from 'hooks/useStableSwapAPR'\n\nimport CurrencyInputPanel from '../../../components/CurrencyInputPanel'\nimport ConnectWalletButton from '../../../components/ConnectWalletButton'\n\nimport { PairState } from '../../../hooks/usePairs'\nimport { ApprovalState, useApproveCallback } from '../../../hooks/useApproveCallback'\nimport { Field } from '../../../state/mint/actions'\nimport { useMintActionHandlers, useMintState } from '../../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../../state/transactions/hooks'\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../../state/user/hooks'\nimport { calculateGasMargin } from '../../../utils'\nimport { calculateSlippageAmount } from '../../../utils/exchange'\nimport { maxAmountSpend } from '../../../utils/maxAmountSpend'\nimport Dots from '../../../components/Loader/Dots'\nimport PoolPriceBar from '../PoolPriceBar'\nimport Page from '../../Page'\nimport ConfirmAddLiquidityModal from '../components/ConfirmAddLiquidityModal'\nimport { useCurrencySelectRoute } from '../useCurrencySelectRoute'\nimport { CommonBasesType } from '../../../components/SearchModal/types'\nimport { AppHeader, AppBody } from '../../../components/App'\nimport { RowBetween, RowFixed } from '../../../components/Layout/Row'\nimport { MinimalPositionCard } from '../../../components/PositionCard'\nimport { useStableLPDerivedMintInfo } from './hooks/useStableLPDerivedMintInfo'\nimport { useDerivedLPInfo } from './hooks/useDerivedLPInfo'\nimport { FormattedSlippage } from './components'\nimport { warningSeverity } from './utils/slippage'\nimport SettingsModal from '../../../components/Menu/GlobalSettings/SettingsModal'\nimport { SettingsMode } from '../../../components/Menu/GlobalSettings/types'\n\nexport default function AddStableLiquidity({ currencyA, currencyB }) {\n  const { account, chainId, isWrongNetwork } = useActiveWeb3React()\n\n  const expertMode = useIsExpertMode()\n\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n    loading: infoLoading,\n  } = useStableLPDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(true)\n\n  // modal and loading\n  const [{ attemptingTxn, liquidityErrorMessage, txHash }, setLiquidityState] = useState<{\n    attemptingTxn: boolean\n    liquidityErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    attemptingTxn: false,\n    liquidityErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // txn values\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const {\n    lpOutputWithoutFee: expectedOutputWithoutFee,\n    loading,\n    price,\n  } = useDerivedLPInfo(parsedAmounts[Field.CURRENCY_A], parsedAmounts[Field.CURRENCY_B])\n  const minLPOutput = useMemo(\n    () => expectedOutputWithoutFee && calculateSlippageAmount(expectedOutputWithoutFee, allowedSlippage)[0],\n    [expectedOutputWithoutFee, allowedSlippage],\n  )\n  const executionSlippage = useMemo(() => {\n    if (!liquidityMinted || !expectedOutputWithoutFee) {\n      return null\n    }\n    return ONE_HUNDRED_PERCENT.subtract(new Percent(liquidityMinted.quotient, expectedOutputWithoutFee.quotient))\n  }, [liquidityMinted, expectedOutputWithoutFee])\n\n  const slippageSeverity = warningSeverity(executionSlippage)\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Token> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const { handleCurrencyASelect, handleCurrencyBSelect } = useCurrencySelectRoute()\n\n  // get formatted amounts\n  const formattedAmounts = useMemo(\n    () => ({\n      [independentField]: typedValue,\n      [dependentField]: otherTypedValue,\n    }),\n    [dependentField, independentField, otherTypedValue, typedValue],\n  )\n\n  const { stableSwapContract, stableSwapConfig } = useContext(StableConfigContext)\n  const stableAPR = useStableSwapAPR(stableSwapContract.address)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n\n  // check whether the user has approved tokens for addling LPs\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], stableSwapContract?.address)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], stableSwapContract?.address)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !account || !stableSwapContract) return\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n\n    const atLeastOneCurrencyProvided = parsedAmountA?.greaterThan(0) || parsedAmountB?.greaterThan(0)\n    const allCurrenciesProvided = parsedAmountA?.greaterThan(0) && parsedAmountB?.greaterThan(0)\n\n    if (noLiquidity ? !allCurrenciesProvided : !atLeastOneCurrencyProvided) {\n      return\n    }\n\n    const lpMintedSlippage = calculateSlippageAmount(liquidityMinted, noLiquidity ? 0 : allowedSlippage)[0]\n\n    const estimate = stableSwapContract.estimateGas.add_liquidity\n    const method = stableSwapContract.add_liquidity\n\n    const quotientA = parsedAmountA?.quotient?.toString() || '0'\n    const quotientB = parsedAmountB?.quotient?.toString() || '0'\n\n    // Ensure the token order [token0, token1]\n    const tokenAmounts =\n      stableSwapConfig?.token0?.address === parsedAmountA?.currency?.wrapped?.address\n        ? [quotientA, quotientB]\n        : [quotientB, quotientA]\n\n    const args = [tokenAmounts, minLPOutput?.toString() || lpMintedSlippage?.toString()]\n\n    const value = null\n\n    setLiquidityState({ attemptingTxn: true, liquidityErrorMessage: undefined, txHash: undefined })\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n          gasPrice,\n        }).then((response) => {\n          setLiquidityState({ attemptingTxn: false, liquidityErrorMessage: undefined, txHash: response.hash })\n\n          const symbolA = currencies[Field.CURRENCY_A]?.symbol\n          const amountA = parsedAmounts[Field.CURRENCY_A]?.toSignificant(3) || '0'\n          const symbolB = currencies[Field.CURRENCY_B]?.symbol\n          const amountB = parsedAmounts[Field.CURRENCY_B]?.toSignificant(3) || '0'\n          addTransaction(response, {\n            summary: `Add ${amountA} ${symbolA} and ${amountB} ${symbolB}`,\n            translatableSummary: {\n              text: 'Add %amountA% %symbolA% and %amountB% %symbolB%',\n              data: { amountA, symbolA, amountB, symbolB },\n            },\n            type: 'add-liquidity',\n          })\n        }),\n      )\n      .catch((err) => {\n        if (err && err.code !== 4001) {\n          logError(err)\n          console.error(`Add Liquidity failed`, err, args, value)\n        }\n        setLiquidityState({\n          attemptingTxn: false,\n          liquidityErrorMessage:\n            err && err.code !== 4001\n              ? t('Add liquidity failed: %message%', { message: transactionErrorToUserReadableMessage(err, t) })\n              : undefined,\n          txHash: undefined,\n        })\n      })\n  }\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n  })\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n      onFieldBInput('')\n    }\n  }, [onFieldAInput, onFieldBInput, txHash])\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <ConfirmAddLiquidityModal\n      title={noLiquidity ? t('You are creating a trading pair') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n      allowedSlippage={allowedSlippage}\n      onAdd={onAdd}\n      parsedAmounts={parsedAmounts}\n      currencies={currencies}\n      liquidityErrorMessage={liquidityErrorMessage}\n      price={price}\n      noLiquidity={noLiquidity}\n      poolTokenPercentage={poolTokenPercentage}\n      liquidityMinted={liquidityMinted}\n      isStable\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  let isValid = !error\n  let errorText = error\n\n  isValid = !error && !addError\n  errorText = error ?? addError\n\n  const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n\n  const notApprovalYet =\n    (parsedAmountA?.greaterThan(0) && approvalA !== ApprovalState.APPROVED) ||\n    (parsedAmountB?.greaterThan(0) && approvalB !== ApprovalState.APPROVED)\n\n  const buttonDisabled = !isValid || notApprovalYet || (slippageSeverity > 2 && !expertMode)\n\n  const showFieldAApproval = approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING\n  const showFieldBApproval = approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING\n\n  const shouldShowApprovalGroup = (showFieldAApproval || showFieldBApproval) && isValid\n\n  const oneCurrencyIsWNATIVE = Boolean(\n    chainId && ((currencyA && currencyA.equals(WNATIVE[chainId])) || (currencyB && currencyB.equals(WNATIVE[chainId]))),\n  )\n\n  const [onPresentSettingsModal] = useModal(<SettingsModal mode={SettingsMode.SWAP_LIQUIDITY} />)\n\n  return (\n    <Page>\n      <AppBody>\n        <>\n          <AppHeader\n            title={\n              currencies[Field.CURRENCY_A]?.symbol && currencies[Field.CURRENCY_B]?.symbol\n                ? `${currencies[Field.CURRENCY_A].symbol}-${currencies[Field.CURRENCY_B].symbol} Stable LP`\n                : t('Add Stable Liquidity')\n            }\n            backTo=\"/liquidity\"\n          />\n          <CardBody>\n            <AutoColumn gap=\"20px\">\n              {noLiquidity && (\n                <ColumnCenter>\n                  <Message variant=\"warning\">\n                    <div>\n                      <Text bold mb=\"8px\">\n                        {t('You are the first liquidity provider.')}\n                      </Text>\n                      <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pair.')}</Text>\n                      <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                    </div>\n                  </Message>\n                </ColumnCenter>\n              )}\n              <CurrencyInputPanel\n                showUSDPrice\n                onCurrencySelect={handleCurrencyASelect}\n                zapStyle=\"noZap\"\n                value={formattedAmounts[Field.CURRENCY_A]}\n                onUserInput={onFieldAInput}\n                onPercentInput={(percent) => {\n                  if (maxAmounts[Field.CURRENCY_A]) {\n                    onFieldAInput(maxAmounts[Field.CURRENCY_A]?.multiply(new Percent(percent, 100)).toExact() ?? '')\n                  }\n                }}\n                onMax={() => {\n                  onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                }}\n                showQuickInputButton\n                showMaxButton\n                maxAmount={maxAmounts[Field.CURRENCY_A]}\n                currency={currencies[Field.CURRENCY_A]}\n                id=\"add-liquidity-input-tokena\"\n                showCommonBases\n                commonBasesType={CommonBasesType.LIQUIDITY}\n              />\n              <ColumnCenter>\n                <AddIcon width=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                showUSDPrice\n                onCurrencySelect={handleCurrencyBSelect}\n                zapStyle=\"noZap\"\n                value={formattedAmounts[Field.CURRENCY_B]}\n                onUserInput={onFieldBInput}\n                onPercentInput={(percent) => {\n                  if (maxAmounts[Field.CURRENCY_B]) {\n                    onFieldBInput(maxAmounts[Field.CURRENCY_B]?.multiply(new Percent(percent, 100)).toExact() ?? '')\n                  }\n                }}\n                onMax={() => {\n                  onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                }}\n                showQuickInputButton\n                showMaxButton\n                maxAmount={maxAmounts[Field.CURRENCY_B]}\n                currency={currencies[Field.CURRENCY_B]}\n                id=\"add-liquidity-input-tokenb\"\n                showCommonBases\n                commonBasesType={CommonBasesType.LIQUIDITY}\n              />\n\n              {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n                <>\n                  <LightCard padding=\"0px\" borderRadius=\"20px\">\n                    <RowBetween padding=\"1rem\">\n                      <Text fontSize=\"14px\">\n                        {noLiquidity ? t('Initial prices and share in the pair') : t('Prices and Share')}\n                      </Text>\n                    </RowBetween>{' '}\n                    <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                      <PoolPriceBar\n                        currencies={currencies}\n                        poolTokenPercentage={poolTokenPercentage}\n                        noLiquidity={noLiquidity}\n                        price={price}\n                      />\n                    </LightCard>\n                  </LightCard>\n                </>\n              )}\n\n              <RowBetween>\n                <RowFixed>\n                  <Text bold fontSize=\"12px\" color=\"secondary\">\n                    {t('Slippage')}\n                  </Text>\n                  <QuestionHelper\n                    text={t(\n                      'Based on % contributed to stable pair, fees will vary. Deposits with fees >= 0.15% will be rejected',\n                    )}\n                    size=\"14px\"\n                    ml=\"4px\"\n                    placement=\"top-start\"\n                  />\n                </RowFixed>\n\n                <FormattedSlippage\n                  slippage={executionSlippage}\n                  loading={!executionSlippage && (loading || infoLoading)}\n                />\n              </RowBetween>\n\n              <RowBetween>\n                <Text bold fontSize=\"12px\" color=\"secondary\">\n                  {t('Slippage Tolerance')}\n                  <IconButton scale=\"sm\" variant=\"text\" onClick={onPresentSettingsModal}>\n                    <PencilIcon color=\"primary\" width=\"10px\" />\n                  </IconButton>\n                </Text>\n                <Text bold color=\"primary\">\n                  {allowedSlippage / 100}%\n                </Text>\n              </RowBetween>\n\n              {stableAPR ? (\n                <RowBetween>\n                  <TooltipText ref={targetRef} bold fontSize=\"12px\" color=\"secondary\">\n                    {t('LP reward APR')}\n                  </TooltipText>\n                  {tooltipVisible && tooltip}\n                  <Text bold color=\"primary\">\n                    {formatAmount(stableAPR)}%\n                  </Text>\n                </RowBetween>\n              ) : null}\n\n              {!account ? (\n                <ConnectWalletButton />\n              ) : isWrongNetwork ? (\n                <CommitButton />\n              ) : (\n                <AutoColumn gap=\"md\">\n                  {shouldShowApprovalGroup && (\n                    <RowBetween style={{ gap: '8px' }}>\n                      {showFieldAApproval && (\n                        <Button onClick={approveACallback} disabled={approvalA === ApprovalState.PENDING} width=\"100%\">\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                      {showFieldBApproval && (\n                        <Button onClick={approveBCallback} disabled={approvalB === ApprovalState.PENDING} width=\"100%\">\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                    </RowBetween>\n                  )}\n                  <CommitButton\n                    variant={!isValid || slippageSeverity > 2 ? 'danger' : 'primary'}\n                    onClick={() => {\n                      if (expertMode) {\n                        onAdd()\n                      } else {\n                        setLiquidityState({\n                          attemptingTxn: false,\n                          liquidityErrorMessage: undefined,\n                          txHash: undefined,\n                        })\n                        onPresentAddLiquidityModal()\n                      }\n                    }}\n                    disabled={buttonDisabled}\n                  >\n                    {errorText || t('Supply')}\n                  </CommitButton>\n                </AutoColumn>\n              )}\n            </AutoColumn>\n          </CardBody>\n        </>\n      </AppBody>\n      {pair && !noLiquidity && pairState !== PairState.INVALID ? (\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWNATIVE} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </Page>\n  )\n}\n","import { CAKE, USDC } from '@pancakeswap/tokens'\nimport { useCurrency } from 'hooks/Tokens'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { GetStaticPaths, GetStaticProps } from 'next'\nimport { useRouter } from 'next/router'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { resetMintState } from 'state/mint/actions'\nimport { CHAIN_IDS } from 'utils/wagmi'\nimport AddLiquidity from 'views/AddLiquidity'\nimport AddStableLiquidity from 'views/AddLiquidity/AddStableLiquidity/index'\nimport useStableConfig, { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\n\nconst AddLiquidityPage = () => {\n  const router = useRouter()\n  const { chainId } = useActiveChainId()\n  const dispatch = useAppDispatch()\n\n  const native = useNativeCurrency()\n\n  const [currencyIdA, currencyIdB] = router.query.currency || [\n    native.symbol,\n    CAKE[chainId]?.address ?? USDC[chainId]?.address,\n  ]\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  const stableConfig = useStableConfig({\n    tokenA: currencyA,\n    tokenB: currencyB,\n  })\n\n  useEffect(() => {\n    if (!currencyIdA && !currencyIdB) {\n      dispatch(resetMintState())\n    }\n  }, [dispatch, currencyIdA, currencyIdB])\n\n  return stableConfig.stableSwapConfig ? (\n    <StableConfigContext.Provider value={stableConfig}>\n      <AddStableLiquidity currencyA={currencyA} currencyB={currencyB} />\n    </StableConfigContext.Provider>\n  ) : (\n    <AddLiquidity currencyA={currencyA} currencyB={currencyB} />\n  )\n}\n\nAddLiquidityPage.chains = CHAIN_IDS\n\nexport default AddLiquidityPage\n\nconst OLD_PATH_STRUCTURE = /^(0x[a-fA-F0-9]{40}|BNB)-(0x[a-fA-F0-9]{40}|BNB)$/\n\nexport const getStaticPaths: GetStaticPaths = () => {\n  return {\n    paths: [{ params: { currency: [] } }],\n    fallback: true,\n  }\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { currency = [] } = params\n  const [currencyIdA, currencyIdB] = currency\n  const match = currencyIdA?.match(OLD_PATH_STRUCTURE)\n\n  if (match?.length) {\n    return {\n      redirect: {\n        statusCode: 301,\n        destination: `/add/${match[1]}/${match[2]}`,\n      },\n    }\n  }\n\n  if (currencyIdA && currencyIdB && currencyIdA.toLowerCase() === currencyIdB.toLowerCase()) {\n    return {\n      redirect: {\n        statusCode: 303,\n        destination: `/add/${currencyIdA}`,\n      },\n    }\n  }\n\n  return {\n    props: {},\n  }\n}\n","import { WNATIVE, NATIVE } from '@pancakeswap/sdk'\n\nexport const getLPSymbol = (token0Symbol: string, token1Symbol: string, chainId: number) => {\n  if (token0Symbol === WNATIVE[chainId].symbol) {\n    return `${NATIVE[chainId].symbol}-${token1Symbol} LP`\n  }\n  if (token1Symbol === WNATIVE[chainId].symbol) {\n    return `${token0Symbol}-${NATIVE[chainId].symbol} LP`\n  }\n  return `${token0Symbol}-${token1Symbol} LP`\n}\n","import { TranslateFunction } from '@pancakeswap/localization'\n\n/**\n * This is hacking out the revert reason from the ethers provider thrown error however it can.\n * This object seems to be undocumented by ethers.\n * @param error an error from the ethers provider\n * @param t Translation function\n */\nexport function transactionErrorToUserReadableMessage(error: any, t: TranslateFunction) {\n  let reason: string | undefined\n  while (error) {\n    reason = error.reason ?? error.data?.message ?? error.message ?? reason\n    // eslint-disable-next-line no-param-reassign\n    error = error.error ?? error.data?.originalError\n  }\n\n  if (reason?.indexOf('execution reverted: ') === 0) reason = reason.substring('execution reverted: '.length)\n\n  const formatErrorMessage = (message: string) => [message, `(${reason})`].join(' ')\n  switch (reason) {\n    case 'PancakeRouter: EXPIRED':\n      return formatErrorMessage(\n        t(\n          'The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.',\n        ),\n      )\n    case 'PancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT':\n    case 'PancakeRouter: EXCESSIVE_INPUT_AMOUNT':\n    case 'PancakeRouter: INSUFFICIENT_A_AMOUNT':\n    case 'PancakeRouter: INSUFFICIENT_B_AMOUNT':\n    case 'swapMulti: incorrect user balance':\n    case 'Pancake: K':\n      return formatErrorMessage(\n        t(\n          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.',\n        ),\n      )\n    case 'TransferHelper: TRANSFER_FROM_FAILED':\n      return formatErrorMessage(t('The input token cannot be transferred. There may be an issue with the input token.'))\n    case 'Pancake: TRANSFER_FAILED':\n      return formatErrorMessage(\n        t('The output token cannot be transferred. There may be an issue with the output token.'),\n      )\n    default:\n      if (reason?.indexOf('undefined is not an object') !== -1) {\n        console.error(error, reason)\n        return t(\n          'An error occurred when trying to execute this operation. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading.',\n        )\n      }\n      return t('Unknown error%reason%. Try increasing your slippage tolerance.', {\n        reason: reason ? `: \"${reason}\"` : '',\n      })\n  }\n}\n","import { memo } from 'react'\nimport { Message, MessageText, Button, Box, Flex, useToast } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\ninterface ZapErrorMessagesProps {\n  isSingleToken: boolean\n  zapMode: boolean\n  toggleZapMode: (zapMode: boolean) => void\n  onModalDismiss: () => void\n}\n\nexport const ZapErrorMessages: React.FC<React.PropsWithChildren<ZapErrorMessagesProps>> = memo(\n  ({ isSingleToken, zapMode, toggleZapMode, onModalDismiss }) => {\n    const { t } = useTranslation()\n    const { toastInfo } = useToast()\n\n    const handleCloseButton = () => {\n      onModalDismiss()\n\n      if (zapMode) {\n        toggleZapMode(!zapMode)\n        toastInfo(t('Info'), t('Temporarily disabled Zap'))\n      }\n    }\n\n    return (\n      <Box margin=\"auto\" width={['100%', '100%', '380px']}>\n        <Message variant=\"warning\" mb=\"16px\">\n          <Flex flexDirection=\"column\">\n            <MessageText bold>{t('Currently using Zap for liquidity provisions.')}</MessageText>\n            <MessageText small>\n              {isSingleToken\n                ? t('Zap does NOT support tokens with fees on transfers. If you experience any issues, click')\n                : t(\n                    `Zap does NOT support tokens with fees on transfers. Please choose ’Don't convert’ and retry. If you experience any further issues, click`,\n                  )}\n              <Button p=\"0 4px\" scale=\"sm\" variant=\"text\" height=\"auto\" onClick={handleCloseButton}>\n                {t('here')}\n              </Button>\n              {t('to disable Zap temporarily.')}\n            </MessageText>\n          </Flex>\n        </Message>\n      </Box>\n    )\n  },\n)\n","import { ErrorIcon, Flex, Text, AutoColumn } from '@pancakeswap/uikit'\nimport styled, { css } from 'styled-components'\n\nexport const Wrapper = styled(Flex)`\n  position: relative;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n`\n\nexport const ArrowWrapper = styled.div<{ clickable: boolean }>`\n  padding: 2px;\n\n  ${({ clickable }) =>\n    clickable\n      ? css`\n          :hover {\n            cursor: pointer;\n            opacity: 0.8;\n          }\n        `\n      : null}\n`\n\nexport const ErrorText = styled(Text)<{ severity?: 0 | 1 | 2 | 3 | 4 }>`\n  color: ${({ theme, severity }) =>\n    severity === 3 || severity === 4\n      ? theme.colors.failure\n      : severity === 2\n      ? theme.colors.warning\n      : severity === 1\n      ? theme.colors.text\n      : theme.colors.success};\n`\n\nexport const StyledBalanceMaxMini = styled.button`\n  height: 22px;\n  width: 22px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: none;\n  border-radius: 50%;\n  padding: 0.2rem;\n  font-size: 0.875rem;\n  font-weight: 400;\n  margin-left: 0.4rem;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  float: right;\n\n  :hover {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n  }\n  :focus {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n    outline: none;\n  }\n`\n\nexport const TruncatedText = styled(Text).attrs({ ellipsis: true })`\n  width: 220px;\n`\n\nconst SwapCallbackErrorInner = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure33}`};\n  border-radius: 1rem;\n  display: flex;\n  align-items: center;\n  font-size: 0.825rem;\n  width: 100%;\n  padding: 3rem 1.25rem 1rem 1rem;\n  margin-top: -2rem;\n  color: ${({ theme }) => theme.colors.failure};\n  z-index: -1;\n  p {\n    padding: 0;\n    margin: 0;\n    font-weight: 500;\n  }\n`\n\nconst SwapCallbackErrorInnerAlertTriangle = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure33}`};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 12px;\n  border-radius: 12px;\n  min-width: 48px;\n  height: 48px;\n`\n\nexport function SwapCallbackError({ error }: { error: string }) {\n  return (\n    <SwapCallbackErrorInner>\n      <SwapCallbackErrorInnerAlertTriangle>\n        <ErrorIcon width=\"24px\" />\n      </SwapCallbackErrorInnerAlertTriangle>\n      <p>{error}</p>\n    </SwapCallbackErrorInner>\n  )\n}\n\nexport const SwapShowAcceptChanges = styled(AutoColumn)`\n  background-color: ${({ theme }) => `${theme.colors.warning33}`};\n  padding: 0.5rem;\n  border-radius: 12px;\n  margin-top: 8px;\n`\n","import styled from \"styled-components\";\nimport { space, SpaceProps } from \"styled-system\";\n\nexport type CardFooterProps = SpaceProps;\n\nconst CardFooter = styled.div<CardFooterProps>`\n  border-top: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  ${space}\n`;\n\nCardFooter.defaultProps = {\n  p: \"24px\",\n};\n\nexport default CardFooter;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M8.71005 11.71L11.3001 14.3C11.6901 14.69 12.3201 14.69 12.7101 14.3L15.3001 11.71C15.9301 11.08 15.4801 10 14.5901 10H9.41005C8.52005 10 8.08005 11.08 8.71005 11.71Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from \"styled-components\";\nimport { Box } from \"../../components\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport function ConfirmationModalContent({\n  bottomContent,\n  topContent,\n}: {\n  topContent: () => React.ReactNode;\n  bottomContent: () => React.ReactNode;\n}) {\n  return (\n    <Wrapper>\n      <Box>{topContent()}</Box>\n      <Box>{bottomContent()}</Box>\n    </Wrapper>\n  );\n}\n"],"names":["addMonths","dirtyDate","dirtyAmount","_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","Z","arguments","date","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","amount","_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","setFullYear","getFullYear","startOfHour","setMinutes","_typeof","obj","Symbol","iterator","constructor","prototype","sub","duration","requiredArgs","years","toInteger","months","weeks","days","hours","minutes","seconds","dateWithoutMonths","subMonths","dateWithoutDays","subDays","secondstoSub","minutestoSub","toString","__webpack_require__","module","exports","value","toLowerCase","baseFlatten","baseRest","baseUniq","isArrayLikeObject","union","arrays","window","__NEXT_P","push","wrongNetworkProps","variant","disabled","children","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Trans","CommitButton","props","isWrongNetwork","useActiveChainId","switchNetworkLoading","useSwitchNetworkLoading","setHideWrongNetwork","useSetAtom","hideWrongNetworkModalAtom","Button","onClick","e","ZapCheckBoxWrapper","styled","param","theme","colors","background","cardBorder","ZapCheckbox","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Checkbox","scale","DetailsFooter","text","invertedContrast","UnsupportedModal","currencies","onDismiss","chainId","t","useTranslation","tokens","map","currency","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","Modal","title","jsxs","AutoColumn","gap","token","Object","keys","includes","address","AutoRow","align","CurrencyLogo","size","Text","symbol","Link","external","small","color","href","getBlockExploreLink","concat","UnsupportedCurrencyFooter","onPresentModal","useModal","useCurrentBlockTimestamp","useSingleCallResult","multicall","useMulticallContract","result","SWR_SETTINGS","_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_3__","refreshInterval","errorRetryCount","errorRetryInterval","useStableSwapAPR","chainName","useGetChainName","data","useSWRImmutable","getAprsForStableFarm","toNumber","useTransactionDeadline","ttl","useSelector","state","user","userDeadline","blockTimestamp","useMemo","add","Steps","AddLiquidity_PoolPriceBar","price","poolTokenPercentage","noLiquidity","jsx_runtime","justify","toSignificant","fontSize","pt","assetA","Field","assetB","invert","lessThan","ONE_BIPS","toFixed","Dot","Box","CircleSvg","_param","percent","_param_stroke","stroke","Svg","width","height","viewBox","fill","xmlns","g","filter","circle","r","cx","cy","strokeWidth","strokeDasharray","_param_percent","transform","defs","id","x","y","filterUnits","colorInterpolationFilters","feFlood","floodOpacity","feBlend","in","in2","feColorMatrix","values","feOffset","dy","feComposite","operator","k2","k3","Subtitle","textTransform","bold","PairDistribution","currencyA","currencyB","currencyAValue","currencyBValue","tooltipTargetRef","Flex","div","ref","mr","style","RowBetween","bg","AddLiquidityModalHeader","liquidityMinted","allowedSlippage","useTooltip","slippage","tooltip","tooltipVisible","targetRef","GreyCard","DoubleCurrencyLogo","currency0","currency1","getLPSymbol","ml","justifyContent","TooltipText","components_ConfirmAddLiquidityModal","customOnDismiss","attemptingTxn","hash","pendingText","parsedAmounts","liquidityErrorMessage","onAdd","currencyToAdd","isStable","amountCurrencyA","_toNumber","normalizedAmountCurrencyA","currencyAToCurrencyB","parseFloat","amountCurrencyB","modalHeader","useCallback","modalBottom","mt","confirmationContent","TransactionErrorContent","message","ConfirmationModalContent","topContent","bottomContent","TransactionConfirmationModal","minWidth","content","components_ConfirmZapInModal","zapSwapTokenField","zapSwapOutTokenField","pair","zapInEstimated","rebalancing","zapMode","toggleZapMode","totalPoolTokens","useTotalSupply","liquidityToken","swapInCurrencyAmount","swapOutCurrencyAmount","token0","token1","placement","_ref","_sliced_to_array","JSBI","quotient","getLiquidityValue","undefined","token0Deposited","token1Deposited","swapInTokenAmount","CurrencyAmount","swapAmountIn","swapOutTokenAmount","swapAmountOut","inputPercent","Math","min","max","toExact","priceOf","wrapped","tokenDeposited","_obj","_define_property","equals","ArrowDownIcon","RowFixed","Fragment","ZapErrorMessages","isSingleToken","onModalDismiss","DropDownHeader","shadows","inset","inputSecondary","input","DropDownContainer","mediaQueries","sm","CurrencySelect","selectedCurrencyBalance","onCurrencySelect","selectedCurrency","otherSelectedCurrency","showCommonBases","commonBasesType","hideBalance","useAccount","useCurrencyBalance","account","onPresentCurrencyModal","CurrencySearchModal","useBUSDPrice","quoted","quote","p","alignItems","marginRight","length","slice","ArrowDropDownIcon","className","Number","isFinite","formatNumber","useCurrencySelectRoute","CAKE","USDC","native","useNativeCurrency","router","useRouter","query","currencyIdA","currencyIdB","handleCurrencyASelect","currencyA_","newCurrencyIdA","currencyId","replace","shallow","handleCurrencyBSelect","currencyB_","newCurrencyIdB","ChoosePair","error","onNext","useActiveWeb3React","isValid","usePair","poolData","useLPApr","AppHeader","subtitle","helper","backTo","CardBody","pb","FlexGap","CommonBasesType","AddIcon","formatAmount","lpApr7d","CardFooter","data-test","ConnectWalletButton","AddLiquidity","currencyBalances","addPair","usePairAdder","useZapModeManager","expertMode","useIsExpertMode","zapAddress","getZapAddress","useState","temporarilyZapMode","setTemporarilyZapMode","Choose","steps","setSteps","gasPrice","useGasPrice","useEffect","step","Add","zapModeStatus","useMintState","independentField","typedValue","otherTypedValue","useDerivedMintInfo","dependentField","pairState","addError","useMintActionHandlers","onFieldAInput","onFieldBInput","txHash","_useState_","setLiquidityState","zapTokenToggleA","setZapTokenToggleA","zapTokenToggleB","setZapTokenToggleB","zapTokenCheckedA","greaterThan","zapTokenCheckedB","deadline","useUserSlippageTolerance","maxAmounts","reduce","accumulator","field","_object_spread_props","_object_spread","maxAmountSpend","canZap","SUPPORT_ZAP","reserve0","MINIMUM_LIQUIDITY","reserve1","useZapIn","zapInEstimating","zapIn","mintParsedAmounts","preferZapInstead","noNeedZap","formattedAmounts","useApproveCallback","ROUTER_ADDRESS","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","routerContract","useRouterContract","_async_to_generator","parsedAmountA","parsedAmountB","estimate","method","args","tokenBIsNative","_wrapped_address","calculateSlippageAmount","isNative","estimateGas","addLiquidityETH","_ref_wrapped","amountsMin","toHexString","BigNumber","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","symbolA","amountA","symbolB","amountB","summary","translatableSummary","type","catch","err","code","logError","console","transactionErrorToUserReadableMessage","_state","sent","handleDismissConfirmation","addIsUnsupported","useIsTransactionUnsupported","CURRENCY_A","CURRENCY_B","addIsWarning","useIsTransactionWarning","zapContract","useZapContract","onPresentAddLiquidityModal","ConfirmAddLiquidityModal","onZapIn","minAmountOut","maxAmountIn","tokenBIsBNB","lpSymbol","mul","isToken0Sold","swapTokenField","callWithEstimateGas","onPresentZapInModal","ConfirmZapInModal","swapOutTokenField","errorText","buttonDisabled","ApprovalState","priceSeverity","showFieldAApproval","showFieldBApproval","shouldShowApprovalGroup","oneCurrencyIsWNATIVE","Boolean","WNATIVE","noAnyInputAmount","showAddLiquidity","showZapWarning","showReduceZapTokenButton","zapInEstimatedError","showRebalancingConvert","isDependentAmountGreaterThanMaxAmount","showZapIsAvailable","onPresentSettingsModal","SettingsModal","mode","SettingsMode","Page","AppBody","ColumnCenter","Message","mb","CurrencyInputPanel","disableCurrencySelect","showUSDPrice","onInputBlur","onInputBlurOnce","beforeButton","equalTo","checked","onChange","target","zapStyle","onUserInput","onPercentInput","multiply","Percent","onMax","showQuickInputButton","showMaxButton","maxAmount","MessageText","strong","margin","convertToMaxZappable","gasOverhead","PairState","LightCard","padding","borderRadius","PoolPriceBar","IconButton","PencilIcon","Dots","asset","isLoading","maxWidth","marginTop","MinimalPositionCard","showUnwrapped","ALLOWED_SLIPPAGE_LOW","BIPS_BASE","ALLOWED_SLIPPAGE_MEDIUM","ALLOWED_SLIPPAGE_HIGH","BLOCKED_SLIPPAGE_NON_EXPERT","warningSeverity","FormattedSlippage","loading","slippageDisplay","groupSeparator","Rounding","_param_loading","CircleLoader","ErrorText","severity","AddStableLiquidity","stableSwapConfig","stableSwapAddress","lpAddress","stableSwapContract","lpTokenContract","inputs","results","useStableSwapInfo","totalSupply","balances","amplifier","wrappedCurrencyA","wrappedCurrencyB","amount0","amount1","poolBalances","totalSupplyAmount","useStableLPDerivedMintInfo","useDerivedLPInfo","useContext","StableConfigContext","useContract","StableSwapABI","LPTokenABI","contract","methodName","useMultiContractsMultiMethods","parseCallStates","states","valid","_iteratorNormalCompletion","_didIteratorError","_iteratorError","balance0","balance1","feeNumerator","feeDenominator","_step","_iterator","entries","next","done","_step_value","i","syncing","resultValid","resultLoading","resultError","return","fee","sortsBefore","emptyResult","lpOutputWithoutFee","totalValue","BIG_INT_ZERO","StableSwap","amounts","baseAmount","tryParseAmount","quoteAmount","outputCurrency","Price","minLPOutput","expectedOutputWithoutFee","executionSlippage","ONE_HUNDRED_PERCENT","slippageSeverity","stableAPR","atLeastOneCurrencyProvided","allCurrenciesProvided","lpMintedSlippage","quotientA","quotientB","add_liquidity","notApprovalYet","QuestionHelper","infoLoading","AddLiquidityPage","dispatch","useAppDispatch","useCurrency","stableConfig","useStableConfig","tokenA","tokenB","resetMintState","chains","CHAIN_IDS","_currency_","token0Symbol","token1Symbol","NATIVE","reason","originalError","indexOf","substring","formatErrorMessage","join","memo","toastInfo","useToast","flexDirection","Wrapper","ArrowWrapper","clickable","css","failure","warning","success","StyledBalanceMaxMini","dropdown","TruncatedText","attrs","ellipsis","withConfig","SwapCallbackErrorInner","failure33","SwapCallbackErrorInnerAlertTriangle","SwapCallbackError","ErrorIcon","SwapShowAcceptChanges","warning33","space","defaultProps","__webpack_exports__","path","d"],"sourceRoot":""}