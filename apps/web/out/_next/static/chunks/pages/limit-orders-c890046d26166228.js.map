{"version":3,"file":"static/chunks/pages/limit-orders-c890046d26166228.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/date-fns/esm/addMonths/index.js","webpack://_N_E/../../node_modules/date-fns/esm/fromUnixTime/index.js","webpack://_N_E/../../node_modules/date-fns/esm/startOfHour/index.js","webpack://_N_E/../../node_modules/date-fns/esm/subMonths/index.js","webpack://_N_E/../../node_modules/date-fns/esm/sub/index.js","webpack://_N_E/../../node_modules/lodash/times.js","webpack://_N_E/?9998","webpack://_N_E/./src/components/DisclaimerModal/index.tsx","webpack://_N_E/./src/hooks/useSubgraphHealth.ts","webpack://_N_E/./src/components/SubgraphHealthIndicator/index.tsx","webpack://_N_E/./src/hooks/useRefreshEffect.ts","webpack://_N_E/./src/views/LimitOrders/utils/getPriceForOneToken.ts","webpack://_N_E/./src/hooks/limitOrders/useGasOverhead.ts","webpack://_N_E/./src/state/limitOrders/hooks.ts","webpack://_N_E/./src/views/LimitOrders/types.ts","webpack://_N_E/./src/views/LimitOrders/hooks/useGelatoLimitOrdersHistory.ts","webpack://_N_E/./src/hooks/limitOrders/useGelatoLimitOrdersHandlers.ts","webpack://_N_E/./src/hooks/limitOrders/useGelatoLimitOrders.ts","webpack://_N_E/./src/views/LimitOrders/components/ClaimWarning.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderDisclaimer.tsx","webpack://_N_E/./src/views/LimitOrders/components/ConfirmLimitOrderModal.tsx","webpack://_N_E/./src/views/LimitOrders/components/CurrencyInputHeader.tsx","webpack://_N_E/./src/views/LimitOrders/components/ExpiredDate.tsx","webpack://_N_E/./src/views/LimitOrders/utils/getRatePercentageMessage.ts","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderPrice.tsx","webpack://_N_E/./src/views/LimitOrders/hooks/useFormattedOrderData.ts","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/TextIcon.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/CurrencyFormat.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/CellFormat.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/DetailLimitOrderModal.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/OrderStatus.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/CompactRow.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/CompactLimitOrderTable.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/FullRow.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/SpaciousLimitOrderTable.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/NoOrdersMessage.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/LoadingTable.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/TableNavigation.tsx","webpack://_N_E/./src/views/LimitOrders/components/LimitOrderTable/index.tsx","webpack://_N_E/./src/views/LimitOrders/components/SwitchTokensButton.tsx","webpack://_N_E/./src/views/LimitOrders/styles.tsx","webpack://_N_E/./src/views/LimitOrders/utils/getRatePercentageDifference.ts","webpack://_N_E/./src/views/LimitOrders/index.tsx","webpack://_N_E/./src/pages/limit-orders.tsx","webpack://_N_E/../../packages/uikit/src/components/ButtonMenu/ButtonTabMenu.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/BunnyPlaceholder.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/Chart.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/ChartDisable.tsx","webpack://_N_E/../../packages/uikit/src/components/Table/Cell.tsx","webpack://_N_E/../../packages/uikit/src/components/Table/Table.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(date, months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/limit-orders\",\n      function () {\n        return require(\"private-next-pages/limit-orders.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/limit-orders\"])\n      });\n    }\n  ","import { useState, useCallback, ReactNode } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport styled from 'styled-components'\n\ninterface CheckType {\n  key: string\n  value?: boolean\n  content: string\n}\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n  checks: CheckType[]\n  header: ReactNode\n  modalHeader?: string\n  id: string\n  subtitle?: ReactNode\n  hideConfirm?: boolean\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradientBubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\n// TODO: Copy from src/views/Predictions/components/RiskDisclaimer.tsx\n// Will replace that with this modal.\n\nconst DisclaimerModal: React.FC<React.PropsWithChildren<RiskDisclaimerProps>> = ({\n  id,\n  onSuccess,\n  onDismiss,\n  checks,\n  header,\n  subtitle,\n  hideConfirm,\n  modalHeader,\n}) => {\n  const [checkState, setCheckState] = useState(checks || [])\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = useCallback(\n    (currentKey) => {\n      const newCheckState = checkState.map((check) => {\n        if (currentKey === check.key) {\n          return { ...check, value: !check.value }\n        }\n\n        return check\n      })\n\n      setCheckState(newCheckState)\n    },\n    [checkState],\n  )\n\n  const handleConfirm = useCallback(() => {\n    onSuccess()\n    onDismiss?.()\n  }, [onSuccess, onDismiss])\n\n  return (\n    <ModalContainer title={modalHeader || t('Welcome!')} $minWidth=\"320px\" id={id}>\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{modalHeader || t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth={['100%', '100%', '100%', '400px']}>\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {header}\n          </Heading>\n          {subtitle && (\n            <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n              {subtitle}\n            </Text>\n          )}\n          {checkState.map((check) => (\n            <label\n              key={check.key}\n              htmlFor={check.key}\n              style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}\n            >\n              <Flex alignItems=\"center\">\n                <div style={{ flex: 'none', alignSelf: 'flex-start', paddingTop: '8px' }}>\n                  <Checkbox\n                    id={check.key}\n                    scale=\"sm\"\n                    checked={check.value}\n                    onChange={() => handleSetAcknowledgeRisk(check.key)}\n                  />\n                </div>\n                <Text ml=\"8px\">{check.content}</Text>\n              </Flex>\n            </label>\n          ))}\n        </Box>\n        {!hideConfirm && (\n          <Button\n            id={`${id}-continue`}\n            width=\"100%\"\n            onClick={handleConfirm}\n            disabled={checkState.some((check) => !check.value)}\n          >\n            {t('Continue')}\n          </Button>\n        )}\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default DisclaimerModal\n","import { useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { bscRpcProvider } from 'utils/providers'\nimport { GRAPH_HEALTH } from 'config/constants/endpoints'\nimport { useSlowRefreshEffect } from './useRefreshEffect'\n\nexport enum SubgraphStatus {\n  OK,\n  WARNING,\n  NOT_OK,\n  UNKNOWN,\n}\n\nexport type SubgraphHealthState = {\n  status: SubgraphStatus\n  currentBlock: number\n  chainHeadBlock: number\n  latestBlock: number\n  blockDifference: number\n}\n\nconst NOT_OK_BLOCK_DIFFERENCE = 200 // ~15 minutes delay\nconst WARNING_BLOCK_DIFFERENCE = 50 // ~2.5 minute delay\n\nconst useSubgraphHealth = (subgraphName: string) => {\n  const [sgHealth, setSgHealth] = useState<SubgraphHealthState>({\n    status: SubgraphStatus.UNKNOWN,\n    currentBlock: 0,\n    chainHeadBlock: 0,\n    latestBlock: 0,\n    blockDifference: 0,\n  })\n\n  useSlowRefreshEffect(\n    (currentBlockNumber) => {\n      const getSubgraphHealth = async () => {\n        try {\n          const [{ indexingStatusForCurrentVersion }, currentBlock] = await Promise.all([\n            request(\n              GRAPH_HEALTH,\n              gql`\n            query getNftMarketSubgraphHealth {\n              indexingStatusForCurrentVersion(subgraphName: \"${subgraphName}\") {\n                health\n                chains {\n                  chainHeadBlock {\n                    number\n                  }\n                  latestBlock {\n                    number\n                  }\n                }\n              }\n            }\n          `,\n            ),\n            currentBlockNumber ? Promise.resolve(currentBlockNumber) : bscRpcProvider.getBlockNumber(),\n          ])\n\n          const isHealthy = indexingStatusForCurrentVersion.health === 'healthy'\n          const chainHeadBlock = parseInt(indexingStatusForCurrentVersion.chains[0].chainHeadBlock.number)\n          const latestBlock = parseInt(indexingStatusForCurrentVersion.chains[0].latestBlock.number)\n          const blockDifference = currentBlock - latestBlock\n          // Sometimes subgraph might report old block as chainHeadBlock, so its important to compare\n          // it with block retrieved from simpleRpcProvider.getBlockNumber()\n          const chainHeadBlockDifference = currentBlock - chainHeadBlock\n          if (\n            !isHealthy ||\n            blockDifference > NOT_OK_BLOCK_DIFFERENCE ||\n            chainHeadBlockDifference > NOT_OK_BLOCK_DIFFERENCE\n          ) {\n            setSgHealth({ status: SubgraphStatus.NOT_OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          } else if (\n            blockDifference > WARNING_BLOCK_DIFFERENCE ||\n            chainHeadBlockDifference > WARNING_BLOCK_DIFFERENCE\n          ) {\n            setSgHealth({ status: SubgraphStatus.WARNING, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          } else {\n            setSgHealth({ status: SubgraphStatus.OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          }\n        } catch (error) {\n          console.error(`Failed to perform health check for ${subgraphName} subgraph`, error)\n        }\n      }\n      getSubgraphHealth()\n    },\n    [subgraphName],\n  )\n\n  return sgHealth\n}\n\nexport default useSubgraphHealth\n","import { BSC_BLOCK_TIME } from 'config'\nimport { useTranslation, TranslateFunction } from '@pancakeswap/localization'\nimport styled from 'styled-components'\nimport { Card, Flex, Box, InfoIcon, Text, useTooltip } from '@pancakeswap/uikit'\nimport { useSubgraphHealthIndicatorManager } from 'state/user/hooks'\nimport useSubgraphHealth, { SubgraphStatus } from 'hooks/useSubgraphHealth'\n\nconst StyledCard = styled(Card)`\n  border-radius: 8px;\n  > div {\n    border-radius: 8px;\n  }\n  user-select: none;\n`\n\nconst IndicatorWrapper = styled(Flex)`\n  gap: 7px;\n`\n\nconst Dot = styled(Box)<{ $color: string }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: ${({ $color, theme }) => theme.colors[$color]};\n`\n\ninterface CustomDescriptions {\n  delayed: string\n  slow: string\n  healthy: string\n}\n\nconst indicator = (t: TranslateFunction, customDescriptions?: CustomDescriptions) =>\n  ({\n    delayed: {\n      label: t('Delayed'),\n      color: 'failure',\n      description:\n        customDescriptions?.delayed ??\n        t(\n          'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\n        ),\n    },\n    slow: {\n      label: t('Slight delay'),\n      color: 'warning',\n      description:\n        customDescriptions?.slow ??\n        t(\n          'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\n        ),\n    },\n    healthy: {\n      label: t('Fast'),\n      color: 'success',\n      description: customDescriptions?.healthy ?? t('No issues with the subgraph.'),\n    },\n  } as const)\n\ntype Indicator = keyof ReturnType<typeof indicator>\n\nconst getIndicator = (sgStatus: SubgraphStatus): Indicator => {\n  if (sgStatus === SubgraphStatus.NOT_OK) {\n    return 'delayed'\n  }\n\n  if (sgStatus === SubgraphStatus.WARNING) {\n    return 'slow'\n  }\n\n  return 'healthy'\n}\n\nexport interface BlockResponse {\n  blocks: {\n    number: string\n  }[]\n}\n\nconst SubgraphHealthIndicator: React.FC<\n  React.PropsWithChildren<{\n    subgraphName: string\n    inline?: boolean\n    customDescriptions?: CustomDescriptions\n    obeyGlobalSetting?: boolean\n  }>\n> = ({ subgraphName, inline, customDescriptions, obeyGlobalSetting = true }) => {\n  const { t } = useTranslation()\n  const { status, currentBlock, blockDifference, latestBlock } = useSubgraphHealth(subgraphName)\n  const [alwaysShowIndicator] = useSubgraphHealthIndicatorManager()\n  const forceIndicatorDisplay = status === SubgraphStatus.WARNING || status === SubgraphStatus.NOT_OK\n  const showIndicator = (obeyGlobalSetting && alwaysShowIndicator) || forceIndicatorDisplay\n\n  const indicatorProps = indicator(t, customDescriptions)\n\n  const secondRemainingBlockSync = blockDifference * BSC_BLOCK_TIME\n\n  const indicatorValue = getIndicator(status)\n\n  const current = indicatorProps[indicatorValue]\n\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <TooltipContent\n      currentBlock={currentBlock}\n      secondRemainingBlockSync={secondRemainingBlockSync}\n      blockNumberFromSubgraph={latestBlock}\n      {...current}\n    />,\n    {\n      placement: 'top',\n    },\n  )\n\n  if (!latestBlock || !currentBlock || !showIndicator) {\n    return null\n  }\n\n  if (inline) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <IndicatorWrapper alignItems=\"center\" ref={targetRef}>\n          <Dot $color={current.color} />\n          <Text>{current.label}</Text>\n          <InfoIcon />\n          {tooltipVisible && tooltip}\n        </IndicatorWrapper>\n      </Flex>\n    )\n  }\n\n  return (\n    <Box\n      position=\"fixed\"\n      bottom=\"calc(55px + env(safe-area-inset-bottom))\"\n      right=\"5%\"\n      ref={targetRef}\n      data-test=\"subgraph-health-indicator\"\n    >\n      {tooltipVisible && tooltip}\n      <StyledCard>\n        <IndicatorWrapper alignItems=\"center\" p=\"10px\">\n          <Dot $color={current.color} />\n          <Text>{current.label}</Text>\n          <InfoIcon />\n        </IndicatorWrapper>\n      </StyledCard>\n    </Box>\n  )\n}\n\nconst TooltipContent = ({\n  color,\n  label,\n  description,\n  currentBlock,\n  secondRemainingBlockSync,\n  blockNumberFromSubgraph,\n}) => {\n  const { t } = useTranslation()\n  return (\n    <Box>\n      <IndicatorWrapper pb=\"10px\">\n        <Dot $color={color} />\n        <Text>{label}</Text>\n      </IndicatorWrapper>\n      <Text pb=\"24px\">{description}</Text>\n      <Text>\n        <strong>{t('Chain Head Block')}:</strong> {currentBlock}\n      </Text>\n      <Text>\n        <strong>{t('Latest Subgraph Block')}:</strong> {blockNumberFromSubgraph}\n      </Text>\n      <Text>\n        <strong>{t('Delay')}:</strong> {currentBlock - blockNumberFromSubgraph} ({secondRemainingBlockSync}s)\n      </Text>\n    </Box>\n  )\n}\n\nexport default SubgraphHealthIndicator\n","import { FAST_INTERVAL, SLOW_INTERVAL } from 'config/constants'\nimport { DependencyList, EffectCallback, useEffect } from 'react'\nimport useSWR from 'swr'\nimport { useActiveChainId } from './useActiveChainId'\n\ntype BlockEffectCallback = (blockNumber: number) => ReturnType<EffectCallback>\n\nconst EMPTY_ARRAY = []\n\nexport function useFastRefreshEffect(effect: BlockEffectCallback, deps?: DependencyList) {\n  const { chainId } = useActiveChainId()\n  const { data = 0 } = useSWR(chainId && [FAST_INTERVAL, 'blockNumber', chainId])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect.bind(null, data), [data, ...(deps || EMPTY_ARRAY)])\n}\n\nexport function useSlowRefreshEffect(effect: BlockEffectCallback, deps?: DependencyList) {\n  const { chainId } = useActiveChainId()\n  const { data = 0 } = useSWR(chainId && [SLOW_INTERVAL, 'blockNumber', chainId])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect.bind(null, data), [data, ...(deps || EMPTY_ARRAY)])\n}\n","import { CurrencyAmount, Price, Currency } from '@pancakeswap/sdk'\n\n/**\n * Given certain amount if input and output tokens\n * calculate the price for 1 input token in terms of output tokens\n */\nconst getPriceForOneToken = (inputAmount: CurrencyAmount<Currency>, outputAmount: CurrencyAmount<Currency>) => {\n  if (!inputAmount || !outputAmount || inputAmount.equalTo(0) || outputAmount.equalTo(0)) {\n    return undefined\n  }\n  return new Price({\n    baseAmount: inputAmount,\n    quoteAmount: outputAmount,\n  })\n}\n\nexport default getPriceForOneToken\n","import { useMemo } from 'react'\nimport { formatUnits } from '@ethersproject/units'\nimport { CurrencyAmount, Price, Currency } from '@pancakeswap/sdk'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { useTradeExactIn } from 'hooks/Trades'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { Rate } from 'state/limitOrders/types'\nimport { GENERIC_GAS_LIMIT_ORDER_EXECUTION } from 'config/constants/exchange'\nimport getPriceForOneToken from 'views/LimitOrders/utils/getPriceForOneToken'\nimport { useGasPrice } from 'state/user/hooks'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { useActiveChainId } from '../useActiveChainId'\n\nexport default function useGasOverhead(\n  inputAmount: CurrencyAmount<Currency> | undefined,\n  outputAmount: CurrencyAmount<Currency> | undefined,\n  rateType: Rate,\n): {\n  realExecutionPrice: Price<Currency, Currency> | undefined | null\n  realExecutionPriceAsString: string | undefined\n  gasPrice: string | undefined\n} {\n  const { chainId } = useActiveChainId()\n  const native = useNativeCurrency()\n\n  const gasPrice = useGasPrice()\n  const requiredGas = formatUnits(gasPrice ? BigNumber.from(gasPrice).mul(GENERIC_GAS_LIMIT_ORDER_EXECUTION) : '0')\n  const requiredGasAsCurrencyAmount = tryParseAmount(requiredGas, native)\n\n  const inputIsBNB = inputAmount?.currency.symbol === 'BNB'\n\n  const gasCostInInputTokens = useTradeExactIn(requiredGasAsCurrencyAmount, inputIsBNB ? null : inputAmount?.currency)\n\n  const bufferedOutputAmount = useMemo(() => {\n    if (inputIsBNB) return requiredGasAsCurrencyAmount\n    if (!gasCostInInputTokens || !gasCostInInputTokens?.outputAmount) return undefined\n    // Add 2000 BPS on top (20%) to account for gas price fluctuations\n\n    return gasCostInInputTokens.outputAmount.add(gasCostInInputTokens.outputAmount.multiply(2000).divide(10000))\n  }, [gasCostInInputTokens, requiredGasAsCurrencyAmount, inputIsBNB])\n\n  const realInputAmount = useMemo(\n    () => bufferedOutputAmount && inputAmount && inputAmount.subtract(bufferedOutputAmount),\n    [bufferedOutputAmount, inputAmount],\n  )\n\n  const realExecutionPrice = useMemo(() => {\n    if (!inputAmount || (!gasCostInInputTokens && !inputIsBNB) || !realInputAmount || !outputAmount) return null\n\n    if (inputIsBNB && requiredGasAsCurrencyAmount.greaterThan(inputAmount.asFraction)) return undefined\n    if (gasCostInInputTokens && gasCostInInputTokens.outputAmount.greaterThan(inputAmount.asFraction)) return undefined\n    return getPriceForOneToken(realInputAmount, outputAmount)\n  }, [realInputAmount, outputAmount, inputAmount, gasCostInInputTokens, inputIsBNB, requiredGasAsCurrencyAmount])\n\n  const realExecutionPriceAsString = useMemo(() => {\n    if (!realExecutionPrice) return 'never executes'\n    return rateType === Rate.DIV ? realExecutionPrice.invert().toSignificant(6) : realExecutionPrice.toSignificant(6)\n  }, [rateType, realExecutionPrice])\n\n  return chainId\n    ? { realExecutionPrice, gasPrice, realExecutionPriceAsString }\n    : {\n        realExecutionPrice: undefined,\n        realExecutionPriceAsString: undefined,\n        gasPrice: undefined,\n      }\n}\n","import JSBI from 'jsbi'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ParsedUrlQuery } from 'querystring'\nimport { Currency, CurrencyAmount, Trade, Token, Price, Native, TradeType } from '@pancakeswap/sdk'\nimport { useState, useEffect, useCallback, useMemo } from 'react'\nimport { DEFAULT_INPUT_CURRENCY, DEFAULT_OUTPUT_CURRENCY, BIG_INT_TEN } from 'config/constants/exchange'\nimport { useRouter } from 'next/router'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport getPriceForOneToken from 'views/LimitOrders/utils/getPriceForOneToken'\nimport { isAddress } from 'utils'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { replaceLimitOrdersState, selectCurrency, setRateType, switchCurrencies, typeInput } from './actions'\nimport { Field, Rate, OrderState } from './types'\nimport { AppState, useAppDispatch } from '..'\n\n// Get desired input amount in output basis mode\nconst getDesiredInput = (\n  outputValue: string,\n  exchangeRate: string,\n  inputCurrency: Currency,\n  outputCurrency: Currency,\n  isInverted: boolean,\n) => {\n  if (!outputValue || !inputCurrency || !outputCurrency) {\n    return undefined\n  }\n  const parsedOutAmount = tryParseAmount(outputValue, isInverted ? inputCurrency : outputCurrency)\n  const parsedExchangeRate = tryParseAmount(exchangeRate, isInverted ? inputCurrency : outputCurrency)\n  if (!parsedOutAmount || !parsedExchangeRate) {\n    return undefined\n  }\n\n  if (isInverted) {\n    const invertedResultAsFraction = parsedOutAmount.multiply(parsedExchangeRate.asFraction)\n\n    const invertedResultAsAmount = CurrencyAmount.fromRawAmount(inputCurrency, invertedResultAsFraction.toFixed(0))\n\n    return invertedResultAsAmount\n  }\n  const resultAsFraction = parsedOutAmount\n    .divide(parsedExchangeRate.asFraction)\n    .multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals)))\n\n  return CurrencyAmount.fromRawAmount(inputCurrency, resultAsFraction.quotient.toString())\n}\n\n// Get desired output amount in input basis mode\nconst getDesiredOutput = (\n  inputValue: string,\n  exchangeRate: string,\n  inputCurrency: Currency,\n  outputCurrency: Currency,\n  isInverted: boolean,\n): CurrencyAmount<Native | Token> | undefined => {\n  if (!inputValue || !inputCurrency || !outputCurrency) {\n    return undefined\n  }\n  const parsedInputAmount = tryParseAmount(inputValue, isInverted ? outputCurrency : inputCurrency)\n  const parsedExchangeRate = tryParseAmount(exchangeRate, isInverted ? inputCurrency : outputCurrency)\n\n  if (!parsedExchangeRate || !parsedInputAmount) {\n    return undefined\n  }\n\n  if (isInverted) {\n    const invertedResultAsFraction = parsedInputAmount\n      .multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals)))\n      .divide(parsedExchangeRate.asFraction)\n    return CurrencyAmount.fromRawAmount(outputCurrency, invertedResultAsFraction.quotient)\n  }\n\n  const resultAsFraction = parsedInputAmount\n    .divide(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals)))\n    .multiply(parsedExchangeRate.asFraction)\n\n  return CurrencyAmount.fromRawAmount(outputCurrency, resultAsFraction.quotient.toString())\n}\n\n// Just returns Redux state for limitOrders\nexport const useOrderState = (): AppState['limitOrders'] => {\n  return useSelector<AppState, AppState['limitOrders']>((state) => state.limitOrders)\n}\n\n// Returns handlers to change user-defined parts of limitOrders state\nexport const useOrderActionHandlers = (): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRateType: (rateType: Rate) => void\n} => {\n  const dispatch = useDispatch()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency.isToken ? currency.address : currency.isNative ? 'BNB' : '',\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  const onChangeRateType = useCallback(\n    (rateType: Rate) => {\n      dispatch(setRateType({ rateType }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRateType,\n  }\n}\n\nexport interface DerivedOrderInfo {\n  currencies: { input: Currency | Token | undefined; output: Currency | Token | undefined }\n  currencyBalances: {\n    input: CurrencyAmount<Currency> | undefined\n    output: CurrencyAmount<Currency> | undefined\n  }\n  inputError?: string\n  trade: Trade<Currency, Currency, TradeType> | undefined\n  parsedAmounts: {\n    input: CurrencyAmount<Currency> | undefined\n    output: CurrencyAmount<Currency> | undefined\n  }\n  formattedAmounts: {\n    input: string\n    output: string\n    price: string\n  }\n  rawAmounts: {\n    input: string | undefined\n    output: string | undefined\n  }\n  price: Price<Currency, Currency> | undefined\n  wrappedCurrencies: {\n    input: Token\n    output: Token\n  }\n  singleTokenPrice: {\n    [key: string]: number\n  }\n  currencyIds: {\n    input: string\n    output: string\n  }\n}\n\nconst getErrorMessage = (\n  account: string,\n  wrappedCurrencies: {\n    input: Token\n    output: Token\n  },\n  currencies: { input: Currency | Token; output: Currency | Token },\n  currencyBalances: { input: CurrencyAmount<Currency>; output: CurrencyAmount<Currency> },\n  parsedAmounts: { input: CurrencyAmount<Currency>; output: CurrencyAmount<Currency> },\n  trade: Trade<Currency, Currency, TradeType>,\n  price: Price<Currency, Currency>,\n  rateType: Rate,\n  t: any,\n) => {\n  if (!account) {\n    return t('Connect Wallet')\n  }\n  if (\n    wrappedCurrencies.input &&\n    wrappedCurrencies.output &&\n    wrappedCurrencies.input.address.toLowerCase() === wrappedCurrencies.output.address.toLowerCase()\n  ) {\n    return t('Order not allowed')\n  }\n  const hasBothTokensSelected = currencies.input && currencies.output\n  if (!hasBothTokensSelected) {\n    return t('Select a token')\n  }\n  const hasAtLeastOneParsedAmount = parsedAmounts.input || parsedAmounts.output\n\n  const tradeIsNotAvailable = !trade || !trade?.route\n  if (hasAtLeastOneParsedAmount && tradeIsNotAvailable) {\n    return t('Insufficient liquidity for this trade.')\n  }\n  const someParsedAmountIsMissing = !parsedAmounts.input || !parsedAmounts.output\n  if (someParsedAmountIsMissing) {\n    return t('Enter an amount')\n  }\n  if (currencyBalances.input && currencyBalances.input.lessThan(parsedAmounts.input)) {\n    return t(`Insufficient %symbol% balance`, { symbol: currencyBalances.input.currency.symbol })\n  }\n\n  if (price) {\n    if (\n      rateType === Rate.MUL &&\n      (price.lessThan(trade.executionPrice.asFraction) || price.equalTo(trade.executionPrice.asFraction))\n    ) {\n      return t('Only possible to place sell orders above market rate')\n    }\n    if (\n      rateType === Rate.DIV &&\n      (price.invert().greaterThan(trade.executionPrice.invert().asFraction) ||\n        price.invert().equalTo(trade.executionPrice.invert().asFraction))\n    ) {\n      return t('Only possible to place buy orders below market rate')\n    }\n  }\n\n  return undefined\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport const useDerivedOrderInfo = (): DerivedOrderInfo => {\n  const { account, chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const {\n    independentField,\n    basisField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    rateType,\n    inputValue,\n    outputValue,\n  } = useOrderState()\n\n  // Get Currency objects based on currencyId strings\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const currencies = useMemo(\n    () => ({\n      input: inputCurrency ?? undefined,\n      output: outputCurrency ?? undefined,\n    }),\n    [inputCurrency, outputCurrency],\n  )\n\n  const wrappedCurrencies = useMemo(\n    () => ({\n      input: wrappedCurrency(currencies.input, chainId),\n      output: wrappedCurrency(currencies.output, chainId),\n    }),\n    [currencies.input, currencies.output, chainId],\n  )\n\n  // Get user balance for selected Currencies\n  const relevantTokenBalances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency]),\n  )\n  const currencyBalances = {\n    input: relevantTokenBalances[0],\n    output: relevantTokenBalances[1],\n  }\n\n  // Get CurrencyAmount for the inputCurrency amount specified by user\n  const inputAmount = useMemo(() => {\n    return tryParseAmount(inputValue, inputCurrency ?? undefined)\n  }, [inputValue, inputCurrency])\n\n  // Get CurrencyAmount for the outputCurrency amount specified by user\n  const outputAmount = useMemo(() => {\n    return tryParseAmount(outputValue, outputCurrency ?? undefined)\n  }, [outputValue, outputCurrency])\n\n  // Whether user modified the INPUT field most recently (also default initial state)\n  const isExactIn = independentField === Field.INPUT\n  // Whether to base calculations on output field\n  const isOutputBasis = basisField === Field.OUTPUT\n  // Whether user modified the PRICE field most recently\n  const isDesiredRateUpdate = independentField === Field.PRICE\n\n  // Get the amount of outputCurrency you'd receive at the desired price\n  const desiredOutputAsCurrencyAmount = isDesiredRateUpdate\n    ? getDesiredOutput(inputValue, typedValue, inputCurrency, outputCurrency, rateType === Rate.DIV)\n    : undefined\n\n  const desiredInputAsCurrencyAmount = isDesiredRateUpdate\n    ? getDesiredInput(outputValue, typedValue, inputCurrency, outputCurrency, rateType === Rate.DIV)\n    : undefined\n\n  // Convert output to string representation to parse later\n  const desiredOutputAsString =\n    isDesiredRateUpdate && desiredOutputAsCurrencyAmount ? desiredOutputAsCurrencyAmount?.toSignificant(6) : typedValue\n\n  // If independentField === Field.PRICE -> this won't be used\n  const parsedTypedAmount = !isDesiredRateUpdate\n    ? tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n    : undefined\n\n  // If not price - cast input or output typing to CurrencyAmount\n  // if price - whatever amount of tokens received on the desired price\n  const tradeAmount = isDesiredRateUpdate\n    ? isOutputBasis\n      ? outputAmount\n      : tryParseAmount(desiredOutputAsString, outputCurrency)\n    : tryParseAmount(typedValue, isExactIn ? inputCurrency : outputCurrency)\n\n  // Get trade object\n  // gonna be null if not isExactIn or if there is no outputCurrency selected\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? tradeAmount : undefined, outputCurrency)\n  // Works similarly to swap when you modify outputCurrency\n  // But also is used when desired rate is modified\n  // in other words it looks for a trade of inputCurrency for whatever the amount of tokens would be at desired rate\n  const bestTradeExactOut = useTradeExactOut(inputCurrency, !isExactIn || isOutputBasis ? tradeAmount : undefined)\n  const trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  // Get swap price for single token disregarding slippage and price impact\n  // needed for chart's latest value\n  const oneInputToken = tryParseAmount('1', currencies.input)\n  const singleTokenTrade = useTradeExactIn(oneInputToken, currencies.output)\n  const singleTokenPrice = parseFloat(singleTokenTrade?.executionPrice?.toSignificant(6))\n  const inverseSingleTokenPrice = 1 / singleTokenPrice\n\n  // Get \"final\" amounts\n  const parsedAmounts = useMemo(() => {\n    // Use trade amount as default\n    let input = trade?.inputAmount\n    if (!isOutputBasis) {\n      // If we're not in output basis mode then we're in input basis mode\n      // hence - no matter what keep input as specified by user\n      input = inputAmount\n    } else if (independentField === Field.INPUT) {\n      // If user touching input field -> whatever they type currently\n      input = parsedTypedAmount\n    } else if (isDesiredRateUpdate) {\n      // If user modifies the price AND is wishing for specific output amount -> hypothetical input amount at better price\n      input = desiredInputAsCurrencyAmount\n    }\n    // Use trade amount as default\n    // If we're in output basis mode - no matter what keep output as specified by user\n    let output: CurrencyAmount<Currency>\n    if (isOutputBasis) {\n      output = outputAmount\n    } else if (independentField === Field.OUTPUT) {\n      // If user touching input field -> whatever they type currently\n      output = parsedTypedAmount\n    } else if (isDesiredRateUpdate) {\n      // If user modifies the price AND is wishing for specific input amount -> hypothetical input amount at better price\n      output = desiredOutputAsCurrencyAmount\n    } else {\n      output = trade?.outputAmount\n    }\n    return {\n      input,\n      output,\n    }\n  }, [\n    independentField,\n    parsedTypedAmount,\n    inputAmount,\n    outputAmount,\n    trade,\n    isDesiredRateUpdate,\n    isOutputBasis,\n    desiredInputAsCurrencyAmount,\n    desiredOutputAsCurrencyAmount,\n  ])\n\n  // Calculate the price for specified swap\n  const price = useMemo(\n    () => getPriceForOneToken(parsedAmounts.input, parsedAmounts.output),\n    [parsedAmounts.input, parsedAmounts.output],\n  )\n\n  // Formatted amounts to use in the UI\n  const formattedAmounts = {\n    input: !isOutputBasis && inputValue && inputValue !== '' ? inputValue : parsedAmounts.input?.toSignificant(6) ?? '',\n    output:\n      isOutputBasis && outputValue && outputValue !== '' ? outputValue : parsedAmounts.output?.toSignificant(6) ?? '',\n    price:\n      independentField === Field.PRICE\n        ? typedValue\n        : rateType === Rate.MUL\n        ? price?.toSignificant(6) ?? ''\n        : price?.invert().toSignificant(6) ?? '',\n  }\n\n  // Get raw amounts that will be used in smart contract call\n  const rawAmounts = useMemo(\n    () => ({\n      input: inputCurrency\n        ? parsedAmounts.input?.multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals))).toFixed(0)\n        : undefined,\n\n      output: outputCurrency\n        ? parsedAmounts.output\n            ?.multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(outputCurrency.decimals)))\n            .toFixed(0)\n        : undefined,\n    }),\n    [inputCurrency, outputCurrency, parsedAmounts],\n  )\n\n  return {\n    currencies,\n    currencyBalances,\n    inputError: getErrorMessage(\n      account,\n      wrappedCurrencies,\n      currencies,\n      currencyBalances,\n      parsedAmounts,\n      trade,\n      price,\n      rateType,\n      t,\n    ),\n    formattedAmounts,\n    trade: trade ?? undefined,\n    parsedAmounts,\n    price,\n    rawAmounts,\n    wrappedCurrencies,\n    singleTokenPrice: {\n      [wrappedCurrencies.input?.address]: singleTokenPrice,\n      [wrappedCurrencies.output?.address]: inverseSingleTokenPrice,\n    },\n    currencyIds: {\n      input: inputCurrencyId,\n      output: outputCurrencyId,\n    },\n  }\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !Number.isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\n    if (valid === false) return 'BNB'\n  }\n  return ''\n}\n\n// TODO: combine with swap's version but use generic type. Same for helpers above\n// Note: swap has recipient and other things. Merging these 2 would probably be much easier if we get rid of recipient\n// Also the whole thing doesn't make sense, in swap inputValue is not initialized but typedValue is. WTF\nconst queryParametersToSwapState = (parsedQs: ParsedUrlQuery): OrderState => {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency) || DEFAULT_INPUT_CURRENCY\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency) || DEFAULT_OUTPUT_CURRENCY\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    inputValue: '',\n    outputValue: '',\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    basisField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    rateType: Rate.MUL,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport const useDefaultsFromURLSearch = ():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined => {\n  const { chainId } = useActiveChainId()\n  const dispatch = useAppDispatch()\n  const { query } = useRouter()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(query)\n\n    dispatch(replaceLimitOrdersState(parsed))\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n  }, [dispatch, chainId, query])\n\n  return result\n}\n","import { Order } from '@gelatonetwork/limit-orders-lib'\n\nexport enum ORDER_CATEGORY {\n  Open = 0,\n  Expired = 1,\n  History = 1,\n}\n\nexport enum LimitOrderStatus {\n  OPEN = 'open',\n  CANCELLED = 'cancelled',\n  EXECUTED = 'executed',\n}\n\nexport interface LimitOrderTableProps {\n  orders: Order[]\n  orderCategory: ORDER_CATEGORY\n  isCompact: boolean\n}\n","import { Order, GelatoLimitOrders } from '@gelatonetwork/limit-orders-lib'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useSWR from 'swr'\nimport { SLOW_INTERVAL } from 'config/constants'\nimport { useMemo } from 'react'\n\nimport { getLSOrders, saveOrder, saveOrders, hashOrderSet, hashOrder } from 'utils/localStorageOrders'\nimport useGelatoLimitOrdersLib from 'hooks/limitOrders/useGelatoLimitOrdersLib'\n\nimport orderBy from 'lodash/orderBy'\nimport { ORDER_CATEGORY, LimitOrderStatus } from '../types'\n\nexport const OPEN_ORDERS_SWR_KEY = ['gelato', 'openOrders']\nexport const EXECUTED_CANCELLED_ORDERS_SWR_KEY = ['gelato', 'cancelledExecutedOrders']\nexport const EXECUTED_EXPIRED_ORDERS_SWR_KEY = ['gelato', 'expiredExecutedOrders']\n\nfunction newOrdersFirst(a: Order, b: Order) {\n  return Number(b.updatedAt) - Number(a.updatedAt)\n}\n\nconst isOrderUpdated = (oldOrder: Order, newOrder: Order): boolean => {\n  return newOrder ? Number(oldOrder.updatedAt) < Number(newOrder.updatedAt) : false\n}\n\nasync function syncOrderToLocalStorage({\n  gelatoLimitOrders,\n  chainId,\n  account,\n  orders,\n  syncStatuses,\n}: {\n  chainId: number\n  account: string\n  orders: Order[]\n  syncStatuses?: LimitOrderStatus[]\n  gelatoLimitOrders?: GelatoLimitOrders\n}) {\n  const allOrdersLS = getLSOrders(chainId, account)\n\n  const lsOrdersHashSet = hashOrderSet(allOrdersLS)\n  const newOrders = orders.filter((order: Order) => !lsOrdersHashSet.has(hashOrder(order)))\n  saveOrders(chainId, account, newOrders)\n\n  const typeOrdersLS = syncStatuses\n    ? allOrdersLS.filter((order) => syncStatuses.some((type) => type === order.status))\n    : []\n\n  const results = await Promise.all(\n    typeOrdersLS.map((confOrder) => {\n      const orderFetched = orders.find((order) => confOrder.id.toLowerCase() === order.id.toLowerCase())\n      return !orderFetched\n        ? gelatoLimitOrders\n          ? Promise.allSettled([Promise.resolve(confOrder), gelatoLimitOrders.getOrder(confOrder.id)])\n          : Promise.resolve([confOrder, null])\n        : Promise.resolve([confOrder, orderFetched])\n    }),\n  )\n\n  results.forEach((result) => {\n    const [confOrderPromiseResult, graphOrderPromiseResult] = result as PromiseSettledResult<Order>[]\n    if (confOrderPromiseResult.status === 'fulfilled' && graphOrderPromiseResult.status === 'fulfilled') {\n      if (isOrderUpdated(confOrderPromiseResult.value, graphOrderPromiseResult.value)) {\n        saveOrder(chainId, account, graphOrderPromiseResult.value)\n      }\n    }\n    if (graphOrderPromiseResult.status === 'rejected') {\n      console.error('Error fetching order from subgraph', graphOrderPromiseResult.reason)\n    }\n  })\n}\n\nconst useOpenOrders = (turnOn: boolean): Order[] => {\n  const { account, chainId } = useActiveWeb3React()\n\n  const gelatoLimitOrders = useGelatoLimitOrdersLib()\n\n  const startFetch = turnOn && gelatoLimitOrders && account && chainId\n\n  const { data } = useSWR(\n    startFetch ? OPEN_ORDERS_SWR_KEY : null,\n    async () => {\n      try {\n        const orders = await gelatoLimitOrders.getOpenOrders(account.toLowerCase(), false)\n\n        await syncOrderToLocalStorage({\n          orders,\n          chainId,\n          account,\n          syncStatuses: [LimitOrderStatus.OPEN],\n          gelatoLimitOrders,\n        })\n      } catch (e) {\n        console.error('Error fetching open orders from subgraph', e)\n      }\n\n      const openOrdersLS = getLSOrders(chainId, account).filter(\n        (order) => order.status === LimitOrderStatus.OPEN && !order.isExpired,\n      )\n\n      const pendingOrdersLS = getLSOrders(chainId, account, true)\n\n      return [\n        ...openOrdersLS.filter((order: Order) => {\n          const orderCancelled = pendingOrdersLS\n            .filter((pendingOrder) => pendingOrder.status === LimitOrderStatus.CANCELLED)\n            .find((pendingOrder) => pendingOrder.id.toLowerCase() === order.id.toLowerCase())\n          return !orderCancelled\n        }),\n        ...pendingOrdersLS.filter((order) => order.status === LimitOrderStatus.OPEN),\n      ].sort(newOrdersFirst)\n    },\n    {\n      refreshInterval: SLOW_INTERVAL,\n    },\n  )\n\n  return startFetch ? data : []\n}\n\nconst useHistoryOrders = (turnOn: boolean): Order[] => {\n  const { account, chainId } = useActiveWeb3React()\n  const gelatoLimitOrders = useGelatoLimitOrdersLib()\n\n  const startFetch = turnOn && gelatoLimitOrders && account && chainId\n\n  const { data } = useSWR(\n    startFetch ? EXECUTED_CANCELLED_ORDERS_SWR_KEY : null,\n    async () => {\n      try {\n        const acc = account.toLowerCase()\n\n        const [canOrders, exeOrders] = await Promise.all([\n          gelatoLimitOrders.getCancelledOrders(acc, false),\n          gelatoLimitOrders.getExecutedOrders(acc, false),\n        ])\n\n        await syncOrderToLocalStorage({\n          orders: [...canOrders, ...exeOrders],\n          chainId,\n          account,\n        })\n      } catch (e) {\n        console.error('Error fetching history orders from subgraph', e)\n      }\n\n      const executedOrdersLS = getLSOrders(chainId, account).filter(\n        (order) => order.status === LimitOrderStatus.EXECUTED,\n      )\n\n      const cancelledOrdersLS = getLSOrders(chainId, account).filter(\n        (order) => order.status === LimitOrderStatus.CANCELLED,\n      )\n\n      const pendingCancelledOrdersLS = getLSOrders(chainId, account, true).filter(\n        (order) => order.status === LimitOrderStatus.CANCELLED,\n      )\n\n      return [...pendingCancelledOrdersLS, ...cancelledOrdersLS, ...executedOrdersLS].sort(newOrdersFirst)\n    },\n    {\n      refreshInterval: SLOW_INTERVAL,\n    },\n  )\n\n  return startFetch ? data : []\n}\n\nconst useExpiredOrders = (turnOn: boolean): Order[] => {\n  const { account, chainId } = useActiveWeb3React()\n  const gelatoLimitOrders = useGelatoLimitOrdersLib()\n\n  const startFetch = turnOn && gelatoLimitOrders && account && chainId\n\n  const { data } = useSWR(\n    startFetch ? EXECUTED_EXPIRED_ORDERS_SWR_KEY : null,\n    async () => {\n      try {\n        const orders = await gelatoLimitOrders.getOpenOrders(account.toLowerCase(), false)\n        await syncOrderToLocalStorage({\n          orders,\n          chainId,\n          account,\n        })\n      } catch (e) {\n        console.error('Error fetching expired orders from subgraph', e)\n      }\n\n      const expiredOrdersLS = getLSOrders(chainId, account).filter(\n        (order) => order.isExpired && order.status === LimitOrderStatus.OPEN,\n      )\n\n      return expiredOrdersLS.sort(newOrdersFirst)\n    },\n    {\n      refreshInterval: SLOW_INTERVAL,\n    },\n  )\n\n  return startFetch ? data : []\n}\n\nexport default function useGelatoLimitOrdersHistory(orderCategory: ORDER_CATEGORY) {\n  const historyOrders = useHistoryOrders(orderCategory === ORDER_CATEGORY.History)\n  const openOrders = useOpenOrders(orderCategory === ORDER_CATEGORY.Open)\n  const expiredOrders = useExpiredOrders(orderCategory === ORDER_CATEGORY.Expired)\n\n  const orders = useMemo(() => {\n    switch (orderCategory as ORDER_CATEGORY) {\n      case ORDER_CATEGORY.Open:\n        return openOrders\n      case ORDER_CATEGORY.History:\n        return historyOrders\n      case ORDER_CATEGORY.Expired:\n        return expiredOrders\n      default:\n        return []\n    }\n  }, [orderCategory, openOrders, historyOrders, expiredOrders])\n\n  return useMemo(\n    () => (Array.isArray(orders) ? orderBy(orders, (order) => parseInt(order.createdAt), 'desc') : orders),\n    [orders],\n  )\n}\n","import { useCallback } from 'react'\nimport { Order } from '@gelatonetwork/limit-orders-lib'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Overrides } from '@ethersproject/contracts'\nimport { TransactionResponse } from '@ethersproject/abstract-provider'\n\nimport { useOrderActionHandlers } from 'state/limitOrders/hooks'\nimport { Field, Rate } from 'state/limitOrders/types'\nimport { Currency, Price } from '@pancakeswap/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { useSWRConfig } from 'swr'\nimport {\n  OPEN_ORDERS_SWR_KEY,\n  EXECUTED_CANCELLED_ORDERS_SWR_KEY,\n} from '../../views/LimitOrders/hooks/useGelatoLimitOrdersHistory'\nimport useGelatoLimitOrdersLib from './useGelatoLimitOrdersLib'\n\nexport interface GelatoLimitOrdersHandlers {\n  handleLimitOrderSubmission: (orderToSubmit: {\n    inputToken: string\n    outputToken: string\n    inputAmount: string\n    outputAmount: string\n    owner: string\n    overrides?: Overrides\n  }) => Promise<TransactionResponse>\n  handleLimitOrderCancellation: (\n    order: Order,\n    orderDetails?: {\n      inputTokenSymbol: string\n      outputTokenSymbol: string\n      inputAmount: string\n      outputAmount: string\n    },\n    overrides?: Overrides,\n  ) => Promise<TransactionResponse>\n  handleInput: (field: Field, value: string) => void\n  handleCurrencySelection: (field: Field.INPUT | Field.OUTPUT, currency: Currency) => void\n  handleSwitchTokens: () => void\n  handleRateType: (rateType: Rate, price?: Price<Currency, Currency>) => void\n}\n\nconst useGelatoLimitOrdersHandlers = (): GelatoLimitOrdersHandlers => {\n  const { chainId, account } = useActiveWeb3React()\n\n  const { mutate } = useSWRConfig()\n\n  const gelatoLimitOrders = useGelatoLimitOrdersLib()\n\n  const addTransaction = useTransactionAdder()\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRateType } = useOrderActionHandlers()\n\n  const handleLimitOrderSubmission = useCallback(\n    async (\n      orderToSubmit: {\n        inputToken: string\n        outputToken: string\n        inputAmount: string\n        outputAmount: string\n        owner: string\n      },\n      overrides?: Overrides,\n    ) => {\n      if (!gelatoLimitOrders) {\n        throw new Error('Could not reach Gelato Limit Orders library')\n      }\n\n      if (!chainId) {\n        throw new Error('No chainId')\n      }\n\n      if (!gelatoLimitOrders?.signer) {\n        throw new Error('No signer')\n      }\n\n      const { witness, payload, order } = await gelatoLimitOrders.encodeLimitOrderSubmissionWithSecret(\n        orderToSubmit.inputToken,\n        orderToSubmit.outputToken,\n        orderToSubmit.inputAmount,\n        orderToSubmit.outputAmount,\n        orderToSubmit.owner,\n      )\n\n      const tx = await gelatoLimitOrders.signer.sendTransaction({\n        ...(overrides ?? {}),\n        to: payload.to,\n        data: payload.data,\n        value: BigNumber.from(payload.value),\n      })\n\n      const now = Math.round(Date.now() / 1000)\n\n      addTransaction(tx, {\n        summary: 'Order submission',\n        translatableSummary: { text: 'Order submission' },\n        type: 'limit-order-submission',\n        order: {\n          ...order,\n          createdTxHash: tx?.hash.toLowerCase(),\n          witness,\n          status: 'open',\n          updatedAt: now.toString(),\n        } as Order,\n      })\n\n      mutate(OPEN_ORDERS_SWR_KEY)\n      mutate(EXECUTED_CANCELLED_ORDERS_SWR_KEY)\n\n      return tx\n    },\n    [addTransaction, chainId, gelatoLimitOrders, mutate],\n  )\n\n  const handleLimitOrderCancellation = useCallback(\n    async (\n      orderToCancel: Order,\n      orderDetails?: {\n        inputTokenSymbol: string\n        outputTokenSymbol: string\n        inputAmount: string\n        outputAmount: string\n      },\n      overrides?: Overrides,\n    ) => {\n      if (!gelatoLimitOrders) {\n        throw new Error('Could not reach Gelato Limit Orders library')\n      }\n\n      if (!chainId) {\n        throw new Error('No chainId')\n      }\n\n      if (!account) {\n        throw new Error('No account')\n      }\n\n      const checkIfOrderExists = Boolean(\n        orderToCancel.module &&\n          orderToCancel.inputToken &&\n          orderToCancel.owner &&\n          orderToCancel.witness &&\n          orderToCancel.data,\n      )\n\n      const tx = await gelatoLimitOrders.cancelLimitOrder(\n        orderToCancel,\n        checkIfOrderExists,\n        overrides ?? {\n          gasLimit: 2_000_000,\n        },\n      )\n\n      const now = Math.round(Date.now() / 1000)\n\n      const summary = orderDetails\n        ? `Order cancellation: ${orderDetails.inputAmount} ${orderDetails.inputTokenSymbol} for ${orderDetails.outputAmount} ${orderDetails.outputTokenSymbol}`\n        : 'Order cancellation'\n\n      const translatableSummary = orderDetails\n        ? {\n            text: 'Order cancellation: %inputAmount% %inputTokenSymbol% for %outputAmount% %outputTokenSymbol%',\n            data: {\n              inputAmount: orderDetails.inputAmount,\n              inputTokenSymbol: orderDetails.inputTokenSymbol,\n              outputAmount: orderDetails.outputAmount,\n              outputTokenSymbol: orderDetails.outputTokenSymbol,\n            },\n          }\n        : { text: 'Order cancellation' }\n\n      addTransaction(tx, {\n        summary,\n        translatableSummary,\n        type: 'limit-order-cancellation',\n        order: {\n          ...orderToCancel,\n          updatedAt: now.toString(),\n          status: 'cancelled',\n          cancelledTxHash: tx?.hash.toLowerCase(),\n        },\n      })\n\n      mutate(OPEN_ORDERS_SWR_KEY)\n      mutate(EXECUTED_CANCELLED_ORDERS_SWR_KEY)\n\n      return tx\n    },\n    [gelatoLimitOrders, chainId, account, addTransaction, mutate],\n  )\n\n  const handleInput = useCallback(\n    (field: Field, value: string) => {\n      onUserInput(field, value)\n    },\n    [onUserInput],\n  )\n\n  const handleCurrencySelection = useCallback(\n    (field: Field.INPUT | Field.OUTPUT, currency: Currency) => {\n      onCurrencySelection(field, currency)\n    },\n    [onCurrencySelection],\n  )\n\n  const handleSwitchTokens = useCallback(() => {\n    onSwitchTokens()\n  }, [onSwitchTokens])\n\n  const handleRateType = useCallback(\n    async (rateType: Rate, price?: Price<Currency, Currency>) => {\n      if (rateType === Rate.MUL) {\n        if (price) onUserInput(Field.PRICE, price.invert().toSignificant(6))\n        onChangeRateType(Rate.DIV)\n      } else {\n        if (price) onUserInput(Field.PRICE, price.toSignificant(6))\n        onChangeRateType(Rate.MUL)\n      }\n    },\n    [onChangeRateType, onUserInput],\n  )\n\n  return {\n    handleLimitOrderSubmission,\n    handleLimitOrderCancellation,\n    handleInput,\n    handleCurrencySelection,\n    handleSwitchTokens,\n    handleRateType,\n  }\n}\n\nexport default useGelatoLimitOrdersHandlers\n","import { DerivedOrderInfo, useDerivedOrderInfo, useOrderState } from 'state/limitOrders/hooks'\nimport { OrderState } from 'state/limitOrders/types'\nimport useGelatoLimitOrdersHandlers, { GelatoLimitOrdersHandlers } from './useGelatoLimitOrdersHandlers'\n\nconst useGelatoLimitOrders = (): {\n  handlers: GelatoLimitOrdersHandlers\n  derivedOrderInfo: DerivedOrderInfo\n  orderState: OrderState\n} => {\n  const derivedOrderInfo = useDerivedOrderInfo()\n\n  const orderState = useOrderState()\n\n  const handlers = useGelatoLimitOrdersHandlers()\n\n  return {\n    handlers,\n    derivedOrderInfo,\n    orderState,\n  }\n}\n\nexport default useGelatoLimitOrders\n","import { useEffect, memo, useCallback } from 'react'\nimport { useModal } from '@pancakeswap/uikit'\nimport DisclaimerModal from 'components/DisclaimerModal'\nimport { useUserLimitOrderAcceptedWarning } from 'state/user/hooks'\n\nimport { useTranslation } from '@pancakeswap/localization'\n\nfunction ClaimWarning() {\n  const { t } = useTranslation()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = useUserLimitOrderAcceptedWarning()\n\n  const handleSuccess = useCallback(() => {\n    setHasAcceptedRisk(true)\n  }, [setHasAcceptedRisk])\n\n  const [onPresentRiskDisclaimer, onDismiss] = useModal(\n    <DisclaimerModal\n      id=\"disclaimer-limit-order\"\n      header={t('I acknowledge that:')}\n      checks={[\n        {\n          key: 'price-checkbox',\n          content: t('I understand that small orders are executed at higher execution price due to gas fees.'),\n        },\n        {\n          key: 'taxtoken-checkbox',\n          content: t(\n            'I understand that using taxed tokens on limit orders is highly discouraged and not recommended - Taxed tokens can be stuck in limit orders and lost forever because of impossibility to execute an order for such tokens',\n          ),\n        },\n      ]}\n      onSuccess={handleSuccess}\n    />,\n    false,\n    false,\n  )\n\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimer()\n    }\n\n    return () => {\n      onDismiss()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasAcceptedRisk])\n\n  return null\n}\n\nexport default memo(ClaimWarning)\n","import { Message, MessageText } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst LimitOrderDisclaimer = () => {\n  const { t } = useTranslation()\n  return (\n    <Message variant=\"warning\" mt=\"24px\">\n      <MessageText>\n        <b>{t('Real Execution Price:')}</b>\n        <ol>\n          <li>\n            {t(\n              'Your execution gas fees are paid for by the spread between your specified price and the real execution price.',\n            )}\n          </li>\n          <li>\n            {t(\n              'Gas fees are volatile and thus the exact market price at which your order will execute is unpredictable.',\n            )}\n          </li>\n          <li>{t('It might take much longer than you expected to reach the price that fills your order + fees.')}</li>\n        </ol>\n        <br />\n        <b>{t('\"Fee on Transfer\" Tokens')}</b>\n        <ol>\n          <li>{t('\"Fee on transfer\" tokens should not be used with Limit Orders (use at your own risk)')}</li>\n        </ol>\n      </MessageText>\n    </Message>\n  )\n}\n\nexport default LimitOrderDisclaimer\n","import { Currency } from '@pancakeswap/sdk'\nimport {\n  ArrowDownIcon,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Message,\n  MessageText,\n  Modal,\n  Spinner,\n  Text,\n  useMatchBreakpoints,\n  TransactionErrorContent,\n} from '@pancakeswap/uikit'\nimport { CurrencyLogo } from 'components/Logo'\nimport { TransactionSubmittedContent } from 'components/TransactionConfirmationModal'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useTheme from 'hooks/useTheme'\nimport { memo } from 'react'\nimport styled from 'styled-components'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport LimitOrderDisclaimer from './LimitOrderDisclaimer'\n\nconst InfoCardWrapper = styled.div`\n  border-radius: 16px;\n  padding: 16px;\n  margin-top: 24px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\ninterface ConfirmLimitOrderModalProps extends InjectedModalProps {\n  currencies: {\n    input: Currency\n    output: Currency\n  }\n  formattedAmounts: {\n    input: string\n    output: string\n    price: string\n  }\n  currentMarketRate: string\n  currentMarketRateInverted: string\n  limitPrice: string\n  limitPriceInverted: string\n  percentageRateDifference: string\n  onConfirm: () => void\n  attemptingTxn: boolean\n  txHash: string\n  customOnDismiss: () => void\n  swapErrorMessage: string\n}\n\nexport const ConfirmLimitOrderModal: React.FC<React.PropsWithChildren<ConfirmLimitOrderModalProps>> = ({\n  onDismiss,\n  currencies,\n  formattedAmounts,\n  currentMarketRate,\n  currentMarketRateInverted,\n  limitPrice,\n  limitPriceInverted,\n  percentageRateDifference,\n  onConfirm,\n  attemptingTxn,\n  txHash,\n  customOnDismiss,\n  swapErrorMessage,\n}) => {\n  const { chainId } = useActiveChainId()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const wrappedOutput = wrappedCurrency(currencies.output, chainId)\n  const { isMobile } = useMatchBreakpoints()\n\n  const handleDismiss = () => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss()\n  }\n  return (\n    <Modal\n      title={t('Confirm Limit Order')}\n      headerBackground={theme.colors.gradientCardHeader}\n      onDismiss={handleDismiss}\n      style={{ width: isMobile ? '100%' : '436px' }}\n    >\n      {attemptingTxn ? (\n        <LoadingContent />\n      ) : txHash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={txHash}\n          currencyToAdd={wrappedOutput}\n          onDismiss={handleDismiss}\n        />\n      ) : swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={handleDismiss} message={swapErrorMessage} />\n      ) : (\n        <OrderContent\n          currencies={currencies}\n          formattedAmounts={formattedAmounts}\n          currentMarketRate={currentMarketRate}\n          currentMarketRateInverted={currentMarketRateInverted}\n          limitPrice={limitPrice}\n          limitPriceInverted={limitPriceInverted}\n          percentageRateDifference={percentageRateDifference}\n        />\n      )}\n      {!txHash && !swapErrorMessage && (\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Button scale=\"md\" variant=\"primary\" onClick={onConfirm} width=\"100%\" disabled={attemptingTxn}>\n            {attemptingTxn ? t(`Confirming...`) : t(`Confirm`)}\n          </Button>\n        </Flex>\n      )}\n    </Modal>\n  )\n}\n\ninterface OrderContentProps {\n  currencies: {\n    input: Currency\n    output: Currency\n  }\n  formattedAmounts: {\n    input: string\n    output: string\n    price: string\n  }\n  currentMarketRate: string\n  currentMarketRateInverted: string\n  limitPrice: string\n  limitPriceInverted: string\n  percentageRateDifference: string\n}\n\nconst OrderContent: React.FC<React.PropsWithChildren<OrderContentProps>> = ({\n  currencies,\n  formattedAmounts,\n  currentMarketRate,\n  currentMarketRateInverted,\n  limitPrice,\n  limitPriceInverted,\n  percentageRateDifference,\n}) => {\n  const { t } = useTranslation()\n  const currentPriceExchangeRateText = `1 ${currencies.input?.symbol} = ${currentMarketRate} ${currencies.output?.symbol}`\n  const currentPriceExchangeRateTextReversed = `1 ${currencies.output?.symbol} = ${currentMarketRateInverted} ${currencies.input?.symbol}`\n  const limitPriceExchangeRateText = `1 ${currencies.input?.symbol} = ${limitPrice} ${currencies.output?.symbol}`\n  const limitPriceExchangeRateTextReversed = `1 ${currencies.output?.symbol} = ${limitPriceInverted} ${currencies.input?.symbol}`\n  return (\n    <>\n      <Flex flexDirection=\"column\" width=\"100%\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text fontSize=\"24px\" color=\"text\">\n            {formattedAmounts.input}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Text textTransform=\"uppercase\" color=\"text\" mr=\"8px\">\n              {currencies.input?.symbol}\n            </Text>\n            <CurrencyLogo currency={currencies.input} />\n          </Flex>\n        </Flex>\n        <Flex justifyContent=\"center\">\n          <ArrowDownIcon />\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text fontSize=\"24px\" color=\"text\">\n            {formattedAmounts.output}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Text textTransform=\"uppercase\" color=\"text\" mr=\"8px\">\n              {currencies.output?.symbol}\n            </Text>\n            <CurrencyLogo currency={currencies.output} />\n          </Flex>\n        </Flex>\n      </Flex>\n      <LimitTradeInfoCard\n        currentPriceExchangeRateText={currentPriceExchangeRateText}\n        currentPriceExchangeRateTextReversed={currentPriceExchangeRateTextReversed}\n        limitPriceExchangeRateText={limitPriceExchangeRateText}\n        limitPriceExchangeRateTextReversed={limitPriceExchangeRateTextReversed}\n      />\n      <Message variant=\"success\" mt=\"24px\">\n        <MessageText>\n          {t(\n            'Limit price is %percentage%% above the current market rate. The order will be executed when the market price reaches high enough above your limit price (to also pay for limit order execution gas fees).',\n            { percentage: percentageRateDifference },\n          )}\n        </MessageText>\n      </Message>\n      <LimitOrderDisclaimer />\n    </>\n  )\n}\n\ninterface LimitTradeInfoCardProps {\n  currentPriceExchangeRateText: string\n  currentPriceExchangeRateTextReversed: string\n  limitPriceExchangeRateText: string\n  limitPriceExchangeRateTextReversed: string\n}\n\nconst LimitTradeInfoCard: React.FC<React.PropsWithChildren<LimitTradeInfoCardProps>> = memo(\n  ({\n    currentPriceExchangeRateText,\n    currentPriceExchangeRateTextReversed,\n    limitPriceExchangeRateText,\n    limitPriceExchangeRateTextReversed,\n  }) => {\n    const { t } = useTranslation()\n    return (\n      <InfoCardWrapper>\n        <Flex justifyContent=\"space-between\">\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Current Market Price')}\n          </Text>\n          <Flex flexDirection=\"column\">\n            <Text color=\"text\" fontSize=\"14px\" bold>\n              {currentPriceExchangeRateText}\n            </Text>\n            <Text color=\"text\" fontSize=\"14px\">\n              {currentPriceExchangeRateTextReversed}\n            </Text>\n          </Flex>\n        </Flex>\n        <Flex justifyContent=\"space-between\" mt=\"16px\">\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Limit Price')}\n          </Text>\n          <Flex flexDirection=\"column\">\n            <Text color=\"#129E7D\" fontSize=\"14px\" bold>\n              {limitPriceExchangeRateText}\n            </Text>\n            <Text color=\"#129E7D\" fontSize=\"14px\">\n              {limitPriceExchangeRateTextReversed}\n            </Text>\n          </Flex>\n        </Flex>\n      </InfoCardWrapper>\n    )\n  },\n)\n\nconst LoadingContent: React.FC<React.PropsWithChildren> = memo(() => {\n  const { t } = useTranslation()\n  return (\n    <Flex>\n      <Flex flexDirection=\"column\" flexGrow=\"wrap\" flexBasis=\"267px\">\n        <Text fontSize=\"20px\" small color=\"secondary\">\n          {t('Confirm')}\n        </Text>\n        <Text small color=\"textSubtle\" mt=\"8px\">\n          {t('Please confirm the transaction in your wallet')}\n        </Text>\n      </Flex>\n      <Flex>\n        <Spinner size={70} />\n      </Flex>\n    </Flex>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChartIcon, Flex, Heading, HistoryIcon, IconButton, Text, useModal, ChartDisableIcon } from '@pancakeswap/uikit'\nimport TransactionsModal from 'components/App/Transactions/TransactionsModal'\n\ninterface Props {\n  title: string\n  subtitle: string\n  noConfig?: boolean\n  setIsChartDisplayed?: React.Dispatch<React.SetStateAction<boolean>>\n  isChartDisplayed?: boolean\n}\n\nconst CurrencyInputContainer = styled(Flex)`\n  flex-direction: column;\n  align-items: center;\n  padding: 24px;\n  width: 100%;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst ColoredIconButton = styled(IconButton)`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nconst CurrencyInputHeader: React.FC<React.PropsWithChildren<Props>> = ({\n  title,\n  subtitle,\n  setIsChartDisplayed,\n  isChartDisplayed,\n}) => {\n  const toggleChartDisplayed = () => {\n    setIsChartDisplayed((currentIsChartDisplayed) => !currentIsChartDisplayed)\n  }\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n\n  return (\n    <CurrencyInputContainer>\n      <Flex width=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n        <Flex flex=\"1\">\n          {setIsChartDisplayed && (\n            <ColoredIconButton onClick={toggleChartDisplayed} variant=\"text\" scale=\"sm\">\n              {isChartDisplayed ? (\n                <ChartDisableIcon color=\"textSubtle\" />\n              ) : (\n                <ChartIcon width=\"24px\" color=\"textSubtle\" />\n              )}\n            </ColoredIconButton>\n          )}\n        </Flex>\n        <Flex flex=\"1\" justifyContent=\"center\">\n          <Heading as=\"h2\">{title}</Heading>\n        </Flex>\n        <Flex flex=\"1\" justifyContent=\"flex-end\">\n          <IconButton onClick={onPresentTransactionsModal} variant=\"text\" scale=\"sm\">\n            <HistoryIcon color=\"textSubtle\" width=\"24px\" />\n          </IconButton>\n        </Flex>\n      </Flex>\n      <Flex alignItems=\"center\">\n        <Text color=\"textSubtle\" fontSize=\"14px\">\n          {subtitle}\n        </Text>\n      </Flex>\n    </CurrencyInputContainer>\n  )\n}\n\nexport default CurrencyInputHeader\n","import { constants } from '@gelatonetwork/limit-orders-lib'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, Text, HelpIcon, useTooltip } from '@pancakeswap/uikit'\n\nconst ExpiredDate = () => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Text>{t('After your order is expired it might never be executed. Please cancel your order once expired')}</Text>,\n    { placement: 'bottom' },\n  )\n\n  const expiryDate = new Date(new Date().getTime() + constants.MAX_LIFETIME_IN_SECONDS * 1000).toLocaleString([], {\n    year: 'numeric',\n    month: '2-digit',\n    day: 'numeric',\n  })\n\n  return (\n    <Flex justifySelf=\"flex-end\" minHeight=\"16px\">\n      <Text fontSize=\"14px\" small color=\"textSubtle\" mr=\"4px\">\n        {t('Expiration Date: %expiryDate%', { expiryDate })}\n      </Text>\n      <span ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n        {tooltipVisible && tooltip}\n      </span>\n    </Flex>\n  )\n}\n\nexport default ExpiredDate\n","import { Percent } from '@pancakeswap/sdk'\nimport { TranslateFunction } from '@pancakeswap/localization'\n\nexport enum PercentageDirection {\n  ABOVE = 'above',\n  BELOW = 'below',\n  MARKET = 'market',\n}\n\nexport const getRatePercentageMessage = (\n  percentageRateDifference: Percent,\n  t: TranslateFunction,\n): [string | null, PercentageDirection] => {\n  if (percentageRateDifference) {\n    if (percentageRateDifference.equalTo(0)) {\n      return [t('at market price'), PercentageDirection.MARKET]\n    }\n    const percentageAsString = percentageRateDifference.toSignificant(6)\n    const formattedPercentage = parseFloat(percentageAsString).toLocaleString(undefined, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    })\n    if (percentageRateDifference.lessThan('0')) {\n      return [t('%percentage%% below market', { percentage: formattedPercentage }), PercentageDirection.BELOW]\n    }\n    return [t('%percentage%% above market', { percentage: formattedPercentage }), PercentageDirection.ABOVE]\n  }\n  return [null, null]\n}\n","import React from 'react'\nimport { Currency, Percent, Price } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport { Input, Flex, Text, Button, AutoRenewIcon, SyncAltIcon, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { escapeRegExp } from 'utils'\nimport { Rate } from 'state/limitOrders/types'\nimport ExpiredDate from 'views/LimitOrders/components/ExpiredDate'\nimport { getRatePercentageMessage, PercentageDirection } from '../utils/getRatePercentageMessage'\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nconst OrderPriceInput = styled(Input)`\n  text-align: right;\n`\n\nconst LabelContainer = styled(Flex)`\n  cursor: pointer;\n`\n\ninterface LimitOrderPriceProps {\n  id: string\n  value: string\n  onUserInput: (value: string) => void\n  inputCurrency: Currency\n  outputCurrency: Currency\n  percentageRateDifference: Percent\n  rateType: Rate\n  handleRateType: (rateType: Rate, price?: Price<Currency, Currency>) => void\n  price: Price<Currency, Currency>\n  handleResetToMarketPrice: () => void\n  realExecutionPriceAsString: string\n  disabled: boolean\n}\n\nconst DIRECTION_COLORS = {\n  [PercentageDirection.ABOVE]: 'success',\n  [PercentageDirection.BELOW]: 'failure',\n  [PercentageDirection.MARKET]: 'textSubtle',\n}\n\nconst LimitOrderPrice: React.FC<React.PropsWithChildren<LimitOrderPriceProps>> = ({\n  id,\n  value,\n  onUserInput,\n  inputCurrency,\n  outputCurrency,\n  percentageRateDifference,\n  rateType,\n  handleRateType,\n  price,\n  handleResetToMarketPrice,\n  realExecutionPriceAsString,\n  disabled,\n}) => {\n  const { t } = useTranslation()\n\n  const hasCurrencyInfo = inputCurrency && outputCurrency\n  const label =\n    rateType === Rate.MUL\n      ? `${outputCurrency?.symbol} per ${inputCurrency?.symbol}`\n      : `${inputCurrency?.symbol} per ${outputCurrency?.symbol}`\n\n  const toggleRateType = () => {\n    handleRateType(rateType, price)\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'The real execution price includes the gas cost necessary to execute your order and guarantees that your order will be executed at the desired price.',\n        )}\n      </Text>\n      <Text>{t('It fluctuates according to gas prices when the order is getting executed.')}</Text>\n      {inputCurrency?.symbol && outputCurrency?.symbol && realExecutionPriceAsString && (\n        <Text>\n          {realExecutionPriceAsString === 'never executes'\n            ? t(\n                'Assuming the current gas price, this order will never be executed. Try increasing the number of tokens to swap in your order.',\n              )\n            : t('Assuming current gas price it should execute when 1 %assetOneSymbol% = %price% %assetTwoSymbol%', {\n                assetOneSymbol: rateType === Rate.MUL ? inputCurrency?.symbol : outputCurrency?.symbol,\n                assetTwoSymbol: rateType === Rate.MUL ? outputCurrency?.symbol : inputCurrency?.symbol,\n                price: realExecutionPriceAsString,\n              })}\n        </Text>\n      )}\n    </>,\n    { placement: 'top' },\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const nextUserInput = event.target.value.replace(/,/g, '.')\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  const isAtMarketPrice = percentageRateDifference?.equalTo(0) ?? true\n  const [ratePercentageMessage, direction] = getRatePercentageMessage(percentageRateDifference, t)\n  const priceLabelColor = DIRECTION_COLORS[direction]\n  const _realExecutionPriceAsString =\n    realExecutionPriceAsString === 'never executes' ? t('never executes') : realExecutionPriceAsString\n\n  return (\n    <>\n      <Flex justifyContent=\"space-between\" id={id}>\n        <Flex alignItems=\"center\">\n          <Text mr=\"8px\" color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n            {t('Price')}\n          </Text>\n          <Button\n            onClick={handleResetToMarketPrice}\n            startIcon={<AutoRenewIcon color={isAtMarketPrice ? 'textDisabled' : 'primary'} />}\n            variant=\"secondary\"\n            scale=\"xs\"\n            disabled={isAtMarketPrice}\n          >\n            <Text fontSize=\"12px\" bold color={isAtMarketPrice ? 'textDisabled' : 'primary'} textTransform=\"uppercase\">\n              {t('Market')}\n            </Text>\n          </Button>\n        </Flex>\n        {ratePercentageMessage && (\n          <Text color={priceLabelColor} fontSize=\"12px\">\n            {ratePercentageMessage}\n          </Text>\n        )}\n      </Flex>\n      <OrderPriceInput\n        value={value}\n        disabled={disabled}\n        onChange={handleOnChange}\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        pattern=\"^[0-9]*[.,]?[0-9]*$\"\n        minLength={1}\n        maxLength={79}\n        spellCheck=\"false\"\n        type=\"text\"\n        inputMode=\"decimal\"\n      />\n      {hasCurrencyInfo && (\n        <LabelContainer justifyContent=\"flex-end\" alignItems=\"center\" onClick={toggleRateType}>\n          <Text small bold>\n            {label}\n          </Text>\n          <SyncAltIcon color=\"textSubtle\" width=\"24px\" ml=\"4px\" />\n        </LabelContainer>\n      )}\n      <ExpiredDate />\n      <Flex justifySelf=\"flex-end\" mb=\"8px\" minHeight=\"16px\">\n        {realExecutionPriceAsString && (\n          <>\n            <Text small color=\"textSubtle\" mr=\"4px\">\n              {t('Real execution price: %price%', { price: _realExecutionPriceAsString })}\n            </Text>\n            <span ref={targetRef}>\n              <HelpIcon color=\"textSubtle\" />\n              {tooltipVisible && tooltip}\n            </span>\n          </>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default LimitOrderPrice\n","import { useMemo } from 'react'\nimport { Order } from '@gelatonetwork/limit-orders-lib'\nimport { Currency, CurrencyAmount, Fraction, Token } from '@pancakeswap/sdk'\nimport { useCurrency } from 'hooks/Tokens'\nimport useGelatoLimitOrdersLib from 'hooks/limitOrders/useGelatoLimitOrdersLib'\nimport { getBlockExploreLink } from 'utils'\nimport { useIsTransactionPending } from 'state/transactions/hooks'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport getPriceForOneToken from '../utils/getPriceForOneToken'\nimport { LimitOrderStatus } from '../types'\n\nexport interface FormattedOrderData {\n  inputToken: Currency | Token\n  outputToken: Currency | Token\n  inputAmount: string\n  outputAmount: string\n  executionPrice: string\n  invertedExecutionPrice: string\n  isOpen: boolean\n  isCancelled: boolean\n  isExecuted: boolean\n  isExpired: boolean\n  isSubmissionPending: boolean\n  isCancellationPending: boolean\n  bscScanUrls: {\n    created: string\n    executed: string\n    cancelled: string\n  }\n}\n\nconst formatForDisplay = (amount: Fraction) => {\n  if (!amount) {\n    return undefined\n  }\n  return parseFloat(amount.toSignificant(18)).toLocaleString(undefined, {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 8,\n  })\n}\n\n// Transforms Gelato Order type into types ready to be displayed in UI\nconst useFormattedOrderData = (order: Order): FormattedOrderData => {\n  const { chainId } = useActiveChainId()\n  const gelatoLibrary = useGelatoLimitOrdersLib()\n  const inputToken = useCurrency(order.inputToken)\n  const outputToken = useCurrency(order.outputToken)\n\n  const isSubmissionPending = useIsTransactionPending(order.createdTxHash)\n  const isCancellationPending = useIsTransactionPending(order.cancelledTxHash ?? undefined)\n\n  const inputAmount = useMemo(() => {\n    if (inputToken && order.inputAmount) {\n      return CurrencyAmount.fromRawAmount(inputToken, order.inputAmount)\n    }\n    return undefined\n  }, [inputToken, order.inputAmount])\n\n  const rawMinReturn = useMemo(\n    () =>\n      order.adjustedMinReturn\n        ? order.adjustedMinReturn\n        : gelatoLibrary && chainId && order.minReturn\n        ? gelatoLibrary.getAdjustedMinReturn(order.minReturn)\n        : undefined,\n    [chainId, gelatoLibrary, order.adjustedMinReturn, order.minReturn],\n  )\n\n  const outputAmount = useMemo(() => {\n    if (outputToken && rawMinReturn) {\n      return CurrencyAmount.fromRawAmount(outputToken, rawMinReturn)\n    }\n    return undefined\n  }, [outputToken, rawMinReturn])\n\n  const executionPrice = useMemo(() => getPriceForOneToken(inputAmount, outputAmount), [inputAmount, outputAmount])\n\n  return {\n    inputToken,\n    outputToken,\n    inputAmount: formatForDisplay(inputAmount),\n    outputAmount: formatForDisplay(outputAmount),\n    executionPrice: formatForDisplay(executionPrice),\n    invertedExecutionPrice: formatForDisplay(executionPrice?.invert()),\n    isOpen: order.status === LimitOrderStatus.OPEN,\n    isCancelled: order.status === LimitOrderStatus.CANCELLED,\n    isExecuted: order.status === LimitOrderStatus.EXECUTED,\n    isExpired: order.isExpired && order.status === LimitOrderStatus.OPEN,\n    isSubmissionPending,\n    isCancellationPending,\n    bscScanUrls: {\n      created: order.createdTxHash ? getBlockExploreLink(order.createdTxHash, 'transaction') : null,\n      executed: order.executedTxHash ? getBlockExploreLink(order.executedTxHash, 'transaction') : null,\n      cancelled: order.cancelledTxHash ? getBlockExploreLink(order.cancelledTxHash, 'transaction') : null,\n    },\n  }\n}\n\nexport default useFormattedOrderData\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport { ReactElement } from 'react'\n\ninterface TextIconProps {\n  text: string\n  bold?: boolean\n  icon: ReactElement\n}\n\nconst TextIcon: React.FC<React.PropsWithChildren<TextIconProps>> = ({ icon, text, bold = false }) => {\n  return (\n    <Flex alignItems=\"center\">\n      <Text color=\"text\" mr=\"8px\" bold={bold} textTransform=\"uppercase\">\n        {text}\n      </Text>\n      {icon}\n    </Flex>\n  )\n}\n\nexport default TextIcon\n","import { Currency } from '@pancakeswap/sdk'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport TextIcon from './TextIcon'\n\ninterface CurrencyFormatProps {\n  currency: Currency\n  bold?: boolean\n}\n\nconst CurrencyFormat: React.FC<React.PropsWithChildren<CurrencyFormatProps>> = ({ currency, bold }) => {\n  return <TextIcon bold={bold} text={currency?.symbol} icon={<CurrencyLogo currency={currency} />} />\n}\n\nexport default CurrencyFormat\n","import { Box } from '@pancakeswap/uikit'\nimport { ReactElement } from 'react'\n\ninterface CellFormatProps {\n  firstRow: ReactElement | number | string\n  secondRow: ReactElement\n}\n\nconst CellFormat: React.FC<React.PropsWithChildren<CellFormatProps>> = ({ firstRow, secondRow }) => {\n  return (\n    <Box>\n      <Box mb=\"4px\">{firstRow}</Box>\n      <Box>{secondRow}</Box>\n    </Box>\n  )\n}\n\nexport default CellFormat\n","import {\n  Button,\n  Flex,\n  Box,\n  Modal,\n  Text,\n  ChevronRightIcon,\n  InjectedModalProps,\n  Tag,\n  useMatchBreakpoints,\n  BscScanIcon,\n  TransactionErrorContent,\n  ConfirmationPendingContent,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useTheme from 'hooks/useTheme'\nimport { memo, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { FormattedOrderData } from 'views/LimitOrders/hooks/useFormattedOrderData'\nimport useGelatoLimitOrdersHandlers from 'hooks/limitOrders/useGelatoLimitOrdersHandlers'\nimport { Order } from '@gelatonetwork/limit-orders-lib'\nimport { TransactionSubmittedContent } from 'components/TransactionConfirmationModal'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport CurrencyFormat from './CurrencyFormat'\nimport CellFormat from './CellFormat'\nimport LimitOrderDisclaimer from '../LimitOrderDisclaimer'\n\nconst InfoCardWrapper = styled.div`\n  border-radius: 16px;\n  padding: 16px;\n  margin-top: 24px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\ninterface DetailLimitOrderModalProps extends InjectedModalProps {\n  order: Order\n  // Just pass it to modal to prevent recalculating everything\n  formattedOrder: FormattedOrderData\n}\n\nexport const DetailLimitOrderModal: React.FC<React.PropsWithChildren<DetailLimitOrderModalProps>> = ({\n  onDismiss,\n  order,\n  formattedOrder,\n}) => {\n  const { chainId } = useActiveChainId()\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const { handleLimitOrderCancellation } = useGelatoLimitOrdersHandlers()\n  const { isMobile } = useMatchBreakpoints()\n\n  const [{ cancellationErrorMessage, attemptingTxn, txHash }, setCancellationState] = useState<{\n    attemptingTxn: boolean\n    cancellationErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    attemptingTxn: false,\n    cancellationErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const onCancelOrder = useCallback(() => {\n    if (!handleLimitOrderCancellation) {\n      return\n    }\n    setCancellationState({\n      attemptingTxn: true,\n      cancellationErrorMessage: undefined,\n      txHash: undefined,\n    })\n\n    const orderDetails =\n      formattedOrder.inputToken?.symbol &&\n      formattedOrder.outputToken?.symbol &&\n      formattedOrder.inputAmount &&\n      formattedOrder.outputAmount\n        ? {\n            inputTokenSymbol: formattedOrder.inputToken.symbol,\n            outputTokenSymbol: formattedOrder.outputToken.symbol,\n            inputAmount: formattedOrder.inputAmount,\n            outputAmount: formattedOrder.outputAmount,\n          }\n        : undefined\n    handleLimitOrderCancellation(order, orderDetails)\n      .then(({ hash }) => {\n        setCancellationState({\n          attemptingTxn: false,\n          cancellationErrorMessage: undefined,\n          txHash: hash,\n        })\n      })\n      .catch((error) => {\n        setCancellationState({\n          attemptingTxn: false,\n          cancellationErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [\n    handleLimitOrderCancellation,\n    formattedOrder.inputAmount,\n    formattedOrder.outputAmount,\n    formattedOrder.inputToken?.symbol,\n    formattedOrder.outputToken?.symbol,\n    order,\n  ])\n\n  const limitPriceExchangeRateText = `1 ${formattedOrder.inputToken?.symbol} = ${formattedOrder.executionPrice} ${formattedOrder.outputToken?.symbol}`\n  const limitPriceExchangeRateTextReversed = `1 ${formattedOrder.outputToken?.symbol} = ${formattedOrder.invertedExecutionPrice} ${formattedOrder.inputToken?.symbol}`\n\n  const { isOpen, isExecuted, isExpired, isCancelled, isSubmissionPending, isCancellationPending, bscScanUrls } =\n    formattedOrder\n\n  const orderDetails = (\n    <>\n      <Flex width=\"100%\" justifyContent=\"space-between\">\n        <CellFormat\n          firstRow={<Text>{formattedOrder.inputAmount}</Text>}\n          secondRow={<CurrencyFormat currency={formattedOrder.inputToken} />}\n        />\n        <ChevronRightIcon />\n        <CellFormat\n          firstRow={<Text>{formattedOrder.outputAmount}</Text>}\n          secondRow={<CurrencyFormat currency={formattedOrder.outputToken} />}\n        />\n      </Flex>\n      <LimitTradeInfoCard\n        currentPriceExchangeRateText=\"0.002474 BNB = 1 BUSD\"\n        currentPriceExchangeRateTextReversed=\"404.11169 BUSD = 1 BNB\"\n        limitPriceExchangeRateText={limitPriceExchangeRateText}\n        limitPriceExchangeRateTextReversed={limitPriceExchangeRateTextReversed}\n        isOpen={isOpen}\n        isExecuted={isExecuted}\n        isExpired={isExpired}\n        isCancelled={isCancelled}\n        isSubmissionPending={isSubmissionPending}\n        isCancellationPending={isCancellationPending}\n      />\n      <LimitOrderDisclaimer />\n      <Flex flexDirection=\"column\">\n        {isOpen || isExpired ? (\n          <>\n            <Button variant=\"primary\" mt=\"16px\" as=\"a\" external href={formattedOrder.bscScanUrls.created}>\n              {t('View on BscScan')}\n              <BscScanIcon color=\"invertedContrast\" ml=\"4px\" />\n            </Button>\n            {!isSubmissionPending && (\n              <Button variant=\"danger\" mt=\"16px\" onClick={onCancelOrder}>\n                {t('Cancel Order')}\n              </Button>\n            )}\n          </>\n        ) : (\n          <Button variant=\"primary\" mt=\"16px\" as=\"a\" external href={formattedOrder.bscScanUrls.created}>\n            {t('View order creation on BSCScan')}\n            <BscScanIcon color=\"invertedContrast\" ml=\"4px\" />\n          </Button>\n        )}\n        {isCancelled && bscScanUrls.cancelled && (\n          <Button variant=\"primary\" mt=\"16px\" as=\"a\" external href={bscScanUrls.cancelled}>\n            {t('View order cancellation on BSCScan')}\n            <BscScanIcon color=\"invertedContrast\" ml=\"4px\" />\n          </Button>\n        )}\n        {isExecuted && bscScanUrls.executed && (\n          <Button variant=\"primary\" mt=\"16px\" as=\"a\" external href={bscScanUrls.executed}>\n            {t('View order execution on BSCScan')}\n            <BscScanIcon color=\"invertedContrast\" ml=\"4px\" />\n          </Button>\n        )}\n      </Flex>\n    </>\n  )\n  return (\n    <Modal\n      title={t('Open Order Details')}\n      headerBackground={theme.colors.gradientCardHeader}\n      style={{ width: isMobile ? '100%' : '436px' }}\n      onDismiss={onDismiss}\n    >\n      {attemptingTxn ? (\n        <ConfirmationPendingContent />\n      ) : txHash ? (\n        <TransactionSubmittedContent chainId={chainId} hash={txHash} onDismiss={onDismiss} />\n      ) : cancellationErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={cancellationErrorMessage} />\n      ) : (\n        orderDetails\n      )}\n    </Modal>\n  )\n}\n\ninterface LimitTradeInfoCardProps {\n  currentPriceExchangeRateText: string\n  currentPriceExchangeRateTextReversed: string\n  limitPriceExchangeRateText: string\n  limitPriceExchangeRateTextReversed: string\n  isOpen: boolean\n  isExecuted: boolean\n  isExpired: boolean\n  isCancelled: boolean\n  isSubmissionPending: boolean\n  isCancellationPending: boolean\n}\n\nconst LimitTradeInfoCard: React.FC<React.PropsWithChildren<LimitTradeInfoCardProps>> = memo(\n  ({\n    limitPriceExchangeRateText,\n    limitPriceExchangeRateTextReversed,\n    isOpen,\n    isExecuted,\n    isExpired,\n    isCancelled,\n    isSubmissionPending,\n    isCancellationPending,\n  }) => {\n    const { t } = useTranslation()\n\n    return (\n      <InfoCardWrapper>\n        <Box mb=\"4px\">\n          {isOpen && isSubmissionPending && (\n            <Tag outline scale=\"sm\" p=\"8px\" mb=\"16px\" variant=\"warning\">\n              {t('Pending')}\n            </Tag>\n          )}\n          {isExpired && (\n            <Tag outline scale=\"sm\" p=\"8px\" mb=\"16px\" variant=\"warning\">\n              {t('Expired')}\n            </Tag>\n          )}\n          {isExecuted && (\n            <Tag outline scale=\"sm\" p=\"8px\" mb=\"16px\" variant=\"success\">\n              {t('Filled')}\n            </Tag>\n          )}\n          {isCancellationPending && (\n            <Tag outline scale=\"sm\" p=\"8px\" mb=\"16px\" variant=\"warning\">\n              {t('Cancelling')}\n            </Tag>\n          )}\n          {isCancelled && !isCancellationPending && (\n            <Tag outline scale=\"sm\" p=\"8px\" mb=\"16px\" variant=\"failure\">\n              {t('Cancelled')}\n            </Tag>\n          )}\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Limit Price')}\n          </Text>\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"14px\">{limitPriceExchangeRateText}</Text>\n            <Text fontSize=\"14px\">{limitPriceExchangeRateTextReversed}</Text>\n          </Flex>\n        </Box>\n      </InfoCardWrapper>\n    )\n  },\n)\n","import { Tag, Text, TagVariant } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport React from 'react'\nimport { FormattedOrderData } from 'views/LimitOrders/hooks/useFormattedOrderData'\n\nexport enum StatusElementType {\n  TAG = 'Tag',\n  TEXT = 'Text',\n}\n\nconst StatusElement: React.FC<\n  React.PropsWithChildren<{ element: StatusElementType; text: string; color: TagVariant }>\n> = ({ element, text, color }) => {\n  if (element === StatusElementType.TAG) {\n    return (\n      <Tag outline scale=\"sm\" variant={color} ml=\"auto\">\n        {text}\n      </Tag>\n    )\n  }\n  return <Text color={color}>{text}</Text>\n}\n\nconst OrderStatus: React.FC<\n  React.PropsWithChildren<{\n    formattedOrder: FormattedOrderData\n    showOpenTag?: boolean\n    element?: StatusElementType\n  }>\n> = ({ formattedOrder, showOpenTag = false, element = StatusElementType.TAG }) => {\n  const { t } = useTranslation()\n  const { isOpen, isSubmissionPending, isCancelled, isCancellationPending, isExecuted, isExpired } = formattedOrder\n  if (isOpen && isExpired) {\n    return <StatusElement element={element} text={t('Expired')} color=\"warning\" />\n  }\n  if (isOpen && !isSubmissionPending && showOpenTag) {\n    return <StatusElement element={element} text={t('Open')} color=\"success\" />\n  }\n  if (isOpen && isSubmissionPending) {\n    return <StatusElement element={element} text={t('Pending')} color=\"warning\" />\n  }\n  if (isCancelled && !isCancellationPending) {\n    return <StatusElement element={element} text={t('Cancelled')} color=\"failure\" />\n  }\n  if (isCancellationPending) {\n    return <StatusElement element={element} text={t('Cancelling')} color=\"warning\" />\n  }\n  if (isExecuted) {\n    return <StatusElement element={element} text={t('Filled')} color=\"success\" />\n  }\n  return null\n}\n\nexport default OrderStatus\n","import { Order } from '@gelatonetwork/limit-orders-lib'\nimport { Flex, ChevronRightIcon, Text, Box, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useFormattedOrderData from 'views/LimitOrders/hooks/useFormattedOrderData'\nimport CurrencyFormat from './CurrencyFormat'\nimport { DetailLimitOrderModal } from './DetailLimitOrderModal'\nimport OrderStatus from './OrderStatus'\n\ninterface CompactRowProps {\n  order: Order\n}\n\nconst CompactRow: React.FC<React.PropsWithChildren<CompactRowProps>> = ({ order }) => {\n  const { t } = useTranslation()\n  const formattedOrder = useFormattedOrderData(order)\n  const { inputToken, outputToken, inputAmount, outputAmount, executionPrice } = formattedOrder\n  const [openDetailLimitOrderModal] = useModal(<DetailLimitOrderModal order={order} formattedOrder={formattedOrder} />)\n\n  return (\n    <Flex width=\"100%\" justifyContent=\"center\" alignItems=\"center\" onClick={openDetailLimitOrderModal}>\n      <Box width=\"100%\">\n        <Flex mb=\"16px\">\n          <CurrencyFormat bold currency={inputToken} />\n          <ChevronRightIcon color=\"textSubtle\" />\n          <CurrencyFormat bold currency={outputToken} />\n          <OrderStatus formattedOrder={formattedOrder} />\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n            {t('From')}\n          </Text>\n          <Text small textTransform=\"uppercase\">{`${inputAmount} ${inputToken?.symbol}`}</Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n            {t('To')}\n          </Text>\n          <Text small textTransform=\"uppercase\">{`${outputAmount} ${outputToken?.symbol}`}</Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n            {t('Price')}\n          </Text>\n          <Text small>{`${executionPrice} ${outputToken?.symbol} per ${inputToken?.symbol}`}</Text>\n        </Flex>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default CompactRow\n","import { memo } from 'react'\nimport styled from 'styled-components'\nimport { Table, Td } from '@pancakeswap/uikit'\nimport CompactRow from './CompactRow'\n\nconst RowStyle = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.backgroundDisabled};\n  }\n`\n\nconst CompactLimitOrderTable = ({ orders }) => (\n  <Table>\n    <tbody>\n      {orders.map((order) => (\n        <RowStyle key={order.id}>\n          <Td>\n            <CompactRow order={order} />\n          </Td>\n        </RowStyle>\n      ))}\n    </tbody>\n  </Table>\n)\n\nexport default memo(CompactLimitOrderTable)\n","import React from 'react'\nimport { Order } from '@gelatonetwork/limit-orders-lib'\nimport { Td, MoreHorizontalIcon, SyncAltIcon, useModal, IconButton } from '@pancakeswap/uikit'\n\nimport useFormattedOrderData from 'views/LimitOrders/hooks/useFormattedOrderData'\nimport CurrencyFormat from './CurrencyFormat'\nimport CellFormat from './CellFormat'\nimport TextIcon from './TextIcon'\nimport { DetailLimitOrderModal } from './DetailLimitOrderModal'\nimport OrderStatus, { StatusElementType } from './OrderStatus'\n\nconst FullRow: React.FC<React.PropsWithChildren<{ order: Order }>> = ({ order }) => {\n  const formattedOrder = useFormattedOrderData(order)\n  const { inputToken, outputToken, inputAmount, outputAmount, executionPrice } = formattedOrder\n  const [openDetailLimitOrderModal] = useModal(<DetailLimitOrderModal order={order} formattedOrder={formattedOrder} />)\n  return (\n    <tr>\n      <Td>\n        <CellFormat firstRow={inputAmount} secondRow={<CurrencyFormat bold currency={inputToken} />} />\n      </Td>\n      <Td>\n        <CellFormat firstRow={outputAmount} secondRow={<CurrencyFormat bold currency={outputToken} />} />\n      </Td>\n      <Td>\n        <CellFormat\n          firstRow={executionPrice}\n          secondRow={<TextIcon text={`${outputToken?.symbol}/${inputToken?.symbol}`} icon={<SyncAltIcon />} />}\n        />\n      </Td>\n      <Td>\n        <OrderStatus formattedOrder={formattedOrder} showOpenTag element={StatusElementType.TEXT} />\n      </Td>\n      <Td>\n        <IconButton variant=\"text\" onClick={openDetailLimitOrderModal}>\n          <MoreHorizontalIcon />\n        </IconButton>\n      </Td>\n    </tr>\n  )\n}\n\nexport default FullRow\n","import { memo } from 'react'\nimport { Table, Th, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport FullRow from './FullRow'\n\nconst SpaciousLimitOrderTable = ({ orders }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Table>\n      <>\n        <thead>\n          <tr>\n            <Th>\n              <Text fontSize=\"12px\" bold textTransform=\"uppercase\" color=\"textSubtle\" textAlign=\"left\">\n                {t('From')}\n              </Text>\n            </Th>\n            <Th>\n              <Text fontSize=\"12px\" bold textTransform=\"uppercase\" color=\"textSubtle\" textAlign=\"left\">\n                {t('To')}\n              </Text>\n            </Th>\n            <Th>\n              <Text fontSize=\"12px\" bold textTransform=\"uppercase\" color=\"textSubtle\" textAlign=\"left\">\n                {t('Limit Price')}\n              </Text>\n            </Th>\n            <Th>\n              <Text fontSize=\"12px\" bold textTransform=\"uppercase\" color=\"textSubtle\" textAlign=\"left\">\n                {t('Status')}\n              </Text>\n            </Th>\n            <Th />\n          </tr>\n        </thead>\n        <tbody>\n          {orders.map((order) => (\n            <FullRow key={order.id} order={order} />\n          ))}\n        </tbody>\n      </>\n    </Table>\n  )\n}\n\nexport default memo(SpaciousLimitOrderTable)\n","import { BunnyPlaceholderIcon, Flex, Text } from '@pancakeswap/uikit'\nimport { useMemo } from 'react'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { ORDER_CATEGORY } from '../../types'\n\nconst NoOrdersMessage: React.FC<React.PropsWithChildren<{ orderCategory: ORDER_CATEGORY }>> = ({ orderCategory }) => {\n  const { t } = useTranslation()\n\n  const NoOrdersText = useMemo(() => {\n    switch (orderCategory) {\n      case ORDER_CATEGORY.Open:\n        return t('No Open Orders')\n      case ORDER_CATEGORY.History:\n        return t('No Order History')\n      // case ORDER_CATEGORY.Expired:\n      //   return t('No Expired Orders')\n      default:\n        return ''\n    }\n  }, [orderCategory, t])\n\n  return (\n    <Flex p=\"24px\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n      <BunnyPlaceholderIcon width={64} />\n      <Text color=\"textDisabled\">{NoOrdersText}</Text>\n    </Flex>\n  )\n}\n\nexport default NoOrdersMessage\n","import { memo } from 'react'\nimport { Skeleton, Table, Td } from '@pancakeswap/uikit'\n\nconst LoadingTable = () => (\n  <Table>\n    <tbody>\n      <tr>\n        <Td>\n          <Skeleton />\n        </Td>\n        <Td>\n          <Skeleton />\n        </Td>\n        <Td>\n          <Skeleton />\n        </Td>\n      </tr>\n      <tr>\n        <Td>\n          <Skeleton />\n        </Td>\n        <Td>\n          <Skeleton />\n        </Td>\n        <Td>\n          <Skeleton />\n        </Td>\n      </tr>\n      <tr>\n        <Td>\n          <Skeleton />\n        </Td>\n        <Td>\n          <Skeleton />\n        </Td>\n        <Td>\n          <Skeleton />\n        </Td>\n      </tr>\n    </tbody>\n  </Table>\n)\n\nexport default memo(LoadingTable)\n","import { useState, useMemo, useCallback, ReactElement, memo, useEffect } from 'react'\nimport { Text, Flex, Box, Grid, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport SubgraphHealthIndicator from 'components/SubgraphHealthIndicator'\nimport NoOrdersMessage from './NoOrdersMessage'\nimport { ORDER_CATEGORY } from '../../types'\nimport LoadingTable from './LoadingTable'\n\nconst Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\ninterface ExposedProps {\n  paginatedData: any[]\n}\n\ninterface TableNavigationProps {\n  data: any[]\n  itemsPerPage?: number\n  children: (exposedProps: ExposedProps) => ReactElement\n  orderCategory: ORDER_CATEGORY\n}\n\nconst ORDERS_PER_PAGE = 5\n\nconst TableNavigation: React.FC<TableNavigationProps> = ({\n  data,\n  orderCategory,\n  itemsPerPage = ORDERS_PER_PAGE,\n  children,\n}) => {\n  const { t } = useTranslation()\n  const [currentPage, setPage] = useState(1)\n\n  const total = Array.isArray(data) ? data.length : 0\n\n  const maxPage = useMemo(() => {\n    if (total) {\n      return Math.ceil(total / itemsPerPage)\n    }\n    return 1\n  }, [total, itemsPerPage])\n\n  const onPageNext = useCallback(() => {\n    setPage((page) => (page === maxPage ? page : page + 1))\n  }, [maxPage])\n\n  const onPagePrev = useCallback(() => {\n    setPage((page) => (page === 1 ? page : page - 1))\n  }, [])\n\n  const from = useMemo(() => itemsPerPage * (currentPage - 1), [currentPage, itemsPerPage])\n  const to = useMemo(() => itemsPerPage * currentPage, [currentPage, itemsPerPage])\n\n  const paginatedData = useMemo(() => {\n    return Array.isArray(data) ? data.slice(from, to) : []\n  }, [data, from, to])\n\n  useEffect(() => {\n    setPage(1)\n  }, [orderCategory])\n\n  return (\n    <>\n      {children({\n        paginatedData,\n      })}\n      {!data && <LoadingTable />}\n      {data && !total && <NoOrdersMessage orderCategory={orderCategory} />}\n      <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, null, '1fr 2fr 1fr']} mt=\"16px\" mb=\"16px\" px=\"16px\">\n        <Box />\n        <Flex width=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n          <Arrow onClick={onPagePrev}>\n            <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n          </Arrow>\n\n          <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n\n          <Arrow onClick={onPageNext}>\n            <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n          </Arrow>\n        </Flex>\n        <Flex width=\"100%\" justifyContent={['center', null, null, null, 'flex-end']}>\n          <SubgraphHealthIndicator subgraphName=\"gelatodigital/limit-orders-bsc\" inline />\n        </Flex>\n      </Grid>\n    </>\n  )\n}\n\nexport default memo(TableNavigation)\n","import { useState, useCallback, memo, useMemo } from 'react'\nimport { Flex, Card, ButtonTabMenu } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useGelatoLimitOrdersHistory from '../../hooks/useGelatoLimitOrdersHistory'\n\nimport { ORDER_CATEGORY } from '../../types'\n\nimport CompactLimitOrderTable from './CompactLimitOrderTable'\nimport SpaciousLimitOrderTable from './SpaciousLimitOrderTable'\nimport Navigation from './TableNavigation'\n\nconst OrderTable: React.FC<React.PropsWithChildren<{ isCompact: boolean; orderCategory: ORDER_CATEGORY }>> = memo(\n  ({ orderCategory, isCompact }) => {\n    const orders = useGelatoLimitOrdersHistory(orderCategory)\n\n    return (\n      <Navigation data={orders} orderCategory={orderCategory}>\n        {({ paginatedData }) =>\n          isCompact ? (\n            <CompactLimitOrderTable orders={paginatedData} />\n          ) : (\n            <SpaciousLimitOrderTable orders={paginatedData} />\n          )\n        }\n      </Navigation>\n    )\n  },\n)\n\nconst LimitOrderTable: React.FC<React.PropsWithChildren<{ isCompact: boolean }>> = ({ isCompact }) => {\n  const { t } = useTranslation()\n  const [activeTab, setIndex] = useState<ORDER_CATEGORY>(ORDER_CATEGORY.Open)\n  const handleClick = useCallback((tabType: ORDER_CATEGORY) => setIndex(tabType), [])\n  const tabMenuItems = useMemo(() => {\n    // return [t('Open Orders'), t('Expired Order'), t('Order History')]\n    return [t('Open Orders'), t('Order History')]\n  }, [t])\n\n  return (\n    <Flex flex=\"1\" justifyContent=\"center\" mb=\"24px\">\n      <Card style={{ width: '100%', height: 'max-content' }}>\n        <ButtonTabMenu itemList={tabMenuItems} onItemClick={handleClick} activeIndex={activeTab} />\n        <OrderTable orderCategory={activeTab} isCompact={isCompact} />\n      </Card>\n    </Flex>\n  )\n}\n\nexport default memo(LimitOrderTable)\n","import React, { useCallback } from 'react'\nimport { ArrowDownIcon, IconButton, ArrowUpDownIcon, AutoColumn } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\n\nconst StyledButton = styled(IconButton)`\n  box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.1);\n  .icon-up-down {\n    display: none;\n  }\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.primary};\n    .icon-down {\n      display: none;\n      fill: white;\n    }\n    .icon-up-down {\n      display: block;\n      fill: white;\n    }\n  }\n`\n\ninterface SwitchIconButtonProps {\n  color: 'primary' | 'text'\n  handleSwitchTokens: () => void\n}\n\nconst SwitchIconButton: React.FC<React.PropsWithChildren<SwitchIconButtonProps>> = ({ handleSwitchTokens, color }) => {\n  const handleOnClick = useCallback(() => handleSwitchTokens?.(), [handleSwitchTokens])\n\n  return (\n    <AutoColumn justify=\"space-between\">\n      <AutoRow justify=\"center\" style={{ padding: '0 1rem' }}>\n        <StyledButton variant=\"light\" scale=\"sm\" onClick={handleOnClick}>\n          <ArrowDownIcon className=\"icon-down\" color={color} />\n          <ArrowUpDownIcon className=\"icon-up-down\" color={color} />\n        </StyledButton>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n\nexport default SwitchIconButton\n","import { Box, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const Wrapper = styled(Flex)`\n  position: relative;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n`\n\nexport const StyledSwapContainer = styled(Flex)<{ $isChartExpanded: boolean }>`\n  flex-shrink: 0;\n  height: fit-content;\n  padding: 0 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0 40px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    ${({ $isChartExpanded }) => ($isChartExpanded ? 'padding: 0 120px' : 'padding: 0 40px')};\n  }\n`\n\nexport const StyledInputCurrencyWrapper = styled(Box)`\n  width: 328px;\n`\n","import { Percent, Price, Currency } from '@pancakeswap/sdk'\n\nconst getRatePercentageDifference = (\n  currentMarketRate: Price<Currency, Currency>,\n  price: Price<Currency, Currency>,\n) => {\n  if (currentMarketRate && price) {\n    const percentageAsFraction = price.subtract(currentMarketRate).divide(currentMarketRate)\n    return new Percent(percentageAsFraction.numerator, percentageAsFraction.denominator)\n  }\n  return undefined\n}\n\nexport default getRatePercentageDifference\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, Percent, Token, Trade, TradeType } from '@pancakeswap/sdk'\nimport {\n  BottomDrawer,\n  Box,\n  Button,\n  Flex,\n  Link,\n  Swap as SwapUI,\n  useMatchBreakpoints,\n  useModal,\n  AutoColumn,\n} from '@pancakeswap/uikit'\nimport replaceBrowserHistory from '@pancakeswap/utils/replaceBrowserHistory'\nimport { AppBody } from 'components/App'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\nimport { GELATO_NATIVE } from 'config/constants'\nimport { LIMIT_ORDERS_DOCS_URL } from 'config/constants/exchange'\nimport { SUPPORT_ONLY_BSC } from 'config/constants/supportChains'\nimport useGasOverhead from 'hooks/limitOrders/useGasOverhead'\nimport useGelatoLimitOrders from 'hooks/limitOrders/useGelatoLimitOrders'\nimport { ApprovalState, useApproveCallbackFromInputCurrencyAmount } from 'hooks/useApproveCallback'\nimport useTheme from 'hooks/useTheme'\nimport { useRouter } from 'next/router'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDefaultsFromURLSearch } from 'state/limitOrders/hooks'\nimport { Field } from 'state/limitOrders/types'\nimport { useExchangeChartManager } from 'state/user/hooks'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport AccessRisk from 'views/Swap/components/AccessRisk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport PriceChartContainer from 'views/Swap/components/Chart/PriceChartContainer'\nimport ClaimWarning from './components/ClaimWarning'\n\nimport ImportTokenWarningModal from '../../components/ImportTokenWarningModal'\nimport { CommonBasesType } from '../../components/SearchModal/types'\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens'\nimport { currencyId } from '../../utils/currencyId'\nimport Page from '../Page'\nimport { ConfirmLimitOrderModal } from './components/ConfirmLimitOrderModal'\nimport CurrencyInputHeader from './components/CurrencyInputHeader'\nimport LimitOrderPrice from './components/LimitOrderPrice'\nimport LimitOrderTable from './components/LimitOrderTable'\nimport SwitchTokensButton from './components/SwitchTokensButton'\nimport { StyledInputCurrencyWrapper, StyledSwapContainer, Wrapper } from './styles'\nimport getRatePercentageDifference from './utils/getRatePercentageDifference'\n\nconst LimitOrders = () => {\n  // Helpers\n  const { account, chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const router = useRouter()\n  const { isMobile, isTablet, isDesktop } = useMatchBreakpoints()\n  const { theme } = useTheme()\n  const [userChartPreference, setUserChartPreference] = useExchangeChartManager(isMobile)\n  const [isChartExpanded, setIsChartExpanded] = useState(false)\n  const [isChartDisplayed, setIsChartDisplayed] = useState(userChartPreference)\n\n  useEffect(() => {\n    setUserChartPreference(isChartDisplayed)\n  }, [isChartDisplayed, setUserChartPreference])\n\n  const loadedUrlParams = useDefaultsFromURLSearch()\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ]\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c?.isToken) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency],\n  )\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens()\n  const importTokensNotInDefault = useMemo(() => {\n    return (\n      urlLoadedTokens &&\n      urlLoadedTokens.filter((token: Token) => {\n        return !(token.address in defaultTokens) && token.chainId === chainId\n      })\n    )\n  }, [defaultTokens, urlLoadedTokens, chainId])\n\n  const [onPresentImportTokenWarningModal] = useModal(\n    <ImportTokenWarningModal tokens={importTokensNotInDefault} onCancel={() => router.push('/limit-orders')} />,\n    false,\n    false,\n    'limitOrderTokenWarningModal',\n  )\n\n  useEffect(() => {\n    if (importTokensNotInDefault.length > 0) {\n      onPresentImportTokenWarningModal()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [importTokensNotInDefault.length])\n\n  // TODO: fiat values\n\n  const {\n    handlers: { handleInput, handleCurrencySelection, handleSwitchTokens, handleLimitOrderSubmission, handleRateType },\n    derivedOrderInfo: {\n      currencies,\n      currencyBalances,\n      parsedAmounts,\n      formattedAmounts,\n      rawAmounts,\n      trade,\n      price,\n      inputError,\n      wrappedCurrencies,\n      singleTokenPrice,\n      currencyIds,\n    },\n    orderState: { independentField, basisField, rateType },\n  } = useGelatoLimitOrders()\n\n  const [{ swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    tradeToConfirm: Trade<Currency, Currency, TradeType> | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const [approvalState, approveCallback] = useApproveCallbackFromInputCurrencyAmount(parsedAmounts.input)\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  const maxAmountInput: CurrencyAmount<Currency> | undefined = maxAmountSpend(currencyBalances.input)\n\n  // Trade execution price is always \"in MUL mode\", even if UI handles DIV rate\n  const currentMarketRate = trade?.executionPrice\n  const percentageRateDifference = getRatePercentageDifference(currentMarketRate, price)\n\n  // UI handlers\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      handleInput(Field.INPUT, value)\n    },\n    [handleInput],\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      handleInput(Field.OUTPUT, value)\n    },\n    [handleInput],\n  )\n  const handleInputSelect = useCallback(\n    (newInputCurrency) => {\n      setApprovalSubmitted(false)\n      handleCurrencySelection(Field.INPUT, newInputCurrency)\n\n      const newInputCurrencyId = currencyId(newInputCurrency)\n      if (newInputCurrencyId === currencyIds.output) {\n        replaceBrowserHistory('outputCurrency', currencyIds.input)\n      }\n      replaceBrowserHistory('inputCurrency', newInputCurrencyId)\n    },\n    [currencyIds.input, currencyIds.output, handleCurrencySelection],\n  )\n  const handleTypeDesiredRate = useCallback(\n    (value: string) => {\n      handleInput(Field.PRICE, value)\n    },\n    [handleInput],\n  )\n  const handlePercentInput = useCallback(\n    (percent) => {\n      if (maxAmountInput) {\n        handleInput(Field.INPUT, maxAmountInput.multiply(new Percent(percent, 100)).toExact())\n      }\n    },\n    [maxAmountInput, handleInput],\n  )\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      handleInput(Field.INPUT, maxAmountInput.toExact())\n    }\n  }, [maxAmountInput, handleInput])\n  const handleOutputSelect = useCallback(\n    (newOutputCurrency) => {\n      handleCurrencySelection(Field.OUTPUT, newOutputCurrency)\n\n      const newOutputCurrencyId = currencyId(newOutputCurrency)\n      if (newOutputCurrencyId === currencyIds.input) {\n        replaceBrowserHistory('inputCurrency', currencyIds.output)\n      }\n      replaceBrowserHistory('outputCurrency', newOutputCurrencyId)\n    },\n    [currencyIds.input, currencyIds.output, handleCurrencySelection],\n  )\n  const handleApprove = useCallback(async () => {\n    await approveCallback()\n  }, [approveCallback])\n\n  const handleConfirmDismiss = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      handleTypeInput('')\n    }\n  }, [txHash, handleTypeInput])\n\n  // Trick to reset to market price via fake update on the basis field\n  const handleResetToMarketPrice = useCallback(() => {\n    if (basisField === Field.INPUT) {\n      handleTypeInput(formattedAmounts.input)\n    } else {\n      handleTypeOutput(formattedAmounts.output)\n    }\n  }, [handleTypeInput, handleTypeOutput, formattedAmounts.input, formattedAmounts.output, basisField])\n\n  const handlePlaceOrder = useCallback(() => {\n    if (!handleLimitOrderSubmission) {\n      return\n    }\n    setSwapState((prev) => ({\n      attemptingTxn: true,\n      tradeToConfirm: prev.tradeToConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    }))\n\n    try {\n      if (!wrappedCurrencies.input?.address) {\n        throw new Error('Invalid input currency')\n      }\n      if (!wrappedCurrencies.output?.address) {\n        throw new Error('Invalid output currency')\n      }\n      if (!rawAmounts.input) {\n        throw new Error('Invalid input amount')\n      }\n      if (!rawAmounts.output) {\n        throw new Error('Invalid output amount')\n      }\n\n      if (!account) {\n        throw new Error('No account')\n      }\n      const inputToken = currencies.input?.isToken ? wrappedCurrencies.input?.address : GELATO_NATIVE\n      const outputToken = currencies.output?.isToken ? wrappedCurrencies.output?.address : GELATO_NATIVE\n\n      const orderToSubmit = {\n        inputToken,\n        outputToken,\n        inputAmount: rawAmounts.input,\n        outputAmount: rawAmounts.output,\n        owner: account,\n      }\n      handleLimitOrderSubmission(orderToSubmit)\n        .then(({ hash }) => {\n          setSwapState((prev) => ({\n            attemptingTxn: false,\n            tradeToConfirm: prev.tradeToConfirm,\n            swapErrorMessage: undefined,\n            txHash: hash,\n          }))\n        })\n        .catch((error) => {\n          setSwapState((prev) => ({\n            attemptingTxn: false,\n            tradeToConfirm: prev.tradeToConfirm,\n            swapErrorMessage: error.message,\n            txHash: undefined,\n          }))\n        })\n    } catch (error) {\n      console.error(error)\n    }\n  }, [\n    handleLimitOrderSubmission,\n    account,\n    rawAmounts.input,\n    rawAmounts.output,\n    currencies.input,\n    currencies.output,\n    wrappedCurrencies.input?.address,\n    wrappedCurrencies.output?.address,\n  ])\n\n  const handleTokenSwitch = useCallback(() => {\n    setApprovalSubmitted(false)\n    handleSwitchTokens()\n    replaceBrowserHistory('inputCurrency', currencyIds.output)\n    replaceBrowserHistory('outputCurrency', currencyIds.input)\n  }, [handleSwitchTokens, currencyIds.output, currencyIds.input])\n\n  const { realExecutionPriceAsString } = useGasOverhead(parsedAmounts.input, parsedAmounts.output, rateType)\n\n  const [showConfirmModal] = useModal(\n    <ConfirmLimitOrderModal\n      currencies={currencies}\n      formattedAmounts={formattedAmounts}\n      currentMarketRate={currentMarketRate?.toSignificant(4)}\n      currentMarketRateInverted={currentMarketRate?.invert().toSignificant(4)}\n      limitPrice={price?.toSignificant(6)}\n      limitPriceInverted={price?.invert().toSignificant(6)}\n      percentageRateDifference={parseFloat(percentageRateDifference?.toSignificant(3)).toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 3,\n      })}\n      onConfirm={handlePlaceOrder}\n      attemptingTxn={attemptingTxn}\n      txHash={txHash}\n      customOnDismiss={handleConfirmDismiss}\n      swapErrorMessage={swapErrorMessage}\n    />,\n    true,\n    true,\n    'confirmLimitOrderModal',\n  )\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approvalState === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approvalState, approvalSubmitted])\n\n  const showApproveFlow =\n    !inputError && (approvalState === ApprovalState.NOT_APPROVED || approvalState === ApprovalState.PENDING)\n\n  const isSideFooter = isChartExpanded || isChartDisplayed\n\n  const isAccessTokenSupported = SUPPORT_ONLY_BSC.includes(chainId)\n\n  return (\n    <Page\n      removePadding={isChartExpanded}\n      hideFooterOnDesktop={isSideFooter}\n      noMinHeight\n      helpUrl={LIMIT_ORDERS_DOCS_URL}\n    >\n      <ClaimWarning />\n      <Flex\n        width=\"100%\"\n        height=\"100%\"\n        justifyContent=\"center\"\n        position=\"relative\"\n        mb={isSideFooter ? null : '24px'}\n        mt={isChartExpanded ? '24px' : null}\n      >\n        {isDesktop && (\n          <Flex width={isChartExpanded ? '100%' : '50%'} maxWidth=\"928px\" flexDirection=\"column\">\n            <PriceChartContainer\n              inputCurrencyId={currencyIds.input}\n              inputCurrency={currencies.input}\n              outputCurrencyId={currencyIds.output}\n              outputCurrency={currencies.output}\n              isChartExpanded={isChartExpanded}\n              setIsChartExpanded={setIsChartExpanded}\n              isChartDisplayed={isChartDisplayed}\n              currentSwapPrice={singleTokenPrice}\n              isFullWidthContainer\n            />\n            {isChartDisplayed && <Box mb=\"48px\" />}\n            <Box width=\"100%\">\n              <LimitOrderTable isCompact={isTablet} />\n            </Box>\n          </Flex>\n        )}\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          <StyledSwapContainer $isChartExpanded={false}>\n            <StyledInputCurrencyWrapper>\n              <AppBody>\n                <CurrencyInputHeader\n                  title={t('Limit')}\n                  subtitle={t('Place a limit order to trade at a set price')}\n                  setIsChartDisplayed={setIsChartDisplayed}\n                  isChartDisplayed={isChartDisplayed}\n                />\n                <Wrapper id=\"limit-order-page\" style={{ minHeight: '412px' }}>\n                  <AutoColumn gap=\"sm\">\n                    <CurrencyInputPanel\n                      label={independentField === Field.OUTPUT ? t('From (estimated)') : t('From')}\n                      value={formattedAmounts.input}\n                      showQuickInputButton\n                      showMaxButton\n                      maxAmount={maxAmountInput}\n                      currency={currencies.input}\n                      onUserInput={handleTypeInput}\n                      onPercentInput={handlePercentInput}\n                      onMax={handleMaxInput}\n                      onCurrencySelect={handleInputSelect}\n                      otherCurrency={currencies.output}\n                      id=\"limit-order-currency-input\"\n                      showCommonBases\n                      commonBasesType={CommonBasesType.SWAP_LIMITORDER}\n                      showUSDPrice\n                    />\n\n                    <Box id=\"yo\">\n                      {isAccessTokenSupported && currencies.input && currencies.input.isToken && (\n                        <AccessRisk token={currencies.input} />\n                      )}\n                    </Box>\n\n                    <SwitchTokensButton\n                      handleSwitchTokens={handleTokenSwitch}\n                      color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? 'primary' : 'text'}\n                    />\n                    <CurrencyInputPanel\n                      value={formattedAmounts.output}\n                      onUserInput={handleTypeOutput}\n                      label={independentField === Field.INPUT ? t('To (estimated)') : t('To')}\n                      showMaxButton={false}\n                      currency={currencies.output}\n                      onCurrencySelect={handleOutputSelect}\n                      otherCurrency={currencies.output}\n                      id=\"limit-order-currency-output\"\n                      showCommonBases\n                      commonBasesType={CommonBasesType.SWAP_LIMITORDER}\n                      showUSDPrice\n                    />\n                    <Box>\n                      {isAccessTokenSupported && currencies.output && currencies.output.isToken && (\n                        <AccessRisk token={currencies.output} />\n                      )}\n                    </Box>\n                    <LimitOrderPrice\n                      id=\"limit-order-desired-rate-input\"\n                      value={formattedAmounts.price}\n                      onUserInput={handleTypeDesiredRate}\n                      inputCurrency={currencies.input}\n                      outputCurrency={currencies.output}\n                      percentageRateDifference={percentageRateDifference}\n                      rateType={rateType}\n                      handleRateType={handleRateType}\n                      price={price}\n                      handleResetToMarketPrice={handleResetToMarketPrice}\n                      realExecutionPriceAsString={!inputError ? realExecutionPriceAsString : undefined}\n                      disabled={!formattedAmounts.input && !formattedAmounts.output}\n                    />\n                  </AutoColumn>\n                  <Box mt=\"0.25rem\">\n                    {!account ? (\n                      <ConnectWalletButton width=\"100%\" />\n                    ) : showApproveFlow ? (\n                      <Button\n                        variant=\"primary\"\n                        onClick={handleApprove}\n                        id=\"enable-order-button\"\n                        width=\"100%\"\n                        disabled={approvalSubmitted}\n                      >\n                        {approvalSubmitted\n                          ? t('Enabling %asset%', { asset: currencies.input?.symbol })\n                          : t('Enable %asset%', { asset: currencies.input?.symbol })}\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"primary\"\n                        onClick={() => {\n                          setSwapState({\n                            tradeToConfirm: trade,\n                            attemptingTxn: false,\n                            swapErrorMessage: undefined,\n                            txHash: undefined,\n                          })\n                          showConfirmModal()\n                        }}\n                        id=\"place-order-button\"\n                        width=\"100%\"\n                        disabled={!!inputError || realExecutionPriceAsString === 'never executes'}\n                      >\n                        {inputError || realExecutionPriceAsString === 'never executes'\n                          ? inputError || t(\"Can't execute this order\")\n                          : t('Place an Order')}\n                      </Button>\n                    )}\n                  </Box>\n                  <Flex mt=\"16px\" justifyContent=\"center\">\n                    <Link external href=\"https://www.gelato.network/\">\n                      <img\n                        src={\n                          theme.isDark ? '/images/powered_by_gelato_white.svg' : '/images/powered_by_gelato_black.svg'\n                        }\n                        alt=\"Powered by Gelato\"\n                        width=\"170px\"\n                        height=\"48px\"\n                      />\n                    </Link>\n                  </Flex>\n                </Wrapper>\n              </AppBody>\n            </StyledInputCurrencyWrapper>\n          </StyledSwapContainer>\n          {!isDesktop && (\n            <Flex mt=\"24px\" width=\"100%\">\n              <LimitOrderTable isCompact />\n            </Flex>\n          )}\n          {isSideFooter && (\n            <Box display={['none', null, null, 'block']} width=\"100%\" height=\"100%\">\n              <SwapUI.Footer variant=\"side\" helpUrl={LIMIT_ORDERS_DOCS_URL} />\n            </Box>\n          )}\n        </Flex>\n      </Flex>\n      {/* Fixed position, doesn't take normal DOM space */}\n      <BottomDrawer\n        content={\n          <PriceChartContainer\n            inputCurrencyId={currencyIds.input}\n            inputCurrency={currencies.input}\n            outputCurrencyId={currencyIds.output}\n            outputCurrency={currencies.output}\n            isChartExpanded={isChartExpanded}\n            setIsChartExpanded={setIsChartExpanded}\n            isChartDisplayed={isChartDisplayed}\n            currentSwapPrice={singleTokenPrice}\n            isFullWidthContainer\n            isMobile\n          />\n        }\n        isOpen={isChartDisplayed}\n        setIsOpen={setIsChartDisplayed}\n      />\n    </Page>\n  )\n}\n\nexport default LimitOrders\n","import LimitOrders from '../views/LimitOrders'\n\nconst LimitOrdersPage = () => {\n  return <LimitOrders />\n}\n\nexport default LimitOrdersPage\n","import styled, { useTheme } from \"styled-components\";\nimport ButtonMenu from \"./ButtonMenu\";\nimport ButtonMenuItem from \"./ButtonMenuItem\";\n\nconst Wrapper = styled.div`\n  & > div {\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.input};\n    border: 0;\n  }\n  & button {\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.input};\n    border-radius: 20px 20px 0 0;\n  }\n`;\n\ninterface ButtonTabMenuProps {\n  activeIndex: number;\n  itemList: string[];\n  onItemClick: (index: number) => void;\n}\n\nconst ButtonTabMenu: React.FC<React.PropsWithChildren<ButtonTabMenuProps>> = ({\n  activeIndex,\n  itemList,\n  onItemClick,\n}) => {\n  const theme = useTheme();\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} onItemClick={onItemClick}>\n        {itemList.map((content, idx) => (\n          <ButtonMenuItem\n            key={content}\n            style={{\n              color: idx === activeIndex ? theme.colors.text : theme.colors.textSubtle,\n              backgroundColor: idx === activeIndex ? theme.card.background : theme.colors.input,\n            }}\n          >\n            {content}\n          </ButtonMenuItem>\n        ))}\n      </ButtonMenu>\n    </Wrapper>\n  );\n};\n\nexport default ButtonTabMenu;\n","import React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  const theme = useTheme();\n  const primaryColor = theme.isDark ? \"#3C3742\" : \"#e9eaeb\";\n  const secondaryColor = theme.isDark ? \"#666171\" : \"#bdc2c4\";\n\n  return (\n    <Svg viewBox=\"0 0 72 72\" {...props}>\n      <path\n        d=\"M72 36C72 55.8823 55.8823 72 36 72C16.1177 72 0 55.8823 0 36C0 16.1177 16.1177 0 36 0C55.8823 0 72 16.1177 72 36Z\"\n        fill={primaryColor}\n      />\n      <mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"3\" y=\"3\" width=\"66\" height=\"66\">\n        <path\n          d=\"M68.25 36C68.25 53.8112 53.8112 68.25 36 68.25C18.1888 68.25 3.75 53.8112 3.75 36C3.75 18.1888 18.1888 3.75 36 3.75C53.8112 3.75 68.25 18.1888 68.25 36Z\"\n          fill=\"#C4C4C4\"\n        />\n      </mask>\n      <g mask=\"url(#mask0)\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M20.9927 23.2654C26.1289 23.1362 30.0824 27.7278 29.2039 32.7879L27.6838 41.5445C30.2298 41.0514 32.9304 40.7875 35.7229 40.7875C37.7063 40.7875 39.6424 40.9206 41.5089 41.1741L49.2862 29.5726C51.7713 25.8657 56.7909 24.8751 60.4978 27.3602C64.7827 30.2326 65.3155 36.33 61.5938 39.9021L55.2585 45.9828C59.9045 49.0009 63.1305 53.2977 63.1306 58.4066V62.322C63.1306 67.644 59.6097 72.0998 54.6877 75.1077C49.7272 78.1391 43.0165 79.9412 35.7229 79.9412C28.4292 79.9412 21.7186 78.1391 16.7581 75.1077C11.836 72.0998 8.31519 67.644 8.31519 62.322V58.4067C8.31522 54.4286 10.2963 50.9169 13.3384 48.1585L13.0101 31.6154C12.9208 27.115 16.4929 23.3785 20.9927 23.2654ZM15.617 49.1514C15.6003 49.0112 15.5903 48.8688 15.5874 48.7246L15.2471 31.571C15.1822 28.3014 17.7798 25.5842 21.049 25.502C24.7712 25.4084 27.637 28.733 26.9996 32.4052L24.8971 44.5163C25.6681 44.2915 26.4607 44.0899 27.2726 43.9131C29.9138 43.338 32.7585 43.0248 35.7229 43.0248C38.1625 43.0248 40.5211 43.237 42.7519 43.6326C42.8725 43.2609 43.0459 42.8995 43.2742 42.5589L51.1446 30.8185C52.9416 28.1379 56.5714 27.4216 59.252 29.2186C62.3505 31.2957 62.7358 35.7049 60.0446 38.2879L51.5469 46.4441C52.264 46.7988 52.9486 47.1771 53.5975 47.577C58.1074 50.3568 60.8932 54.1829 60.8932 58.4066V62.322C60.8932 70.8172 49.6241 77.7039 35.7229 77.7039C21.8217 77.7039 10.5525 70.8172 10.5525 62.322V58.4067C10.5526 54.9322 12.4377 51.7266 15.617 49.1514Z\"\n          fill={secondaryColor}\n        />\n        <path\n          d=\"M60.8932 62.3221C60.8932 70.8173 49.624 77.704 35.7228 77.704C21.8216 77.704 10.5525 70.8173 10.5525 62.3221V58.4067H60.8932V62.3221Z\"\n          fill={primaryColor}\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M26.9995 32.4051C27.637 28.733 24.7711 25.4083 21.0489 25.5019C17.7797 25.5842 15.1821 28.3013 15.247 31.5709L15.5874 48.7245C15.5903 48.8687 15.6002 49.0111 15.617 49.1513C12.4376 51.7266 10.5525 54.9321 10.5525 58.4066C10.5525 66.9018 21.8216 73.7885 35.7228 73.7885C49.624 73.7885 60.8932 66.9018 60.8932 58.4066C60.8932 53.5752 57.2481 49.264 51.5468 46.444L60.0445 38.2879C62.7358 35.7048 62.3504 31.2956 59.252 29.2185C56.5714 27.4215 52.9416 28.1378 51.1446 30.8184L43.2742 42.5588C43.0458 42.8994 42.8724 43.2609 42.7519 43.6326C40.521 43.2369 38.1625 43.0248 35.7228 43.0248C31.8473 43.0248 28.1763 43.56 24.897 44.5162L26.9995 32.4051Z\"\n          fill={primaryColor}\n        />\n        <path\n          d=\"M32.0873 57.2881C32.0873 59.6049 30.8352 61.4831 29.2906 61.4831C27.746 61.4831 26.4939 59.6049 26.4939 57.2881C26.4939 54.9712 27.746 53.093 29.2906 53.093C30.8352 53.093 32.0873 54.9712 32.0873 57.2881Z\"\n          fill={secondaryColor}\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M28.891 54.0353C29.461 54.8903 29.8499 56.1359 29.8499 57.5677C29.8499 58.1855 30.3508 58.6864 30.9686 58.6864C31.5864 58.6864 32.0873 58.1855 32.0873 57.5677C32.0873 55.7558 31.5997 54.0649 30.7526 52.7943C29.9107 51.5314 28.6248 50.5759 27.0532 50.5759C25.4816 50.5759 24.1957 51.5314 23.3538 52.7943C22.5067 54.0649 22.0191 55.7558 22.0191 57.5677C22.0191 58.55 22.1622 59.4908 22.4244 60.3463C22.6055 60.937 23.2311 61.2691 23.8218 61.088C24.4125 60.9069 24.7446 60.2813 24.5635 59.6906C24.3685 59.0543 24.2565 58.3349 24.2565 57.5677C24.2565 56.1359 24.6454 54.8903 25.2154 54.0353C25.7906 53.1725 26.4624 52.8133 27.0532 52.8133C27.644 52.8133 28.3158 53.1725 28.891 54.0353Z\"\n          fill={secondaryColor}\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M48.1883 54.0353C48.7582 54.8903 49.1472 56.1359 49.1472 57.5677C49.1472 58.1855 49.648 58.6864 50.2658 58.6864C50.8837 58.6864 51.3845 58.1855 51.3845 57.5677C51.3845 55.7558 50.8969 54.0649 50.0498 52.7943C49.208 51.5314 47.9221 50.5759 46.3505 50.5759C44.7788 50.5759 43.4929 51.5314 42.6511 52.7943C41.804 54.0649 41.3164 55.7558 41.3164 57.5677C41.3164 58.55 41.4594 59.4908 41.7216 60.3463C41.9027 60.937 42.5284 61.2691 43.1191 61.088C43.7098 60.9069 44.0418 60.2813 43.8608 59.6906C43.6657 59.0543 43.5538 58.3349 43.5538 57.5677C43.5538 56.1359 43.9427 54.8903 44.5127 54.0353C45.0879 53.1725 45.7597 52.8133 46.3505 52.8133C46.9412 52.8133 47.613 53.1725 48.1883 54.0353Z\"\n          fill={secondaryColor}\n        />\n        <path\n          d=\"M51.3844 57.2881C51.3844 59.6049 50.1323 61.4831 48.5877 61.4831C47.0431 61.4831 45.791 59.6049 45.791 57.2881C45.791 54.9712 47.0431 53.093 48.5877 53.093C50.1323 53.093 51.3844 54.9712 51.3844 57.2881Z\"\n          fill={secondaryColor}\n        />\n        <path\n          d=\"M34.0221 25.9463V25.2697C34.0221 24.32 34.2121 23.5247 34.5919 22.8836C34.9956 22.2426 35.5297 21.6134 36.1945 20.9961C36.8118 20.4026 37.4172 19.8921 38.0108 19.4648C38.6043 19.0374 39.091 18.5863 39.4709 18.1115C39.8508 17.6367 40.0407 17.0787 40.0407 16.4377C40.0407 15.5118 39.7083 14.8589 39.0436 14.479C38.4025 14.0754 37.3223 13.8736 35.8028 13.8736C34.8056 13.8736 33.8203 14.0041 32.8469 14.2653C31.8735 14.5027 31.0425 14.8114 30.354 15.1912V10.3835C31.2325 9.95615 32.2652 9.61189 33.4523 9.35073C34.6632 9.08957 35.9808 8.95898 37.4054 8.95898C40.1594 8.95898 42.2606 9.5644 43.7088 10.7752C45.1571 11.9623 45.8812 13.6005 45.8812 15.6898C45.8812 17.0194 45.6082 18.0996 45.0621 18.9306C44.5161 19.7378 43.7207 20.5688 42.6761 21.4235C41.7976 22.1595 41.0616 22.8005 40.4681 23.3466C39.8745 23.8689 39.5777 24.5812 39.5777 25.4834V25.9463H34.0221ZM33.7728 32.2498V28.1187H39.7914V32.2498H33.7728Z\"\n          fill={secondaryColor}\n        />\n      </g>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M71.9838 37.09L69.7348 37.0231C69.7449 36.6834 69.75 36.3423 69.75 36C69.75 35.6577 69.7449 35.3166 69.7348 34.9769L71.9838 34.91C71.9946 35.272 72 35.6354 72 36C72 36.3646 71.9946 36.728 71.9838 37.09ZM71.8544 32.7398L69.6134 32.941C69.5523 32.2603 69.471 31.5857 69.3702 30.9176L71.5949 30.5818C71.7025 31.2945 71.7892 32.014 71.8544 32.7398ZM71.2052 28.4414L69.0048 28.9115C68.8622 28.2441 68.6999 27.5841 68.5185 26.932L70.6861 26.3289C70.8798 27.0248 71.053 27.7292 71.2052 28.4414ZM70.0397 24.2525L67.9128 24.9864C67.6906 24.3424 67.4494 23.7072 67.1899 23.0815L69.2683 22.2196C69.5452 22.8874 69.8026 23.5652 70.0397 24.2525ZM68.3746 20.237L66.3524 21.2235C66.0538 20.6114 65.7373 20.0097 65.4034 19.419L67.3622 18.3119C67.7183 18.942 68.0561 19.584 68.3746 20.237ZM66.2353 16.4517L64.347 17.6751C63.977 17.104 63.5901 16.5448 63.1872 15.998L64.9984 14.6631C65.4281 15.2462 65.8407 15.8426 66.2353 16.4517ZM63.656 12.952L61.9283 14.3934C61.4925 13.8711 61.0413 13.3621 60.5752 12.8671L62.2132 11.3246C62.7102 11.8523 63.1914 12.3951 63.656 12.952ZM60.6754 9.78678L59.1329 11.4248C58.6379 10.9587 58.1289 10.5074 57.6066 10.0717L59.048 8.34397C59.6049 8.80865 60.1477 9.28984 60.6754 9.78678ZM57.3369 7.00159L56.002 8.8128C55.4552 8.40985 54.896 8.02303 54.3249 7.65302L55.5482 5.76468C56.1574 6.15933 56.7538 6.57187 57.3369 7.00159ZM53.6881 4.63782L52.581 6.5966C51.9903 6.26271 51.3886 5.94615 50.7765 5.64759L51.7629 3.62536C52.416 3.94392 53.058 4.28165 53.6881 4.63782ZM49.7804 2.7317L48.9185 4.81008C48.2928 4.55061 47.6576 4.30943 47.0136 4.08723L47.7475 1.96028C48.4348 2.19743 49.1126 2.4548 49.7804 2.7317ZM45.6711 1.31385L45.068 3.48152C44.4159 3.3001 43.7559 3.13777 43.0885 2.99517L43.5586 0.794831C44.2708 0.947003 44.9752 1.12024 45.6711 1.31385ZM41.4182 0.405049L41.0824 2.62985C40.4143 2.529 39.7397 2.44772 39.059 2.38662L39.2602 0.14563C39.986 0.210778 40.7055 0.297466 41.4182 0.405049ZM37.09 0.0161859C36.728 0.0054207 36.3646 0 36 0C35.6354 0 35.272 0.00542073 34.91 0.016186L34.9769 2.26519C35.3166 2.25509 35.6577 2.25 36 2.25C36.3423 2.25 36.6834 2.25509 37.0231 2.26519L37.09 0.0161859ZM32.7398 0.145631L32.941 2.38662C32.2603 2.44772 31.5857 2.529 30.9176 2.62985L30.5818 0.405049C31.2945 0.297467 32.014 0.210779 32.7398 0.145631ZM28.4414 0.794832L28.9115 2.99517C28.2441 3.13777 27.5841 3.3001 26.932 3.48152L26.3289 1.31386C27.0248 1.12024 27.7292 0.947004 28.4414 0.794832ZM24.2525 1.96028L24.9864 4.08723C24.3424 4.30944 23.7072 4.55061 23.0815 4.81008L22.2196 2.7317C22.8874 2.45481 23.5652 2.19743 24.2525 1.96028ZM20.237 3.62536L21.2235 5.64759C20.6114 5.94616 20.0097 6.26272 19.419 6.5966L18.3119 4.63783C18.942 4.28165 19.584 3.94392 20.237 3.62536ZM16.4517 5.76469L17.6751 7.65302C17.104 8.02303 16.5448 8.40985 15.998 8.81281L14.6631 7.00159C15.2462 6.57188 15.8426 6.15933 16.4517 5.76469ZM12.952 8.34398L14.3934 10.0717C13.8711 10.5075 13.3621 10.9587 12.8671 11.4248L11.3246 9.78679C11.8523 9.28984 12.3951 8.80865 12.952 8.34398ZM9.78678 11.3246L11.4248 12.8671C10.9587 13.3621 10.5074 13.8711 10.0717 14.3934L8.34397 12.952C8.80865 12.3951 9.28984 11.8523 9.78678 11.3246ZM7.00159 14.6631L8.8128 15.998C8.40985 16.5448 8.02303 17.104 7.65302 17.6751L5.76468 16.4518C6.15933 15.8426 6.57187 15.2462 7.00159 14.6631ZM4.63782 18.3119L6.5966 19.419C6.26271 20.0097 5.94615 20.6114 5.64759 21.2235L3.62536 20.2371C3.94392 19.584 4.28165 18.942 4.63782 18.3119ZM2.7317 22.2196L4.81008 23.0815C4.55061 23.7072 4.30943 24.3424 4.08723 24.9864L1.96028 24.2525C2.19743 23.5652 2.4548 22.8874 2.7317 22.2196ZM1.31385 26.3289L3.48152 26.932C3.3001 27.5841 3.13777 28.2441 2.99517 28.9115L0.794831 28.4414C0.947003 27.7292 1.12024 27.0248 1.31385 26.3289ZM0.405049 30.5818L2.62985 30.9176C2.529 31.5857 2.44772 32.2603 2.38662 32.941L0.14563 32.7398C0.210778 32.014 0.297466 31.2945 0.405049 30.5818ZM0.0161859 34.91C0.0054207 35.272 0 35.6354 0 36C0 36.3646 0.00542073 36.728 0.016186 37.09L2.26519 37.0231C2.25509 36.6834 2.25 36.3423 2.25 36C2.25 35.6577 2.25509 35.3166 2.26519 34.9769L0.0161859 34.91ZM0.145631 39.2602L2.38662 39.059C2.44772 39.7397 2.529 40.4143 2.62985 41.0824L0.40505 41.4182C0.297467 40.7055 0.210779 39.986 0.145631 39.2602ZM0.794833 43.5586L2.99517 43.0885C3.13777 43.7559 3.3001 44.4159 3.48152 45.068L1.31386 45.6711C1.12024 44.9752 0.947004 44.2708 0.794833 43.5586ZM1.96028 47.7475L4.08723 47.0136C4.30944 47.6576 4.55061 48.2928 4.81008 48.9185L2.7317 49.7804C2.45481 49.1126 2.19743 48.4348 1.96028 47.7475ZM3.62536 51.763L5.64759 50.7765C5.94616 51.3886 6.26272 51.9903 6.5966 52.581L4.63783 53.6881C4.28165 53.058 3.94392 52.416 3.62536 51.763ZM5.76469 55.5482L7.65302 54.3249C8.02303 54.896 8.40985 55.4552 8.81281 56.002L7.00159 57.3369C6.57188 56.7538 6.15933 56.1574 5.76469 55.5482ZM8.34398 59.048L10.0717 57.6066C10.5075 58.1289 10.9587 58.6379 11.4248 59.1329L9.78679 60.6754C9.28984 60.1477 8.80865 59.6049 8.34398 59.048ZM11.3246 62.2132L12.8671 60.5752C13.3621 61.0413 13.8711 61.4925 14.3934 61.9283L12.952 63.656C12.3951 63.1914 11.8523 62.7102 11.3246 62.2132ZM14.6631 64.9984L15.998 63.1872C16.5448 63.5901 17.104 63.977 17.6751 64.347L16.4518 66.2353C15.8426 65.8407 15.2462 65.4281 14.6631 64.9984ZM18.3119 67.3622L19.419 65.4034C20.0097 65.7373 20.6114 66.0538 21.2235 66.3524L20.2371 68.3746C19.584 68.0561 18.942 67.7184 18.3119 67.3622ZM22.2196 69.2683L23.0815 67.1899C23.7072 67.4494 24.3424 67.6906 24.9864 67.9128L24.2525 70.0397C23.5652 69.8026 22.8874 69.5452 22.2196 69.2683ZM26.3289 70.6861L26.932 68.5185C27.5841 68.6999 28.2441 68.8622 28.9115 69.0048L28.4414 71.2052C27.7292 71.053 27.0248 70.8798 26.3289 70.6861ZM30.5818 71.595L30.9176 69.3702C31.5857 69.471 32.2603 69.5523 32.941 69.6134L32.7398 71.8544C32.014 71.7892 31.2945 71.7025 30.5818 71.595ZM34.91 71.9838L34.9769 69.7348C35.3166 69.7449 35.6577 69.75 36 69.75C36.3423 69.75 36.6834 69.7449 37.0231 69.7348L37.09 71.9838C36.728 71.9946 36.3646 72 36 72C35.6354 72 35.272 71.9946 34.91 71.9838ZM39.2602 71.8544L39.059 69.6134C39.7397 69.5523 40.4143 69.471 41.0824 69.3702L41.4182 71.5949C40.7055 71.7025 39.986 71.7892 39.2602 71.8544ZM43.5586 71.2052L43.0885 69.0048C43.7559 68.8622 44.4159 68.6999 45.068 68.5185L45.6711 70.6861C44.9752 70.8798 44.2708 71.053 43.5586 71.2052ZM47.7475 70.0397L47.0136 67.9128C47.6576 67.6906 48.2928 67.4494 48.9185 67.1899L49.7804 69.2683C49.1126 69.5452 48.4348 69.8026 47.7475 70.0397ZM51.7629 68.3746L50.7765 66.3524C51.3886 66.0538 51.9903 65.7373 52.581 65.4034L53.6881 67.3622C53.058 67.7183 52.416 68.0561 51.7629 68.3746ZM55.5482 66.2353L54.3249 64.347C54.896 63.977 55.4552 63.5901 56.002 63.1872L57.3369 64.9984C56.7538 65.4281 56.1574 65.8407 55.5482 66.2353ZM59.048 63.656L57.6066 61.9283C58.1289 61.4925 58.6379 61.0413 59.1329 60.5752L60.6754 62.2132C60.1477 62.7102 59.6049 63.1914 59.048 63.656ZM62.2132 60.6754L60.5752 59.1329C61.0413 58.6379 61.4925 58.1289 61.9283 57.6066L63.656 59.048C63.1914 59.6049 62.7102 60.1477 62.2132 60.6754ZM64.9984 57.3369L63.1872 56.002C63.5901 55.4552 63.977 54.896 64.347 54.3249L66.2353 55.5482C65.8407 56.1574 65.4281 56.7538 64.9984 57.3369ZM67.3622 53.6881L65.4034 52.581C65.7373 51.9903 66.0538 51.3886 66.3524 50.7765L68.3746 51.7629C68.0561 52.416 67.7184 53.058 67.3622 53.6881ZM69.2683 49.7804L67.1899 48.9185C67.4494 48.2928 67.6906 47.6576 67.9128 47.0136L70.0397 47.7475C69.8026 48.4348 69.5452 49.1126 69.2683 49.7804ZM70.6861 45.6711L68.5185 45.068C68.6999 44.4159 68.8622 43.7559 69.0048 43.0885L71.2052 43.5586C71.053 44.2708 70.8798 44.9752 70.6861 45.6711ZM71.595 41.4182L69.3702 41.0824C69.471 40.4143 69.5523 39.7397 69.6134 39.059L71.8544 39.2602C71.7892 39.986 71.7025 40.7055 71.595 41.4182Z\"\n        fill={secondaryColor}\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M5 7C5 6.44772 4.55228 6 4 6C3.44772 6 3 6.44772 3 7V18C3 19.1046 3.89543 20 5 20H20C20.5523 20 21 19.5523 21 19C21 18.4477 20.5523 18 20 18H5V7Z\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M19 17H7C6.44772 17 6 16.5523 6 16V12C6 11.4477 6.44772 11 7 11H10V10C10 9.44772 10.4477 9 11 9H14V7C14 6.44772 14.4477 6 15 6H19C19.5523 6 20 6.44772 20 7V16C20 16.5523 19.5523 17 19 17ZM16 8H18V15H16V8ZM12 15H14V11H12V15ZM10 13H8V15H10V13Z\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 23 22\" {...props}>\n      <path d=\"M21.5 1l-20 20\" strokeWidth={2} stroke=\"currentColor\" strokeLinecap=\"round\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.033 19H19.5a1 1 0 100-2H9.033l-2 2zm3-3H18.5a1 1 0 001-1V6.533l-2 2V14h-2v-3.467l-2 2V14h-1.467l-2 2zm.936-8H10.5a1 1 0 00-1 1v.469L10.969 8zm-2 2L5.5 13.469V11a1 1 0 011-1h2.469zM4.5 14.469l-2 2V6a1 1 0 012 0v8.469z\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from \"styled-components\";\nimport { typography, TypographyProps } from \"styled-system\";\n\nexport const Td = styled.td<TypographyProps>`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 16px;\n  vertical-align: middle;\n\n  ${typography}\n`;\n\nexport const Th = styled(Td).attrs({ as: \"th\" })`\n  color: ${({ theme }) => theme.colors.secondary};\n  font-size: 12px;\n  text-transform: uppercase;\n`;\n","import styled from \"styled-components\";\nimport { space } from \"styled-system\";\nimport { Td } from \"./Cell\";\n\nconst Table = styled.table`\n  max-width: 100%;\n  width: 100%;\n\n  tbody tr:last-child {\n    ${Td} {\n      border-bottom: 0;\n    }\n  }\n\n  ${space}\n`;\n\nexport default Table;\n"],"names":["addMonths","dirtyDate","dirtyAmount","_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","Z","arguments","date","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","amount","_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","setFullYear","getFullYear","fromUnixTime","dirtyUnixTime","unixTime","_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__","_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__","startOfHour","setMinutes","_typeof","obj","Symbol","iterator","constructor","prototype","sub","duration","requiredArgs","years","toInteger","months","weeks","days","hours","minutes","seconds","dateWithoutMonths","subMonths","dateWithoutDays","subDays","secondstoSub","minutestoSub","baseTimes","__webpack_require__","castFunction","nativeMin","Math","min","module","exports","n","iteratee","index","length","result","window","__NEXT_P","push","GradientModalHeader","styled","ModalHeader","param","theme","colors","gradientBubblegum","__webpack_exports__","id","onSuccess","onDismiss","checks","header","subtitle","hideConfirm","modalHeader","useState","checkState","setCheckState","t","useTranslation","handleSetAcknowledgeRisk","useCallback","currentKey","map","check","key","_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_7__","_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_8__","value","handleConfirm","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","ModalContainer","title","$minWidth","jsx","ModalTitle","Heading","scale","ModalBody","p","maxWidth","Box","maxHeight","overflowY","as","mb","Text","color","label","htmlFor","style","display","cursor","marginBottom","Flex","alignItems","div","flex","alignSelf","paddingTop","Checkbox","checked","onChange","ml","content","Button","concat","width","onClick","disabled","some","SubgraphStatus","customDescriptions","OK","WARNING","NOT_OK","UNKNOWN","hooks_useSubgraphHealth","subgraphName","status","currentBlock","chainHeadBlock","latestBlock","blockDifference","sgHealth","setSgHealth","useSlowRefreshEffect","currentBlockNumber","getSubgraphHealth","_async_to_generator","_ref","indexingStatusForCurrentVersion","isHealthy","chainHeadBlockDifference","error","Promise","all","request","GRAPH_HEALTH","gql","resolve","bscRpcProvider","_sliced_to_array","apply","_state","sent","health","parseInt","chains","number","console","StyledCard","Card","IndicatorWrapper","Dot","$color","TooltipContent","description","secondRemainingBlockSync","blockNumberFromSubgraph","jsx_runtime","pb","strong","components_SubgraphHealthIndicator","inline","obeyGlobalSetting","useSubgraphHealth","alwaysShowIndicator","useSubgraphHealthIndicatorManager","forceIndicatorDisplay","indicatorProps","delayed","slow","healthy","BSC_BLOCK_TIME","current","sgStatus","useTooltip","placement","targetRef","tooltipVisible","tooltip","_param_obeyGlobalSetting","justifyContent","ref","InfoIcon","position","bottom","right","data-test","EMPTY_ARRAY","useFastRefreshEffect","effect","deps","chainId","useActiveChainId","_useSWR_data","useSWR","FAST_INTERVAL","data","useEffect","bind","_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_4__","SLOW_INTERVAL","ORDER_CATEGORY","LimitOrderStatus","PercentageDirection","StatusElementType","_obj","utils_getPriceForOneToken","inputAmount","outputAmount","equalTo","Price","baseAmount","quoteAmount","getDesiredInput","outputValue","exchangeRate","inputCurrency","outputCurrency","isInverted","parsedOutAmount","tryParseAmount","parsedExchangeRate","invertedResultAsFraction","multiply","asFraction","CurrencyAmount","toFixed","resultAsFraction","divide","JSBI","BIG_INT_TEN","decimals","quotient","toString","getDesiredOutput","inputValue","parsedInputAmount","useOrderState","useSelector","state","limitOrders","useOrderActionHandlers","dispatch","useDispatch","onCurrencySelection","field","currency","selectCurrency","currencyId","isToken","address","isNative","onSwitchTokens","switchCurrencies","onUserInput","typedValue","typeInput","onChangeRateType","rateType","setRateType","getErrorMessage","account","wrappedCurrencies","currencies","currencyBalances","parsedAmounts","trade","price","input","output","toLowerCase","hasAtLeastOneParsedAmount","tradeIsNotAvailable","route","lessThan","symbol","Rate","executionPrice","invert","greaterThan","useDerivedOrderInfo","singleTokenTrade","isExactIn","useActiveWeb3React","independentField","basisField","Field","useCurrency","inputCurrencyId","outputCurrencyId","useMemo","undefined","wrappedCurrency","relevantTokenBalances","useCurrencyBalances","isOutputBasis","isDesiredRateUpdate","desiredOutputAsCurrencyAmount","desiredInputAsCurrencyAmount","desiredOutputAsString","toSignificant","parsedTypedAmount","tradeAmount","bestTradeExactIn","useTradeExactIn","bestTradeExactOut","useTradeExactOut","oneInputToken","singleTokenPrice","parseFloat","getPriceForOneToken","formattedAmounts","rawAmounts","inputError","_define_property","currencyIds","parseIndependentFieldURLParameter","urlParam","parseCurrencyFromURLParameter","valid","isAddress","toUpperCase","queryParametersToSwapState","parsedQs","DEFAULT_INPUT_CURRENCY","DEFAULT_OUTPUT_CURRENCY","exactAmount","Number","exactField","useDefaultsFromURLSearch","useAppDispatch","query","useRouter","setResult","parsed","replaceLimitOrdersState","Open","Expired","History","OPEN","CANCELLED","EXECUTED","OPEN_ORDERS_SWR_KEY","EXECUTED_CANCELLED_ORDERS_SWR_KEY","EXECUTED_EXPIRED_ORDERS_SWR_KEY","newOrdersFirst","a","b","updatedAt","syncOrderToLocalStorage","_","gelatoLimitOrders","orders","syncStatuses","allOrdersLS","lsOrdersHashSet","newOrders","getLSOrders","hashOrderSet","filter","order","has","hashOrder","saveOrders","typeOrdersLS","type","confOrder","orderFetched","find","allSettled","getOrder","results","forEach","oldOrder","newOrder","confOrderPromiseResult","graphOrderPromiseResult","saveOrder","reason","useOpenOrders","turnOn","useGelatoLimitOrdersLib","startFetch","openOrdersLS","pendingOrdersLS","getOpenOrders","e","isExpired","_to_consumable_array","pendingOrder","sort","refreshInterval","useHistoryOrders","acc","canOrders","exeOrders","executedOrdersLS","cancelledOrdersLS","pendingCancelledOrdersLS","getCancelledOrders","getExecutedOrders","useExpiredOrders","expiredOrdersLS","limitOrders_useGelatoLimitOrdersHandlers","mutate","useSWRConfig","addTransaction","useTransactionAdder","handleLimitOrderSubmission","orderToSubmit","overrides","witness","payload","tx","now","signer","encodeLimitOrderSubmissionWithSecret","inputToken","outputToken","owner","sendTransaction","_object_spread_props","_object_spread","to","BigNumber","round","summary","translatableSummary","text","createdTxHash","hash","handleLimitOrderCancellation","orderToCancel","orderDetails","checkIfOrderExists","Boolean","cancelLimitOrder","gasLimit","inputTokenSymbol","outputTokenSymbol","cancelledTxHash","handleInput","handleCurrencySelection","handleSwitchTokens","handleRateType","limitOrders_useGelatoLimitOrders","derivedOrderInfo","orderState","handlers","useGelatoLimitOrdersHandlers","components_ClaimWarning","memo","useUserLimitOrderAcceptedWarning","hasAcceptedRisk","setHasAcceptedRisk","handleSuccess","useModal","DisclaimerModal","onPresentRiskDisclaimer","components_LimitOrderDisclaimer","Message","variant","mt","MessageText","ol","li","br","InfoCardWrapper","cardBorder","background","ConfirmLimitOrderModal","currentMarketRate","currentMarketRateInverted","limitPrice","limitPriceInverted","percentageRateDifference","onConfirm","attemptingTxn","txHash","customOnDismiss","swapErrorMessage","useTheme","wrappedOutput","isMobile","useMatchBreakpoints","handleDismiss","Modal","headerBackground","gradientCardHeader","LoadingContent","TransactionSubmittedContent","currencyToAdd","TransactionErrorContent","message","OrderContent","currentPriceExchangeRateText","currentPriceExchangeRateTextReversed","limitPriceExchangeRateText","limitPriceExchangeRateTextReversed","Fragment","flexDirection","fontSize","textTransform","mr","CurrencyLogo","ArrowDownIcon","LimitTradeInfoCard","percentage","LimitOrderDisclaimer","bold","flexGrow","flexBasis","small","Spinner","size","CurrencyInputContainer","ColoredIconButton","IconButton","textSubtle","components_CurrencyInputHeader","setIsChartDisplayed","isChartDisplayed","onPresentTransactionsModal","TransactionsModal","currentIsChartDisplayed","ChartDisableIcon","ChartIcon","HistoryIcon","components_ExpiredDate","expiryDate","constants","toLocaleString","year","month","day","justifySelf","minHeight","span","HelpIcon","ABOVE","BELOW","MARKET","getRatePercentageMessage","formattedPercentage","minimumFractionDigits","maximumFractionDigits","inputRegex","RegExp","OrderPriceInput","Input","LabelContainer","DIRECTION_COLORS","components_LimitOrderPrice","handleResetToMarketPrice","realExecutionPriceAsString","assetOneSymbol","assetTwoSymbol","isAtMarketPrice","ratePercentageMessage","priceLabelColor","_realExecutionPriceAsString","startIcon","AutoRenewIcon","event","nextUserInput","target","replace","test","escapeRegExp","autoComplete","autoCorrect","pattern","minLength","maxLength","spellCheck","inputMode","hasCurrencyInfo","SyncAltIcon","ExpiredDate","formatForDisplay","hooks_useFormattedOrderData","gelatoLibrary","isSubmissionPending","useIsTransactionPending","isCancellationPending","rawMinReturn","adjustedMinReturn","minReturn","getAdjustedMinReturn","invertedExecutionPrice","isOpen","isCancelled","isExecuted","bscScanUrls","created","getBlockExploreLink","executed","executedTxHash","cancelled","LimitOrderTable_TextIcon","icon","_param_bold","LimitOrderTable_CurrencyFormat","TextIcon","LimitOrderTable_CellFormat","firstRow","secondRow","DetailLimitOrderModal","formattedOrder","cancellationErrorMessage","_useState_","setCancellationState","onCancelOrder","then","catch","CellFormat","CurrencyFormat","ChevronRightIcon","external","href","BscScanIcon","ConfirmationPendingContent","Tag","outline","TAG","TEXT","StatusElement","element","LimitOrderTable_OrderStatus","showOpenTag","_param_element","_param_showOpenTag","LimitOrderTable_CompactRow","useFormattedOrderData","openDetailLimitOrderModal","OrderStatus","RowStyle","backgroundDisabled","LimitOrderTable_CompactLimitOrderTable","Table","tbody","Td","CompactRow","LimitOrderTable_FullRow","tr","MoreHorizontalIcon","LimitOrderTable_SpaciousLimitOrderTable","thead","Th","textAlign","FullRow","LimitOrderTable_NoOrdersMessage","orderCategory","NoOrdersText","BunnyPlaceholderIcon","LimitOrderTable_LoadingTable","Skeleton","Arrow","primary","LimitOrderTable_TableNavigation","itemsPerPage","ORDERS_PER_PAGE","children","currentPage","setPage","total","Array","isArray","maxPage","ceil","onPageNext","page","onPagePrev","from","paginatedData","slice","LoadingTable","NoOrdersMessage","Grid","gridGap","gridTemplateColumns","px","ArrowBackIcon","ArrowForwardIcon","SubgraphHealthIndicator","OrderTable","historyOrders","openOrders","expiredOrders","isCompact","orderBy","createdAt","Navigation","CompactLimitOrderTable","SpaciousLimitOrderTable","components_LimitOrderTable","activeTab","setIndex","handleClick","tabType","tabMenuItems","height","ButtonTabMenu","itemList","onItemClick","activeIndex","StyledButton","SwitchTokensButton","handleOnClick","AutoColumn","justify","AutoRow","padding","className","ArrowUpDownIcon","Wrapper","StyledSwapContainer","mediaQueries","lg","xxl","$isChartExpanded","StyledInputCurrencyWrapper","utils_getRatePercentageDifference","percentageAsFraction","subtract","Percent","numerator","denominator","views_LimitOrders","native","gasPrice","requiredGas","requiredGasAsCurrencyAmount","inputIsBNB","gasCostInInputTokens","bufferedOutputAmount","realInputAmount","realExecutionPrice","_filter","router","isTablet","isDesktop","useExchangeChartManager","userChartPreference","setUserChartPreference","isChartExpanded","setIsChartExpanded","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","urlLoadedTokens","c","defaultTokens","useAllTokens","importTokensNotInDefault","token","onPresentImportTokenWarningModal","ImportTokenWarningModal","tokens","onCancel","useGelatoLimitOrders","tradeToConfirm","setSwapState","useApproveCallbackFromInputCurrencyAmount","approvalState","approveCallback","approvalSubmitted","setApprovalSubmitted","maxAmountInput","maxAmountSpend","getRatePercentageDifference","handleTypeInput","handleTypeOutput","handleInputSelect","newInputCurrency","newInputCurrencyId","replaceBrowserHistory","handleTypeDesiredRate","handlePercentInput","percent","toExact","handleMaxInput","handleOutputSelect","newOutputCurrency","newOutputCurrencyId","handleApprove","handleConfirmDismiss","handlePlaceOrder","prev","GELATO_NATIVE","handleTokenSwitch","useGasOverhead","useNativeCurrency","useGasPrice","formatUnits","mul","GENERIC_GAS_LIMIT_ORDER_EXECUTION","add","showConfirmModal","ApprovalState","showApproveFlow","isSideFooter","isAccessTokenSupported","SUPPORT_ONLY_BSC","Page","removePadding","hideFooterOnDesktop","noMinHeight","helpUrl","LIMIT_ORDERS_DOCS_URL","ClaimWarning","PriceChartContainer","currentSwapPrice","isFullWidthContainer","LimitOrderTable","AppBody","CurrencyInputHeader","gap","CurrencyInputPanel","showQuickInputButton","showMaxButton","maxAmount","onPercentInput","onMax","onCurrencySelect","otherCurrency","showCommonBases","commonBasesType","CommonBasesType","showUSDPrice","AccessRisk","LimitOrderPrice","asset","ConnectWalletButton","Link","img","src","isDark","alt","SwapUI","BottomDrawer","setIsOpen","limit_orders","LimitOrders","ButtonMenu","idx","ButtonMenuItem","backgroundColor","card","props","primaryColor","secondaryColor","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Svg","viewBox","path","d","fill","mask","mask-type","maskUnits","x","y","g","fillRule","clipRule","strokeWidth","stroke","strokeLinecap","typography","attrs","withConfig","secondary","space"],"sourceRoot":""}