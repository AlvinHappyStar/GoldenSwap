{"version":3,"file":"static/chunks/pages/swap-67809e2acc244023.js","mappings":"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","sources":["webpack://_N_E/?d217","webpack://_N_E/./src/components/CommitButton.tsx","webpack://_N_E/./src/components/UnsupportedCurrencyFooter.tsx","webpack://_N_E/./src/hooks/useSwapHotTokenDisplay.ts","webpack://_N_E/./src/config/constants/warningTokens.ts","webpack://_N_E/./src/config/constants/swapWarningTokens.ts","webpack://_N_E/./src/utils/shouldShowSwapWarning.ts","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/SafemoonWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/ItamWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/BondlyWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/Acknowledgement.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/CcarWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/BTTWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/RugPullWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/FREEWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/GalaWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/ABNBWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/index.tsx","webpack://_N_E/./src/views/Swap/hooks/useWarningImport.tsx","webpack://_N_E/./src/hooks/useWrapCallback.ts","webpack://_N_E/./src/views/Swap/components/AddressInputPanel.tsx","webpack://_N_E/./src/hooks/useLast.ts","webpack://_N_E/./src/views/Swap/components/FormattedPriceImpact.tsx","webpack://_N_E/./src/views/Swap/components/RouterViewer.tsx","webpack://_N_E/./src/views/Swap/components/SwapRoute.tsx","webpack://_N_E/./src/views/Swap/components/AdvancedSwapDetails.tsx","webpack://_N_E/./src/views/Swap/components/AdvancedSwapDetailsDropdown.tsx","webpack://_N_E/./src/components/Svg/RefreshIcon.tsx","webpack://_N_E/./src/views/Swap/SwapFeaturesContext.tsx","webpack://_N_E/./src/views/Swap/components/CurrencyInputHeader.tsx","webpack://_N_E/./src/views/Swap/components/SwapModalFooter.tsx","webpack://_N_E/./src/views/Swap/components/SwapModalHeader.tsx","webpack://_N_E/./src/views/Swap/StableSwap/components/StableSwapModalFooter.tsx","webpack://_N_E/./src/views/Swap/SmartSwap/utils/exchange.ts","webpack://_N_E/./src/views/Swap/components/TransactionConfirmSwapContent.tsx","webpack://_N_E/./src/views/Swap/components/ConfirmSwapModalContainer.tsx","webpack://_N_E/./src/views/Swap/components/ConfirmSwapModal.tsx","webpack://_N_E/./src/views/Swap/components/ProgressSteps.tsx","webpack://_N_E/./src/views/Swap/components/SwapCommitButton.tsx","webpack://_N_E/./src/views/Swap/hooks/useRefreshBlockNumber.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/components/MMAndAMMDealDisplay.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/constants.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/utils/exchange.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useSwapCallArguments.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useSwapCallback.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/components/SwapModalFooter.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/components/MMSlippageTolerance.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/components/SwapModalHeader.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/components/TransactionConfirmSwapContent.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/components/ConfirmSwapModal.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/components/MMCommitButton.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/types.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/apis/index.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useGetRFQTrade.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useIsMMSupportChain.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useIsMMQuotingPair.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useMMParam.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useMMOrderBookTrade.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useIsMMTradeBetter.tsx","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useMMTradeInfo.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/useMMQuoteCountDown.ts","webpack://_N_E/./src/views/Swap/MMLinkPools/hooks/index.ts","webpack://_N_E/./src/views/Swap/SmartSwap/hooks/useSwapCallArguments.ts","webpack://_N_E/./src/views/Swap/SmartSwap/hooks/useSwapCallback.ts","webpack://_N_E/./src/views/Swap/SmartSwap/components/SwapModalFooter.tsx","webpack://_N_E/./src/views/Swap/SmartSwap/components/TransactionConfirmSwapContent.tsx","webpack://_N_E/./src/views/Swap/SmartSwap/components/ConfirmSwapModal.tsx","webpack://_N_E/./src/views/Swap/SmartSwap/components/SmartSwapCommitButton.tsx","webpack://_N_E/./src/views/Swap/SmartSwap/hooks/useDerivedSwapInfoWithStableSwap.ts","webpack://_N_E/./src/views/Swap/SmartSwap/hooks/useTradeInfo.ts","webpack://_N_E/./src/views/Swap/SmartSwap/hooks/useIsSmartRouterBetter.tsx","webpack://_N_E/./src/views/Swap/SmartSwap/hooks/index.ts","webpack://_N_E/./src/views/Swap/SmartSwap/index.tsx","webpack://_N_E/./src/views/Swap/styles.tsx","webpack://_N_E/./src/views/Swap/index.tsx","webpack://_N_E/./src/pages/swap.tsx","webpack://_N_E/./src/views/Swap/components/styleds.tsx","webpack://_N_E/../../packages/uikit/src/components/Svg/Icons/Search.tsx","webpack://_N_E/../../packages/uikit/src/widgets/Swap/ConfirmationModalContent.tsx","webpack://_N_E/../../packages/uikit/src/widgets/Swap/confirmPriceImpactWithoutFee.ts","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/swap\",\n      function () {\n        return require(\"private-next-pages/swap.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/swap\"])\n      });\n    }\n  ","import { Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useSwitchNetworkLoading } from 'hooks/useSwitchNetworkLoading'\nimport { useSetAtom } from 'jotai'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { hideWrongNetworkModalAtom } from './NetworkModal'\nimport Trans from './Trans'\n\nconst wrongNetworkProps: ButtonProps = {\n  variant: 'danger',\n  disabled: false,\n  children: <Trans>Wrong Network</Trans>,\n}\n\nexport const CommitButton = (props: ButtonProps) => {\n  const { isWrongNetwork } = useActiveChainId()\n  const [switchNetworkLoading] = useSwitchNetworkLoading()\n  const setHideWrongNetwork = useSetAtom(hideWrongNetworkModalAtom)\n\n  return (\n    <Button\n      {...props}\n      onClick={(e) => {\n        if (isWrongNetwork) {\n          setHideWrongNetwork(false)\n        } else {\n          props.onClick?.(e)\n        }\n      }}\n      {...(switchNetworkLoading && { disabled: true })}\n      {...(isWrongNetwork && wrongNetworkProps)}\n    />\n  )\n}\n","import { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link, AutoColumn } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { CurrencyLogo } from 'components/Logo'\nimport { getBlockExploreLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<React.PropsWithChildren<Props>> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveChainId()\n  const { t } = useTranslation()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title={t('Unsupported Assets')} onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"12px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link\n                    external\n                    small\n                    color=\"primaryDark\"\n                    href={getBlockExploreLink(token.address, 'address', chainId)}\n                  >\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            {t(\n              'Some assets are not available through this interface because they may not work well with our smart contract or we are unable to allow trading for legal reasons.',\n            )}\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const { t } = useTranslation()\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        {t('Read more about unsupported assets')}\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { ChainId } from '@pancakeswap/sdk'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useAtom } from 'jotai'\nimport atomWithStorageWithErrorCatch from 'utils/atomWithStorageWithErrorCatch'\nimport { useActiveChainId } from './useActiveChainId'\n\nconst isSwapHotTokenDisplay = atomWithStorageWithErrorCatch<boolean>('pcs:isHotTokensDisplay', false)\nconst isSwapHotTokenDisplayETH = atomWithStorageWithErrorCatch<boolean>('pcs:isHotTokensDisplayETH', true)\n\nexport const useSwapHotTokenDisplay = () => {\n  const { chainId } = useActiveChainId()\n  const { isMobile } = useMatchBreakpoints()\n  return useAtom(chainId === ChainId.BSC || isMobile ? isSwapHotTokenDisplay : isSwapHotTokenDisplayETH)\n}\n","import { ChainId, ERC20Token } from '@pancakeswap/sdk'\n\nexport const bscWarningTokens = {\n  pokemoney: new ERC20Token(ChainId.BSC, '0x32ff5b4C3B1744F0344D96fA2f87799Ed2805749', 18, 'PMY', 'Pokemoney Coin', ''),\n  free: new ERC20Token(\n    ChainId.BSC,\n    '0x880BCe9321c79cAc1D290De6d31DDE722C606165',\n    8,\n    'FREE',\n    'Freedom Protocol Token',\n    '',\n  ),\n  safemoon: new ERC20Token(\n    ChainId.BSC,\n    '0x8076C74C5e3F5852037F31Ff0093Eeb8c8ADd8D3',\n    9,\n    'SAFEMOON',\n    'Safemoon Token',\n    'https://safemoon.net/',\n  ),\n  gala: new ERC20Token(\n    ChainId.BSC,\n    '0x7dDEE176F665cD201F93eEDE625770E2fD911990',\n    18,\n    'GALA',\n    'pTokens GALA',\n    'https://games.gala.com/',\n  ),\n}\n\nexport const bscTestnetWarningTokens = {}\n","import { Token } from '@pancakeswap/sdk'\nimport { bscTokens } from '@pancakeswap/tokens'\nimport { bscWarningTokens } from 'config/constants/warningTokens'\n\nconst { bondly, itam, ccar, bttold, abnbc } = bscTokens\nconst { pokemoney, free, safemoon, gala } = bscWarningTokens\n\ninterface WarningTokenList {\n  [key: string]: Token\n}\n\nconst SwapWarningTokens = <WarningTokenList>{\n  safemoon,\n  bondly,\n  itam,\n  ccar,\n  bttold,\n  pokemoney,\n  free,\n  gala,\n  abnbc,\n}\n\nexport default SwapWarningTokens\n","import { Token } from '@pancakeswap/sdk'\nimport SwapWarningTokens from 'config/constants/swapWarningTokens'\n\nconst swapWarningTokens = Object.values(SwapWarningTokens)\n\nconst shouldShowSwapWarning = (swapCurrency: Token) => {\n  return swapWarningTokens.some((warningToken) => warningToken.equals(swapCurrency))\n}\n\nexport default shouldShowSwapWarning\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Text, Link } from '@pancakeswap/uikit'\n\nconst SafemoonWarning = () => {\n  const { t } = useTranslation()\n\n  // Break translation sentences into pieces because the current translation approach doesn't support Link interpolation.\n  return (\n    <>\n      <Text>\n        {t('SAFEMOON has been migrated to')}{' '}\n        <Link\n          style={{ display: 'inline' }}\n          external\n          href=\"https://bscscan.com/address/0x42981d0bfbAf196529376EE702F2a9Eb9092fcB5\"\n        >\n          {t('a new contract address.')}\n        </Link>{' '}\n        {t(\n          'Trading on the old address may result in the complete loss of your assets. For more information please refer to',\n        )}{' '}\n        <Link style={{ display: 'inline' }} external href=\"https://twitter.com/safemoon/status/1477770592031887360\">\n          {t(\"Safemoon's announcement\")}.\n        </Link>\n      </Text>\n    </>\n  )\n}\n\nexport default SafemoonWarning\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Text, Link } from '@pancakeswap/uikit'\n\nconst ItamWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t('ITAM has been rebranded as ITAM CUBE.')}{' '}\n        <Link style={{ display: 'inline' }} external href=\"https://itam.network/swap\">\n          {t('Please proceed to ITAM bridge to conduct a one-way swap of your ITAM tokens.')}\n        </Link>{' '}\n        {t('All transfers of the old ITAM token will be disabled after the swap.')}\n      </Text>\n    </>\n  )\n}\n\nexport default ItamWarning\n","import { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst BondlyWarning = () => {\n  const { t } = useTranslation()\n\n  return <Text>{t('Warning: BONDLY has been compromised. Please remove liquidity until further notice.')}</Text>\n}\n\nexport default BondlyWarning\n","import { useState } from 'react'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Text, Flex, Checkbox, Button } from '@pancakeswap/uikit'\n\ninterface AcknowledgementProps {\n  handleContinueClick: () => void\n}\n\nconst Acknowledgement: React.FC<React.PropsWithChildren<AcknowledgementProps>> = ({ handleContinueClick }) => {\n  const { t } = useTranslation()\n  const [isConfirmed, setIsConfirmed] = useState(false)\n\n  return (\n    <>\n      <Flex justifyContent=\"space-between\">\n        <label htmlFor=\"acknowledgement\">\n          <Flex alignItems=\"center\">\n            <Checkbox\n              id=\"acknowledgement\"\n              name=\"confirmed\"\n              type=\"checkbox\"\n              checked={isConfirmed}\n              onChange={() => setIsConfirmed(!isConfirmed)}\n              scale=\"sm\"\n            />\n            <Text ml=\"10px\" style={{ userSelect: 'none' }}>\n              {t('I understand')}\n            </Text>\n          </Flex>\n        </label>\n        <Button disabled={!isConfirmed} onClick={handleContinueClick}>\n          {t('Continue')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default Acknowledgement\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Text, Link } from '@pancakeswap/uikit'\n\nconst CcarWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t('Crypto Cars (CCAR) has been migrated to')}{' '}\n        <Link\n          style={{ display: 'inline' }}\n          external\n          href=\"https://bscscan.com/token/0x322e5015Cc464Ada7f99dE7131CE494dE1834396\"\n        >\n          {t('a new contract address.')}\n        </Link>{' '}\n        {t(\n          'Trading on the old address may result in the complete loss of your assets. For more information please refer to',\n        )}{' '}\n        <Link style={{ display: 'inline' }} external href=\"https://t.me/Crypto_Cars_Official/465037\">\n          {t('the announcement.')}\n        </Link>\n      </Text>\n    </>\n  )\n}\n\nexport default CcarWarning\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Text, Link, LinkExternal } from '@pancakeswap/uikit'\n\nconst BTTWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t(\n          'Please note that this is the old BTT token, which has been swapped to the new BTT tokens in the following ratio:',\n        )}\n      </Text>\n      <Text>1 BTT (OLD) = 1,000 BTT (NEW)</Text>\n      <Text mb=\"8px\">\n        {t('Trade the new BTT token')}{' '}\n        <Link\n          style={{ display: 'inline' }}\n          href=\"https://pancakeswap.finance/swap?outputCurrency=0x352Cb5E19b12FC216548a2677bD0fce83BaE434B\"\n        >\n          {t('here')}\n        </Link>\n      </Text>\n      <LinkExternal href=\"https://medium.com/@BitTorrent/tutorial-how-to-swap-bttold-to-btt-453264d7142\">\n        {t('For more details on the swap, please refer here.')}\n      </LinkExternal>\n    </>\n  )\n}\n\nexport default BTTWarning\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Text } from '@pancakeswap/uikit'\n\nconst RugPullWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>{t('Suspicious rugpull token')}</Text>\n    </>\n  )\n}\n\nexport default RugPullWarning\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Text } from '@pancakeswap/uikit'\n\nconst FREEWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t(\n          'Risk Warning: This token is subject to high price risk. Please do your own research before trading this token. Please also note that as of 24 June 2022 there is also a reflection fee for every transfer of FREE ranging from 2.5 to 5% per trade/transfer.',\n        )}\n      </Text>\n    </>\n  )\n}\n\nexport default FREEWarning\n","import { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst GalaWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>{t('Warning: The pGALA token pool is not a valid token trading pair - please stop buying.')}</Text>\n      <LinkExternal href=\"https://twitter.com/pNetworkDeFi/status/1588266897061031936\">\n        {t('For more info, please see pGALA’s twitter.')}\n      </LinkExternal>\n    </>\n  )\n}\n\nexport default GalaWarning\n","import { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst ABNBWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t(\n          'Warning: aBNB token from Ankr has been exploited. Please proceed with caution. We do not recommend users to trade the token.',\n        )}\n      </Text>\n      <LinkExternal href=\"https://twitter.com/ankr/status/1598503332477280256\">{t('Learn More')}</LinkExternal>\n    </>\n  )\n}\n\nexport default ABNBWarning\n","import styled from 'styled-components'\nimport { ModalBody, ModalContainer, Message, ModalHeader, Box, Heading } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { WrappedTokenInfo } from '@pancakeswap/token-lists'\nimport SwapWarningTokensConfig from 'config/constants/swapWarningTokens'\nimport SafemoonWarning from './SafemoonWarning'\nimport ItamWarning from './ItamWarning'\nimport BondlyWarning from './BondlyWarning'\nimport Acknowledgement from './Acknowledgement'\nimport CcarWarning from './CcarWarning'\nimport BTTWarning from './BTTWarning'\nimport RugPullWarning from './RugPullWarning'\nimport FREEWarning from './FREEWarning'\nimport GalaWarning from './GalaWarning'\nimport ABNBWarning from './ABNBWarning'\n\nconst StyledModalContainer = styled(ModalContainer)`\n  max-width: 440px;\n`\n\nconst MessageContainer = styled(Message)`\n  align-items: flex-start;\n  justify-content: flex-start;\n`\n\ninterface SwapWarningModalProps {\n  swapCurrency: WrappedTokenInfo\n  onDismiss?: () => void\n}\n\nconst SwapWarningModal: React.FC<React.PropsWithChildren<SwapWarningModalProps>> = ({ swapCurrency, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const TOKEN_WARNINGS = {\n    [SwapWarningTokensConfig.safemoon.address]: {\n      symbol: SwapWarningTokensConfig.safemoon.symbol,\n      component: <SafemoonWarning />,\n    },\n    [SwapWarningTokensConfig.bondly.address]: {\n      symbol: SwapWarningTokensConfig.bondly.symbol,\n      component: <BondlyWarning />,\n    },\n    [SwapWarningTokensConfig.itam.address]: {\n      symbol: SwapWarningTokensConfig.itam.symbol,\n      component: <ItamWarning />,\n    },\n    [SwapWarningTokensConfig.ccar.address]: {\n      symbol: SwapWarningTokensConfig.ccar.symbol,\n      component: <CcarWarning />,\n    },\n    [SwapWarningTokensConfig.bttold.address]: {\n      symbol: SwapWarningTokensConfig.bttold.symbol,\n      component: <BTTWarning />,\n    },\n    [SwapWarningTokensConfig.pokemoney.address]: {\n      symbol: SwapWarningTokensConfig.pokemoney.symbol,\n      component: <RugPullWarning />,\n    },\n    [SwapWarningTokensConfig.free.address]: {\n      symbol: SwapWarningTokensConfig.free.symbol,\n      component: <FREEWarning />,\n    },\n    [SwapWarningTokensConfig.gala.address]: {\n      symbol: SwapWarningTokensConfig.gala.symbol,\n      component: <GalaWarning />,\n    },\n    [SwapWarningTokensConfig.abnbc.address]: {\n      symbol: SwapWarningTokensConfig.abnbc.symbol,\n      component: <ABNBWarning />,\n    },\n  }\n\n  const SWAP_WARNING = TOKEN_WARNINGS[swapCurrency.address]\n\n  return (\n    <StyledModalContainer $minWidth=\"280px\">\n      <ModalHeader background={theme.colors.gradientCardHeader}>\n        <Heading p=\"12px 24px\">{t('Notice for trading %symbol%', { symbol: SWAP_WARNING.symbol })}</Heading>\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <MessageContainer variant=\"warning\" mb=\"24px\">\n          <Box>{SWAP_WARNING.component}</Box>\n        </MessageContainer>\n        <Acknowledgement handleContinueClick={onDismiss} />\n      </ModalBody>\n    </StyledModalContainer>\n  )\n}\n\nexport default SwapWarningModal\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { useModal } from '@pancakeswap/uikit'\n\nimport { useRouter } from 'next/router'\nimport useSWRImmutable from 'swr/immutable'\nimport shouldShowSwapWarning from 'utils/shouldShowSwapWarning'\n\nimport { useCurrency, useAllTokens } from 'hooks/Tokens'\nimport { useDefaultsFromURLSearch } from 'state/swap/hooks'\nimport ImportTokenWarningModal from 'components/ImportTokenWarningModal'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { isAddress } from 'utils'\n\nimport SwapWarningModal from '../components/SwapWarningModal'\n\nexport default function useWarningImport() {\n  const router = useRouter()\n  const loadedUrlParams = useDefaultsFromURLSearch()\n  const { chainId, isWrongNetwork } = useActiveWeb3React()\n\n  // swap warning state\n  const [swapWarningCurrency, setSwapWarningCurrency] = useState(null)\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ]\n\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c?.isToken) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency],\n  )\n\n  const defaultTokens = useAllTokens()\n\n  const { data: loadedTokenList } = useSWRImmutable(['token-list'])\n\n  const importTokensNotInDefault = useMemo(() => {\n    return !isWrongNetwork && urlLoadedTokens && !!loadedTokenList\n      ? urlLoadedTokens.filter((token: Token) => {\n          const checksummedAddress = isAddress(token.address) || ''\n\n          return !(checksummedAddress in defaultTokens) && token.chainId === chainId\n        })\n      : []\n  }, [chainId, defaultTokens, isWrongNetwork, loadedTokenList, urlLoadedTokens])\n\n  const [onPresentSwapWarningModal] = useModal(<SwapWarningModal swapCurrency={swapWarningCurrency} />, false)\n  const [onPresentImportTokenWarningModal] = useModal(\n    <ImportTokenWarningModal tokens={importTokensNotInDefault} onCancel={() => router.push('/swap')} />,\n  )\n\n  useEffect(() => {\n    if (swapWarningCurrency) {\n      onPresentSwapWarningModal()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [swapWarningCurrency])\n\n  const swapWarningHandler = useCallback((currencyInput) => {\n    const showSwapWarning = shouldShowSwapWarning(currencyInput)\n    if (showSwapWarning) {\n      setSwapWarningCurrency(currencyInput)\n    } else {\n      setSwapWarningCurrency(null)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (importTokensNotInDefault.length > 0) {\n      onPresentImportTokenWarningModal()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [importTokensNotInDefault.length])\n\n  return swapWarningHandler\n}\n","import { Currency, WNATIVE } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from '@pancakeswap/localization'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useWNativeContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined,\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { t } = useTranslation()\n  const { chainId, account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const wbnbContract = useWNativeContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wbnbContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency?.isNative && WNATIVE[chainId]?.equals(outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wbnbContract, 'deposit', undefined, {\n                    value: `0x${inputAmount.quotient.toString(16)}`,\n                  })\n                  const amount = inputAmount.toSignificant(6)\n                  const native = inputCurrency.symbol\n                  const wrap = WNATIVE[chainId].symbol\n                  addTransaction(txReceipt, {\n                    summary: `Wrap ${amount} ${native} to ${wrap}`,\n                    translatableSummary: { text: 'Wrap %amount% %native% to %wrap%', data: { amount, native, wrap } },\n                    type: 'wrap',\n                  })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : t('Insufficient %symbol% balance', { symbol: inputCurrency.symbol }),\n      }\n    }\n    if (WNATIVE[chainId]?.equals(inputCurrency) && outputCurrency?.isNative) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wbnbContract, 'withdraw', [\n                    `0x${inputAmount.quotient.toString(16)}`,\n                  ])\n                  const amount = inputAmount.toSignificant(6)\n                  const wrap = WNATIVE[chainId].symbol\n                  const native = outputCurrency.symbol\n                  addTransaction(txReceipt, {\n                    summary: `Unwrap ${amount} ${wrap} to ${native}`,\n                    translatableSummary: { text: 'Unwrap %amount% %wrap% to %native%', data: { amount, wrap, native } },\n                  })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : t('Insufficient %symbol% balance', { symbol: inputCurrency.symbol }),\n      }\n    }\n    return NOT_APPLICABLE\n  }, [wbnbContract, chainId, inputCurrency, outputCurrency, t, inputAmount, balance, addTransaction, callWithGasPrice])\n}\n","import { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { Text, Link, BscScanIcon, AutoColumn } from '@pancakeswap/uikit'\nimport { isAddress } from 'utils'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { RowBetween } from '../../../components/Layout/Row'\nimport { getBlockExploreLink, getBlockExploreName } from '../../../utils'\n\nconst InputPanel = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  border-radius: 1.25rem;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  z-index: 1;\n  width: 100%;\n`\n\nconst ContainerRow = styled.div<{ error: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 1.25rem;\n  border: 1px solid ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.background)};\n  transition: border-color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')},\n    color 500ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nconst InputContainer = styled.div`\n  flex: 1;\n  padding: 1rem;\n`\n\nconst Input = styled.input<{ error?: boolean }>`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  transition: color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.primary)};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textDisabled};\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nexport default function AddressInputPanel({\n  id,\n  value,\n  onChange,\n}: {\n  id?: string\n  // the typed string value\n  value: string\n  // triggers whenever the typed value changes\n  onChange: (value: string) => void\n}) {\n  const { chainId } = useActiveChainId()\n\n  const { t } = useTranslation()\n\n  const address = isAddress(value) ? value : undefined\n\n  const handleInput = useCallback(\n    (event) => {\n      const input = event.target.value\n      const withoutSpaces = input.replace(/\\s+/g, '')\n      onChange(withoutSpaces)\n    },\n    [onChange],\n  )\n\n  const error = Boolean(value.length > 0 && !address)\n\n  return (\n    <InputPanel id={id}>\n      <ContainerRow error={error}>\n        <InputContainer>\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <Text>{t('Recipient')}</Text>\n              {address && chainId && (\n                <Link external small href={getBlockExploreLink(address, 'address', chainId)}>\n                  (\n                  {t('View on %site%', {\n                    site: getBlockExploreName(chainId),\n                  })}\n                  {chainId === ChainId.BSC && <BscScanIcon color=\"primary\" ml=\"4px\" />})\n                </Link>\n              )}\n            </RowBetween>\n            <Input\n              className=\"recipient-address-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              placeholder={t('Wallet Address')}\n              error={error}\n              pattern=\"^(0x[a-fA-F0-9]{40})$\"\n              onChange={handleInput}\n              value={value}\n            />\n          </AutoColumn>\n        </InputContainer>\n      </ContainerRow>\n    </InputPanel>\n  )\n}\n","import { useEffect, useState } from 'react'\n\n/**\n * Returns the last value of type T that passes a filter function\n * @param value changing value\n * @param filterFn function that determines whether a given value should be considered for the last value\n */\nfunction useLast<T>(\n  value: T | undefined | null,\n  filterFn?: (value: T | null | undefined) => boolean,\n): T | null | undefined {\n  const [last, setLast] = useState<T | null | undefined>(() => (filterFn && filterFn(value) ? value : undefined))\n  useEffect(() => {\n    setLast((prev) => {\n      const shouldUse: boolean = filterFn ? filterFn(value) : true\n      if (shouldUse) return value\n      return prev\n    })\n  }, [filterFn, value])\n  return last\n}\n\nfunction isDefined<T>(x: T | null | undefined): x is T {\n  return x !== null && x !== undefined\n}\n\n/**\n * Returns the last truthy value of type T\n * @param value changing value\n */\nfunction useLastTruthy<T>(value: T | undefined | null): T | null | undefined {\n  return useLast(value, isDefined)\n}\n\nexport default useLastTruthy\n","import { Percent } from '@pancakeswap/sdk'\nimport { warningSeverity } from 'utils/exchange'\nimport { ONE_BIPS } from 'config/constants/exchange'\nimport { ErrorText } from './styleds'\n\n/**\n * Formatted version of price impact text with warning colors\n */\nexport default function FormattedPriceImpact({ priceImpact }: { priceImpact?: Percent }) {\n  return (\n    <ErrorText fontSize=\"14px\" severity={warningSeverity(priceImpact)}>\n      {priceImpact ? (priceImpact.lessThan(ONE_BIPS) ? '<0.01%' : `${priceImpact.toFixed(2)}%`) : '-'}\n    </ErrorText>\n  )\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency } from '@pancakeswap/sdk'\nimport { isStableSwapPair, Pair } from '@pancakeswap/smart-router/evm'\nimport { Box, Flex, Text, useTooltip } from '@pancakeswap/uikit'\nimport { CurrencyLogo } from 'components/Logo'\nimport styled from 'styled-components'\n\nconst RouterBox = styled(Flex)`\n  position: relative;\n  flex-direction: column;\n  min-height: 450px;\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0%;\n    left: 50%;\n    width: 3px;\n    height: 100%;\n    border-left: 3px dotted ${({ theme }) => theme.colors.backgroundDisabled};\n    transform: translateX(-50%);\n    z-index: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 400px;\n    min-height: auto;\n    flex-direction: row;\n    &:before {\n      top: 50%;\n      left: 0;\n      width: 100%;\n      height: 3px;\n      border-left: none;\n      border-top: 3px dotted ${({ theme }) => theme.colors.backgroundDisabled};\n      transform: translateY(-50%);\n      z-index: 1;\n    }\n  }\n`\nconst RouterPoolBox = styled(Box)`\n  position: relative;\n  border-radius: 50px;\n  display: flex;\n  flex-direction: column;\n  padding: 4px 8px;\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  z-index: 2;\n  svg,\n  img {\n    &:first-child {\n      margin-bottom: 2px;\n      ${({ theme }) => theme.mediaQueries.md} {\n        margin-bottom: 0px;\n        margin-right: 2px;\n      }\n    }\n  }\n  &.isStableSwap {\n    background-color: ${({ theme }) => theme.colors.secondary};\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\nconst RouterTypeText = styled.div`\n  font-size: 16px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  position: absolute;\n  top: 50%;\n  left: calc(100% + 10px);\n  transform: translateY(-50%);\n  white-space: nowrap;\n  ${({ theme }) => theme.mediaQueries.md} {\n    left: 50%;\n    transform: translateX(-50%);\n    top: calc(100% + 3px);\n  }\n`\n\nconst CurrencyLogoWrapper = styled.div`\n  position: relative;\n  height: 48px;\n  width: 48px;\n  padding: 2px;\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 76.22%);\n  border-radius: 50%;\n  z-index: 2;\n`\n\ninterface RouterViewerProps {\n  inputCurrency?: Currency\n  outputCurrency?: Currency\n  pairs?: Pair[]\n  path?: Currency[]\n  isMM?: boolean\n}\n\nexport const RouterViewer: React.FC<RouterViewerProps> = ({\n  pairs,\n  path,\n  inputCurrency,\n  outputCurrency,\n  isMM = false,\n}) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<Text>{inputCurrency.symbol}</Text>, {\n    placement: 'right',\n  })\n  const {\n    targetRef: outputTargetRef,\n    tooltip: outputTooltip,\n    tooltipVisible: outputTooltipVisible,\n  } = useTooltip(<Text>{outputCurrency.symbol}</Text>, {\n    placement: 'right',\n  })\n  return (\n    <RouterBox justifyContent=\"space-between\" alignItems=\"center\">\n      <CurrencyLogoWrapper ref={targetRef}>\n        <CurrencyLogo size=\"44px\" currency={inputCurrency} />\n      </CurrencyLogoWrapper>\n      {tooltipVisible && tooltip}\n      {pairs &&\n        path &&\n        !isMM &&\n        pairs.map((p, index) => {\n          const isStableSwap = isStableSwapPair(p)\n          return (\n            <RouterPoolBox\n              key={`tradingPairIds${isStableSwap ? p.stableSwapAddress : p.liquidityToken.address}`}\n              className={isStableSwap && 'isStableSwap'}\n            >\n              <CurrencyLogo size=\"32px\" currency={index === 0 ? inputCurrency : path[index]} />\n              <CurrencyLogo size=\"32px\" currency={index === pairs.length - 1 ? outputCurrency : path[index + 1]} />\n              <RouterTypeText>{isStableSwap ? t('StableSwap') : t('V2')}</RouterTypeText>\n            </RouterPoolBox>\n          )\n        })}\n      {isMM && path && (\n        <RouterPoolBox>\n          <CurrencyLogo size=\"32px\" currency={inputCurrency} />\n          <CurrencyLogo size=\"32px\" currency={outputCurrency} />\n          <RouterTypeText>{t('Market Maker')}</RouterTypeText>\n        </RouterPoolBox>\n      )}\n      <CurrencyLogoWrapper ref={outputTargetRef}>\n        <CurrencyLogo size=\"44px\" currency={outputCurrency} />\n      </CurrencyLogoWrapper>\n      {outputTooltipVisible && outputTooltip}\n    </RouterBox>\n  )\n}\n","import { Currency } from '@pancakeswap/sdk'\nimport { ChevronRightIcon, Flex, Text } from '@pancakeswap/uikit'\nimport { Fragment, memo } from 'react'\nimport { unwrappedToken } from 'utils/wrappedCurrency'\n\nexport default memo(function SwapRoute({ path }: { path: Currency[] }) {\n  return (\n    <Flex flexWrap=\"wrap\" width=\"100%\" justifyContent=\"flex-end\" alignItems=\"center\">\n      {path.map((token, i) => {\n        const isLastItem: boolean = i === path.length - 1\n        const currency = token.isToken ? unwrappedToken(token) : token\n        return (\n          <Fragment key={token.isToken ? token.address : ''}>\n            <Flex alignItems=\"end\">\n              <Text fontSize=\"14px\" ml=\"0.125rem\" mr=\"0.125rem\">\n                {currency.symbol}\n              </Text>\n            </Flex>\n            {!isLastItem && <ChevronRightIcon width=\"12px\" />}\n          </Fragment>\n        )\n      })}\n    </Flex>\n  )\n})\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@pancakeswap/sdk'\nimport { Pair } from '@pancakeswap/smart-router/evm'\nimport { Modal, ModalV2, QuestionHelper, SearchIcon, Text, Flex, Link, AutoColumn } from '@pancakeswap/uikit'\n\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport { BUYBACK_FEE, LP_HOLDERS_FEE, TOTAL_FEE, TREASURY_FEE } from 'config/constants/info'\nimport { useState } from 'react'\nimport { Field } from 'state/swap/actions'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { RouterViewer } from './RouterViewer'\nimport SwapRoute from './SwapRoute'\n\nfunction TradeSummary({\n  inputAmount,\n  outputAmount,\n  tradeType,\n  slippageAdjustedAmounts,\n  priceImpactWithoutFee,\n  realizedLPFee,\n  hasStablePair = false,\n  isMM = false,\n}: {\n  hasStablePair?: boolean\n  inputAmount?: CurrencyAmount<Currency>\n  outputAmount?: CurrencyAmount<Currency>\n  tradeType?: TradeType\n  slippageAdjustedAmounts: {\n    INPUT?: CurrencyAmount<Currency>\n    OUTPUT?: CurrencyAmount<Currency>\n  }\n  priceImpactWithoutFee?: Percent\n  realizedLPFee?: CurrencyAmount<Currency>\n  isMM?: boolean\n}) {\n  const { t } = useTranslation()\n  const isExactIn = tradeType === TradeType.EXACT_INPUT\n  const totalFeePercent = `${(TOTAL_FEE * 100).toFixed(2)}%`\n  const lpHoldersFeePercent = `${(LP_HOLDERS_FEE * 100).toFixed(2)}%`\n  const treasuryFeePercent = `${(TREASURY_FEE * 100).toFixed(4)}%`\n  const buyBackFeePercent = `${(BUYBACK_FEE * 100).toFixed(4)}%`\n\n  return (\n    <AutoColumn style={{ padding: '0 16px' }}>\n      <RowBetween>\n        <RowFixed>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {isExactIn ? t('Minimum received') : t('Maximum sold')}\n          </Text>\n          <QuestionHelper\n            text={t(\n              'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.',\n            )}\n            ml=\"4px\"\n            placement=\"top\"\n          />\n        </RowFixed>\n        <RowFixed>\n          <Text fontSize=\"14px\">\n            {isExactIn\n              ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${outputAmount.currency.symbol}` ?? '-'\n              : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${inputAmount.currency.symbol}` ?? '-'}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      {priceImpactWithoutFee && (\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Price Impact')}\n            </Text>\n            <QuestionHelper\n              text={\n                <>\n                  <Text>\n                    <Text bold display=\"inline-block\">\n                      {t('AMM')}\n                    </Text>\n                    {`: ${t('The difference between the market price and estimated price due to trade size.')}`}\n                  </Text>\n                  <Text mt=\"10px\">\n                    <Text bold display=\"inline-block\">\n                      {t('MM')}\n                    </Text>\n                    {`: ${t('No slippage against quote from market maker')}`}\n                  </Text>\n                </>\n              }\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n\n          {isMM ? <Text color=\"textSubtle\">--</Text> : <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />}\n        </RowBetween>\n      )}\n\n      {realizedLPFee && (\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Liquidity Provider Fee')}\n            </Text>\n            <QuestionHelper\n              text={\n                <>\n                  <Text mb=\"12px\">\n                    <Text bold display=\"inline-block\">\n                      {t('AMM')}\n                    </Text>\n                    :{' '}\n                    {hasStablePair\n                      ? t('For each non-stableswap trade, a %amount% fee is paid', { amount: totalFeePercent })\n                      : t('For each trade a %amount% fee is paid', { amount: totalFeePercent })}\n                  </Text>\n                  <Text>- {t('%amount% to LP token holders', { amount: lpHoldersFeePercent })}</Text>\n                  <Text>- {t('%amount% to the Treasury', { amount: treasuryFeePercent })}</Text>\n                  <Text>- {t('%amount% towards CAKE buyback and burn', { amount: buyBackFeePercent })}</Text>\n                  {hasStablePair && (\n                    <>\n                      <Text mt=\"12px\">\n                        {t('For each stableswap trade, refer to the fee table')}\n                        <Link\n                          style={{ display: 'inline' }}\n                          ml=\"4px\"\n                          external\n                          href=\"https://docs.pancakeswap.finance/products/stableswap#stableswap-fees\"\n                        >\n                          {t('here.')}\n                        </Link>\n                      </Text>\n                    </>\n                  )}\n                  <Text mt=\"10px\">\n                    <Text bold display=\"inline-block\">\n                      {t('MM')}\n                    </Text>\n                    :{' '}\n                    {t(\n                      'PancakeSwap does not charge any fees for trades. However, the market makers charge an implied fee of 0.05% (non-stablecoin) / 0.01% (stablecoin) factored into the quotes provided by them.',\n                    )}\n                  </Text>\n                </>\n              }\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">{`${realizedLPFee.toSignificant(4)} ${inputAmount.currency.symbol}`}</Text>\n        </RowBetween>\n      )}\n    </AutoColumn>\n  )\n}\n\nexport interface AdvancedSwapDetailsProps {\n  hasStablePair?: boolean\n  pairs?: Pair[]\n  path?: Currency[]\n  priceImpactWithoutFee?: Percent\n  realizedLPFee?: CurrencyAmount<Currency>\n  slippageAdjustedAmounts?: {\n    INPUT?: CurrencyAmount<Currency>\n    OUTPUT?: CurrencyAmount<Currency>\n  }\n  inputAmount?: CurrencyAmount<Currency>\n  outputAmount?: CurrencyAmount<Currency>\n  tradeType?: TradeType\n  isMM?: boolean\n}\n\nexport function AdvancedSwapDetails({\n  pairs,\n  path,\n  priceImpactWithoutFee,\n  realizedLPFee,\n  slippageAdjustedAmounts,\n  inputAmount,\n  outputAmount,\n  tradeType,\n  hasStablePair,\n  isMM = false,\n}: AdvancedSwapDetailsProps) {\n  const { t } = useTranslation()\n  const [isModalOpen, setIsModalOpen] = useState(() => false)\n  const showRoute = Boolean(path && path.length > 1)\n  return (\n    <AutoColumn gap=\"0px\">\n      {inputAmount && (\n        <>\n          <TradeSummary\n            inputAmount={inputAmount}\n            outputAmount={outputAmount}\n            tradeType={tradeType}\n            slippageAdjustedAmounts={slippageAdjustedAmounts}\n            priceImpactWithoutFee={priceImpactWithoutFee}\n            realizedLPFee={realizedLPFee}\n            hasStablePair={hasStablePair}\n            isMM={isMM}\n          />\n          {showRoute && (\n            <>\n              <RowBetween style={{ padding: '0 16px' }}>\n                <span style={{ display: 'flex', alignItems: 'center' }}>\n                  <Text fontSize=\"14px\" color=\"textSubtle\">\n                    {t('Route')}\n                  </Text>\n                  <QuestionHelper\n                    text={t('Routing through these tokens resulted in the best price for your trade.')}\n                    ml=\"4px\"\n                    placement=\"top-start\"\n                  />\n                </span>\n                <SwapRoute path={path} />\n                <SearchIcon style={{ cursor: 'pointer' }} onClick={() => setIsModalOpen(true)} />\n                <ModalV2 closeOnOverlayClick isOpen={isModalOpen} onDismiss={() => setIsModalOpen(false)}>\n                  <Modal\n                    title={\n                      <Flex justifyContent=\"center\">\n                        {t('Route')}{' '}\n                        <QuestionHelper\n                          text={t('Routing through these tokens resulted in the best price for your trade.')}\n                          ml=\"4px\"\n                          placement=\"top-start\"\n                        />\n                      </Flex>\n                    }\n                    onDismiss={() => setIsModalOpen(false)}\n                  >\n                    <RouterViewer\n                      isMM={isMM}\n                      inputCurrency={inputAmount.currency}\n                      pairs={pairs}\n                      path={path}\n                      outputCurrency={outputAmount.currency}\n                    />\n                  </Modal>\n                </ModalV2>\n              </RowBetween>\n            </>\n          )}\n        </>\n      )}\n    </AutoColumn>\n  )\n}\n","import styled from 'styled-components'\nimport { useMemo } from 'react'\n\nimport useLastTruthy from 'hooks/useLast'\n\nimport { AdvancedSwapDetails, AdvancedSwapDetailsProps } from './AdvancedSwapDetails'\n\nconst AdvancedDetailsFooter = styled.div<{ show: boolean }>`\n  margin-top: ${({ show }) => (show ? '16px' : 0)};\n  padding-top: 16px;\n  padding-bottom: 16px;\n  width: 100%;\n  max-width: 400px;\n  border-radius: 20px;\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(-100%)')};\n  transition: transform 300ms ease-in-out;\n`\n\nexport default function AdvancedSwapDetailsDropdown({\n  pairs,\n  path,\n  priceImpactWithoutFee,\n  realizedLPFee,\n  slippageAdjustedAmounts,\n  inputAmount,\n  outputAmount,\n  tradeType,\n  isMM = false,\n  ...rest\n}: AdvancedSwapDetailsProps) {\n  const trade = useMemo(\n    () => ({\n      pairs,\n      path,\n      priceImpactWithoutFee,\n      realizedLPFee,\n      slippageAdjustedAmounts,\n      inputAmount,\n      outputAmount,\n      tradeType,\n    }),\n    [pairs, path, priceImpactWithoutFee, realizedLPFee, slippageAdjustedAmounts, inputAmount, outputAmount, tradeType],\n  )\n  const lastTrade = useLastTruthy(trade)\n\n  return (\n    <AdvancedDetailsFooter show={Boolean(inputAmount && outputAmount)}>\n      <AdvancedSwapDetails\n        {...rest}\n        pairs={pairs ?? lastTrade.pairs ?? undefined}\n        path={path ?? lastTrade.path ?? undefined}\n        priceImpactWithoutFee={priceImpactWithoutFee ?? lastTrade.priceImpactWithoutFee ?? undefined}\n        realizedLPFee={realizedLPFee ?? lastTrade.realizedLPFee ?? undefined}\n        slippageAdjustedAmounts={slippageAdjustedAmounts ?? lastTrade.slippageAdjustedAmounts ?? undefined}\n        inputAmount={inputAmount ?? lastTrade.inputAmount ?? undefined}\n        outputAmount={outputAmount ?? lastTrade.outputAmount ?? undefined}\n        tradeType={tradeType ?? lastTrade.tradeType ?? undefined}\n        isMM={isMM}\n      />\n    </AdvancedDetailsFooter>\n  )\n}\n","import { Svg, SvgProps } from '@pancakeswap/uikit'\n\n// NOTE: Temporary save icon here. Will move to uikit when the feature is done\n\nconst DisabledIcon = (props) => (\n  <Svg id=\"arrow_loading\" viewBox=\"0 0 24 24\" {...props}>\n    <path\n      stroke=\"none\"\n      fill=\"#D7CAEC\"\n      d=\"M16.2751 7.78995C13.932 5.44681 10.133 5.44681 7.78986 7.78995C7.02853 8.55128 6.51457 9.4663 6.24798 10.4351C6.24473 10.4499 6.24114 10.4646 6.23719 10.4793C6.17635 10.7064 6.12938 10.9339 6.09577 11.161C5.83159 12.9457 6.39255 14.7026 7.52624 15.9944C7.61054 16.0901 7.69842 16.1838 7.78986 16.2752C8.08307 16.5685 8.39909 16.825 8.7322 17.0448C9.25533 17.3892 9.84172 17.6568 10.4798 17.8278C10.7386 17.8971 10.9979 17.9484 11.2565 17.9825C12.9537 18.2061 14.6187 17.6866 15.8747 16.6415C16.0123 16.5265 16.1459 16.4044 16.2751 16.2752C16.2848 16.2655 16.2947 16.2561 16.3047 16.2469C17.0123 15.531 17.5491 14.627 17.8283 13.5851C17.9712 13.0517 18.5196 12.7351 19.053 12.878C19.5865 13.021 19.9031 13.5693 19.7602 14.1028C19.3141 15.7676 18.3745 17.1684 17.1409 18.1899C16.1883 18.9822 15.0949 19.5189 13.9515 19.8002C11.8607 20.3147 9.6028 19.9749 7.7328 18.7809C7.06855 18.3579 6.47841 17.8432 5.97519 17.2589C5.12341 16.2738 4.55173 15.1302 4.26015 13.9324C4.01698 12.9416 3.96104 11.8931 4.12168 10.8379C4.36697 9.20484 5.1183 7.63309 6.37564 6.37574C9.49984 3.25154 14.5652 3.25154 17.6894 6.37574L18.2332 6.91959L18.2337 5.49951C18.2338 5.05769 18.5921 4.69964 19.034 4.69979C19.4758 4.69995 19.8338 5.05825 19.8337 5.50007L19.8325 9.03277L19.8322 9.8325L19.0325 9.83249L18.9401 9.83249C18.8146 9.85665 18.6854 9.85665 18.5599 9.83248L15.5005 9.83245C15.0587 9.83245 14.7005 9.47427 14.7005 9.03244C14.7005 8.59062 15.0587 8.23245 15.5005 8.23245L16.7176 8.23246L16.2751 7.78995Z\"\n    />\n    <defs>\n      <path\n        id=\"arrow\"\n        stroke=\"none\"\n        fill=\"none\"\n        d=\"M16.2751 7.78995C13.932 5.44681 10.133 5.44681 7.78986 7.78995C7.02853 8.55128 6.51457 9.4663 6.24798 10.4351C6.24473 10.4499 6.24114 10.4646 6.23719 10.4793C6.17635 10.7064 6.12938 10.9339 6.09577 11.161C5.83159 12.9457 6.39255 14.7026 7.52624 15.9944C7.61054 16.0901 7.69842 16.1838 7.78986 16.2752C8.08307 16.5685 8.39909 16.825 8.7322 17.0448C9.25533 17.3892 9.84172 17.6568 10.4798 17.8278C10.7386 17.8971 10.9979 17.9484 11.2565 17.9825C12.9537 18.2061 14.6187 17.6866 15.8747 16.6415C16.0123 16.5265 16.1459 16.4044 16.2751 16.2752C16.2848 16.2655 16.2947 16.2561 16.3047 16.2469C17.0123 15.531 17.5491 14.627 17.8283 13.5851C17.9712 13.0517 18.5196 12.7351 19.053 12.878C19.5865 13.021 19.9031 13.5693 19.7602 14.1028C19.3141 15.7676 18.3745 17.1684 17.1409 18.1899C16.1883 18.9822 15.0949 19.5189 13.9515 19.8002C11.8607 20.3147 9.6028 19.9749 7.7328 18.7809C7.06855 18.3579 6.47841 17.8432 5.97519 17.2589C5.12341 16.2738 4.55173 15.1302 4.26015 13.9324C4.01698 12.9416 3.96104 11.8931 4.12168 10.8379C4.36697 9.20484 5.1183 7.63309 6.37564 6.37574C9.49984 3.25154 14.5652 3.25154 17.6894 6.37574L18.2332 6.91959L18.2337 5.49951C18.2338 5.05769 18.5921 4.69964 19.034 4.69979C19.4758 4.69995 19.8338 5.05825 19.8337 5.50007L19.8325 9.03277L19.8322 9.8325L19.0325 9.83249L18.9401 9.83249C18.8146 9.85665 18.6854 9.85665 18.5599 9.83248L15.5005 9.83245C15.0587 9.83245 14.7005 9.47427 14.7005 9.03244C14.7005 8.59062 15.0587 8.23245 15.5005 8.23245L16.7176 8.23246L16.2751 7.78995Z\"\n      />\n      <clipPath id=\"arrow-clip\">\n        <use xlinkHref=\"#arrow\" />\n      </clipPath>\n    </defs>\n  </Svg>\n)\n\nconst Icon = ({ disabled, duration, ...props }: SvgProps & { disabled?: boolean; duration?: number | string }) =>\n  disabled ? (\n    <DisabledIcon {...props} />\n  ) : (\n    <Svg id=\"arrow_loading\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        stroke=\"none\"\n        fill=\"#7A6EAA\"\n        d=\"M16.2751 7.78995C13.932 5.44681 10.133 5.44681 7.78986 7.78995C7.02853 8.55128 6.51457 9.4663 6.24798 10.4351C6.24473 10.4499 6.24114 10.4646 6.23719 10.4793C6.17635 10.7064 6.12938 10.9339 6.09577 11.161C5.83159 12.9457 6.39255 14.7026 7.52624 15.9944C7.61054 16.0901 7.69842 16.1838 7.78986 16.2752C8.08307 16.5685 8.39909 16.825 8.7322 17.0448C9.25533 17.3892 9.84172 17.6568 10.4798 17.8278C10.7386 17.8971 10.9979 17.9484 11.2565 17.9825C12.9537 18.2061 14.6187 17.6866 15.8747 16.6415C16.0123 16.5265 16.1459 16.4044 16.2751 16.2752C16.2848 16.2655 16.2947 16.2561 16.3047 16.2469C17.0123 15.531 17.5491 14.627 17.8283 13.5851C17.9712 13.0517 18.5196 12.7351 19.053 12.878C19.5865 13.021 19.9031 13.5693 19.7602 14.1028C19.3141 15.7676 18.3745 17.1684 17.1409 18.1899C16.1883 18.9822 15.0949 19.5189 13.9515 19.8002C11.8607 20.3147 9.6028 19.9749 7.7328 18.7809C7.06855 18.3579 6.47841 17.8432 5.97519 17.2589C5.12341 16.2738 4.55173 15.1302 4.26015 13.9324C4.01698 12.9416 3.96104 11.8931 4.12168 10.8379C4.36697 9.20484 5.1183 7.63309 6.37564 6.37574C9.49984 3.25154 14.5652 3.25154 17.6894 6.37574L18.2332 6.91959L18.2337 5.49951C18.2338 5.05769 18.5921 4.69964 19.034 4.69979C19.4758 4.69995 19.8338 5.05825 19.8337 5.50007L19.8325 9.03277L19.8322 9.8325L19.0325 9.83249L18.9401 9.83249C18.8146 9.85665 18.6854 9.85665 18.5599 9.83248L15.5005 9.83245C15.0587 9.83245 14.7005 9.47427 14.7005 9.03244C14.7005 8.59062 15.0587 8.23245 15.5005 8.23245L16.7176 8.23246L16.2751 7.78995Z\"\n      />\n      <defs>\n        <path\n          id=\"arrow\"\n          stroke=\"none\"\n          fill=\"none\"\n          d=\"M16.2751 7.78995C13.932 5.44681 10.133 5.44681 7.78986 7.78995C7.02853 8.55128 6.51457 9.4663 6.24798 10.4351C6.24473 10.4499 6.24114 10.4646 6.23719 10.4793C6.17635 10.7064 6.12938 10.9339 6.09577 11.161C5.83159 12.9457 6.39255 14.7026 7.52624 15.9944C7.61054 16.0901 7.69842 16.1838 7.78986 16.2752C8.08307 16.5685 8.39909 16.825 8.7322 17.0448C9.25533 17.3892 9.84172 17.6568 10.4798 17.8278C10.7386 17.8971 10.9979 17.9484 11.2565 17.9825C12.9537 18.2061 14.6187 17.6866 15.8747 16.6415C16.0123 16.5265 16.1459 16.4044 16.2751 16.2752C16.2848 16.2655 16.2947 16.2561 16.3047 16.2469C17.0123 15.531 17.5491 14.627 17.8283 13.5851C17.9712 13.0517 18.5196 12.7351 19.053 12.878C19.5865 13.021 19.9031 13.5693 19.7602 14.1028C19.3141 15.7676 18.3745 17.1684 17.1409 18.1899C16.1883 18.9822 15.0949 19.5189 13.9515 19.8002C11.8607 20.3147 9.6028 19.9749 7.7328 18.7809C7.06855 18.3579 6.47841 17.8432 5.97519 17.2589C5.12341 16.2738 4.55173 15.1302 4.26015 13.9324C4.01698 12.9416 3.96104 11.8931 4.12168 10.8379C4.36697 9.20484 5.1183 7.63309 6.37564 6.37574C9.49984 3.25154 14.5652 3.25154 17.6894 6.37574L18.2332 6.91959L18.2337 5.49951C18.2338 5.05769 18.5921 4.69964 19.034 4.69979C19.4758 4.69995 19.8338 5.05825 19.8337 5.50007L19.8325 9.03277L19.8322 9.8325L19.0325 9.83249L18.9401 9.83249C18.8146 9.85665 18.6854 9.85665 18.5599 9.83248L15.5005 9.83245C15.0587 9.83245 14.7005 9.47427 14.7005 9.03244C14.7005 8.59062 15.0587 8.23245 15.5005 8.23245L16.7176 8.23246L16.2751 7.78995Z\"\n        />\n        <clipPath id=\"arrow-clip\">\n          <use xlinkHref=\"#arrow\" />\n        </clipPath>\n      </defs>\n      <g clipPath=\"url(#arrow-clip)\">\n        <circle\n          cx=\"12\"\n          cy=\"12\"\n          r=\"5\"\n          transform=\"rotate(365,12,12)\"\n          fill=\"none\"\n          stroke=\"#D7CAEC\"\n          strokeWidth=\"16\"\n          strokeDasharray=\"30\"\n          strokeDashoffset=\"0\"\n        >\n          <animate\n            attributeName=\"stroke-dashoffset\"\n            values=\"0;-30\"\n            begin=\"arrow_loading.click; 0.7s\"\n            repeatCount=\"indefinite\"\n            dur={`${duration || 6.3}s`}\n          />\n        </circle>\n      </g>\n      <use xlinkHref=\"#arrow\" />\n      <animateTransform\n        id=\"transform_0\"\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        from=\"0 0 0\"\n        to=\"-10 0 0\"\n        dur=\"0.07s\"\n        begin=\"arrow_loading.click;\"\n        repeatCount=\"1\"\n      />\n      <animateTransform\n        id=\"transform_1\"\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        from=\"-45 0 0\"\n        to=\"390 0 0\"\n        dur=\"0.6s\"\n        begin=\"transform_0.end\"\n        repeatCount=\"1\"\n      />\n      <animateTransform\n        id=\"transform_2\"\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        from=\"390 0 0\"\n        to=\"360 0 0\"\n        dur=\"0.15s\"\n        begin=\"transform_1.end\"\n        repeatCount=\"1\"\n      />\n    </Svg>\n  )\n\nexport default Icon\n","import React, { createContext, useState, useEffect, useMemo } from 'react'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { useExchangeChartManager } from 'state/user/hooks'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\n\nexport const SwapFeaturesContext = createContext<{\n  isChartSupported: boolean\n  isStableSupported: boolean\n  isAccessTokenSupported: boolean\n  isChartExpanded: boolean\n  isChartDisplayed: boolean\n  setIsChartExpanded: React.Dispatch<React.SetStateAction<boolean>>\n  setIsChartDisplayed: React.Dispatch<React.SetStateAction<boolean>>\n}>({\n  isChartSupported: false,\n  isStableSupported: false,\n  isAccessTokenSupported: false,\n  isChartExpanded: false,\n  isChartDisplayed: false,\n  setIsChartExpanded: null,\n  setIsChartDisplayed: null,\n})\n\nconst CHART_SUPPORT_CHAIN_IDS = [ChainId.BSC]\nconst ACCESS_TOKEN_SUPPORT_CHAIN_IDS = [ChainId.BSC]\nconst STABLE_SUPPORT_CHAIN_IDS = [ChainId.BSC_TESTNET, ChainId.BSC]\n\nexport const SwapFeaturesProvider: React.FC<React.PropsWithChildren> = ({ children }) => {\n  const { isMobile } = useMatchBreakpoints()\n  const { chainId } = useActiveChainId()\n  const [userChartPreference, setUserChartPreference] = useExchangeChartManager(isMobile)\n  const [isChartDisplayed, setIsChartDisplayed] = useState(userChartPreference)\n  const [isChartExpanded, setIsChartExpanded] = useState(false)\n\n  const isChartSupported = useMemo(\n    () =>\n      // avoid layout shift, by default showing\n      !chainId || CHART_SUPPORT_CHAIN_IDS.includes(chainId),\n    [chainId],\n  )\n\n  const isStableSupported = useMemo(() => !chainId || STABLE_SUPPORT_CHAIN_IDS.includes(chainId), [chainId])\n\n  const isAccessTokenSupported = useMemo(() => ACCESS_TOKEN_SUPPORT_CHAIN_IDS.includes(chainId), [chainId])\n\n  useEffect(() => {\n    setUserChartPreference(isChartDisplayed)\n  }, [isChartDisplayed, setUserChartPreference])\n\n  const value = useMemo(() => {\n    return {\n      isChartSupported,\n      isStableSupported,\n      isAccessTokenSupported,\n      isChartDisplayed,\n      setIsChartDisplayed,\n      isChartExpanded,\n      setIsChartExpanded,\n    }\n  }, [\n    isChartSupported,\n    isStableSupported,\n    isAccessTokenSupported,\n    isChartDisplayed,\n    setIsChartDisplayed,\n    isChartExpanded,\n    setIsChartExpanded,\n  ])\n\n  return <SwapFeaturesContext.Provider value={value}>{children}</SwapFeaturesContext.Provider>\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport {\n  ChartDisableIcon,\n  ChartIcon,\n  Flex,\n  HistoryIcon,\n  HotDisableIcon,\n  HotIcon,\n  IconButton,\n  NotificationDot,\n  Swap,\n  Text,\n  TooltipText,\n  TrophyGoldIcon,\n  useModal,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport TransactionsModal from 'components/App/Transactions/TransactionsModal'\nimport GlobalSettings from 'components/Menu/GlobalSettings'\nimport RefreshIcon from 'components/Svg/RefreshIcon'\nimport { useSwapHotTokenDisplay } from 'hooks/useSwapHotTokenDisplay'\nimport { useAtom } from 'jotai'\nimport { ReactElement, useCallback, useContext, useEffect, useState } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { useExpertModeManager } from 'state/user/hooks'\nimport styled, { keyframes } from 'styled-components'\nimport atomWithStorageWithErrorCatch from 'utils/atomWithStorageWithErrorCatch'\nimport { SettingsMode } from '../../../components/Menu/GlobalSettings/types'\nimport { SwapFeaturesContext } from '../SwapFeaturesContext'\n\ninterface Props {\n  title: string | ReactElement\n  subtitle: string\n  noConfig?: boolean\n  setIsChartDisplayed?: React.Dispatch<React.SetStateAction<boolean>>\n  isChartDisplayed?: boolean\n  hasAmount: boolean\n  onRefreshPrice: () => void\n}\n\nconst shineAnimation = keyframes`\n\t0% {transform:translateX(-100%); opacity: 1;}\n  20% {transform:translateX(100%); opacity: 1;}\n\t100% {transform:translateX(100%); opacity: 0;}\n`\n\nconst ColoredIconButton = styled(IconButton)`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  overflow: hidden;\n  &.is-shining {\n    &::after {\n      content: '';\n      top: 0;\n      transform: translateX(100%);\n      width: 100%;\n      height: 100%;\n      position: absolute;\n      z-index: 1;\n      animation: ${shineAnimation} 5s infinite 1s;\n      pointer-events: none;\n      background: -webkit-linear-gradient(\n        left,\n        ${({ theme }) =>\n          theme.isDark\n            ? `rgba(39,38,44, 0) 0%,\n        rgba(39,38,44, 0) 100%`\n            : `rgba(255, 255, 255, 0) 0%,\n        rgba(255, 255, 255, 0.8) 50%,\n        rgba(128, 186, 232, 0) 99%,\n        rgba(125, 185, 232, 0) 100%`}\n      );\n    }\n  }\n`\n\n//  disable this during the eth trust wallet campaign\nconst mobileShowOnceTokenHighlightAtom = atomWithStorageWithErrorCatch('pcs::mobileShowOnceTokenHighlightV2', true)\n\nconst CurrencyInputHeader: React.FC<React.PropsWithChildren<Props>> = ({\n  subtitle,\n  hasAmount,\n  onRefreshPrice,\n  title,\n}) => {\n  const { t } = useTranslation()\n  const [mobileTooltipShowOnce, setMobileTooltipShowOnce] = useAtom(mobileShowOnceTokenHighlightAtom)\n  const [mobileTooltipShow, setMobileTooltipShow] = useState(false)\n  const [mobileCampaignTooltipShow, setMobileCampaignTooltipShow] = useState(false)\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(<Text>{t('Check out the top traded tokens')}</Text>, {\n    placement: isMobile ? 'top' : 'bottom',\n    trigger: isMobile ? 'focus' : 'hover',\n    ...(isMobile && { manualVisible: mobileTooltipShow }),\n  })\n  const {\n    tooltip: campaignTooltip,\n    tooltipVisible: campaignTooltipVisible,\n    targetRef: campaignTargetRef,\n  } = useTooltip(<Text>{t('Trade and Share $10,000')}</Text>, {\n    placement: 'top',\n    trigger: 'hover',\n    manualVisible: mobileCampaignTooltipShow,\n    avoidToStopPropagation: true,\n  })\n  const { isChartSupported, isChartDisplayed, setIsChartDisplayed } = useContext(SwapFeaturesContext)\n  const [expertMode] = useExpertModeManager()\n  const toggleChartDisplayed = () => {\n    setIsChartDisplayed((currentIsChartDisplayed) => !currentIsChartDisplayed)\n  }\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n  const handleOnClick = useCallback(() => onRefreshPrice?.(), [onRefreshPrice])\n  const [isSwapHotTokenDisplay, setIsSwapHotTokenDisplay] = useSwapHotTokenDisplay()\n\n  const mobileTooltipClickOutside = useCallback(() => {\n    setMobileTooltipShow(false)\n    setMobileCampaignTooltipShow(false)\n  }, [])\n\n  useEffect(() => {\n    setTimeout(() => {\n      setMobileCampaignTooltipShow(true)\n    }, 100)\n  }, [])\n\n  useEffect(() => {\n    if (isMobile && !mobileTooltipShowOnce) {\n      setMobileTooltipShow(true)\n      setMobileTooltipShowOnce(true)\n    }\n  }, [mobileTooltipShowOnce, setMobileTooltipShowOnce])\n\n  useEffect(() => {\n    document.body.addEventListener('click', mobileTooltipClickOutside)\n    return () => {\n      document.body.removeEventListener('click', mobileTooltipClickOutside)\n    }\n  }, [mobileTooltipClickOutside])\n\n  const titleContent = (\n    <Flex width=\"100%\" alignItems=\"center\" justifyContent=\"space-between\" flexDirection=\"column\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\" width=\"100%\" marginBottom={15}>\n        <Swap.CurrencyInputHeaderTitle>{title}</Swap.CurrencyInputHeaderTitle>\n      </Flex>\n      <Flex justifyContent=\"start\" width=\"100%\" height=\"17px\" alignItems=\"center\" mb=\"14px\">\n        <Swap.CurrencyInputHeaderSubTitle>{subtitle}</Swap.CurrencyInputHeaderSubTitle>\n      </Flex>\n      <Flex width=\"100%\" justifyContent=\"end\">\n        {/* <>\n          <ColoredIconButton className=\"is-shining\" variant=\"text\" scale=\"sm\">\n            <TooltipText\n              ref={campaignTargetRef}\n              display=\"flex\"\n              onClick={() => setMobileCampaignTooltipShow(false)}\n              style={{ justifyContent: 'center' }}\n            >\n              <TrophyGoldIcon\n                onClick={() => {\n                  window.open(\n                    'https://medium.com/pancakeswap/introducing-market-maker-integration-on-ethereum-pancakeswap-trade-and-share-10-000-usdc-in-724df104716',\n                    '_blank',\n                    'noreferrer noopener',\n                  )\n                }}\n                width={27}\n              />\n            </TooltipText>\n          </ColoredIconButton>\n          {campaignTooltipVisible && campaignTooltip}\n        </> */}\n\n        {/* {isChartSupported && setIsChartDisplayed && (\n          <ColoredIconButton\n            onClick={() => {\n              if (!isChartDisplayed && isSwapHotTokenDisplay) {\n                setIsSwapHotTokenDisplay(false)\n              }\n              toggleChartDisplayed()\n            }}\n            variant=\"text\"\n            scale=\"sm\"\n          >\n            {isChartDisplayed ? <ChartDisableIcon color=\"textSubtle\" /> : <ChartIcon width=\"24px\" color=\"textSubtle\" />}\n          </ColoredIconButton>\n        )} */}\n        {/* <ColoredIconButton\n          variant=\"text\"\n          scale=\"sm\"\n          onClick={() => {\n            if (!isSwapHotTokenDisplay && isChartDisplayed) {\n              toggleChartDisplayed()\n            }\n            setIsSwapHotTokenDisplay(!isSwapHotTokenDisplay)\n          }}\n        >\n          {isSwapHotTokenDisplay ? (\n            <HotDisableIcon color=\"textSubtle\" width=\"24px\" />\n          ) : (\n            <>\n              <TooltipText\n                ref={targetRef}\n                onClick={() => setMobileTooltipShow(false)}\n                display=\"flex\"\n                style={{ justifyContent: 'center' }}\n              >\n                <HotIcon color=\"textSubtle\" width=\"24px\" />\n              </TooltipText>\n              {tooltipVisible && (!isMobile || mobileTooltipShow) && tooltip}\n            </>\n          )}\n        </ColoredIconButton> */}\n        <NotificationDot show={expertMode}>\n          <GlobalSettings color=\"textSubtle\" mr=\"0\" mode={SettingsMode.SWAP_LIQUIDITY} />\n        </NotificationDot>\n        <IconButton onClick={onPresentTransactionsModal} variant=\"text\" scale=\"sm\">\n          <HistoryIcon color=\"textSubtle\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"text\" scale=\"sm\" onClick={handleOnClick}>\n          <RefreshIcon disabled={!hasAmount} color=\"textSubtle\" width=\"27px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n\n  return <Swap.CurrencyInputHeader title={titleContent} subtitle={<></>} />\n}\n\nexport default CurrencyInputHeader\n","import { useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Trade, TradeType, CurrencyAmount, Currency } from '@pancakeswap/sdk'\nimport { Button, Text, AutoRenewIcon, QuestionHelper, AutoColumn } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Field } from 'state/swap/actions'\nimport { computeTradePriceBreakdown, formatExecutionPrice, warningSeverity } from 'utils/exchange'\nimport { AutoRow, RowBetween, RowFixed } from 'components/Layout/Row'\nimport { TOTAL_FEE, LP_HOLDERS_FEE, TREASURY_FEE, BUYBACK_FEE } from 'config/constants/info'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds'\n\nconst SwapModalFooterContainer = styled(AutoColumn)`\n  margin-top: 24px;\n  padding: 16px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nexport default function SwapModalFooter({\n  trade,\n  slippageAdjustedAmounts,\n  isEnoughInputBalance,\n  onConfirm,\n  swapErrorMessage,\n  disabledConfirm,\n}: {\n  trade: Trade<Currency, Currency, TradeType>\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  isEnoughInputBalance: boolean\n  onConfirm: () => void\n  swapErrorMessage?: string | undefined\n  disabledConfirm: boolean\n}) {\n  const { t } = useTranslation()\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\n  const severity = warningSeverity(priceImpactWithoutFee)\n\n  const totalFeePercent = `${(TOTAL_FEE * 100).toFixed(2)}%`\n  const lpHoldersFeePercent = `${(LP_HOLDERS_FEE * 100).toFixed(2)}%`\n  const treasuryFeePercent = `${(TREASURY_FEE * 100).toFixed(4)}%`\n  const buyBackFeePercent = `${(BUYBACK_FEE * 100).toFixed(4)}%`\n\n  return (\n    <>\n      <SwapModalFooterContainer>\n        <RowBetween align=\"center\">\n          <Text fontSize=\"14px\">{t('Price')}</Text>\n          <Text\n            fontSize=\"14px\"\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '10px',\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <AutoRenewIcon width=\"14px\" />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT ? t('Minimum received') : t('Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={t(\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.',\n              )}\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </Text>\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Price Impact')}</Text>\n            <QuestionHelper\n              text={t('The difference between the market price and your price due to trade size.')}\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Liquidity Provider Fee')}</Text>\n            <QuestionHelper\n              text={\n                <>\n                  <Text mb=\"12px\">{t('For each trade a %amount% fee is paid', { amount: totalFeePercent })}</Text>\n                  <Text>- {t('%amount% to LP token holders', { amount: lpHoldersFeePercent })}</Text>\n                  <Text>- {t('%amount% to the Treasury', { amount: treasuryFeePercent })}</Text>\n                  <Text>- {t('%amount% towards CAKE buyback and burn', { amount: buyBackFeePercent })}</Text>\n                </>\n              }\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </SwapModalFooterContainer>\n\n      <AutoRow>\n        <Button\n          variant={severity > 2 ? 'danger' : 'primary'}\n          onClick={onConfirm}\n          disabled={disabledConfirm}\n          mt=\"12px\"\n          id=\"confirm-swap-or-send\"\n          width=\"100%\"\n        >\n          {severity > 2 || (trade.tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance)\n            ? t('Swap Anyway')\n            : t('Confirm Swap')}\n        </Button>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n","import { useMemo } from 'react'\nimport { TradeType, CurrencyAmount, Currency, Percent } from '@pancakeswap/sdk'\nimport { Button, Text, ErrorIcon, ArrowDownIcon, AutoColumn } from '@pancakeswap/uikit'\nimport { Field } from 'state/swap/actions'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { warningSeverity, basisPointsToPercent } from 'utils/exchange'\nimport { CurrencyLogo } from 'components/Logo'\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport truncateHash from '@pancakeswap/utils/truncateHash'\nimport { TruncatedText, SwapShowAcceptChanges } from './styleds'\n\nexport default function SwapModalHeader({\n  inputAmount,\n  outputAmount,\n  tradeType,\n  priceImpactWithoutFee,\n  slippageAdjustedAmounts,\n  isEnoughInputBalance,\n  recipient,\n  showAcceptChanges,\n  onAcceptChanges,\n  allowedSlippage,\n}: {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n  tradeType: TradeType\n  priceImpactWithoutFee?: Percent\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  isEnoughInputBalance: boolean\n  recipient: string | null\n  showAcceptChanges: boolean\n  onAcceptChanges: () => void\n  allowedSlippage: number\n}) {\n  const { t } = useTranslation()\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  const inputTextColor =\n    showAcceptChanges && tradeType === TradeType.EXACT_OUTPUT && isEnoughInputBalance\n      ? 'primary'\n      : tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance\n      ? 'failure'\n      : 'text'\n\n  const amount =\n    tradeType === TradeType.EXACT_INPUT\n      ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(6)\n      : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(6)\n  const symbol = tradeType === TradeType.EXACT_INPUT ? outputAmount.currency.symbol : inputAmount.currency.symbol\n\n  const tradeInfoText = useMemo(() => {\n    return tradeType === TradeType.EXACT_INPUT\n      ? t('Output is estimated. You will receive at least %amount% %symbol% or the transaction will revert.', {\n          amount,\n          symbol,\n        })\n      : t('Input is estimated. You will sell at most %amount% %symbol% or the transaction will revert.', {\n          amount,\n          symbol,\n        })\n  }, [t, tradeType, amount, symbol])\n\n  const truncatedRecipient = recipient ? truncateHash(recipient) : ''\n\n  const recipientInfoText = t('Output will be sent to %recipient%', {\n    recipient: truncatedRecipient,\n  })\n\n  const [recipientSentToText, postSentToText] = recipientInfoText.split(truncatedRecipient)\n\n  return (\n    <AutoColumn gap=\"md\">\n      <RowBetween align=\"flex-end\">\n        <RowFixed gap=\"4px\">\n          <CurrencyLogo currency={inputAmount.currency} size=\"24px\" style={{ marginRight: '12px' }} />\n          <TruncatedText fontSize=\"24px\" color={inputTextColor}>\n            {inputAmount.toSignificant(6)}\n          </TruncatedText>\n        </RowFixed>\n        <RowFixed gap=\"0px\">\n          <Text fontSize=\"24px\" ml=\"10px\">\n            {inputAmount.currency.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      <RowFixed>\n        <ArrowDownIcon width=\"16px\" ml=\"4px\" />\n      </RowFixed>\n      <RowBetween align=\"flex-end\">\n        <RowFixed gap=\"4px\">\n          <CurrencyLogo currency={outputAmount.currency} size=\"24px\" />\n          <TruncatedText\n            fontSize=\"24px\"\n            color={\n              priceImpactSeverity > 2\n                ? 'failure'\n                : showAcceptChanges && tradeType === TradeType.EXACT_INPUT\n                ? 'primary'\n                : 'text'\n            }\n          >\n            {outputAmount.toSignificant(6)}\n          </TruncatedText>\n        </RowFixed>\n        <RowFixed>\n          <Text fontSize=\"24px\" ml=\"10px\">\n            {outputAmount.currency.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      {showAcceptChanges ? (\n        <SwapShowAcceptChanges justify=\"flex-start\" gap=\"0px\">\n          <RowBetween>\n            <RowFixed>\n              <ErrorIcon mr=\"8px\" />\n              <Text bold> {t('Price Updated')}</Text>\n            </RowFixed>\n            <Button onClick={onAcceptChanges}>{t('Accept')}</Button>\n          </RowBetween>\n        </SwapShowAcceptChanges>\n      ) : null}\n      <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '24px 0 0 0px' }}>\n        <RowFixed style={{ width: '100%' }}>\n          <Text color=\"secondary\" bold textTransform=\"uppercase\">\n            {t('Slippage Tolerance')}\n          </Text>\n          <Text bold color=\"primary\" ml=\"auto\" textAlign=\"end\">\n            {`${basisPointsToPercent(allowedSlippage).toFixed(1)}%`}\n          </Text>\n        </RowFixed>\n        {tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance && (\n          <Text small color=\"failure\" textAlign=\"left\" style={{ width: '100%' }}>\n            {t('Insufficient input token balance. Your transaction may fail.')}\n          </Text>\n        )}\n        <Text small color=\"textSubtle\" textAlign=\"left\" style={{ maxWidth: '320px' }}>\n          {tradeInfoText}\n        </Text>\n      </AutoColumn>\n      {recipient !== null ? (\n        <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }}>\n          <Text color=\"textSubtle\">\n            {recipientSentToText}\n            <b title={recipient}>{truncatedRecipient}</b>\n            {postSentToText}\n          </Text>\n        </AutoColumn>\n      ) : null}\n    </AutoColumn>\n  )\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport { AutoRenewIcon, Button, QuestionHelper, Text, AutoColumn } from '@pancakeswap/uikit'\nimport { AutoRow, RowBetween, RowFixed } from 'components/Layout/Row'\nimport { useState } from 'react'\nimport { Field } from 'state/swap/actions'\nimport styled from 'styled-components'\nimport { formatExecutionPrice } from 'utils/exchange'\nimport { StableTrade } from 'views/Swap/StableSwap/hooks/useStableTradeExactIn'\nimport { StyledBalanceMaxMini, SwapCallbackError } from '../../components/styleds'\n\nconst SwapModalFooterContainer = styled(AutoColumn)`\n  margin-top: 24px;\n  padding: 16px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nexport default function StableSwapModalFooter({\n  trade,\n  slippageAdjustedAmounts,\n  isEnoughInputBalance,\n  onConfirm,\n  swapErrorMessage,\n  disabledConfirm,\n}: {\n  trade: StableTrade\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  isEnoughInputBalance: boolean\n  onConfirm: () => void\n  swapErrorMessage?: string | undefined\n  disabledConfirm: boolean\n}) {\n  const { t } = useTranslation()\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  return (\n    <>\n      <SwapModalFooterContainer>\n        <RowBetween align=\"center\">\n          <Text fontSize=\"14px\">{t('Price')}</Text>\n          <Text\n            fontSize=\"14px\"\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '10px',\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <AutoRenewIcon width=\"14px\" />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT ? t('Minimum received') : t('Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={t(\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.',\n              )}\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </Text>\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n      </SwapModalFooterContainer>\n\n      <AutoRow>\n        <Button\n          variant=\"primary\"\n          onClick={onConfirm}\n          disabled={disabledConfirm}\n          mt=\"12px\"\n          id=\"confirm-swap-or-send\"\n          width=\"100%\"\n        >\n          {trade.tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance ? t('Swap Anyway') : t('Confirm Swap')}\n        </Button>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n","import { Currency, CurrencyAmount, Fraction, JSBI, Percent, TradeType, ChainId } from '@pancakeswap/sdk'\nimport { TradeWithStableSwap, Trade, isStableSwapPair } from '@pancakeswap/smart-router/evm'\n\nimport { BIPS_BASE, INPUT_FRACTION_AFTER_FEE, ONE_HUNDRED_PERCENT } from 'config/constants/exchange'\nimport { Field } from 'state/swap/actions'\nimport { basisPointsToPercent } from 'utils/exchange'\nimport PancakeSwapSmartRouterABI from 'config/abi/pancakeSwapSmartRouter.json'\nimport { PancakeSwapSmartRouter } from 'config/abi/types/PancakeSwapSmartRouter'\nimport { useContract } from 'hooks/useContract'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { ChainMap } from 'config/constants/types'\n\nexport const SMART_ROUTER_ADDRESS: ChainMap<string> = {\n  [ChainId.ETHEREUM]: '',\n  [ChainId.GOERLI]: '',\n  [ChainId.BSC]: '0xC6665d98Efd81f47B03801187eB46cbC63F328B0',\n  [ChainId.BSC_TESTNET]: '0xCF457465fC0E98a50Bc3E1b3DDAAF1373622f059',\n}\n\nexport function useSmartRouterContract() {\n  const { chainId } = useActiveChainId()\n  return useContract<PancakeSwapSmartRouter>(SMART_ROUTER_ADDRESS[chainId], PancakeSwapSmartRouterABI, true)\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount<Currency>, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.quotient, JSBI.BigInt(10000 - slippage)), BIPS_BASE),\n    JSBI.divide(JSBI.multiply(value.quotient, JSBI.BigInt(10000 + slippage)), BIPS_BASE),\n  ]\n}\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade?: TradeWithStableSwap<Currency, Currency, TradeType> | null): {\n  priceImpactWithoutFee: Percent | undefined\n  realizedLPFee: CurrencyAmount<Currency> | undefined | null\n} {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction, pair): Fraction =>\n            currentFee.multiply(\n              isStableSwapPair(pair) ? ONE_HUNDRED_PERCENT.subtract(pair.fee) : INPUT_FRACTION_AFTER_FEE,\n            ),\n          ONE_HUNDRED_PERCENT,\n        ),\n      )\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction =\n    trade && realizedLPFee ? Trade.priceImpact(trade).subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    CurrencyAmount.fromRawAmount(\n      trade.inputAmount.currency,\n      realizedLPFee.multiply(trade.inputAmount.quotient).quotient,\n    )\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n  trade: TradeWithStableSwap<Currency, Currency, TradeType> | undefined,\n  allowedSlippage: number,\n): { [field in Field]?: CurrencyAmount<Currency> } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade && Trade.maximumAmountIn(trade, pct),\n    [Field.OUTPUT]: trade && Trade.minimumAmountOut(trade, pct),\n  }\n}\n\nexport function formatExecutionPrice(\n  trade?: TradeWithStableSwap<Currency, Currency, TradeType>,\n  inverted?: boolean,\n): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${Trade.executionPrice(trade).invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${Trade.executionPrice(trade).toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n","import { useCallback, useMemo, memo } from 'react'\nimport { Currency, Trade, TradeType } from '@pancakeswap/sdk'\nimport { ConfirmationModalContent } from '@pancakeswap/uikit'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport { Field } from 'state/swap/actions'\nimport { computeSlippageAdjustedAmounts } from 'utils/exchange'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\nimport StableSwapModalFooter from '../StableSwap/components/StableSwapModalFooter'\nimport { computeTradePriceBreakdown } from '../SmartSwap/utils/exchange'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(\n  tradeA: Trade<Currency, Currency, TradeType>,\n  tradeB: Trade<Currency, Currency, TradeType>,\n): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\nconst TransactionConfirmSwapContent = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  recipient,\n  currencyBalances,\n  isStable,\n}) => {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade],\n  )\n\n  const slippageAdjustedAmounts = useMemo(\n    () => computeSlippageAdjustedAmounts(trade, allowedSlippage),\n    [trade, allowedSlippage],\n  )\n\n  const isEnoughInputBalance = useMemo(() => {\n    if (trade?.tradeType !== TradeType.EXACT_OUTPUT) return null\n\n    const isInputBalanceExist = !!(currencyBalances && currencyBalances[Field.INPUT])\n    const isInputBalanceBNB = isInputBalanceExist && currencyBalances[Field.INPUT].currency.isNative\n    const inputCurrencyAmount = isInputBalanceExist\n      ? isInputBalanceBNB\n        ? maxAmountSpend(currencyBalances[Field.INPUT])\n        : currencyBalances[Field.INPUT]\n      : null\n    return inputCurrencyAmount && slippageAdjustedAmounts && slippageAdjustedAmounts[Field.INPUT]\n      ? inputCurrencyAmount.greaterThan(slippageAdjustedAmounts[Field.INPUT]) ||\n          inputCurrencyAmount.equalTo(slippageAdjustedAmounts[Field.INPUT])\n      : false\n  }, [currencyBalances, trade, slippageAdjustedAmounts])\n\n  const { priceImpactWithoutFee } = useMemo(() => {\n    return isStable ? { priceImpactWithoutFee: undefined } : computeTradePriceBreakdown(trade)\n  }, [isStable, trade])\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        inputAmount={trade.inputAmount}\n        outputAmount={trade.outputAmount}\n        tradeType={trade.tradeType}\n        priceImpactWithoutFee={priceImpactWithoutFee}\n        allowedSlippage={allowedSlippage}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        isEnoughInputBalance={isEnoughInputBalance}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [\n    allowedSlippage,\n    onAcceptChanges,\n    recipient,\n    showAcceptChanges,\n    trade,\n    slippageAdjustedAmounts,\n    isEnoughInputBalance,\n    priceImpactWithoutFee,\n  ])\n\n  const modalBottom = useCallback(() => {\n    const SwapModalF = isStable ? StableSwapModalFooter : SwapModalFooter\n\n    return trade ? (\n      <SwapModalF\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        isEnoughInputBalance={isEnoughInputBalance}\n      />\n    ) : null\n  }, [onConfirm, showAcceptChanges, trade, isEnoughInputBalance, slippageAdjustedAmounts, isStable])\n\n  return <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n}\n\nexport default memo(TransactionConfirmSwapContent)\n","import { Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst ConfirmSwapModalContainer = ({ children, handleDismiss }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Modal title={t('Confirm Swap')} headerBackground=\"gradientCardHeader\" onDismiss={handleDismiss}>\n      {children}\n    </Modal>\n  )\n}\n\nexport default ConfirmSwapModalContainer\n","import { useCallback, memo, useMemo } from 'react'\nimport { Trade, Currency, TradeType, CurrencyAmount } from '@pancakeswap/sdk'\nimport {\n  InjectedModalProps,\n  LinkExternal,\n  Text,\n  TransactionErrorContent,\n  ConfirmationPendingContent,\n} from '@pancakeswap/uikit'\nimport { TransactionSubmittedContent } from 'components/TransactionConfirmationModal'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Field } from 'state/swap/actions'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport TransactionConfirmSwapContent from './TransactionConfirmSwapContent'\nimport ConfirmSwapModalContainer from './ConfirmSwapModalContainer'\nimport { StableTrade } from '../StableSwap/hooks/useStableTradeExactIn'\n\nconst PancakeRouterSlippageErrorMsg =\n  'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n\nconst SwapTransactionErrorContent = ({ onDismiss, message, openSettingModal }) => {\n  const isSlippagedErrorMsg = message?.includes(PancakeRouterSlippageErrorMsg)\n\n  const handleErrorDismiss = useCallback(() => {\n    onDismiss?.()\n    if (isSlippagedErrorMsg && openSettingModal) {\n      openSettingModal()\n    }\n  }, [isSlippagedErrorMsg, onDismiss, openSettingModal])\n  const { t } = useTranslation()\n\n  return isSlippagedErrorMsg ? (\n    <TransactionErrorContent\n      message={\n        <>\n          <Text mb=\"16px\">\n            {t(\n              'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your',\n            )}{' '}\n            <Text bold display=\"inline\" style={{ cursor: 'pointer' }} onClick={handleErrorDismiss}>\n              <u>{t('slippage tolerance.')}</u>\n            </Text>\n          </Text>\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/pancakeswap-exchange/trade-guide\"\n            style={{ width: '100%', justifyContent: 'center' }}\n          >\n            {t('What are the potential issues with the token?')}\n          </LinkExternal>\n        </>\n      }\n    />\n  ) : (\n    <TransactionErrorContent message={message} onDismiss={onDismiss} />\n  )\n}\n\ninterface ConfirmSwapModalProps {\n  trade?: Trade<Currency, Currency, TradeType> | StableTrade\n  originalTrade?: Trade<Currency, Currency, TradeType> | StableTrade\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  attemptingTxn: boolean\n  txHash?: string\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage?: string\n  customOnDismiss?: () => void\n  openSettingModal?: () => void\n  isStable?: boolean\n}\n\nconst ConfirmSwapModal: React.FC<React.PropsWithChildren<InjectedModalProps & ConfirmSwapModalProps>> = ({\n  trade,\n  originalTrade,\n  currencyBalances,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  customOnDismiss,\n  recipient,\n  swapErrorMessage,\n  attemptingTxn,\n  txHash,\n  openSettingModal,\n  isStable,\n}) => {\n  const { chainId } = useActiveChainId()\n  const { t } = useTranslation()\n\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss?.()\n  }, [customOnDismiss, onDismiss])\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <SwapTransactionErrorContent\n          openSettingModal={openSettingModal}\n          onDismiss={onDismiss}\n          message={swapErrorMessage}\n        />\n      ) : (\n        <TransactionConfirmSwapContent\n          isStable={isStable}\n          trade={trade}\n          currencyBalances={currencyBalances}\n          originalTrade={originalTrade}\n          onAcceptChanges={onAcceptChanges}\n          allowedSlippage={allowedSlippage}\n          onConfirm={onConfirm}\n          recipient={recipient}\n        />\n      ),\n    [\n      isStable,\n      trade,\n      originalTrade,\n      onAcceptChanges,\n      allowedSlippage,\n      onConfirm,\n      recipient,\n      swapErrorMessage,\n      onDismiss,\n      openSettingModal,\n      currencyBalances,\n    ],\n  )\n\n  // text to show while loading\n  const pendingText = useMemo(() => {\n    return t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\n      amountA: trade.inputAmount?.toSignificant(6) ?? '',\n      symbolA: trade.inputAmount?.currency?.symbol ?? '',\n      amountB: trade.outputAmount?.toSignificant(6) ?? '',\n      symbolB: trade.outputAmount?.currency?.symbol ?? '',\n    })\n  }, [t, trade])\n\n  if (!chainId) return null\n\n  return (\n    <ConfirmSwapModalContainer handleDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : txHash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={txHash}\n          onDismiss={handleDismiss}\n          currencyToAdd={trade?.outputAmount.currency}\n        />\n      ) : (\n        confirmationContent()\n      )}\n    </ConfirmSwapModalContainer>\n  )\n}\n\nexport default memo(ConfirmSwapModal)\n","import styled from 'styled-components'\nimport { AutoColumn } from '@pancakeswap/uikit'\nimport { RowBetween } from 'components/Layout/Row'\n\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`\n\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${({ theme, confirmed, disabled }) =>\n    disabled ? theme.colors.backgroundDisabled : confirmed ? theme.colors.success : theme.colors.primary};\n  border-radius: 50%;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n`\n\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`\n\nconst Connector = styled.div<{ prevConfirmed?: boolean; disabled?: boolean }>`\n  width: 100%;\n  height: 2px;\n  background: linear-gradient(\n    90deg,\n    ${({ theme, prevConfirmed, disabled }) =>\n        disabled ? theme.colors.backgroundDisabled : prevConfirmed ? theme.colors.success : theme.colors.primary}\n      0%,\n    ${({ theme, prevConfirmed, disabled }) =>\n        disabled\n          ? theme.colors.backgroundDisabled\n          : prevConfirmed\n          ? theme.colors.primary\n          : theme.colors.backgroundDisabled}\n      80%\n  );\n  opacity: 0.6;\n`\n\ninterface ProgressCirclesProps {\n  steps: boolean[]\n  disabled?: boolean\n}\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\n  return (\n    <AutoColumn justify=\"center\" {...rest}>\n      <Grouping>\n        {steps.map((step, i) => {\n          return (\n            // eslint-disable-next-line react/no-array-index-key\n            <CircleRow key={i}>\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\n                {step ? '✓' : i + 1}\n              </Circle>\n              <Connector prevConfirmed={step} disabled={disabled} />\n            </CircleRow>\n          )\n        })}\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1}</Circle>\n      </Grouping>\n    </AutoColumn>\n  )\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Button, Text, useModal, confirmPriceImpactWithoutFee, Column } from '@pancakeswap/uikit'\nimport { Currency, CurrencyAmount, Trade, TradeType } from '@pancakeswap/sdk'\n\nimport { GreyCard } from 'components/Card'\nimport { CommitButton } from 'components/CommitButton'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { WrapType } from 'hooks/useWrapCallback'\nimport { AutoRow, RowBetween } from 'components/Layout/Row'\nimport { ApprovalState } from 'hooks/useApproveCallback'\nimport CircleLoader from 'components/Loader/CircleLoader'\nimport { Field } from 'state/swap/actions'\nimport SettingsModal, { withCustomOnDismiss } from 'components/Menu/GlobalSettings/SettingsModal'\nimport { SettingsMode } from 'components/Menu/GlobalSettings/types'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useUserSingleHopOnly } from 'state/user/hooks'\nimport {\n  BIG_INT_ZERO,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN,\n} from 'config/constants/exchange'\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/exchange'\nimport { useSwapCallback } from 'hooks/useSwapCallback'\nimport { useSwapCallArguments } from 'hooks/useSwapCallArguments'\n\nimport ConfirmSwapModal from './ConfirmSwapModal'\nimport ProgressSteps from './ProgressSteps'\nimport { SwapCallbackError } from './styleds'\n\nconst SettingsModalWithCustomDismiss = withCustomOnDismiss(SettingsModal)\n\ninterface SwapCommitButtonPropsType {\n  swapIsUnsupported: boolean\n  account: string\n  showWrap: boolean\n  wrapInputError: string\n  onWrap: () => Promise<void>\n  wrapType: WrapType\n  approval: ApprovalState\n  approveCallback: () => Promise<void>\n  approvalSubmitted: boolean\n  currencies: {\n    INPUT?: Currency\n    OUTPUT?: Currency\n  }\n  isExpertMode: boolean\n  trade: Trade<Currency, Currency, TradeType>\n  swapInputError: string\n  currencyBalances: {\n    INPUT?: CurrencyAmount<Currency>\n    OUTPUT?: CurrencyAmount<Currency>\n  }\n  recipient: string\n  allowedSlippage: number\n  parsedIndepentFieldAmount: CurrencyAmount<Currency>\n  onUserInput: (field: Field, typedValue: string) => void\n}\n\nexport default function SwapCommitButton({\n  swapIsUnsupported,\n  account,\n  showWrap,\n  wrapInputError,\n  onWrap,\n  wrapType,\n  approval,\n  approveCallback,\n  approvalSubmitted,\n  currencies,\n  isExpertMode,\n  trade,\n  swapInputError,\n  currencyBalances,\n  recipient,\n  allowedSlippage,\n  parsedIndepentFieldAmount,\n  onUserInput,\n}: SwapCommitButtonPropsType) {\n  const { t } = useTranslation()\n  const [singleHopOnly] = useUserSingleHopOnly()\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n  // the callback to execute the swap\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipient)\n\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    recipient,\n    swapCalls,\n  )\n  const [{ tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    tradeToConfirm: Trade<Currency, Currency, TradeType> | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // Handlers\n  const handleSwap = useCallback(() => {\n    if (\n      priceImpactWithoutFee &&\n      !confirmPriceImpactWithoutFee(\n        priceImpactWithoutFee,\n        PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN,\n        ALLOWED_PRICE_IMPACT_HIGH,\n        t,\n      )\n    ) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then((hash) => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, swapErrorMessage: undefined, txHash: hash })\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, t, setSwapState])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn })\n  }, [attemptingTxn, swapErrorMessage, trade, txHash, setSwapState])\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash, setSwapState])\n\n  // End Handlers\n\n  // Modals\n  const [indirectlyOpenConfirmModalState, setIndirectlyOpenConfirmModalState] = useState(false)\n\n  const [onPresentSettingsModal] = useModal(\n    <SettingsModalWithCustomDismiss\n      customOnDismiss={() => setIndirectlyOpenConfirmModalState(true)}\n      mode={SettingsMode.SWAP_LIQUIDITY}\n    />,\n  )\n\n  const [onPresentConfirmModal] = useModal(\n    <ConfirmSwapModal\n      trade={trade}\n      originalTrade={tradeToConfirm}\n      currencyBalances={currencyBalances}\n      onAcceptChanges={handleAcceptChanges}\n      attemptingTxn={attemptingTxn}\n      txHash={txHash}\n      recipient={recipient}\n      allowedSlippage={allowedSlippage}\n      onConfirm={handleSwap}\n      swapErrorMessage={swapErrorMessage}\n      customOnDismiss={handleConfirmDismiss}\n      openSettingModal={onPresentSettingsModal}\n    />,\n    true,\n    true,\n    'confirmSwapModal',\n  )\n  // End Modals\n\n  const onSwapHandler = useCallback(() => {\n    if (isExpertMode) {\n      handleSwap()\n    } else {\n      setSwapState({\n        tradeToConfirm: trade,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        txHash: undefined,\n      })\n      onPresentConfirmModal()\n    }\n  }, [isExpertMode, handleSwap, onPresentConfirmModal, trade])\n\n  // useEffect\n  useEffect(() => {\n    if (indirectlyOpenConfirmModalState) {\n      setIndirectlyOpenConfirmModalState(false)\n      setSwapState((state) => ({\n        ...state,\n        swapErrorMessage: undefined,\n      }))\n      onPresentConfirmModal()\n    }\n  }, [indirectlyOpenConfirmModalState, onPresentConfirmModal, setSwapState])\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  if (swapIsUnsupported) {\n    return (\n      <Button width=\"100%\" disabled>\n        {t('Unsupported Asset')}\n      </Button>\n    )\n  }\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  if (showWrap) {\n    return (\n      <CommitButton width=\"100%\" disabled={Boolean(wrapInputError)} onClick={onWrap}>\n        {wrapInputError ?? (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n      </CommitButton>\n    )\n  }\n\n  const noRoute = !trade?.route\n\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedIndepentFieldAmount?.greaterThan(BIG_INT_ZERO),\n  )\n\n  if (noRoute && userHasSpecifiedInputOutput) {\n    return (\n      <GreyCard style={{ textAlign: 'center', padding: '0.75rem' }}>\n        <Text color=\"textSubtle\">{t('Insufficient liquidity for this trade.')}</Text>\n        {singleHopOnly && <Text color=\"textSubtle\">{t('Try enabling multi-hop trades.')}</Text>}\n      </GreyCard>\n    )\n  }\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const isValid = !swapInputError\n\n  if (showApproveFlow) {\n    return (\n      <>\n        <RowBetween>\n          <CommitButton\n            variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\n            onClick={approveCallback}\n            disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n            width=\"48%\"\n          >\n            {approval === ApprovalState.PENDING ? (\n              <AutoRow gap=\"6px\" justify=\"center\">\n                {t('Enabling')} <CircleLoader stroke=\"white\" />\n              </AutoRow>\n            ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n              t('Enabled')\n            ) : (\n              t('Enable %asset%', { asset: currencies[Field.INPUT]?.symbol ?? '' })\n            )}\n          </CommitButton>\n          <CommitButton\n            variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\n            onClick={() => {\n              onSwapHandler()\n            }}\n            width=\"48%\"\n            id=\"swap-button\"\n            disabled={!isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)}\n          >\n            {priceImpactSeverity > 3 && !isExpertMode\n              ? t('Price Impact High')\n              : priceImpactSeverity > 2\n              ? t('Swap Anyway')\n              : t('Swap')}\n          </CommitButton>\n        </RowBetween>\n        <Column style={{ marginTop: '1rem' }}>\n          <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n        </Column>\n        {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <CommitButton\n        variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary'}\n        onClick={() => {\n          onSwapHandler()\n        }}\n        id=\"swap-button\"\n        width=\"100%\"\n        disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n      >\n        {swapInputError ||\n          (priceImpactSeverity > 3 && !isExpertMode\n            ? t('Price Impact Too High')\n            : priceImpactSeverity > 2\n            ? t('Swap Anyway')\n            : t('Swap'))}\n      </CommitButton>\n\n      {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n    </>\n  )\n}\n","import { useState, useCallback, useEffect } from 'react'\nimport { useSWRConfig } from 'swr'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\n\nexport const useRefreshBlockNumber = () => {\n  const [isLoading, setFetch] = useState(false)\n\n  const refreshBlockNumber = useCallback(() => {\n    if (!isLoading) {\n      setFetch(true)\n    }\n  }, [isLoading])\n\n  const { mutate } = useSWRConfig()\n  const { chainId } = useActiveChainId()\n\n  useEffect(() => {\n    if (!isLoading) return\n\n    mutate(['blockNumberFetcher', chainId])\n\n    // setTimeout is used to demonstrate the loading\n    // because the real loading state occurs on multicall state\n    // we don't know when the fetch is finished.\n    setTimeout(() => setFetch(false), 500)\n  }, [mutate, isLoading, chainId])\n\n  return { refreshBlockNumber, isLoading }\n}\n\nexport default useRefreshBlockNumber\n","import { Currency, Trade, TradeType } from '@pancakeswap/sdk'\nimport { Box, Text } from '@pancakeswap/uikit'\nimport { useRouter } from 'next/router'\n\nimport { Field } from 'state/swap/actions'\nimport { TradeWithMM } from '../types'\n\nexport function useMMDevMode() {\n  const { query } = useRouter()\n  return Boolean(query['dev-mode'])\n}\n\n// for testing purpose, will remove later\nexport const MMAndAMMDealDisplay: React.FC<{\n  independentField: Field\n  isMMBetter: boolean\n  v2Trade?: Trade<Currency, Currency, TradeType>\n  mmTrade?: TradeWithMM<Currency, Currency, TradeType>\n  mmQuoteExpiryRemainingSec?: number\n  errorMessage?: string\n  rfqId?: string\n}> = ({\n  isMMBetter = false,\n  independentField,\n  v2Trade,\n  mmTrade,\n  mmQuoteExpiryRemainingSec,\n  errorMessage = 'none',\n  rfqId = 'none',\n}) => {\n  const isExactIn = independentField === Field.INPUT\n  const dealInANdOut = isExactIn ? '(out)' : '(in)'\n  const isMMDev = useMMDevMode()\n  if (isMMDev)\n    return (\n      <Box pl=\"20px\" pt=\"10px\">\n        <Text color=\"textSubtle\">\n          type: <Text display=\"inline-block\">{isExactIn ? 'ExactIn' : 'ExactOut'}</Text>\n        </Text>\n        <Text color=\"textSubtle\">\n          <Text display=\"inline-block\" color=\"transparent\">\n            A\n          </Text>\n          MM Deal{dealInANdOut}:{' '}\n          <Text display=\"inline-block\">\n            {(isExactIn ? mmTrade?.outputAmount?.toSignificant(6) : mmTrade?.inputAmount?.toSignificant(6)) ?? 'null'}\n          </Text>\n        </Text>\n        <Text color=\"textSubtle\">\n          AMM Deal{dealInANdOut}:{' '}\n          <Text display=\"inline-block\">\n            {(isExactIn ? v2Trade?.outputAmount?.toSignificant(6) : v2Trade?.inputAmount?.toSignificant(6)) ?? 'null'}\n          </Text>\n        </Text>\n        <Text color=\"textSubtle\">\n          MM win: <Text display=\"inline-block\">{`${isMMBetter}`}</Text>\n        </Text>\n        <Text color=\"textSubtle\">\n          Quote Expiry In:{' '}\n          <Text display=\"inline-block\">{`${mmQuoteExpiryRemainingSec > 0 ? mmQuoteExpiryRemainingSec : '?'}`} SEC</Text>\n        </Text>\n        <Text color=\"textSubtle\">\n          Error Message: <Text display=\"inline-block\">{errorMessage}</Text>\n        </Text>\n        <Text color=\"textSubtle\">\n          RfqId: <Text display=\"inline-block\">{rfqId}</Text>\n        </Text>\n      </Box>\n    )\n  return null\n}\n","import { ChainId } from '@pancakeswap/sdk'\nimport contract from 'config/constants/contracts'\nimport { getAddress } from '@ethersproject/address'\n\nexport const NATIVE_CURRENCY_ADDRESS = getAddress('0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE')\n\nexport const MM_SUPPORT_CHIAN = {\n  1: true,\n  5: true,\n  56: false,\n}\n\nexport const MM_SWAP_CONTRACT_ADDRESS = contract.mmLinkedPool\n\nexport const MM_STABLE_TOKENS_WHITE_LIST: Record<number, Record<string, string>> = {\n  [ChainId.ETHEREUM]: {\n    '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48': 'USDC',\n    '0xdAC17F958D2ee523a2206206994597C13D831ec7': 'USDT',\n    '0x6B175474E89094C44Da98b954EedeAC495271d0F': 'DAI',\n    '0x4Fabb145d64652a948d72533023f6E7A623C7C53': 'BUSD',\n  },\n  [ChainId.GOERLI]: {},\n}\n\nexport const MM_SIGNER = {\n  [ChainId.ETHEREUM]: '0x945BCF562085De2D5875b9E2012ed5Fd5cfaB927',\n  [ChainId.GOERLI]: '0x13414B047539298D5aeD429722211681eAAb43B7',\n}\n\nexport const SAFE_MM_QUOTE_EXPIRY_SEC = 25\nexport const IS_SUPPORT_NATIVE_TOKEN = true\n","import { Currency, CurrencyAmount, Fraction, JSBI, Percent, Price, TradeType, ZERO_PERCENT } from '@pancakeswap/sdk'\n\nimport { parseUnits } from '@ethersproject/units'\nimport PancakeSwapMMLinkedPoolABI from 'config/abi/mmLinkedPool.json'\nimport { MmLinkedPool } from 'config/abi/types/MmLinkedPool'\nimport { ONE_HUNDRED_PERCENT } from 'config/constants/exchange'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { useContract } from 'hooks/useContract'\nimport toNumber from 'lodash/toNumber'\nimport { Field } from 'state/swap/actions'\nimport { MM_STABLE_TOKENS_WHITE_LIST, MM_SWAP_CONTRACT_ADDRESS, NATIVE_CURRENCY_ADDRESS } from '../constants'\nimport { OrderBookRequest, TradeWithMM } from '../types'\n\nexport function useMMSwapContract() {\n  const { chainId } = useActiveChainId()\n  return useContract<MmLinkedPool>(MM_SWAP_CONTRACT_ADDRESS[chainId], PancakeSwapMMLinkedPoolABI, true)\n}\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade?: TradeWithMM<Currency, Currency, TradeType> | null): {\n  priceImpactWithoutFee: Percent | undefined\n  realizedLPFee: CurrencyAmount<Currency> | undefined | null\n} {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction): Fraction => currentFee.multiply(ONE_HUNDRED_PERCENT),\n          ONE_HUNDRED_PERCENT,\n        ),\n      )\n\n  const stableList = MM_STABLE_TOKENS_WHITE_LIST[trade?.inputAmount?.currency?.chainId]\n  const isStablePair = Boolean(\n    trade?.inputAmount?.currency?.isToken &&\n      trade?.outputAmount?.currency?.isToken &&\n      stableList[trade?.inputAmount?.currency?.address] &&\n      stableList[trade?.outputAmount?.currency?.address],\n  )\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = ZERO_PERCENT\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? ZERO_PERCENT : undefined\n\n  // the amount of the input that accrues to LPs\n  const feeRate = new Fraction(5, 10000)\n  const stableFeeRate = new Fraction(1, 10000)\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    (isStablePair ? trade.inputAmount.multiply(stableFeeRate) : trade.inputAmount.multiply(feeRate))\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(trade: TradeWithMM<Currency, Currency, TradeType> | undefined): {\n  [field in Field]?: CurrencyAmount<Currency>\n} {\n  return {\n    [Field.INPUT]: trade?.inputAmount,\n    [Field.OUTPUT]: trade?.outputAmount,\n  }\n}\n\nfunction executionPrice<TIn extends Currency, TOut extends Currency, TTradeType extends TradeType>({\n  inputAmount,\n  outputAmount,\n}: TradeWithMM<TIn, TOut, TTradeType>) {\n  return new Price(inputAmount.currency, outputAmount.currency, inputAmount.quotient, outputAmount.quotient)\n}\n\nexport function formatExecutionPrice(trade?: TradeWithMM<Currency, Currency, TradeType>, inverted?: boolean): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${executionPrice(trade).invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${executionPrice(trade).toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n\nexport const tryParseUnit = (typedValue?: string, decimals?: number) => {\n  let parseAmountString\n  if (!typedValue || !decimals) return parseAmountString\n  try {\n    parseAmountString = parseUnits(typedValue, decimals).toString()\n  } catch {\n    parseAmountString = parseUnits(toNumber(typedValue).toFixed(decimals), decimals).toString()\n  } finally {\n    // eslint-disable-next-line no-unsafe-finally\n    return parseAmountString\n  }\n}\n\nexport const parseMMParameter = (\n  chainId?: number,\n  inputCurrency?: Currency,\n  outputCurrency?: Currency,\n  independentField?: Field,\n  typedValue?: string,\n  account?: string,\n  isForRFQ?: boolean,\n): OrderBookRequest => {\n  if (!chainId || !inputCurrency || !outputCurrency || !outputCurrency || !independentField || !typedValue) return null\n  return {\n    networkId: chainId,\n    takerSideToken: inputCurrency?.isToken\n      ? inputCurrency.address\n      : isForRFQ // RFQ needs native address and order book use WETH to get quote\n      ? NATIVE_CURRENCY_ADDRESS\n      : inputCurrency.wrapped.address,\n    makerSideToken: outputCurrency?.isToken\n      ? outputCurrency.address\n      : isForRFQ\n      ? NATIVE_CURRENCY_ADDRESS\n      : outputCurrency.wrapped.address,\n    takerSideTokenAmount:\n      independentField === Field.INPUT && typedValue && typedValue !== '0'\n        ? tryParseUnit(typedValue, inputCurrency.decimals)\n        : undefined,\n    makerSideTokenAmount:\n      independentField === Field.OUTPUT && typedValue && typedValue !== '0'\n        ? tryParseUnit(typedValue, outputCurrency?.decimals)\n        : undefined,\n    trader: account ?? '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE', // need a default address for API\n  }\n}\n\nexport const parseMMTrade = (\n  isExactIn,\n  inputCurrency?: Currency,\n  outputCurrency?: Currency,\n  takerSideTokenAmount?: string,\n  makerSideTokenAmount?: string,\n): TradeWithMM<Currency, Currency, TradeType> => {\n  if (!inputCurrency || !outputCurrency || !takerSideTokenAmount || !makerSideTokenAmount) return null\n  const bestTradeWithMM: TradeWithMM<Currency, Currency, TradeType> = {\n    tradeType: isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    inputAmount: CurrencyAmount.fromRawAmount(inputCurrency, JSBI.BigInt(takerSideTokenAmount)),\n    outputAmount: CurrencyAmount.fromRawAmount(outputCurrency, JSBI.BigInt(makerSideTokenAmount)),\n    route: {\n      input: inputCurrency,\n      output: outputCurrency,\n      pairs: [],\n      path: [inputCurrency, outputCurrency],\n    },\n  }\n  return bestTradeWithMM\n}\n\nexport const shouldShowMMError = (message?: string) => {\n  if (message?.includes('Amount is below')) return true\n  if (message?.includes('Amount is above')) return true\n  return false\n}\n\nexport const parseMMError = (message?: string) => {\n  if (message?.includes('Amount is below')) {\n    return `Minimum Amount (~$30) to trade with MM: ${\n      Math.ceil(toNumber(message.split(':')?.[1] ?? 0) * 1000) / 1000 ?? ''\n    }`\n  }\n  if (message?.includes('Amount is above')) {\n    return `Maximum Amount to trade with MM: ${toNumber(message.split(':')?.[1] ?? 0).toFixed(3) ?? ''}`\n  }\n  if (message?.includes('insufficient_liquidity')) {\n    return `MM insufficient liquidity`\n  }\n  return message\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { Currency, SwapParameters, TradeType } from '@pancakeswap/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\nimport { useMemo } from 'react'\nimport invariant from 'tiny-invariant'\nimport { MM_SIGNER, NATIVE_CURRENCY_ADDRESS } from '../constants'\nimport { RFQResponse, TradeWithMM } from '../types'\nimport { useMMSwapContract } from '../utils/exchange'\n\nexport interface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nexport function useSwapCallArguments(\n  trade: TradeWithMM<Currency, Currency, TradeType> | null, // trade to execute, required\n  rfq: RFQResponse['message'],\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId } = useActiveWeb3React()\n\n  const recipient = recipientAddress ?? account\n  const deadline = useTransactionDeadline()\n  const contract = useMMSwapContract()\n  const mmSigner = MM_SIGNER[chainId]\n\n  return useMemo(() => {\n    if (!trade || !recipient || !account || !chainId || !deadline || !mmSigner || !rfq) return []\n\n    if (!contract) {\n      return []\n    }\n    const swapMethods = []\n\n    swapMethods.push(swapCallParameters(mmSigner, trade, rfq, recipient))\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, chainId, contract, deadline, recipient, trade, rfq, mmSigner])\n}\n\nfunction swapCallParameters(\n  mmSigner: string,\n  trade: TradeWithMM<Currency, Currency, TradeType>,\n  rfq: RFQResponse['message'],\n  recipient: string,\n): SwapParameters {\n  const etherIn = trade.inputAmount.currency.isNative\n  const etherOut = trade.outputAmount.currency.isNative\n  // the router does not support both ether in and out\n  invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n  invariant(rfq, 'RFQ_REQUIRED')\n  invariant(rfq.trader !== NATIVE_CURRENCY_ADDRESS, 'RFQ_REQUIRED')\n\n  const methodName = 'swap'\n  const args = [\n    mmSigner,\n    {\n      nonce: rfq?.nonce,\n      user: recipient,\n      baseToken: rfq?.takerSideToken,\n      quoteToken: rfq?.makerSideToken,\n      baseTokenAmount: rfq?.takerSideTokenAmount,\n      quoteTokenAmount: rfq?.makerSideTokenAmount,\n      expiryTimestamp: rfq?.quoteExpiry.toString(),\n    },\n    rfq.signature,\n  ]\n  let value: string\n\n  if (etherIn) {\n    value = rfq.takerSideTokenAmount\n  }\n\n  return {\n    methodName,\n    // @ts-ignore\n    args,\n    value,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Currency, SwapParameters, TradeType } from '@pancakeswap/sdk'\nimport isZero from '@pancakeswap/utils/isZero'\nimport truncateHash from '@pancakeswap/utils/truncateHash'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { useGasPrice } from 'state/user/hooks'\nimport { calculateGasMargin, isAddress } from 'utils'\nimport { logSwap, logTx } from 'utils/log'\nimport { transactionErrorToUserReadableMessage } from 'utils/transactionErrorToUserReadableMessage'\nimport { TradeWithMM } from '../types'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall extends SwapCallEstimate {\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall extends SwapCallEstimate {\n  error: string\n}\n\ninterface SwapCallEstimate {\n  call: SwapCall\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: TradeWithMM<Currency, Currency, TradeType>, // trade to execute, required\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n  swapCalls: SwapCall[],\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId } = useActiveWeb3React()\n  const gasPrice = useGasPrice()\n\n  const { t } = useTranslation()\n\n  const addTransaction = useTransactionAdder()\n\n  const recipient = recipientAddress === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddress !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      }\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: SwapCallEstimate[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.error('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.error('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: t('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.error('Call threw error', call, callError)\n\n                    return { call, error: transactionErrorToUserReadableMessage(callError, t) }\n                  })\n              })\n          }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw new Error(errorCalls[errorCalls.length - 1].error)\n          throw new Error(t('Unexpected error. Could not estimate gas for the swap.'))\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          gasPrice,\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            // const pct = basisPointsToPercent(allowedSlippage)\n            const inputAmount = trade.inputAmount.toSignificant(3)\n\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${\n              trade.tradeType === TradeType.EXACT_OUTPUT ? 'max.' : ''\n            } ${inputAmount} ${inputSymbol} for ${\n              trade.tradeType === TradeType.EXACT_INPUT ? 'min.' : ''\n            } ${outputAmount} ${outputSymbol}`\n\n            const recipientAddressText =\n              recipientAddress && isAddress(recipientAddress) ? truncateHash(recipientAddress) : recipientAddress\n\n            const withRecipient = recipient === account ? base : `${base} to ${recipientAddressText}`\n\n            const translatableWithRecipient =\n              trade.tradeType === TradeType.EXACT_OUTPUT\n                ? recipient === account\n                  ? 'Swap max. %inputAmount% %inputSymbol% for %outputAmount% %outputSymbol%'\n                  : 'Swap max. %inputAmount% %inputSymbol% for %outputAmount% %outputSymbol% to %recipientAddress%'\n                : recipient === account\n                ? 'Swap %inputAmount% %inputSymbol% for min. %outputAmount% %outputSymbol%'\n                : 'Swap %inputAmount% %inputSymbol% for min. %outputAmount% %outputSymbol% to %recipientAddress%'\n\n            addTransaction(response, {\n              summary: withRecipient,\n              translatableSummary: {\n                text: translatableWithRecipient,\n                data: {\n                  inputAmount,\n                  inputSymbol,\n                  outputAmount,\n                  outputSymbol,\n                  ...(recipient !== account && { recipientAddress: recipientAddressText }),\n                },\n              },\n              type: 'swap',\n            })\n            logSwap({\n              chainId,\n              inputAmount,\n              outputAmount,\n              input: trade.inputAmount.currency,\n              output: trade.outputAmount.currency,\n              type: 'MarketMakerSwap',\n            })\n            logTx({ account, chainId, hash: response.hash })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(t('Swap failed: %message%', { message: transactionErrorToUserReadableMessage(error, t) }))\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, account, chainId, recipient, recipientAddress, swapCalls, t, addTransaction, gasPrice])\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport { AutoRenewIcon, Button, Link, QuestionHelper, Text, AutoColumn, Dots } from '@pancakeswap/uikit'\nimport { AutoRow, RowBetween, RowFixed } from 'components/Layout/Row'\nimport { BUYBACK_FEE, LP_HOLDERS_FEE, TOTAL_FEE, TREASURY_FEE } from 'config/constants/info'\nimport { useMemo, useState } from 'react'\nimport { Field } from 'state/swap/actions'\nimport styled from 'styled-components'\nimport { warningSeverity } from 'utils/exchange'\nimport FormattedPriceImpact from '../../components/FormattedPriceImpact'\nimport { StyledBalanceMaxMini, SwapCallbackError } from '../../components/styleds'\nimport { TradeWithMM } from '../types'\nimport { computeTradePriceBreakdown, formatExecutionPrice } from '../utils/exchange'\n\nconst SwapModalFooterContainer = styled(AutoColumn)`\n  margin-top: 24px;\n  padding: 16px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nexport default function SwapModalFooter({\n  trade,\n  slippageAdjustedAmounts,\n  isEnoughInputBalance,\n  onConfirm,\n  swapErrorMessage,\n  disabledConfirm,\n  isMM = false,\n  isRFQReady = false,\n}: {\n  trade: TradeWithMM<Currency, Currency, TradeType>\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  isEnoughInputBalance: boolean\n  onConfirm: () => void\n  swapErrorMessage?: string | undefined\n  disabledConfirm: boolean\n  isMM?: boolean\n  isRFQReady: boolean\n  isRFQLoading: boolean\n}) {\n  const { t } = useTranslation()\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\n  const severity = warningSeverity(priceImpactWithoutFee)\n\n  const totalFeePercent = `${(TOTAL_FEE * 100).toFixed(2)}%`\n  const lpHoldersFeePercent = `${(LP_HOLDERS_FEE * 100).toFixed(2)}%`\n  const treasuryFeePercent = `${(TREASURY_FEE * 100).toFixed(4)}%`\n  const buyBackFeePercent = `${(BUYBACK_FEE * 100).toFixed(4)}%`\n\n  return (\n    <>\n      <SwapModalFooterContainer>\n        <RowBetween align=\"center\">\n          <Text fontSize=\"14px\">{t('Price')}</Text>\n          <Text\n            fontSize=\"14px\"\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '10px',\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <AutoRenewIcon width=\"14px\" />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT ? t('Minimum received') : t('Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={t(\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.',\n              )}\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </Text>\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Price Impact')}</Text>\n            <QuestionHelper\n              text={\n                <>\n                  <Text>\n                    <Text bold display=\"inline-block\">\n                      {t('AMM')}\n                    </Text>\n                    {`: ${t('The difference between the market price and estimated price due to trade size.')}`}\n                  </Text>\n                  <Text mt=\"10px\">\n                    <Text bold display=\"inline-block\">\n                      {t('MM')}\n                    </Text>\n                    {`: ${t('No slippage against quote from market maker')}`}\n                  </Text>\n                </>\n              }\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          {isMM ? <Text color=\"textSubtle\">--</Text> : <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />}\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Trading Fee')}</Text>\n            <QuestionHelper\n              text={\n                <>\n                  <Text mb=\"12px\">\n                    <Text bold display=\"inline-block\">\n                      {t('AMM')}\n                    </Text>\n                    : {t('For each non-stableswap trade, a %amount% fee is paid', { amount: totalFeePercent })}\n                  </Text>\n                  <Text>- {t('%amount% to LP token holders', { amount: lpHoldersFeePercent })}</Text>\n                  <Text>- {t('%amount% to the Treasury', { amount: treasuryFeePercent })}</Text>\n                  <Text>- {t('%amount% towards CAKE buyback and burn', { amount: buyBackFeePercent })}</Text>\n                  <Text mt=\"12px\">\n                    {t('For each stableswap trade, refer to the fee table')}\n                    <Link\n                      style={{ display: 'inline' }}\n                      ml=\"4px\"\n                      external\n                      href=\"https://docs.pancakeswap.finance/products/stableswap#stableswap-fees\"\n                    >\n                      {t('here.')}\n                    </Link>\n                  </Text>\n                  <Text mt=\"10px\">\n                    <Text bold display=\"inline-block\">\n                      {t('MM')}\n                    </Text>\n                    :{' '}\n                    {t(\n                      'PancakeSwap does not charge any fees for trades. However, the market makers charge an implied fee of 0.05% (non-stablecoin) / 0.01% (stablecoin) factored into the quotes provided by them.',\n                    )}\n                  </Text>\n                </>\n              }\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </SwapModalFooterContainer>\n\n      <AutoRow>\n        <Button\n          variant={severity > 2 ? 'danger' : 'primary'}\n          onClick={onConfirm}\n          disabled={disabledConfirm || !isRFQReady}\n          mt=\"12px\"\n          id=\"confirm-swap-or-send\"\n          width=\"100%\"\n        >\n          {!isRFQReady ? (\n            <Dots>{t('Checking RFQ with MM')}</Dots>\n          ) : severity > 2 || (trade.tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance) ? (\n            t('Swap Anyway')\n          ) : (\n            t('Confirm Swap')\n          )}\n        </Button>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n","import { useTooltip, Text, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { memo } from 'react'\n\nexport const MMSlippageTolerance = memo(() => {\n  const { t } = useTranslation()\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    <Text width=\"266px\" fontSize=\"16px\">\n      {t(\n        'The Market Maker (MM) is currently executing for your trade, there is no slippage against the quote from MM.',\n      )}\n    </Text>,\n    {\n      placement: 'top-end',\n      trigger: 'hover',\n      tooltipOffset: [-3, 0],\n    },\n  )\n  return (\n    <>\n      <Text ref={targetRef} color=\"textSubtle\" display=\"flex\" fontSize=\"14px\" style={{ gap: 5 }}>\n        -- <InfoIcon width=\"13px\" />\n      </Text>\n      {tooltipVisible && tooltip}\n    </>\n  )\n})\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@pancakeswap/sdk'\nimport { ArrowDownIcon, Button, ErrorIcon, Text, AutoColumn } from '@pancakeswap/uikit'\nimport truncateHash from '@pancakeswap/utils/truncateHash'\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport { CurrencyLogo } from 'components/Logo'\nimport { Field } from 'state/swap/actions'\nimport { warningSeverity } from 'utils/exchange'\nimport { SwapShowAcceptChanges, TruncatedText } from '../../components/styleds'\nimport { MMSlippageTolerance } from './MMSlippageTolerance'\n\nexport default function SwapModalHeader({\n  inputAmount,\n  outputAmount,\n  tradeType,\n  priceImpactWithoutFee,\n  slippageAdjustedAmounts,\n  isEnoughInputBalance,\n  recipient,\n  showAcceptChanges,\n  onAcceptChanges,\n}: {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n  tradeType: TradeType\n  priceImpactWithoutFee?: Percent\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  isEnoughInputBalance: boolean\n  recipient: string | null\n  showAcceptChanges: boolean\n  onAcceptChanges: () => void\n  allowedSlippage: number\n}) {\n  const { t } = useTranslation()\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  const inputTextColor =\n    showAcceptChanges && tradeType === TradeType.EXACT_OUTPUT && isEnoughInputBalance\n      ? 'primary'\n      : tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance\n      ? 'failure'\n      : 'text'\n\n  const amount =\n    tradeType === TradeType.EXACT_INPUT\n      ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(6)\n      : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(6)\n  const symbol = tradeType === TradeType.EXACT_INPUT ? outputAmount.currency.symbol : inputAmount.currency.symbol\n\n  const tradeInfoText =\n    tradeType === TradeType.EXACT_INPUT\n      ? t('Output is estimated. You will receive at least or the transaction will revert.')\n      : t('Input is estimated. You will sell at most or the transaction will revert.')\n\n  const [estimatedText, transactionRevertText] = tradeInfoText.split(`${amount} ${symbol}`)\n\n  const truncatedRecipient = recipient ? truncateHash(recipient) : ''\n\n  const recipientInfoText = t('Output will be sent to %recipient%', {\n    recipient: truncatedRecipient,\n  })\n\n  const [recipientSentToText, postSentToText] = recipientInfoText.split(truncatedRecipient)\n\n  return (\n    <AutoColumn gap=\"md\">\n      <RowBetween align=\"flex-end\">\n        <RowFixed gap=\"4px\">\n          <CurrencyLogo currency={inputAmount.currency} size=\"24px\" style={{ marginRight: '12px' }} />\n          <TruncatedText fontSize=\"24px\" color={inputTextColor}>\n            {inputAmount.toSignificant(6)}\n          </TruncatedText>\n        </RowFixed>\n        <RowFixed gap=\"0px\">\n          <Text fontSize=\"24px\" ml=\"10px\">\n            {inputAmount.currency.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      <RowFixed>\n        <ArrowDownIcon width=\"16px\" ml=\"4px\" />\n      </RowFixed>\n      <RowBetween align=\"flex-end\">\n        <RowFixed gap=\"4px\">\n          <CurrencyLogo currency={outputAmount.currency} size=\"24px\" />\n          <TruncatedText\n            fontSize=\"24px\"\n            color={\n              priceImpactSeverity > 2\n                ? 'failure'\n                : showAcceptChanges && tradeType === TradeType.EXACT_INPUT\n                ? 'primary'\n                : 'text'\n            }\n          >\n            {outputAmount.toSignificant(6)}\n          </TruncatedText>\n        </RowFixed>\n        <RowFixed>\n          <Text fontSize=\"24px\" ml=\"10px\">\n            {outputAmount.currency.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      {showAcceptChanges ? (\n        <SwapShowAcceptChanges justify=\"flex-start\" gap=\"0px\">\n          <RowBetween>\n            <RowFixed>\n              <ErrorIcon mr=\"8px\" />\n              <Text bold> {t('Price Updated')}</Text>\n            </RowFixed>\n            <Button onClick={onAcceptChanges}>{t('Accept')}</Button>\n          </RowBetween>\n        </SwapShowAcceptChanges>\n      ) : null}\n      <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '24px 0 0 0px' }}>\n        <RowFixed style={{ width: '100%' }}>\n          <Text color=\"secondary\" bold textTransform=\"uppercase\">\n            {t('Slippage Tolerance')}\n          </Text>\n\n          <Text bold color=\"primary\" ml=\"auto\" textAlign=\"end\">\n            <MMSlippageTolerance />\n          </Text>\n        </RowFixed>\n        {tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance && (\n          <Text small color=\"failure\" textAlign=\"left\" style={{ width: '100%' }}>\n            {t('Insufficient input token balance. Your transaction may fail.')}\n          </Text>\n        )}\n        <Text small color=\"textSubtle\" textAlign=\"left\" style={{ width: '100%' }}>\n          {estimatedText}\n          {transactionRevertText}\n        </Text>\n      </AutoColumn>\n      {recipient !== null ? (\n        <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }}>\n          <Text color=\"textSubtle\">\n            {recipientSentToText}\n            <b title={recipient}>{truncatedRecipient}</b>\n            {postSentToText}\n          </Text>\n        </AutoColumn>\n      ) : null}\n    </AutoColumn>\n  )\n}\n","import { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport { ConfirmationModalContent } from '@pancakeswap/uikit'\nimport { memo, useCallback, useMemo } from 'react'\nimport { Field } from 'state/swap/actions'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport { TradeWithMM } from '../types'\nimport {\n  computeSlippageAdjustedAmounts as computeSlippageAdjustedAmountsWithSmartRouter,\n  computeTradePriceBreakdown as computeTradePriceBreakdownWithSmartRouter,\n} from '../utils/exchange'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(\n  tradeA: TradeWithMM<Currency, Currency, TradeType> | undefined,\n  tradeB: TradeWithMM<Currency, Currency, TradeType> | undefined,\n): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\ninterface TransactionConfirmSwapContentProps {\n  trade: TradeWithMM<Currency, Currency, TradeType> | undefined\n  originalTrade: TradeWithMM<Currency, Currency, TradeType> | undefined\n  onAcceptChanges: () => void\n  allowedSlippage: number\n  onConfirm: () => void\n  recipient: string\n  currencyBalances: {\n    INPUT?: CurrencyAmount<Currency>\n    OUTPUT?: CurrencyAmount<Currency>\n  }\n  isRFQReady: boolean\n  isRFQLoading: boolean\n}\n\nconst TransactionConfirmSwapContent = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  recipient,\n  currencyBalances,\n  isRFQReady,\n  isRFQLoading,\n}: TransactionConfirmSwapContentProps) => {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade],\n  )\n\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmountsWithSmartRouter(trade), [trade])\n  const { priceImpactWithoutFee } = useMemo(() => computeTradePriceBreakdownWithSmartRouter(trade), [trade])\n\n  const isEnoughInputBalance = useMemo(() => {\n    if (trade?.tradeType !== TradeType.EXACT_OUTPUT) return null\n\n    const isInputBalanceExist = !!(currencyBalances && currencyBalances[Field.INPUT])\n    const isInputBalanceBNB = isInputBalanceExist && currencyBalances[Field.INPUT].currency.isNative\n    const inputCurrencyAmount = isInputBalanceExist\n      ? isInputBalanceBNB\n        ? maxAmountSpend(currencyBalances[Field.INPUT])\n        : currencyBalances[Field.INPUT]\n      : null\n    return inputCurrencyAmount && slippageAdjustedAmounts && slippageAdjustedAmounts[Field.INPUT]\n      ? inputCurrencyAmount.greaterThan(slippageAdjustedAmounts[Field.INPUT]) ||\n          inputCurrencyAmount.equalTo(slippageAdjustedAmounts[Field.INPUT])\n      : false\n  }, [currencyBalances, trade, slippageAdjustedAmounts])\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        inputAmount={trade.inputAmount}\n        outputAmount={trade.outputAmount}\n        tradeType={trade.tradeType}\n        priceImpactWithoutFee={priceImpactWithoutFee}\n        allowedSlippage={allowedSlippage}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        isEnoughInputBalance={isEnoughInputBalance}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [\n    priceImpactWithoutFee,\n    allowedSlippage,\n    onAcceptChanges,\n    recipient,\n    showAcceptChanges,\n    trade,\n    slippageAdjustedAmounts,\n    isEnoughInputBalance,\n  ])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        isMM\n        isRFQLoading={isRFQLoading}\n        isRFQReady={isRFQReady}\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        isEnoughInputBalance={isEnoughInputBalance}\n      />\n    ) : null\n  }, [onConfirm, showAcceptChanges, trade, isEnoughInputBalance, slippageAdjustedAmounts, isRFQReady, isRFQLoading])\n\n  return <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n}\n\nexport default memo(TransactionConfirmSwapContent)\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport {\n  ConfirmationPendingContent,\n  InjectedModalProps,\n  LinkExternal,\n  Text,\n  TransactionErrorContent,\n} from '@pancakeswap/uikit'\nimport { TransactionSubmittedContent } from 'components/TransactionConfirmationModal'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { memo, useCallback, useMemo } from 'react'\nimport { Field } from 'state/swap/actions'\nimport ConfirmSwapModalContainer from '../../components/ConfirmSwapModalContainer'\nimport { TradeWithMM } from '../types'\nimport TransactionConfirmSwapContentWithSmartRouter from './TransactionConfirmSwapContent'\n\nconst PancakeRouterSlippageErrorMsg =\n  'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n\nconst SwapTransactionErrorContent = ({ onDismiss, message, openSettingModal }) => {\n  const isSlippagedErrorMsg = message?.includes(PancakeRouterSlippageErrorMsg)\n\n  const handleErrorDismiss = useCallback(() => {\n    onDismiss?.()\n    if (isSlippagedErrorMsg && openSettingModal) {\n      openSettingModal()\n    }\n  }, [isSlippagedErrorMsg, onDismiss, openSettingModal])\n  const { t } = useTranslation()\n\n  return isSlippagedErrorMsg ? (\n    <TransactionErrorContent\n      message={\n        <>\n          <Text mb=\"16px\">\n            {t(\n              'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your',\n            )}{' '}\n            <Text bold display=\"inline\" style={{ cursor: 'pointer' }} onClick={handleErrorDismiss}>\n              <u>{t('slippage tolerance.')}</u>\n            </Text>\n          </Text>\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/pancakeswap-exchange/trade-guide\"\n            style={{ width: '100%', justifyContent: 'center' }}\n          >\n            {t('What are the potential issues with the token?')}\n          </LinkExternal>\n        </>\n      }\n    />\n  ) : (\n    <TransactionErrorContent message={message} onDismiss={onDismiss} />\n  )\n}\n\ninterface ConfirmSwapModalProps {\n  trade?: TradeWithMM<Currency, Currency, TradeType>\n  originalTrade?: TradeWithMM<Currency, Currency, TradeType>\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  attemptingTxn: boolean\n  txHash?: string\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage?: string\n  customOnDismiss?: () => void\n  openSettingModal?: () => void\n  isRFQReady: boolean\n  isRFQLoading: boolean\n}\n\nconst ConfirmSwapModal: React.FC<React.PropsWithChildren<InjectedModalProps & ConfirmSwapModalProps>> = ({\n  trade,\n  originalTrade,\n  currencyBalances,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  customOnDismiss,\n  recipient,\n  swapErrorMessage,\n  attemptingTxn,\n  txHash,\n  openSettingModal,\n  isRFQReady,\n  isRFQLoading,\n}) => {\n  const { chainId } = useActiveChainId()\n  const { t } = useTranslation()\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss?.()\n  }, [customOnDismiss, onDismiss])\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <SwapTransactionErrorContent\n          openSettingModal={openSettingModal}\n          onDismiss={onDismiss}\n          message={swapErrorMessage}\n        />\n      ) : (\n        <TransactionConfirmSwapContentWithSmartRouter\n          isRFQReady={isRFQReady}\n          isRFQLoading={isRFQLoading}\n          trade={trade}\n          currencyBalances={currencyBalances}\n          originalTrade={originalTrade}\n          onAcceptChanges={onAcceptChanges}\n          allowedSlippage={allowedSlippage}\n          onConfirm={onConfirm}\n          recipient={recipient}\n        />\n      ),\n    [\n      trade,\n      originalTrade,\n      onAcceptChanges,\n      allowedSlippage,\n      onConfirm,\n      recipient,\n      swapErrorMessage,\n      onDismiss,\n      openSettingModal,\n      currencyBalances,\n      isRFQReady,\n      isRFQLoading,\n    ],\n  )\n\n  // text to show while loading\n  const pendingText = useMemo(() => {\n    return t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\n      amountA: trade?.inputAmount?.toSignificant(6) ?? '',\n      symbolA: trade?.inputAmount?.currency?.symbol ?? '',\n      amountB: trade?.outputAmount?.toSignificant(6) ?? '',\n      symbolB: trade?.outputAmount?.currency?.symbol ?? '',\n    })\n  }, [t, trade])\n\n  if (!chainId) return null\n\n  return (\n    <ConfirmSwapModalContainer handleDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : txHash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={txHash}\n          onDismiss={handleDismiss}\n          currencyToAdd={trade?.outputAmount.currency}\n        />\n      ) : (\n        confirmationContent()\n      )}\n    </ConfirmSwapModalContainer>\n  )\n}\n\nexport default memo(ConfirmSwapModal)\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport { Button, Column, useModal } from '@pancakeswap/uikit'\n\nimport { CommitButton } from 'components/CommitButton'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { AutoRow, RowBetween } from 'components/Layout/Row'\nimport CircleLoader from 'components/Loader/CircleLoader'\nimport SettingsModal, { withCustomOnDismiss } from 'components/Menu/GlobalSettings/SettingsModal'\nimport { SettingsMode } from 'components/Menu/GlobalSettings/types'\nimport { ApprovalState } from 'hooks/useApproveCallback'\nimport { WrapType } from 'hooks/useWrapCallback'\nimport { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { Field } from 'state/swap/actions'\nimport ProgressSteps from '../../components/ProgressSteps'\nimport { SwapCallbackError } from '../../components/styleds'\nimport { SAFE_MM_QUOTE_EXPIRY_SEC } from '../constants'\nimport { useSwapCallArguments } from '../hooks/useSwapCallArguments'\nimport { useSwapCallback } from '../hooks/useSwapCallback'\nimport { RFQResponse, TradeWithMM } from '../types'\nimport ConfirmSwapModal from './ConfirmSwapModal'\n\nconst SettingsModalWithCustomDismiss = withCustomOnDismiss(SettingsModal)\n\ninterface SwapCommitButtonPropsType {\n  swapIsUnsupported: boolean\n  account: string\n  showWrap: boolean\n  wrapInputError: string\n  onWrap: () => Promise<void>\n  wrapType: WrapType\n  approval: ApprovalState\n  approveCallback: () => Promise<void>\n  approvalSubmitted: boolean\n  currencies: {\n    INPUT?: Currency\n    OUTPUT?: Currency\n  }\n  isExpertMode: boolean\n  trade: TradeWithMM<Currency, Currency, TradeType>\n  swapInputError: string | ReactNode\n  currencyBalances: {\n    INPUT?: CurrencyAmount<Currency>\n    OUTPUT?: CurrencyAmount<Currency>\n  }\n  recipient: string\n  allowedSlippage: number\n  onUserInput: (field: Field, typedValue: string) => void\n  rfq?: RFQResponse['message']\n  refreshRFQ?: () => void\n  isRFQLoading?: boolean\n  mmQuoteExpiryRemainingSec?: number | null\n}\n\nexport default function MMSwapCommitButton({\n  swapIsUnsupported,\n  account,\n  showWrap,\n  wrapInputError,\n  onWrap,\n  wrapType,\n  approval,\n  approveCallback,\n  approvalSubmitted,\n  currencies,\n  isExpertMode,\n  trade,\n  swapInputError,\n  currencyBalances,\n  recipient,\n  allowedSlippage,\n  onUserInput,\n  rfq,\n  isRFQLoading = false,\n  mmQuoteExpiryRemainingSec = null,\n}: SwapCommitButtonPropsType) {\n  const { t } = useTranslation()\n  // the callback to execute the swap\n\n  const swapCalls = useSwapCallArguments(trade, rfq, recipient)\n\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, recipient, swapCalls)\n  const [{ tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    tradeToConfirm: TradeWithMM<Currency, Currency, TradeType> | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // Handlers\n  const handleSwap = useCallback(() => {\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then((hash) => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, swapErrorMessage: undefined, txHash: hash })\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [swapCallback, tradeToConfirm, setSwapState])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn })\n  }, [attemptingTxn, swapErrorMessage, trade, txHash, setSwapState])\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash, setSwapState])\n\n  // End Handlers\n\n  // Modals\n  const [indirectlyOpenConfirmModalState, setIndirectlyOpenConfirmModalState] = useState(false)\n\n  const [onPresentSettingsModal] = useModal(\n    <SettingsModalWithCustomDismiss\n      customOnDismiss={() => setIndirectlyOpenConfirmModalState(true)}\n      mode={SettingsMode.SWAP_LIQUIDITY}\n    />,\n  )\n\n  const [onPresentConfirmModal] = useModal(\n    <ConfirmSwapModal\n      trade={trade} // show the info while refresh RFQ\n      originalTrade={tradeToConfirm}\n      currencyBalances={currencyBalances}\n      onAcceptChanges={handleAcceptChanges}\n      attemptingTxn={attemptingTxn}\n      txHash={txHash}\n      recipient={recipient}\n      allowedSlippage={allowedSlippage}\n      onConfirm={handleSwap}\n      swapErrorMessage={swapErrorMessage || (!trade && t('Unable request a quote'))}\n      customOnDismiss={handleConfirmDismiss}\n      openSettingModal={onPresentSettingsModal}\n      isRFQReady={Boolean(rfq) && !isRFQLoading && mmQuoteExpiryRemainingSec >= SAFE_MM_QUOTE_EXPIRY_SEC}\n      isRFQLoading={isRFQLoading}\n    />,\n    true,\n    true,\n    'confirmSwapModal',\n  )\n  // End Modals\n\n  const onSwapHandler = useCallback(() => {\n    if (isExpertMode) {\n      handleSwap()\n    } else {\n      setSwapState({\n        tradeToConfirm: trade,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        txHash: undefined,\n      })\n      onPresentConfirmModal()\n    }\n  }, [isExpertMode, handleSwap, onPresentConfirmModal, trade])\n\n  // useEffect\n  useEffect(() => {\n    if (indirectlyOpenConfirmModalState) {\n      setIndirectlyOpenConfirmModalState(false)\n      setSwapState((state) => ({\n        ...state,\n        swapErrorMessage: undefined,\n      }))\n      onPresentConfirmModal()\n    }\n  }, [indirectlyOpenConfirmModalState, onPresentConfirmModal, setSwapState])\n\n  if (swapIsUnsupported) {\n    return (\n      <Button width=\"100%\" disabled>\n        {t('Unsupported Asset')}\n      </Button>\n    )\n  }\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  if (showWrap) {\n    return (\n      <CommitButton width=\"100%\" disabled={Boolean(wrapInputError)} onClick={onWrap}>\n        {wrapInputError ?? (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n      </CommitButton>\n    )\n  }\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED))\n\n  const isValid = !swapInputError\n  const approved = approval === ApprovalState.APPROVED\n\n  if (showApproveFlow) {\n    return (\n      <>\n        <RowBetween>\n          <CommitButton\n            variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\n            onClick={approveCallback}\n            disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n            width=\"48%\"\n          >\n            {approval === ApprovalState.PENDING ? (\n              <AutoRow gap=\"6px\" justify=\"center\">\n                {t('Enabling')} <CircleLoader stroke=\"white\" />\n              </AutoRow>\n            ) : approvalSubmitted && approved ? (\n              t('Enabled')\n            ) : (\n              t('Enable %asset%', { asset: currencies[Field.INPUT]?.symbol ?? '' })\n            )}\n          </CommitButton>\n          <CommitButton\n            variant=\"primary\"\n            onClick={() => {\n              onSwapHandler()\n            }}\n            width=\"48%\"\n            id=\"swap-button\"\n            disabled={!isValid || !approved}\n          >\n            {t('Swap')}\n          </CommitButton>\n        </RowBetween>\n        <Column style={{ marginTop: '1rem' }}>\n          <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n        </Column>\n        {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <CommitButton\n        variant=\"primary\"\n        onClick={() => {\n          onSwapHandler()\n        }}\n        id=\"swap-button\"\n        width=\"100%\"\n        disabled={!rfq || !isValid || !!swapCallbackError || !approved}\n      >\n        {swapInputError || t('Swap')}\n      </CommitButton>\n\n      {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n    </>\n  )\n}\n","import { Currency, CurrencyAmount, Pair, TradeType } from '@pancakeswap/sdk'\nimport { z } from 'zod'\n\nexport enum MessageType {\n  RFQ_REQUEST = 'RFQ_REQUEST',\n  RFQ_RESPONSE = 'RFQ_RESPONSE',\n  ORDER_BOOK_PRICE_RESPONSE = 'ORDER_BOOK_PRICE_RESPONSE',\n  RFQ_SUCCESS = 'RFQ_SUCCESS',\n  RFQ_ERROR = 'RFQ_ERROR',\n}\n\nexport const zRFQResponse = z.object({\n  messageType: z.nativeEnum(MessageType),\n  message: z.object({\n    makerSideToken: z.string(),\n    takerSideToken: z.string(),\n    makerSideTokenAmount: z.string(),\n    takerSideTokenAmount: z.string(),\n    rfqId: z.string(),\n    mmId: z.string().optional(),\n    signature: z.string(),\n    quoteExpiry: z.number(),\n  }),\n})\n\nexport interface RFQResponse {\n  messageType: MessageType.RFQ_RESPONSE\n  message: {\n    // Same as RFQ\n    makerSideToken: string\n    takerSideToken: string\n\n    // Amounts are in decimals.\n    makerSideTokenAmount: string\n    takerSideTokenAmount: string\n    // This should be the same rfqId that was sent by the server}\n    rfqId: string\n\n    // This will be set by server\n    mmId?: string\n    signature: string\n    // The unix timestamp when the quote expires, in seconds.\n    quoteExpiry: number\n    nonce: string\n    trader: string\n  }\n}\n\nexport interface RFQErrorResponse {\n  message: {\n    error: string\n    rfqId: string\n  }\n  messageType: MessageType.RFQ_ERROR\n}\n\nexport type OrderBookRequest = {\n  networkId: number\n  makerSideToken: string\n  takerSideToken: string\n  makerSideTokenAmount?: string\n  takerSideTokenAmount?: string\n  trader: string\n}\n\nexport interface OrderBookResponse {\n  messageType: MessageType.ORDER_BOOK_PRICE_RESPONSE\n  message: {\n    error?: string\n    makerSideToken: string\n    takerSideToken: string\n    makerSideTokenAmount: string\n    takerSideTokenAmount: string\n  }\n}\n\nexport type QuoteRequest = OrderBookRequest\n\nexport type RFQIdResponse = {\n  messageType: MessageType.RFQ_SUCCESS\n  message: {\n    rfqId: string\n  }\n}\n\ninterface BasePair {\n  token0: Currency\n  token1: Currency\n  reserve0: CurrencyAmount<Currency>\n  reserve1: CurrencyAmount<Currency>\n  involvesToken: (token: Currency) => boolean\n}\n\ninterface BaseRoute<TInput extends Currency, TOutput extends Currency, TPair extends BasePair | Pair> {\n  pairs: TPair[]\n  input: TInput\n  output: TOutput\n  path: Currency[]\n}\n\nexport interface TradeWithMM<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  tradeType: TTradeType\n  route: BaseRoute<TInput, TOutput, Pair>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n","import {\n  OrderBookRequest,\n  OrderBookResponse,\n  QuoteRequest,\n  RFQIdResponse,\n  RFQResponse,\n  RFQErrorResponse,\n  zRFQResponse,\n  MessageType,\n} from '../types'\n\nconst API_ENDPOINT = process.env.NEXT_PUBLIC_MM_API_URL\n\nexport const getMMOrderBook = async (param: OrderBookRequest): Promise<OrderBookResponse> => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/order-book-price`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(param),\n    })\n    const data = await response.json()\n    return data as OrderBookResponse\n  } catch (e) {\n    return Promise.reject(e)\n  }\n}\n\nexport const sendRFQAndGetRFQId = async (param: QuoteRequest): Promise<RFQIdResponse> => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/rfq`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(param),\n    })\n    const data = await response.json()\n    return data as RFQIdResponse\n  } catch (e) {\n    return Promise.reject(e)\n  }\n}\n\nexport const getRFQById = async (id: string | number) => {\n  const response = await fetch(`${API_ENDPOINT}/rfq/${id}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n  const data = (await response.json()) as RFQResponse | RFQErrorResponse\n\n  if (data?.messageType === MessageType.RFQ_ERROR) {\n    if (data?.message?.error === 'RFQ not found')\n      throw new RFQErrorNotFound(data?.message?.error, response.status !== 404)\n    if (data?.message?.error.includes(RFQInsufficientError.originMessage)) throw new RFQInsufficientError()\n    throw new MMError(data?.message?.error)\n  }\n  zRFQResponse.parse(data)\n  return data\n}\n\nexport class MMError extends Error {\n  shouldRetry: boolean\n\n  internalError?: string\n\n  constructor(message?: string) {\n    super(message)\n    this.internalError = message\n    this.message = 'Unable request a quote'\n  }\n}\n\nexport class RFQErrorNotFound extends MMError {\n  constructor(message: string, shouldRetry: boolean) {\n    super()\n    this.internalError = message\n    if (shouldRetry) {\n      this.message = 'Quoting'\n    } else {\n      this.message = 'Cannot find quote now. Please try again later.'\n    }\n    this.shouldRetry = shouldRetry\n  }\n}\n\nclass RFQInsufficientError extends MMError {\n  static originMessage = 'insufficient_liquidity'\n\n  shouldRetry = false\n\n  constructor() {\n    super()\n    this.message = 'Insufficient liquidity. Please try again later.'\n  }\n}\n","import { Currency, TradeType } from '@pancakeswap/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { MutableRefObject, useDeferredValue } from 'react'\nimport { useDebounce } from '@pancakeswap/hooks'\nimport { Field } from 'state/swap/actions'\nimport { useQuery } from '@tanstack/react-query'\nimport { getRFQById, MMError, sendRFQAndGetRFQId } from '../apis'\nimport { MessageType, QuoteRequest, RFQResponse, TradeWithMM } from '../types'\nimport { parseMMTrade } from '../utils/exchange'\n\nexport const useGetRFQId = (\n  param: QuoteRequest | null,\n  isMMBetter: boolean,\n  rfqUserInputPath: MutableRefObject<string>,\n  isRFQLive: MutableRefObject<boolean>,\n): { rfqId: string; refreshRFQ: () => void; rfqUserInputCache: string; isLoading: boolean } => {\n  const { account } = useActiveWeb3React()\n\n  if (rfqUserInputPath)\n    // eslint-disable-next-line no-param-reassign\n    rfqUserInputPath.current = `${param?.networkId}/${param?.makerSideToken}/${param?.takerSideToken}/${param?.makerSideTokenAmount}/${param?.takerSideTokenAmount}`\n  // eslint-disable-next-line no-param-reassign\n  if (isRFQLive) isRFQLive.current = false\n\n  const enabled = Boolean(\n    isMMBetter &&\n      account &&\n      param &&\n      param?.trader &&\n      (param?.makerSideTokenAmount || param?.takerSideTokenAmount) &&\n      param?.makerSideTokenAmount !== '0' &&\n      param?.takerSideTokenAmount !== '0',\n  )\n\n  const { data, refetch, isLoading } = useQuery(\n    [`RFQ/${rfqUserInputPath.current}`],\n    () => sendRFQAndGetRFQId(param),\n    {\n      refetchInterval: 20000,\n      retry: true,\n      refetchOnWindowFocus: false,\n      enabled,\n    }, // 20sec\n  )\n\n  return {\n    rfqId: data?.message?.rfqId ?? '',\n    refreshRFQ: refetch,\n    rfqUserInputCache: rfqUserInputPath.current,\n    isLoading: enabled && isLoading,\n  }\n}\n\nexport const useGetRFQTrade = (\n  rfqId: string,\n  independentField: Field,\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  isMMBetter: boolean,\n  refreshRFQ: () => void,\n  isRFQLive: MutableRefObject<boolean>,\n): {\n  rfq: RFQResponse['message'] | null\n  trade: TradeWithMM<Currency, Currency, TradeType> | null\n  refreshRFQ: () => void | null\n  quoteExpiry: number | null\n  isLoading: boolean\n  error?: Error\n  rfqId?: string\n  errorUpdateCount: number\n} | null => {\n  const deferredRfqId = useDeferredValue(rfqId)\n  const deferredIsMMBetter = useDebounce(isMMBetter, 300)\n  const enabled = Boolean(deferredIsMMBetter && deferredRfqId)\n  const { error, data, isLoading, errorUpdateCount } = useQuery(\n    [`RFQ/${deferredRfqId}`],\n    () => getRFQById(deferredRfqId),\n    {\n      enabled,\n      staleTime: Infinity,\n      retry: (failureCount, err) => {\n        if (err instanceof MMError) {\n          return err.shouldRetry\n        }\n        return failureCount < 4\n      },\n    },\n  )\n  const isExactIn: boolean = independentField === Field.INPUT\n\n  if (error && error instanceof Error && error?.message) {\n    return {\n      rfq: null,\n      trade: null,\n      quoteExpiry: null,\n      refreshRFQ: null,\n      error,\n      rfqId,\n      isLoading: enabled && isLoading,\n      errorUpdateCount,\n    }\n  }\n  if (data?.messageType === MessageType.RFQ_RESPONSE) {\n    // eslint-disable-next-line no-param-reassign\n    if (isRFQLive) isRFQLive.current = true\n    return {\n      rfq: data?.message,\n      trade: parseMMTrade(\n        isExactIn,\n        inputCurrency,\n        outputCurrency,\n        data?.message?.takerSideTokenAmount,\n        data?.message?.makerSideTokenAmount,\n      ),\n      quoteExpiry: data?.message?.quoteExpiry ?? null,\n      refreshRFQ,\n      isLoading: enabled && isLoading,\n      errorUpdateCount,\n    }\n  }\n  return {\n    rfq: null,\n    trade: null,\n    quoteExpiry: null,\n    isLoading: enabled && isLoading,\n    refreshRFQ: null,\n    errorUpdateCount,\n  }\n}\n","import useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { MM_SUPPORT_CHIAN } from '../constants'\n\nexport const useIsMMSupportChain = () => {\n  const { chainId } = useActiveWeb3React()\n  return useMemo(() => {\n    return Boolean(MM_SUPPORT_CHIAN[chainId])\n  }, [chainId])\n}\n","import { Currency } from '@pancakeswap/sdk'\nimport { PANCAKE_ETH_DEFAULT } from 'config/constants/lists'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useAccount } from 'wagmi'\nimport { ConnectorNames } from 'config/wallet'\nimport { ExtendEthereum } from 'global'\nimport { useAtomValue } from 'jotai'\nimport { useMemo } from 'react'\nimport { selectorByUrlsAtom } from 'state/lists/hooks'\nimport { useIsMMSupportChain } from './useIsMMSupportChain'\nimport { IS_SUPPORT_NATIVE_TOKEN, NATIVE_CURRENCY_ADDRESS } from '../constants'\n\nconst QUOTING_WHITE_LIST = {\n  1: PANCAKE_ETH_DEFAULT,\n}\n\nexport const useTokenList = (url?: string): Record<string, string> => {\n  const listsByUrl = useAtomValue(selectorByUrlsAtom)\n  const data = listsByUrl[url ?? '']\n  const whiteList = useMemo(() => {\n    const list = {}\n    if (data?.current) {\n      data?.current.tokens.forEach((d) => {\n        list[d.address.toLowerCase()] = d.address.toLowerCase()\n      })\n    }\n    return list\n  }, [data])\n  return whiteList\n}\n\nexport const useIsMMQuotingPair = (\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n): boolean => {\n  const { chainId } = useActiveWeb3React()\n  const list = useTokenList(QUOTING_WHITE_LIST[chainId])\n  const isMMSupportChain = useIsMMSupportChain()\n  const { connector, isConnected } = useAccount()\n\n  return useMemo(() => {\n    if (!isMMSupportChain || !chainId || !list || !inputCurrency || !outputCurrency) return false\n    if (\n      isConnected &&\n      (connector?.id === ConnectorNames.Blocto ||\n        connector?.id === 'safe' ||\n        Boolean((window.ethereum as ExtendEthereum)?.isBlocto))\n    )\n      return false\n    if (\n      list[\n        (inputCurrency.isToken\n          ? inputCurrency.address\n          : IS_SUPPORT_NATIVE_TOKEN\n          ? inputCurrency.wrapped.address\n          : NATIVE_CURRENCY_ADDRESS\n        ).toLowerCase()\n      ] &&\n      list[\n        (outputCurrency.isToken\n          ? outputCurrency.address\n          : IS_SUPPORT_NATIVE_TOKEN\n          ? inputCurrency.wrapped.address\n          : NATIVE_CURRENCY_ADDRESS\n        ).toLowerCase()\n      ]\n    )\n      return true\n    return false\n  }, [isMMSupportChain, chainId, list, inputCurrency, outputCurrency, isConnected, connector?.id])\n}\n","import { Currency } from '@pancakeswap/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { Field } from 'state/swap/actions'\n\nimport { parseMMParameter } from '../utils/exchange'\nimport { useIsMMQuotingPair } from './useIsMMQuotingPair'\n\nexport const useMMParam = (\n  independentField: Field,\n  typedValue: string,\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  isForRFQ?: boolean,\n) => {\n  const isMMQuotingPair = useIsMMQuotingPair(inputCurrency, outputCurrency)\n  const { account, chainId } = useActiveWeb3React()\n  return useMemo(\n    () =>\n      isMMQuotingPair\n        ? parseMMParameter(chainId, inputCurrency, outputCurrency, independentField, typedValue, account, isForRFQ)\n        : null,\n    [chainId, inputCurrency, outputCurrency, independentField, typedValue, account, isMMQuotingPair, isForRFQ],\n  )\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, Pair, TradeType } from '@pancakeswap/sdk'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { useQuery } from '@tanstack/react-query'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { MutableRefObject, useRef } from 'react'\nimport { Field } from 'state/swap/actions'\nimport { useCurrencyBalances } from 'state/wallet/hooks'\n\nimport { isAddress } from 'utils'\n\nimport { getMMOrderBook } from '../apis'\nimport { OrderBookRequest, OrderBookResponse, TradeWithMM } from '../types'\nimport { parseMMTrade } from '../utils/exchange'\nimport { useMMParam } from './useMMParam'\n\n// TODO: update\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n]\n\nfunction involvesAddress(trade: TradeWithMM<Currency, Currency, TradeType>, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.isToken && token.address === checksummedAddress) ||\n    trade.route.pairs.some((pair) => (pair as Pair)?.liquidityToken?.address === checksummedAddress)\n  )\n}\n\n// export const useOrderBookQuote = (request: OrderBookRequest | null): OrderBookResponse => {\n//   const { data } = useSWR(\n//     request &&\n//       request.trader &&\n//       (request.makerSideTokenAmount || request.takerSideTokenAmount) &&\n//       request.makerSideTokenAmount !== '0' &&\n//       request.takerSideTokenAmount !== '0' && [\n//         `orderBook/${request.networkId}/${request.makerSideToken}/${request.takerSideToken}/${request.makerSideTokenAmount}/${request.takerSideTokenAmount}/`,\n//       ],\n//     () => {\n//       return getMMOrderBook(request)\n//     },\n//     { refreshInterval: 5000 },\n//   )\n//   return data\n// }\n\nconst checkOrderBookShouldRefetch = (\n  inputPath: MutableRefObject<string>,\n  rfqUserInputPath: MutableRefObject<string>,\n  isRFQLive: MutableRefObject<boolean>,\n) => {\n  // if there is RFQ response and same input should stop refetch orderbook temporarily\n  const shouldRefetch = !(\n    Boolean(isRFQLive?.current) &&\n    Boolean(inputPath?.current === rfqUserInputPath?.current && rfqUserInputPath?.current !== undefined)\n  )\n  return shouldRefetch\n}\n\nexport const useOrderBookQuote = (\n  request: OrderBookRequest | null,\n  rfqUserInputPath: MutableRefObject<string>,\n  isRFQLive: MutableRefObject<boolean>,\n): { data: OrderBookResponse; isLoading: boolean } => {\n  const inputPath = useRef<string>('')\n  inputPath.current = `${request?.networkId}/${request?.makerSideToken}/${request?.takerSideToken}/${request?.makerSideTokenAmount}/${request?.takerSideTokenAmount}`\n  const { data, isLoading } = useQuery(\n    [`orderBook/${inputPath.current}`],\n    () => {\n      return getMMOrderBook(request)\n    },\n    {\n      refetchInterval: 5000,\n      enabled: Boolean(\n        request &&\n          request.trader &&\n          (request.makerSideTokenAmount || request.takerSideTokenAmount) &&\n          request.makerSideTokenAmount !== '0' &&\n          request.takerSideTokenAmount !== '0' &&\n          checkOrderBookShouldRefetch(inputPath, rfqUserInputPath, isRFQLive),\n      ),\n    },\n  )\n  return { data, isLoading }\n}\n\nexport const useMMTrade = (\n  independentField: Field,\n  typedValue: string,\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  trade?: TradeWithMM<Currency, Currency, TradeType> | null\n  inputError?: string\n  mmParam: OrderBookRequest\n  rfqUserInputPath: MutableRefObject<string>\n  isRFQLive: MutableRefObject<boolean>\n  isLoading: boolean\n} | null => {\n  const rfqUserInputPath = useRef<string>('')\n  const isRFQLive = useRef<boolean>(false)\n  const { account } = useActiveWeb3React()\n  const mmParam = useMMParam(independentField, typedValue, inputCurrency, outputCurrency)\n  const mmRFQParam = useMMParam(independentField, typedValue, inputCurrency, outputCurrency, true)\n\n  const { data: mmQoute, isLoading } = useOrderBookQuote(mmParam, rfqUserInputPath, isRFQLive)\n  const { t } = useTranslation()\n  const to: string | null = account ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n  const isExactIn: boolean = independentField === Field.INPUT\n  const independentCurrency = isExactIn ? inputCurrency : outputCurrency\n  const parsedAmount = tryParseAmount(typedValue, independentCurrency ?? undefined)\n  let bestTradeWithMM = null\n\n  if (!inputCurrency || !outputCurrency || !mmQoute || !mmQoute?.message?.takerSideTokenAmount) bestTradeWithMM = null\n  else {\n    const { takerSideTokenAmount, makerSideTokenAmount } = mmQoute?.message\n    bestTradeWithMM = parseMMTrade(isExactIn, inputCurrency, outputCurrency, takerSideTokenAmount, makerSideTokenAmount)\n  }\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = t('Connect Wallet')\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? t('Enter an amount')\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? t('Select a token')\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? t('Enter a recipient')\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeWithMM && involvesAddress(bestTradeWithMM, formattedTo))\n  ) {\n    inputError = inputError ?? t('Invalid recipient')\n  }\n\n  const slippageAdjustedAmounts = bestTradeWithMM && {\n    [Field.INPUT]: bestTradeWithMM.inputAmount,\n    [Field.OUTPUT]: bestTradeWithMM.outputAmount,\n  }\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = t('Insufficient %symbol% balance', { symbol: amountIn.currency.symbol })\n  }\n  if (mmQoute?.message?.error) {\n    inputError = mmQoute?.message?.error\n  }\n  return {\n    trade: bestTradeWithMM,\n    parsedAmount,\n    currencyBalances,\n    currencies,\n    inputError,\n    mmParam: mmRFQParam,\n    rfqUserInputPath,\n    isRFQLive,\n    isLoading,\n  }\n}\n","import { Currency, Trade, TradeType, ZERO } from '@pancakeswap/sdk'\nimport { TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport { useMemo } from 'react'\nimport { useMMLinkedPoolByDefault } from 'state/user/mmLinkedPool'\nimport { Field } from 'state/swap/actions'\nimport { TradeWithMM } from '../types'\n\ninterface Options {\n  independentField: Field\n  trade?: TradeWithStableSwap<Currency, Currency, TradeType> | null\n  v2Trade?: Trade<Currency, Currency, TradeType> | null\n  tradeWithMM?: TradeWithMM<Currency, Currency, TradeType> | null\n  isMMQuotingPair?: boolean\n  isExpertMode?: boolean\n}\n\nexport const useIsTradeWithMMBetter = ({\n  independentField,\n  trade,\n  v2Trade,\n  tradeWithMM,\n  isMMQuotingPair = false,\n  isExpertMode = false,\n}: Options) => {\n  const [isMMLinkedPoolByDefault] = useMMLinkedPoolByDefault()\n  return useMemo(() => {\n    const isExactIn = independentField === Field.INPUT\n    if (\n      !isMMLinkedPoolByDefault ||\n      isExpertMode ||\n      !isMMQuotingPair ||\n      !tradeWithMM ||\n      tradeWithMM.inputAmount.equalTo(ZERO) ||\n      tradeWithMM.outputAmount.equalTo(ZERO)\n    ) {\n      return false\n    }\n    if (!v2Trade && !trade && tradeWithMM) return true // v2 and smart router has not liq but MM provide the deal\n    if (!v2Trade?.outputAmount || !v2Trade?.inputAmount) {\n      if (tradeWithMM) return true\n    }\n    return (\n      (isExactIn && tradeWithMM.outputAmount.greaterThan(v2Trade?.outputAmount ?? ZERO)) || // exactIn\n      (!isExactIn && tradeWithMM.inputAmount.lessThan(v2Trade?.inputAmount ?? ZERO)) // exactOut\n    )\n  }, [trade, v2Trade, tradeWithMM, isMMQuotingPair, isExpertMode, independentField, isMMLinkedPoolByDefault])\n}\n","import { ChainId, Currency, CurrencyAmount, Percent, Price, TradeType, ZERO_PERCENT } from '@pancakeswap/sdk'\nimport { Pair } from '@pancakeswap/smart-router/evm'\nimport { useMemo } from 'react'\nimport { Field } from 'state/swap/actions'\n\nimport { MM_SWAP_CONTRACT_ADDRESS } from '../constants'\nimport { computeTradePriceBreakdown } from '../utils/exchange'\n\nimport { TradeWithMM } from '../types'\n\ninterface Options {\n  mmTrade?: TradeWithMM<Currency, Currency, TradeType> | null\n  useMMToTrade: boolean\n  allowedSlippage: number\n  chainId: ChainId\n  mmSwapInputError: string\n}\n\ninterface Info {\n  tradeType: TradeType\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n  route: {\n    pairs: Pair[]\n    path: Currency[]\n  }\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  executionPrice: Price<Currency, Currency>\n  routerAddress: string\n  priceImpactWithoutFee?: Percent\n  realizedLPFee?: CurrencyAmount<Currency> | null\n  inputError: string\n  trade: TradeWithMM<Currency, Currency, TradeType>\n}\n\nexport function useMMTradeInfo({ mmTrade, useMMToTrade = false, chainId, mmSwapInputError }: Options): Info | null {\n  return useMemo(() => {\n    if (!mmTrade || !useMMToTrade) {\n      return null\n    }\n    return {\n      trade: mmTrade,\n      tradeType: mmTrade.tradeType,\n      route: mmTrade.route,\n      inputAmount: mmTrade.inputAmount,\n      outputAmount: mmTrade.outputAmount,\n      slippageAdjustedAmounts: {\n        [Field.INPUT]: mmTrade && mmTrade.inputAmount,\n        [Field.OUTPUT]: mmTrade && mmTrade.outputAmount,\n      },\n      executionPrice: new Price(\n        mmTrade.inputAmount.currency,\n        mmTrade.outputAmount.currency,\n        mmTrade.inputAmount.quotient,\n        mmTrade.outputAmount.quotient,\n      ),\n      routerAddress: MM_SWAP_CONTRACT_ADDRESS[chainId],\n      priceImpactWithoutFee: ZERO_PERCENT,\n      realizedLPFee: computeTradePriceBreakdown(mmTrade).realizedLPFee,\n      inputError: mmSwapInputError,\n    }\n  }, [mmTrade, chainId, mmSwapInputError, useMMToTrade])\n}\n","import { useEffect, useState, useMemo, useRef } from 'react'\nimport { SAFE_MM_QUOTE_EXPIRY_SEC } from '../constants'\n\nexport const useMMQuoteCountDown = (quoteExpiry: number | null, refreshRFQ?: () => void) => {\n  const reFetched = useRef<boolean>(false)\n  const countDownDate = useMemo(() => (quoteExpiry ? quoteExpiry * 1000 : Date.now()), [quoteExpiry])\n\n  const [countDown, setCountDown] = useState(() => countDownDate - Date.now())\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCountDown(countDownDate - new Date().getTime())\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [countDownDate])\n  useEffect(() => {\n    reFetched.current = false\n  }, [quoteExpiry])\n\n  const remainingSec = useMemo(() => {\n    if (!countDown) return null\n    return Math.floor((countDown / 1000) % 60)\n  }, [countDown])\n  if (\n    !reFetched.current &&\n    remainingSec &&\n    remainingSec > 0 &&\n    remainingSec === SAFE_MM_QUOTE_EXPIRY_SEC - 1 &&\n    refreshRFQ\n  ) {\n    refreshRFQ?.()\n    reFetched.current = true\n  }\n  return { remainingSec }\n}\n","export * from './useGetRFQTrade'\nexport * from './useMMOrderBookTrade'\nexport * from './useIsMMTradeBetter'\nexport * from './useMMTradeInfo'\nexport * from './useIsMMQuotingPair'\nexport * from './useMMQuoteCountDown'\nexport * from './useMMParam'\n","import { getAddress } from '@ethersproject/address'\nimport { Contract } from '@ethersproject/contracts'\nimport {\n  Currency,\n  CurrencyAmount,\n  JSBI,\n  Percent,\n  SwapParameters,\n  TradeOptions,\n  TradeOptionsDeadline,\n  TradeType,\n} from '@pancakeswap/sdk'\nimport { isStableSwapPair, Trade, TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'config/constants'\nimport { BIPS_BASE } from 'config/constants/exchange'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\nimport { useMemo } from 'react'\nimport invariant from 'tiny-invariant'\nimport { useSmartRouterContract } from '../utils/exchange'\n\nconst NATIVE_CURRENCY_ADDRESS = getAddress('0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE')\n\nexport interface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nexport function useSwapCallArguments(\n  trade: TradeWithStableSwap<Currency, Currency, TradeType> | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId } = useActiveWeb3React()\n\n  const recipient = recipientAddress === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n  const contract = useSmartRouterContract()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !account || !chainId || !deadline) return []\n\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n        swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline.toNumber(),\n        }),\n      )\n    }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, contract, deadline, recipient, trade])\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\nfunction swapCallParameters(\n  trade: TradeWithStableSwap<Currency, Currency, TradeType>,\n  options: TradeOptions | TradeOptionsDeadline,\n): SwapParameters {\n  const etherIn = trade.inputAmount.currency.isNative\n  const etherOut = trade.outputAmount.currency.isNative\n  // the router does not support both ether in and out\n  invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n  invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n  const amountIn: string = toHex(Trade.maximumAmountIn(trade, options.allowedSlippage))\n  const amountOut: string = toHex(Trade.minimumAmountOut(trade, options.allowedSlippage))\n\n  const path: string[] = trade.route.path.map((token, index) => {\n    if (\n      // return the native address if input or output is native token\n      (index === 0 && trade.inputAmount.currency.isNative) ||\n      (index === trade.route.path.length - 1 && trade.outputAmount.currency.isNative)\n    )\n      return NATIVE_CURRENCY_ADDRESS\n    return token.isToken ? token.address : NATIVE_CURRENCY_ADDRESS\n  })\n  let methodName: string\n  let args: (string | string[])[]\n  let value: string\n  const flag: string[] = trade.route.pairs.map((pair) => {\n    if (isStableSwapPair(pair)) return '0x0'\n    return '0x1'\n  })\n  // singleHop\n  if (path.length === 2) {\n    methodName = 'swap'\n    //     [srcToken,dstToken,amount,minReturn,flag]\n    args = [path[0], path[1], amountIn, amountOut, flag[0]]\n    value = etherIn ? amountIn : ZERO_HEX\n  }\n  // multiHop\n  else {\n    methodName = 'swapMulti'\n    //     [tokens,amount,minReturn,flag]\n    args = [path, amountIn, amountOut, flag]\n    value = etherIn ? amountIn : ZERO_HEX\n  }\n  return {\n    methodName,\n    args,\n    value,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Currency, SwapParameters, TradeType } from '@pancakeswap/sdk'\nimport { Trade as SmartTrade, TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport isZero from '@pancakeswap/utils/isZero'\nimport truncateHash from '@pancakeswap/utils/truncateHash'\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'config/constants'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { useGasPrice } from 'state/user/hooks'\nimport { calculateGasMargin, isAddress } from 'utils'\nimport { basisPointsToPercent } from 'utils/exchange'\nimport { logSwap, logTx } from 'utils/log'\nimport { transactionErrorToUserReadableMessage } from 'utils/transactionErrorToUserReadableMessage'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall extends SwapCallEstimate {\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall extends SwapCallEstimate {\n  error: string\n}\n\ninterface SwapCallEstimate {\n  call: SwapCall\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: TradeWithStableSwap<Currency, Currency, TradeType>, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n  swapCalls: SwapCall[],\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId } = useActiveWeb3React()\n  const gasPrice = useGasPrice()\n\n  const { t } = useTranslation()\n\n  const addTransaction = useTransactionAdder()\n\n  const recipient = recipientAddress === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddress !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      }\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: SwapCallEstimate[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.error('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.error('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: t('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.error('Call threw error', call, callError)\n\n                    return { call, error: transactionErrorToUserReadableMessage(callError, t) }\n                  })\n              })\n          }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw new Error(errorCalls[errorCalls.length - 1].error)\n          throw new Error(t('Unexpected error. Could not estimate gas for the swap.'))\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          gasPrice,\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const pct = basisPointsToPercent(allowedSlippage)\n            const inputAmount =\n              trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.inputAmount.toSignificant(3)\n                : SmartTrade.maximumAmountIn(trade, pct).toSignificant(3)\n            const outputAmount =\n              trade.tradeType === TradeType.EXACT_OUTPUT\n                ? trade.outputAmount.toSignificant(3)\n                : SmartTrade.minimumAmountOut(trade, pct).toSignificant(3)\n\n            const base = `Swap ${\n              trade.tradeType === TradeType.EXACT_OUTPUT ? 'max.' : ''\n            } ${inputAmount} ${inputSymbol} for ${\n              trade.tradeType === TradeType.EXACT_INPUT ? 'min.' : ''\n            } ${outputAmount} ${outputSymbol}`\n\n            const recipientAddressText =\n              recipientAddress && isAddress(recipientAddress) ? truncateHash(recipientAddress) : recipientAddress\n\n            const withRecipient = recipient === account ? base : `${base} to ${recipientAddressText}`\n\n            const translatableWithRecipient =\n              trade.tradeType === TradeType.EXACT_OUTPUT\n                ? recipient === account\n                  ? 'Swap max. %inputAmount% %inputSymbol% for %outputAmount% %outputSymbol%'\n                  : 'Swap max. %inputAmount% %inputSymbol% for %outputAmount% %outputSymbol% to %recipientAddress%'\n                : recipient === account\n                ? 'Swap %inputAmount% %inputSymbol% for min. %outputAmount% %outputSymbol%'\n                : 'Swap %inputAmount% %inputSymbol% for min. %outputAmount% %outputSymbol% to %recipientAddress%'\n\n            addTransaction(response, {\n              summary: withRecipient,\n              translatableSummary: {\n                text: translatableWithRecipient,\n                data: {\n                  inputAmount,\n                  inputSymbol,\n                  outputAmount,\n                  outputSymbol,\n                  ...(recipient !== account && { recipientAddress: recipientAddressText }),\n                },\n              },\n              type: 'swap',\n            })\n            logSwap({\n              chainId,\n              inputAmount,\n              outputAmount,\n              input: trade.inputAmount.currency,\n              output: trade.outputAmount.currency,\n              type: 'SmartSwap',\n            })\n            logTx({ account, chainId, hash: response.hash })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(t('Swap failed: %message%', { message: transactionErrorToUserReadableMessage(error, t) }))\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, account, chainId, recipient, recipientAddress, swapCalls, gasPrice, t, addTransaction, allowedSlippage])\n}\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport { TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport { AutoRenewIcon, Button, QuestionHelper, Text, Link, AutoColumn } from '@pancakeswap/uikit'\nimport { AutoRow, RowBetween, RowFixed } from 'components/Layout/Row'\nimport { BUYBACK_FEE, LP_HOLDERS_FEE, TOTAL_FEE, TREASURY_FEE } from 'config/constants/info'\nimport { useMemo, useState } from 'react'\nimport { Field } from 'state/swap/actions'\nimport styled from 'styled-components'\nimport { warningSeverity } from 'utils/exchange'\nimport FormattedPriceImpact from '../../components/FormattedPriceImpact'\nimport { StyledBalanceMaxMini, SwapCallbackError } from '../../components/styleds'\nimport { formatExecutionPrice, computeTradePriceBreakdown } from '../utils/exchange'\n\nconst SwapModalFooterContainer = styled(AutoColumn)`\n  margin-top: 24px;\n  padding: 16px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nexport default function SwapModalFooter({\n  trade,\n  slippageAdjustedAmounts,\n  isEnoughInputBalance,\n  onConfirm,\n  swapErrorMessage,\n  disabledConfirm,\n}: {\n  trade: TradeWithStableSwap<Currency, Currency, TradeType>\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  isEnoughInputBalance: boolean\n  onConfirm: () => void\n  swapErrorMessage?: string | undefined\n  disabledConfirm: boolean\n}) {\n  const { t } = useTranslation()\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\n  const severity = warningSeverity(priceImpactWithoutFee)\n\n  const totalFeePercent = `${(TOTAL_FEE * 100).toFixed(2)}%`\n  const lpHoldersFeePercent = `${(LP_HOLDERS_FEE * 100).toFixed(2)}%`\n  const treasuryFeePercent = `${(TREASURY_FEE * 100).toFixed(4)}%`\n  const buyBackFeePercent = `${(BUYBACK_FEE * 100).toFixed(4)}%`\n\n  return (\n    <>\n      <SwapModalFooterContainer>\n        <RowBetween align=\"center\">\n          <Text fontSize=\"14px\">{t('Price')}</Text>\n          <Text\n            fontSize=\"14px\"\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '10px',\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <AutoRenewIcon width=\"14px\" />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT ? t('Minimum received') : t('Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={t(\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.',\n              )}\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </Text>\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Price Impact')}</Text>\n            <QuestionHelper\n              text={t('The difference between the market price and your price due to trade size.')}\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Liquidity Provider Fee')}</Text>\n            <QuestionHelper\n              text={\n                <>\n                  <Text mb=\"12px\">\n                    {t('For each non-stableswap trade, a %amount% fee is paid', { amount: totalFeePercent })}\n                  </Text>\n                  <Text>- {t('%amount% to LP token holders', { amount: lpHoldersFeePercent })}</Text>\n                  <Text>- {t('%amount% to the Treasury', { amount: treasuryFeePercent })}</Text>\n                  <Text>- {t('%amount% towards CAKE buyback and burn', { amount: buyBackFeePercent })}</Text>\n                  <Text mt=\"12px\">\n                    {t('For each stableswap trade, refer to the fee table')}\n                    <Link\n                      style={{ display: 'inline' }}\n                      ml=\"4px\"\n                      external\n                      href=\"https://docs.pancakeswap.finance/products/stableswap#stableswap-fees\"\n                    >\n                      {t('here.')}\n                    </Link>\n                  </Text>\n                </>\n              }\n              ml=\"4px\"\n              placement=\"top\"\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </SwapModalFooterContainer>\n\n      <AutoRow>\n        <Button\n          variant={severity > 2 ? 'danger' : 'primary'}\n          onClick={onConfirm}\n          disabled={disabledConfirm}\n          mt=\"12px\"\n          id=\"confirm-swap-or-send\"\n          width=\"100%\"\n        >\n          {severity > 2 || (trade.tradeType === TradeType.EXACT_OUTPUT && !isEnoughInputBalance)\n            ? t('Swap Anyway')\n            : t('Confirm Swap')}\n        </Button>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n","import { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport { TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport { ConfirmationModalContent } from '@pancakeswap/uikit'\nimport { ITrade } from 'config/constants/types'\nimport { memo, useCallback, useMemo } from 'react'\nimport { Field } from 'state/swap/actions'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport SwapModalFooter from './SwapModalFooter'\nimport {\n  computeSlippageAdjustedAmounts as computeSlippageAdjustedAmountsWithSmartRouter,\n  computeTradePriceBreakdown as computeTradePriceBreakdownWithSmartRouter,\n} from '../utils/exchange'\nimport SwapModalHeader from '../../components/SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: ITrade, tradeB: ITrade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\ninterface TransactionConfirmSwapContentProps {\n  trade: TradeWithStableSwap<Currency, Currency, TradeType> | undefined\n  originalTrade: ITrade | undefined\n  onAcceptChanges: () => void\n  allowedSlippage: number\n  onConfirm: () => void\n  recipient: string\n  currencyBalances: {\n    INPUT?: CurrencyAmount<Currency>\n    OUTPUT?: CurrencyAmount<Currency>\n  }\n}\n\nconst TransactionConfirmSwapContent = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  recipient,\n  currencyBalances,\n}: TransactionConfirmSwapContentProps) => {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade],\n  )\n\n  const slippageAdjustedAmounts = useMemo(\n    () => computeSlippageAdjustedAmountsWithSmartRouter(trade, allowedSlippage),\n    [trade, allowedSlippage],\n  )\n  const { priceImpactWithoutFee } = useMemo(() => computeTradePriceBreakdownWithSmartRouter(trade), [trade])\n\n  const isEnoughInputBalance = useMemo(() => {\n    if (trade?.tradeType !== TradeType.EXACT_OUTPUT) return null\n\n    const isInputBalanceExist = !!(currencyBalances && currencyBalances[Field.INPUT])\n    const isInputBalanceBNB = isInputBalanceExist && currencyBalances[Field.INPUT].currency.isNative\n    const inputCurrencyAmount = isInputBalanceExist\n      ? isInputBalanceBNB\n        ? maxAmountSpend(currencyBalances[Field.INPUT])\n        : currencyBalances[Field.INPUT]\n      : null\n    return inputCurrencyAmount && slippageAdjustedAmounts && slippageAdjustedAmounts[Field.INPUT]\n      ? inputCurrencyAmount.greaterThan(slippageAdjustedAmounts[Field.INPUT]) ||\n          inputCurrencyAmount.equalTo(slippageAdjustedAmounts[Field.INPUT])\n      : false\n  }, [currencyBalances, trade, slippageAdjustedAmounts])\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        inputAmount={trade.inputAmount}\n        outputAmount={trade.outputAmount}\n        tradeType={trade.tradeType}\n        priceImpactWithoutFee={priceImpactWithoutFee}\n        allowedSlippage={allowedSlippage}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        isEnoughInputBalance={isEnoughInputBalance}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [\n    priceImpactWithoutFee,\n    allowedSlippage,\n    onAcceptChanges,\n    recipient,\n    showAcceptChanges,\n    trade,\n    slippageAdjustedAmounts,\n    isEnoughInputBalance,\n  ])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        slippageAdjustedAmounts={slippageAdjustedAmounts}\n        isEnoughInputBalance={isEnoughInputBalance}\n      />\n    ) : null\n  }, [onConfirm, showAcceptChanges, trade, isEnoughInputBalance, slippageAdjustedAmounts])\n\n  return <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n}\n\nexport default memo(TransactionConfirmSwapContent)\n","import { useCallback, memo, useMemo } from 'react'\nimport { Currency, TradeType, CurrencyAmount } from '@pancakeswap/sdk'\nimport {\n  InjectedModalProps,\n  LinkExternal,\n  Text,\n  TransactionErrorContent,\n  ConfirmationPendingContent,\n} from '@pancakeswap/uikit'\nimport { TransactionSubmittedContent } from 'components/TransactionConfirmationModal'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Field } from 'state/swap/actions'\nimport { TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport ConfirmSwapModalContainer from '../../components/ConfirmSwapModalContainer'\nimport TransactionConfirmSwapContentWithSmartRouter from './TransactionConfirmSwapContent'\n\nconst PancakeRouterSlippageErrorMsg =\n  'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n\nconst SwapTransactionErrorContent = ({ onDismiss, message, openSettingModal }) => {\n  const isSlippagedErrorMsg = message?.includes(PancakeRouterSlippageErrorMsg)\n\n  const handleErrorDismiss = useCallback(() => {\n    onDismiss?.()\n    if (isSlippagedErrorMsg && openSettingModal) {\n      openSettingModal()\n    }\n  }, [isSlippagedErrorMsg, onDismiss, openSettingModal])\n  const { t } = useTranslation()\n\n  return isSlippagedErrorMsg ? (\n    <TransactionErrorContent\n      message={\n        <>\n          <Text mb=\"16px\">\n            {t(\n              'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your',\n            )}{' '}\n            <Text bold display=\"inline\" style={{ cursor: 'pointer' }} onClick={handleErrorDismiss}>\n              <u>{t('slippage tolerance.')}</u>\n            </Text>\n          </Text>\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/pancakeswap-exchange/trade-guide\"\n            style={{ width: '100%', justifyContent: 'center' }}\n          >\n            {t('What are the potential issues with the token?')}\n          </LinkExternal>\n        </>\n      }\n    />\n  ) : (\n    <TransactionErrorContent message={message} onDismiss={onDismiss} />\n  )\n}\n\ninterface ConfirmSwapModalProps {\n  trade?: TradeWithStableSwap<Currency, Currency, TradeType>\n  originalTrade?: TradeWithStableSwap<Currency, Currency, TradeType>\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  attemptingTxn: boolean\n  txHash?: string\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage?: string\n  customOnDismiss?: () => void\n  openSettingModal?: () => void\n}\n\nconst ConfirmSwapModal: React.FC<React.PropsWithChildren<InjectedModalProps & ConfirmSwapModalProps>> = ({\n  trade,\n  originalTrade,\n  currencyBalances,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  customOnDismiss,\n  recipient,\n  swapErrorMessage,\n  attemptingTxn,\n  txHash,\n  openSettingModal,\n}) => {\n  const { chainId } = useActiveChainId()\n  const { t } = useTranslation()\n\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss?.()\n  }, [customOnDismiss, onDismiss])\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <SwapTransactionErrorContent\n          openSettingModal={openSettingModal}\n          onDismiss={onDismiss}\n          message={swapErrorMessage}\n        />\n      ) : (\n        <TransactionConfirmSwapContentWithSmartRouter\n          trade={trade}\n          currencyBalances={currencyBalances}\n          originalTrade={originalTrade}\n          onAcceptChanges={onAcceptChanges}\n          allowedSlippage={allowedSlippage}\n          onConfirm={onConfirm}\n          recipient={recipient}\n        />\n      ),\n    [\n      trade,\n      originalTrade,\n      onAcceptChanges,\n      allowedSlippage,\n      onConfirm,\n      recipient,\n      swapErrorMessage,\n      onDismiss,\n      openSettingModal,\n      currencyBalances,\n    ],\n  )\n\n  // text to show while loading\n  const pendingText = useMemo(() => {\n    return t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\n      amountA: trade?.inputAmount?.toSignificant(6) ?? '',\n      symbolA: trade?.inputAmount?.currency?.symbol ?? '',\n      amountB: trade?.outputAmount?.toSignificant(6) ?? '',\n      symbolB: trade?.outputAmount?.currency?.symbol ?? '',\n    })\n  }, [t, trade])\n\n  if (!chainId) return null\n\n  return (\n    <ConfirmSwapModalContainer handleDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : txHash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={txHash}\n          onDismiss={handleDismiss}\n          currencyToAdd={trade?.outputAmount.currency}\n        />\n      ) : (\n        confirmationContent()\n      )}\n    </ConfirmSwapModalContainer>\n  )\n}\n\nexport default memo(ConfirmSwapModal)\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, TradeType } from '@pancakeswap/sdk'\nimport { Button, Text, useModal, confirmPriceImpactWithoutFee, Column } from '@pancakeswap/uikit'\n\nimport { TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport { GreyCard } from 'components/Card'\nimport { CommitButton } from 'components/CommitButton'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { AutoRow, RowBetween } from 'components/Layout/Row'\nimport CircleLoader from 'components/Loader/CircleLoader'\nimport SettingsModal, { withCustomOnDismiss } from 'components/Menu/GlobalSettings/SettingsModal'\nimport { SettingsMode } from 'components/Menu/GlobalSettings/types'\nimport {\n  BIG_INT_ZERO,\n  PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN,\n  ALLOWED_PRICE_IMPACT_HIGH,\n} from 'config/constants/exchange'\nimport { ApprovalState } from 'hooks/useApproveCallback'\nimport { WrapType } from 'hooks/useWrapCallback'\nimport { useCallback, useEffect, useState } from 'react'\nimport { Field } from 'state/swap/actions'\nimport { useUserSingleHopOnly } from 'state/user/hooks'\nimport { warningSeverity } from 'utils/exchange'\nimport ProgressSteps from '../../components/ProgressSteps'\nimport { SwapCallbackError } from '../../components/styleds'\nimport { useSwapCallArguments } from '../hooks/useSwapCallArguments'\nimport { useSwapCallback } from '../hooks/useSwapCallback'\nimport { computeTradePriceBreakdown } from '../utils/exchange'\nimport ConfirmSwapModal from './ConfirmSwapModal'\n\nconst SettingsModalWithCustomDismiss = withCustomOnDismiss(SettingsModal)\n\ninterface SwapCommitButtonPropsType {\n  swapIsUnsupported: boolean\n  account: string\n  showWrap: boolean\n  wrapInputError: string\n  onWrap: () => Promise<void>\n  wrapType: WrapType\n  approval: ApprovalState\n  approveCallback: () => Promise<void>\n  approvalSubmitted: boolean\n  currencies: {\n    INPUT?: Currency\n    OUTPUT?: Currency\n  }\n  isExpertMode: boolean\n  trade: TradeWithStableSwap<Currency, Currency, TradeType>\n  swapInputError: string\n  currencyBalances: {\n    INPUT?: CurrencyAmount<Currency>\n    OUTPUT?: CurrencyAmount<Currency>\n  }\n  recipient: string\n  allowedSlippage: number\n  parsedIndepentFieldAmount: CurrencyAmount<Currency>\n  onUserInput: (field: Field, typedValue: string) => void\n}\n\nexport default function SwapCommitButton({\n  swapIsUnsupported,\n  account,\n  showWrap,\n  wrapInputError,\n  onWrap,\n  wrapType,\n  approval,\n  approveCallback,\n  approvalSubmitted,\n  currencies,\n  isExpertMode,\n  trade,\n  swapInputError,\n  currencyBalances,\n  recipient,\n  allowedSlippage,\n  parsedIndepentFieldAmount,\n  onUserInput,\n}: SwapCommitButtonPropsType) {\n  const { t } = useTranslation()\n  const [singleHopOnly] = useUserSingleHopOnly()\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n  // the callback to execute the swap\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipient)\n\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    recipient,\n    swapCalls,\n  )\n  const [{ tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    tradeToConfirm: TradeWithStableSwap<Currency, Currency, TradeType> | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // Handlers\n  const handleSwap = useCallback(() => {\n    if (\n      priceImpactWithoutFee &&\n      !confirmPriceImpactWithoutFee(\n        priceImpactWithoutFee,\n        PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN,\n        ALLOWED_PRICE_IMPACT_HIGH,\n        t,\n      )\n    ) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then((hash) => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, swapErrorMessage: undefined, txHash: hash })\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, t, setSwapState])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn })\n  }, [attemptingTxn, swapErrorMessage, trade, txHash, setSwapState])\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash, setSwapState])\n\n  // End Handlers\n\n  // Modals\n  const [indirectlyOpenConfirmModalState, setIndirectlyOpenConfirmModalState] = useState(false)\n\n  const [onPresentSettingsModal] = useModal(\n    <SettingsModalWithCustomDismiss\n      customOnDismiss={() => setIndirectlyOpenConfirmModalState(true)}\n      mode={SettingsMode.SWAP_LIQUIDITY}\n    />,\n  )\n\n  const [onPresentConfirmModal] = useModal(\n    <ConfirmSwapModal\n      trade={trade}\n      originalTrade={tradeToConfirm}\n      currencyBalances={currencyBalances}\n      onAcceptChanges={handleAcceptChanges}\n      attemptingTxn={attemptingTxn}\n      txHash={txHash}\n      recipient={recipient}\n      allowedSlippage={allowedSlippage}\n      onConfirm={handleSwap}\n      swapErrorMessage={swapErrorMessage}\n      customOnDismiss={handleConfirmDismiss}\n      openSettingModal={onPresentSettingsModal}\n    />,\n    true,\n    true,\n    'confirmSwapModal',\n  )\n  // End Modals\n\n  const onSwapHandler = useCallback(() => {\n    if (isExpertMode) {\n      handleSwap()\n    } else {\n      setSwapState({\n        tradeToConfirm: trade,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        txHash: undefined,\n      })\n      onPresentConfirmModal()\n    }\n  }, [isExpertMode, handleSwap, onPresentConfirmModal, trade])\n\n  // useEffect\n  useEffect(() => {\n    if (indirectlyOpenConfirmModalState) {\n      setIndirectlyOpenConfirmModalState(false)\n      setSwapState((state) => ({\n        ...state,\n        swapErrorMessage: undefined,\n      }))\n      onPresentConfirmModal()\n    }\n  }, [indirectlyOpenConfirmModalState, onPresentConfirmModal, setSwapState])\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  if (swapIsUnsupported) {\n    return (\n      <Button width=\"100%\" disabled>\n        {t('Unsupported Asset')}\n      </Button>\n    )\n  }\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  if (showWrap) {\n    return (\n      <CommitButton width=\"100%\" disabled={Boolean(wrapInputError)} onClick={onWrap}>\n        {wrapInputError ?? (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n      </CommitButton>\n    )\n  }\n\n  const noRoute = !trade?.route\n\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedIndepentFieldAmount?.greaterThan(BIG_INT_ZERO),\n  )\n\n  if (noRoute && userHasSpecifiedInputOutput) {\n    return (\n      <GreyCard style={{ textAlign: 'center', padding: '0.75rem' }}>\n        <Text color=\"textSubtle\">{t('Insufficient liquidity for this trade.')}</Text>\n        {singleHopOnly && <Text color=\"textSubtle\">{t('Try enabling multi-hop trades.')}</Text>}\n      </GreyCard>\n    )\n  }\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const isValid = !swapInputError\n  const approved = approval === ApprovalState.APPROVED\n\n  if (showApproveFlow) {\n    return (\n      <>\n        <RowBetween>\n          <CommitButton\n            variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\n            onClick={approveCallback}\n            disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n            width=\"48%\"\n          >\n            {approval === ApprovalState.PENDING ? (\n              <AutoRow gap=\"6px\" justify=\"center\">\n                {t('Enabling')} <CircleLoader stroke=\"white\" />\n              </AutoRow>\n            ) : approvalSubmitted && approved ? (\n              t('Enabled')\n            ) : (\n              t('Enable %asset%', { asset: currencies[Field.INPUT]?.symbol ?? '' })\n            )}\n          </CommitButton>\n          <CommitButton\n            variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\n            onClick={() => {\n              onSwapHandler()\n            }}\n            width=\"48%\"\n            id=\"swap-button\"\n            disabled={!isValid || !approved || (priceImpactSeverity > 3 && !isExpertMode)}\n          >\n            {priceImpactSeverity > 3 && !isExpertMode\n              ? t('Price Impact High')\n              : priceImpactSeverity > 2\n              ? t('Swap Anyway')\n              : t('Swap')}\n          </CommitButton>\n        </RowBetween>\n        <Column style={{ marginTop: '1rem' }}>\n          <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n        </Column>\n        {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <CommitButton\n        variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary'}\n        onClick={() => {\n          onSwapHandler()\n        }}\n        id=\"swap-button\"\n        width=\"100%\"\n        disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError || !approved}\n      >\n        {swapInputError ||\n          (priceImpactSeverity > 3 && !isExpertMode\n            ? t('Price Impact Too High')\n            : priceImpactSeverity > 2\n            ? t('Swap Anyway')\n            : t('Swap'))}\n      </CommitButton>\n\n      {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n    </>\n  )\n}\n","import { Currency, CurrencyAmount, Pair, TradeType } from '@pancakeswap/sdk'\nimport { StableSwapPair, TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\nimport { Field } from 'state/swap/actions'\nimport { useCurrencyBalances } from 'state/wallet/hooks'\nimport { useTranslation } from '@pancakeswap/localization'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { useUserSingleHopOnly, useUserSlippageTolerance } from 'state/user/hooks'\nimport { isAddress } from 'utils'\n\nimport { computeSlippageAdjustedAmounts } from '../utils/exchange'\nimport { useBestTrade } from './useBestTrade'\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(\n  trade: TradeWithStableSwap<Currency, Currency, TradeType>,\n  checksummedAddress: string,\n): boolean {\n  return (\n    trade.route.path.some((token) => token.isToken && token.address === checksummedAddress) ||\n    trade.route.pairs.some(\n      (pair) =>\n        (pair as StableSwapPair)?.stableSwapAddress === checksummedAddress ||\n        (pair as Pair)?.liquidityToken?.address === checksummedAddress,\n    )\n  )\n}\n\n// TODO: update\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n]\n\nexport function useDerivedSwapInfoWithStableSwap(\n  independentField: Field,\n  typedValue: string,\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  trade: TradeWithStableSwap<Currency, Currency, TradeType> | null\n  inputError?: string\n} {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [singleHop] = useUserSingleHopOnly()\n\n  const to: string | null = account || null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const independentCurrency = isExactIn ? inputCurrency : outputCurrency\n  const dependentCurrency = isExactIn ? outputCurrency : inputCurrency\n  const parsedAmount = tryParseAmount(typedValue, independentCurrency ?? undefined)\n\n  const tradeType = isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT\n  const bestTradeWithStableSwap = useBestTrade(parsedAmount, dependentCurrency, tradeType, {\n    maxHops: singleHop ? 1 : 3,\n  })\n  // TODO add invariant make sure v2 trade has the same input & output amount as trade with stable swap\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = t('Connect Wallet')\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? t('Enter an amount')\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? t('Select a token')\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? t('Enter a recipient')\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeWithStableSwap && involvesAddress(bestTradeWithStableSwap, formattedTo))\n  ) {\n    inputError = inputError ?? t('Invalid recipient')\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts =\n    bestTradeWithStableSwap &&\n    allowedSlippage &&\n    computeSlippageAdjustedAmounts(bestTradeWithStableSwap, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = t('Insufficient %symbol% balance', { symbol: amountIn.currency.symbol })\n  }\n\n  return {\n    trade: bestTradeWithStableSwap,\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    inputError,\n  }\n}\n","import { useMemo } from 'react'\nimport { ChainId, Currency, CurrencyAmount, Percent, Price, Trade, TradeType } from '@pancakeswap/sdk'\nimport { Pair, RouteType, Trade as SmartRouterTrade, TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\n\nimport { Field } from 'state/swap/actions'\nimport { ROUTER_ADDRESS } from 'config/constants/exchange'\nimport {\n  computeSlippageAdjustedAmounts as computeSlippageAdjustedAmountsForV2Trade,\n  computeTradePriceBreakdown as computeTradePriceBreakdownForV2Trade,\n} from 'utils/exchange'\n\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown, SMART_ROUTER_ADDRESS } from '../utils/exchange'\n\ninterface Options {\n  trade?: TradeWithStableSwap<Currency, Currency, TradeType> | null\n  v2Trade?: Trade<Currency, Currency, TradeType> | null\n  useSmartRouter?: boolean\n  allowedSlippage: number\n  chainId: ChainId\n  swapInputError: string\n  stableSwapInputError: string\n}\n\ninterface Info {\n  tradeType: TradeType\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n  route: {\n    pairs: Pair[]\n    path: Currency[]\n  }\n  slippageAdjustedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  executionPrice: Price<Currency, Currency>\n  routerAddress: string\n  priceImpactWithoutFee?: Percent\n  realizedLPFee?: CurrencyAmount<Currency> | null\n  fallbackV2: boolean\n  inputError: string\n}\n\nexport function useTradeInfo({\n  trade,\n  v2Trade,\n  useSmartRouter = true,\n  allowedSlippage = 0,\n  chainId,\n  swapInputError,\n  stableSwapInputError,\n}: Options): Info | null {\n  return useMemo(() => {\n    if (!trade && !v2Trade) {\n      return null\n    }\n    const smartRouterAvailable = useSmartRouter && !!trade\n    const fallbackV2 = !smartRouterAvailable || trade?.route.routeType === RouteType.V2\n\n    if (fallbackV2) {\n      if (v2Trade) {\n        const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdownForV2Trade(v2Trade)\n        return {\n          tradeType: v2Trade.tradeType,\n          fallbackV2,\n          route: v2Trade.route,\n          inputAmount: v2Trade.inputAmount,\n          outputAmount: v2Trade.outputAmount,\n          slippageAdjustedAmounts: computeSlippageAdjustedAmountsForV2Trade(v2Trade, allowedSlippage),\n          executionPrice: v2Trade.executionPrice,\n          routerAddress: ROUTER_ADDRESS[chainId],\n          priceImpactWithoutFee,\n          realizedLPFee,\n          inputError: swapInputError,\n        }\n      }\n      return null\n    }\n\n    const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\n    return {\n      tradeType: trade.tradeType,\n      fallbackV2,\n      route: trade.route,\n      inputAmount: trade.inputAmount,\n      outputAmount: trade.outputAmount,\n      slippageAdjustedAmounts: computeSlippageAdjustedAmounts(trade, allowedSlippage),\n      executionPrice: SmartRouterTrade.executionPrice(trade),\n      routerAddress: SMART_ROUTER_ADDRESS[chainId],\n      priceImpactWithoutFee,\n      realizedLPFee,\n      inputError: stableSwapInputError,\n    }\n  }, [useSmartRouter, trade, v2Trade, allowedSlippage, chainId, stableSwapInputError, swapInputError])\n}\n","import { Currency, Trade, TradeType } from '@pancakeswap/sdk'\nimport { RouteType, TradeWithStableSwap } from '@pancakeswap/smart-router/evm'\n\ninterface Options {\n  trade?: TradeWithStableSwap<Currency, Currency, TradeType> | null\n  v2Trade?: Trade<Currency, Currency, TradeType> | null\n}\n\nexport const useIsSmartRouterBetter = ({ trade, v2Trade }: Options) => {\n  if (!trade || !v2Trade) {\n    return false\n  }\n\n  // trade might be outdated when currencies changed\n  if (\n    !trade.inputAmount.currency.equals(v2Trade.inputAmount.currency) ||\n    !trade.outputAmount.currency.equals(v2Trade.outputAmount.currency) ||\n    // Trade is cached so when changing the input, trade might be outdated\n    (trade.tradeType === v2Trade.tradeType && !trade.inputAmount.equalTo(v2Trade.inputAmount))\n  ) {\n    return false\n  }\n\n  return trade.route.routeType !== RouteType.V2 && trade.outputAmount.greaterThan(v2Trade.outputAmount)\n}\n","export * from './useDerivedSwapInfoWithStableSwap'\nexport * from './useTradeInfo'\nexport * from './useIsSmartRouterBetter'\n","import { useDebounce } from '@pancakeswap/hooks'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Currency, CurrencyAmount, NATIVE, Percent } from '@pancakeswap/sdk'\nimport {\n  ArrowDownIcon,\n  AutoColumn,\n  Box,\n  Button,\n  Checkbox,\n  Flex,\n  Message,\n  MessageText,\n  Skeleton,\n  Swap as SwapUI,\n  Text,\n  useModal,\n} from '@pancakeswap/uikit'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { useSwapActionHandlers } from 'state/swap/useSwapActionHandlers'\nimport { useStableSwapByDefault } from 'state/user/smartRouter'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport AccessRisk from 'views/Swap/components/AccessRisk'\n\nimport replaceBrowserHistory from '@pancakeswap/utils/replaceBrowserHistory'\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\nimport { AutoRow } from 'components/Layout/Row'\nimport { CommonBasesType } from 'components/SearchModal/types'\nimport { useCurrency } from 'hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback'\nimport { useAtomValue } from 'jotai'\nimport { Field } from 'state/swap/actions'\nimport { useDerivedSwapInfo, useSwapState } from 'state/swap/hooks'\nimport { useExpertModeManager, useUserSlippageTolerance } from 'state/user/hooks'\nimport { currencyId } from 'utils/currencyId'\nimport SettingsModal from '../../../components/Menu/GlobalSettings/SettingsModal'\nimport { SettingsMode } from '../../../components/Menu/GlobalSettings/types'\nimport { combinedTokenMapFromOfficialsUrlsAtom } from '../../../state/lists/hooks'\nimport AddressInputPanel from '../components/AddressInputPanel'\nimport AdvancedSwapDetailsDropdown from '../components/AdvancedSwapDetailsDropdown'\nimport CurrencyInputHeader from '../components/CurrencyInputHeader'\nimport { ArrowWrapper, Wrapper } from '../components/styleds'\nimport SwapCommitButton from '../components/SwapCommitButton'\nimport useRefreshBlockNumberID from '../hooks/useRefreshBlockNumber'\nimport useWarningImport from '../hooks/useWarningImport'\nimport { MMAndAMMDealDisplay, useMMDevMode } from '../MMLinkPools/components/MMAndAMMDealDisplay'\nimport MMCommitButton from '../MMLinkPools/components/MMCommitButton'\nimport { MMSlippageTolerance } from '../MMLinkPools/components/MMSlippageTolerance'\nimport {\n  useGetRFQId,\n  useGetRFQTrade,\n  useIsMMQuotingPair,\n  useIsTradeWithMMBetter,\n  useMMQuoteCountDown,\n  useMMTrade,\n  useMMTradeInfo,\n} from '../MMLinkPools/hooks'\nimport { parseMMError, shouldShowMMError } from '../MMLinkPools/utils/exchange'\nimport { SwapFeaturesContext } from '../SwapFeaturesContext'\nimport SmartSwapCommitButton from './components/SmartSwapCommitButton'\nimport { useDerivedSwapInfoWithStableSwap, useIsSmartRouterBetter, useTradeInfo } from './hooks'\nimport { MMError } from '../MMLinkPools/apis'\n\nexport const SmartSwapForm: React.FC<{ handleOutputSelect: (newCurrencyOutput: Currency) => void }> = ({\n  handleOutputSelect,\n}) => {\n  const isMMDev = useMMDevMode()\n  const { isAccessTokenSupported } = useContext(SwapFeaturesContext)\n  const { t } = useTranslation()\n  const { refreshBlockNumber, isLoading } = useRefreshBlockNumberID()\n  const warningSwapHandler = useWarningImport()\n  const tokenMap = useAtomValue(combinedTokenMapFromOfficialsUrlsAtom)\n\n  const { account, chainId } = useActiveWeb3React()\n\n  // for expert mode\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance()\n  const [allowUseSmartRouter, setAllowUseSmartRouter] = useState(() => false)\n\n  // swap state & price data\n\n  const {\n    independentField,\n    typedValue,\n    recipient,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n  } = useSwapState()\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.INPUT]: inputCurrency ?? undefined,\n      [Field.OUTPUT]: outputCurrency ?? undefined,\n    }),\n    [inputCurrency, outputCurrency],\n  )\n  const [isStableSwapByDefault] = useStableSwapByDefault()\n\n  const { v2Trade, inputError: swapInputError } = useDerivedSwapInfo(\n    independentField,\n    typedValue,\n    inputCurrency,\n    outputCurrency,\n    recipient,\n  )\n  const {\n    trade: tradeWithStableSwap,\n    currencyBalances,\n    parsedAmount,\n    inputError: stableSwapInputError,\n  } = useDerivedSwapInfoWithStableSwap(independentField, typedValue, inputCurrency, outputCurrency)\n\n  const isMMQuotingPair = useIsMMQuotingPair(inputCurrency, outputCurrency)\n  const deBounceTypedValue = useDebounce(typedValue, 300)\n  const mmOrderBookTrade = useMMTrade(independentField, deBounceTypedValue, inputCurrency, outputCurrency)\n  const isSmartRouterBetter = useIsSmartRouterBetter({ trade: tradeWithStableSwap, v2Trade })\n  let isMMBetter = useIsTradeWithMMBetter({\n    independentField,\n    trade: tradeWithStableSwap,\n    v2Trade,\n    tradeWithMM: mmOrderBookTrade?.trade,\n    isMMQuotingPair,\n    isExpertMode,\n  })\n\n  const {\n    refreshRFQ,\n    rfqId,\n    isLoading: isRFQIdLoading,\n  } = useGetRFQId(\n    (!mmOrderBookTrade.inputError || isMMDev) && mmOrderBookTrade?.mmParam,\n    isMMBetter,\n    mmOrderBookTrade?.rfqUserInputPath,\n    mmOrderBookTrade?.isRFQLive,\n  )\n\n  const mmRFQTrade = useGetRFQTrade(\n    rfqId,\n    independentField,\n    inputCurrency,\n    outputCurrency,\n    isMMBetter,\n    refreshRFQ,\n    mmOrderBookTrade?.isRFQLive,\n  )\n\n  if (mmRFQTrade.errorUpdateCount > 1 && isMMBetter && mmRFQTrade.error && !mmRFQTrade.trade) {\n    // if rfq failed count > 1, then we can try not using MM. the failed count will reset anyway\n    isMMBetter = false\n  }\n\n  const tradeInfo = useTradeInfo({\n    trade: tradeWithStableSwap,\n    v2Trade,\n    useSmartRouter: (allowUseSmartRouter || isStableSwapByDefault) && isSmartRouterBetter,\n    allowedSlippage,\n    chainId,\n    swapInputError,\n    stableSwapInputError,\n  })\n\n  const mmTradeInfo = useMMTradeInfo({\n    mmTrade: mmRFQTrade?.trade || mmOrderBookTrade?.trade,\n    useMMToTrade: isMMBetter,\n    allowedSlippage,\n    chainId,\n    mmSwapInputError: mmOrderBookTrade?.inputError,\n  })\n\n  const { remainingSec: mmQuoteExpiryRemainingSec } = useMMQuoteCountDown(\n    mmRFQTrade?.quoteExpiry,\n    isMMBetter ? mmRFQTrade?.refreshRFQ : undefined,\n  )\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue)\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n\n  const isMMLoading = isMMQuotingPair && (mmRFQTrade?.isLoading || isRFQIdLoading || mmOrderBookTrade?.isLoading)\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount,\n      }\n    : {\n        [Field.INPUT]:\n          independentField === Field.INPUT\n            ? parsedAmount\n            : isMMLoading\n            ? undefined\n            : isMMBetter\n            ? mmTradeInfo.inputAmount\n            : tradeInfo?.inputAmount,\n        [Field.OUTPUT]:\n          independentField === Field.OUTPUT\n            ? parsedAmount\n            : isMMLoading\n            ? undefined\n            : isMMBetter\n            ? mmTradeInfo.outputAmount\n            : tradeInfo?.outputAmount,\n      }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput],\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput],\n  )\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  const amountToApprove = isMMBetter\n    ? mmTradeInfo?.slippageAdjustedAmounts[Field.INPUT]\n    : tradeInfo?.slippageAdjustedAmounts[Field.INPUT]\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallback(\n    amountToApprove,\n    isMMBetter ? mmTradeInfo?.routerAddress : tradeInfo?.routerAddress,\n  )\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: CurrencyAmount<Currency> | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n\n  const handleInputSelect = useCallback(\n    (newCurrencyInput) => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, newCurrencyInput)\n\n      warningSwapHandler(newCurrencyInput)\n\n      const newCurrencyInputId = currencyId(newCurrencyInput)\n      if (newCurrencyInputId === outputCurrencyId) {\n        replaceBrowserHistory('outputCurrency', inputCurrencyId)\n      }\n      replaceBrowserHistory('inputCurrency', newCurrencyInputId)\n    },\n    [inputCurrencyId, outputCurrencyId, onCurrencySelection, warningSwapHandler],\n  )\n\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\n    }\n  }, [maxAmountInput, onUserInput])\n\n  const handlePercentInput = useCallback(\n    (percent) => {\n      if (maxAmountInput) {\n        onUserInput(Field.INPUT, maxAmountInput.multiply(new Percent(percent, 100)).toExact())\n      }\n    },\n    [maxAmountInput, onUserInput],\n  )\n\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies?.INPUT, currencies?.OUTPUT)\n\n  const hasAmount = Boolean(parsedAmount)\n\n  const onRefreshPrice = useCallback(() => {\n    if (hasAmount) {\n      refreshBlockNumber()\n    }\n  }, [hasAmount, refreshBlockNumber])\n\n  const smartRouterOn = !!tradeInfo && !tradeInfo.fallbackV2\n\n  // Switch from exact out to exact in if smart router trade is better and user already allowed to use smart swap\n  useEffect(() => {\n    if (smartRouterOn && independentField === Field.OUTPUT && v2Trade) {\n      onUserInput(Field.INPUT, v2Trade.inputAmount.toSignificant(6))\n    }\n  }, [smartRouterOn, independentField, onUserInput, v2Trade])\n\n  useEffect(() => {\n    // Reset approval submit state after switch between old router and new router\n    setApprovalSubmitted(false)\n  }, [smartRouterOn])\n\n  const onUseSmartRouterChecked = useCallback(() => setAllowUseSmartRouter(!allowUseSmartRouter), [allowUseSmartRouter])\n\n  const allowRecipient = isExpertMode && !showWrap && !smartRouterOn\n\n  const [onPresentSettingsModal] = useModal(<SettingsModal mode={SettingsMode.SWAP_LIQUIDITY} />)\n\n  return (\n    <>\n      <MMAndAMMDealDisplay\n        independentField={independentField}\n        isMMBetter={isMMBetter}\n        v2Trade={v2Trade}\n        mmTrade={mmTradeInfo?.trade || mmOrderBookTrade?.trade}\n        mmQuoteExpiryRemainingSec={mmQuoteExpiryRemainingSec}\n        errorMessage={\n          mmRFQTrade?.error instanceof MMError\n            ? mmRFQTrade?.error?.internalError\n            : mmRFQTrade?.error?.message || mmOrderBookTrade?.inputError\n        }\n        rfqId={mmRFQTrade?.rfqId}\n      />\n      <CurrencyInputHeader\n        title={t('Swap')}\n        subtitle={t('Trade tokens in an instant')}\n        hasAmount={hasAmount}\n        onRefreshPrice={onRefreshPrice}\n      />\n      <Wrapper id=\"swap-page\" style={{ minHeight: '412px' }}>\n        <AutoColumn gap=\"sm\">\n          <CurrencyInputPanel\n            label={independentField === Field.OUTPUT && !showWrap && tradeInfo ? t('From (estimated)') : t('From')}\n            value={formattedAmounts[Field.INPUT]}\n            showMaxButton\n            maxAmount={maxAmountInput}\n            showQuickInputButton\n            currency={currencies[Field.INPUT]}\n            onUserInput={handleTypeInput}\n            onPercentInput={handlePercentInput}\n            onMax={handleMaxInput}\n            onCurrencySelect={handleInputSelect}\n            otherCurrency={currencies[Field.OUTPUT]}\n            id=\"swap-currency-input\"\n            showCommonBases\n            showUSDPrice={!!tokenMap[chainId]?.[inputCurrencyId] || inputCurrencyId === NATIVE[chainId]?.symbol}\n            commonBasesType={CommonBasesType.SWAP_LIMITORDER}\n          />\n          {isAccessTokenSupported && inputCurrency?.isToken && (\n            <Box>\n              <AccessRisk token={inputCurrency} />\n            </Box>\n          )}\n\n          <AutoColumn justify=\"space-between\">\n            <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n              <SwapUI.SwitchButton\n                onClick={() => {\n                  setApprovalSubmitted(false) // reset 2 step UI for approvals\n                  onSwitchTokens()\n                  replaceBrowserHistory('inputCurrency', outputCurrencyId)\n                  replaceBrowserHistory('outputCurrency', inputCurrencyId)\n                }}\n              />\n              {allowRecipient && recipient === null ? (\n                <Button variant=\"text\" id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                  {t('+ Add a send (optional)')}\n                </Button>\n              ) : null}\n            </AutoRow>\n          </AutoColumn>\n          <CurrencyInputPanel\n            value={formattedAmounts[Field.OUTPUT]}\n            onUserInput={handleTypeOutput}\n            label={independentField === Field.INPUT && !showWrap && tradeInfo ? t('To (estimated)') : t('To')}\n            showMaxButton={false}\n            currency={currencies[Field.OUTPUT]}\n            onCurrencySelect={handleOutputSelect}\n            otherCurrency={currencies[Field.INPUT]}\n            id=\"swap-currency-output\"\n            showCommonBases\n            disabled={smartRouterOn}\n            showUSDPrice={!!tokenMap[chainId]?.[outputCurrencyId] || outputCurrencyId === NATIVE[chainId]?.symbol}\n            commonBasesType={CommonBasesType.SWAP_LIMITORDER}\n          />\n\n          {isAccessTokenSupported && outputCurrency?.isToken && (\n            <Box>\n              <AccessRisk token={outputCurrency} />\n            </Box>\n          )}\n\n          {isSmartRouterBetter && !isStableSwapByDefault && (\n            <AutoColumn>\n              {allowUseSmartRouter && (\n                <Message variant=\"warning\" mb=\"8px\">\n                  <MessageText>{t('This route includes StableSwap and can’t edit output')}</MessageText>\n                </Message>\n              )}\n              <Flex alignItems=\"center\" onClick={onUseSmartRouterChecked}>\n                <Checkbox\n                  scale=\"sm\"\n                  name=\"allowUseSmartRouter\"\n                  type=\"checkbox\"\n                  checked={allowUseSmartRouter}\n                  onChange={onUseSmartRouterChecked}\n                />\n                <Text ml=\"8px\" style={{ userSelect: 'none' }}>\n                  {t('Use StableSwap for better fees')}\n                </Text>\n              </Flex>\n            </AutoColumn>\n          )}\n\n          {allowRecipient && recipient !== null ? (\n            <>\n              <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                <ArrowWrapper clickable={false}>\n                  <ArrowDownIcon width=\"16px\" />\n                </ArrowWrapper>\n                <Button variant=\"text\" id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                  {t('- Remove send')}\n                </Button>\n              </AutoRow>\n              <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n            </>\n          ) : null}\n\n          {showWrap ? null : (\n            <SwapUI.Info\n              price={\n                (Boolean(tradeInfo) || Boolean(mmTradeInfo)) && (\n                  <>\n                    <SwapUI.InfoLabel>{t('Price')}</SwapUI.InfoLabel>\n                    {isLoading ? (\n                      <Skeleton width=\"100%\" ml=\"8px\" height=\"24px\" />\n                    ) : (\n                      <SwapUI.TradePrice price={isMMBetter ? mmTradeInfo?.executionPrice : tradeInfo?.executionPrice} />\n                    )}\n                  </>\n                )\n              }\n              allowedSlippage={allowedSlippage}\n              onSlippageClick={onPresentSettingsModal}\n              allowedSlippageSlot={\n                isMMBetter || (!v2Trade && isMMQuotingPair && !isExpertMode) ? <MMSlippageTolerance /> : undefined\n              }\n            />\n          )}\n        </AutoColumn>\n\n        <Box mt=\"0.25rem\">\n          {isMMLoading ? (\n            <Button width=\"100%\" disabled style={{ textAlign: 'left' }}>\n              {t('Swap')}\n            </Button>\n          ) : !tradeWithStableSwap &&\n            !v2Trade &&\n            mmOrderBookTrade?.inputError &&\n            shouldShowMMError(mmOrderBookTrade?.inputError) ? (\n            <Button width=\"100%\" disabled style={{ textAlign: 'left' }}>\n              {parseMMError(mmOrderBookTrade?.inputError)}\n            </Button>\n          ) : isMMBetter ? (\n            <MMCommitButton\n              swapIsUnsupported={swapIsUnsupported}\n              account={account}\n              showWrap={showWrap}\n              wrapInputError={wrapInputError}\n              onWrap={onWrap}\n              wrapType={wrapType}\n              approval={approval}\n              approveCallback={approveCallback}\n              approvalSubmitted={approvalSubmitted}\n              currencies={currencies}\n              isExpertMode={isExpertMode}\n              trade={mmRFQTrade?.trade}\n              swapInputError={\n                mmOrderBookTrade?.inputError ||\n                (isMMBetter && mmRFQTrade?.error?.message && parseMMError(mmRFQTrade?.error?.message))\n              }\n              currencyBalances={mmOrderBookTrade.currencyBalances}\n              recipient={recipient}\n              allowedSlippage={allowedSlippage}\n              onUserInput={onUserInput}\n              rfq={mmRFQTrade?.rfq}\n              refreshRFQ={mmRFQTrade?.refreshRFQ}\n              mmQuoteExpiryRemainingSec={mmQuoteExpiryRemainingSec}\n            />\n          ) : tradeInfo?.fallbackV2 ? (\n            <SwapCommitButton\n              swapIsUnsupported={swapIsUnsupported}\n              account={account}\n              showWrap={showWrap}\n              wrapInputError={wrapInputError}\n              onWrap={onWrap}\n              wrapType={wrapType}\n              parsedIndepentFieldAmount={parsedAmounts[independentField]}\n              approval={approval}\n              approveCallback={approveCallback}\n              approvalSubmitted={approvalSubmitted}\n              currencies={currencies}\n              isExpertMode={isExpertMode}\n              trade={v2Trade}\n              swapInputError={tradeInfo.inputError}\n              currencyBalances={currencyBalances}\n              recipient={recipient}\n              allowedSlippage={allowedSlippage}\n              onUserInput={onUserInput}\n            />\n          ) : (\n            <SmartSwapCommitButton\n              swapIsUnsupported={swapIsUnsupported}\n              account={account}\n              showWrap={showWrap}\n              wrapInputError={wrapInputError}\n              onWrap={onWrap}\n              wrapType={wrapType}\n              parsedIndepentFieldAmount={parsedAmounts[independentField]}\n              approval={approval}\n              approveCallback={approveCallback}\n              approvalSubmitted={approvalSubmitted}\n              currencies={currencies}\n              isExpertMode={isExpertMode}\n              trade={tradeWithStableSwap}\n              swapInputError={!isMMLoading && swapInputError}\n              currencyBalances={currencyBalances}\n              recipient={recipient}\n              allowedSlippage={allowedSlippage}\n              onUserInput={onUserInput}\n            />\n          )}\n        </Box>\n      </Wrapper>\n      {!swapIsUnsupported ? (\n        !showWrap && tradeInfo && !isMMBetter ? (\n          <AdvancedSwapDetailsDropdown\n            hasStablePair={smartRouterOn}\n            pairs={tradeInfo.route.pairs}\n            path={tradeInfo.route.path}\n            priceImpactWithoutFee={tradeInfo.priceImpactWithoutFee}\n            isMM={isMMLoading}\n            realizedLPFee={tradeInfo.realizedLPFee}\n            slippageAdjustedAmounts={tradeInfo.slippageAdjustedAmounts}\n            inputAmount={tradeInfo.inputAmount}\n            outputAmount={tradeInfo.outputAmount}\n            tradeType={tradeInfo.tradeType}\n          />\n        ) : (\n          mmTradeInfo && (\n            <AdvancedSwapDetailsDropdown\n              isMM\n              hasStablePair={false}\n              pairs={mmTradeInfo.route.pairs}\n              path={mmTradeInfo.route.path}\n              priceImpactWithoutFee={mmTradeInfo.priceImpactWithoutFee}\n              realizedLPFee={mmTradeInfo.realizedLPFee}\n              slippageAdjustedAmounts={mmTradeInfo.slippageAdjustedAmounts}\n              inputAmount={mmTradeInfo.inputAmount}\n              outputAmount={mmTradeInfo.outputAmount}\n              tradeType={mmTradeInfo.tradeType}\n            />\n          )\n        )\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.INPUT, currencies.OUTPUT]} />\n      )}\n    </>\n  )\n}\n","import { Box, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledSwapContainer = styled(Flex)<{ $isChartExpanded: boolean }>`\n  flex-shrink: 0;\n  height: fit-content;\n  padding: 0 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0 40px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    ${({ $isChartExpanded }) => ($isChartExpanded ? 'padding: 0 120px' : 'padding: 0 40px')};\n  }\n`\n\nexport const StyledInputCurrencyWrapper = styled(Box)`\n  width: 328px;\n`\n","import { useTranslation } from '@pancakeswap/localization'\nimport { Currency } from '@pancakeswap/sdk'\nimport { BottomDrawer, Flex, Modal, ModalV2, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport replaceBrowserHistory from '@pancakeswap/utils/replaceBrowserHistory'\nimport { AppBody } from 'components/App'\nimport { useCallback, useContext } from 'react'\nimport { useSwapActionHandlers } from 'state/swap/useSwapActionHandlers'\nimport { currencyId } from 'utils/currencyId'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { useSwapHotTokenDisplay } from 'hooks/useSwapHotTokenDisplay'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { Field } from '../../state/swap/actions'\nimport { useSingleTokenSwapInfo, useSwapState } from '../../state/swap/hooks'\nimport Page from '../Page'\nimport PriceChartContainer from './components/Chart/PriceChartContainer'\nimport HotTokenList from './components/HotTokenList'\nimport useWarningImport from './hooks/useWarningImport'\nimport { SmartSwapForm } from './SmartSwap'\nimport { StyledInputCurrencyWrapper, StyledSwapContainer } from './styles'\nimport { SwapFeaturesContext } from './SwapFeaturesContext'\n\nconst queryClient = new QueryClient()\n\nexport default function Swap() {\n  const { isDesktop } = useMatchBreakpoints()\n  const { isChartExpanded, isChartDisplayed, setIsChartDisplayed, setIsChartExpanded, isChartSupported } =\n    useContext(SwapFeaturesContext)\n  const [isSwapHotTokenDisplay, setIsSwapHotTokenDisplay] = useSwapHotTokenDisplay()\n  const { t } = useTranslation()\n\n  // swap state & price data\n  const {\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n  } = useSwapState()\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  const singleTokenPrice = useSingleTokenSwapInfo(inputCurrencyId, inputCurrency, outputCurrencyId, outputCurrency)\n  const warningSwapHandler = useWarningImport()\n  const { onCurrencySelection } = useSwapActionHandlers()\n\n  const handleOutputSelect = useCallback(\n    (newCurrencyOutput: Currency) => {\n      onCurrencySelection(Field.OUTPUT, newCurrencyOutput)\n      warningSwapHandler(newCurrencyOutput)\n\n      const newCurrencyOutputId = currencyId(newCurrencyOutput)\n      if (newCurrencyOutputId === inputCurrencyId) {\n        replaceBrowserHistory('inputCurrency', outputCurrencyId)\n      }\n      replaceBrowserHistory('outputCurrency', newCurrencyOutputId)\n    },\n\n    [inputCurrencyId, outputCurrencyId, onCurrencySelection, warningSwapHandler],\n  )\n\n  return (\n    <Page removePadding={isChartExpanded} hideFooterOnDesktop={isChartExpanded}>\n      <Flex width={['328px', '100%']} height=\"100%\" justifyContent=\"center\" position=\"relative\" alignItems=\"flex-start\">\n        {isDesktop && isChartSupported && (\n          <PriceChartContainer\n            inputCurrencyId={inputCurrencyId}\n            inputCurrency={currencies[Field.INPUT]}\n            outputCurrencyId={outputCurrencyId}\n            outputCurrency={currencies[Field.OUTPUT]}\n            isChartExpanded={isChartExpanded}\n            setIsChartExpanded={setIsChartExpanded}\n            isChartDisplayed={isChartDisplayed}\n            currentSwapPrice={singleTokenPrice}\n          />\n        )}\n        {!isDesktop && isChartSupported && (\n          <BottomDrawer\n            content={\n              <PriceChartContainer\n                inputCurrencyId={inputCurrencyId}\n                inputCurrency={currencies[Field.INPUT]}\n                outputCurrencyId={outputCurrencyId}\n                outputCurrency={currencies[Field.OUTPUT]}\n                isChartExpanded={isChartExpanded}\n                setIsChartExpanded={setIsChartExpanded}\n                isChartDisplayed={isChartDisplayed}\n                currentSwapPrice={singleTokenPrice}\n                isFullWidthContainer\n                isMobile\n              />\n            }\n            isOpen={isChartDisplayed}\n            setIsOpen={setIsChartDisplayed}\n          />\n        )}\n        {/* {isDesktop && isSwapHotTokenDisplay && <HotTokenList handleOutputSelect={handleOutputSelect} />} */}\n        {/* <ModalV2 isOpen={!isDesktop && isSwapHotTokenDisplay} onDismiss={() => setIsSwapHotTokenDisplay(false)}>\n          <Modal\n            style={{ padding: 0 }}\n            title={t('Top Token')}\n            onDismiss={() => setIsSwapHotTokenDisplay(false)}\n            bodyPadding=\"0px\"\n          >\n            <HotTokenList\n              handleOutputSelect={(newCurrencyOutput: Currency) => {\n                handleOutputSelect(newCurrencyOutput)\n                setIsSwapHotTokenDisplay(false)\n              }}\n            />\n          </Modal>\n        </ModalV2> */}\n        <Flex flexDirection=\"column\">\n          <StyledSwapContainer $isChartExpanded={isChartExpanded}>\n            <StyledInputCurrencyWrapper mt={isChartExpanded ? '24px' : '0'}>\n              <AppBody>\n                <QueryClientProvider client={queryClient}>\n                  <SmartSwapForm handleOutputSelect={handleOutputSelect} />\n                </QueryClientProvider>\n              </AppBody>\n            </StyledInputCurrencyWrapper>\n          </StyledSwapContainer>\n        </Flex>\n      </Flex>\n    </Page>\n  )\n}\n","import { CHAIN_IDS } from 'utils/wagmi'\nimport Swap from '../views/Swap'\nimport { SwapFeaturesProvider } from '../views/Swap/SwapFeaturesContext'\n\nconst SwapPage = () => {\n  return (\n    <SwapFeaturesProvider>\n      <Swap />\n    </SwapFeaturesProvider>\n  )\n}\n\nSwapPage.chains = CHAIN_IDS\n\nexport default SwapPage\n","import { ErrorIcon, Flex, Text, AutoColumn } from '@pancakeswap/uikit'\nimport styled, { css } from 'styled-components'\n\nexport const Wrapper = styled(Flex)`\n  position: relative;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n`\n\nexport const ArrowWrapper = styled.div<{ clickable: boolean }>`\n  padding: 2px;\n\n  ${({ clickable }) =>\n    clickable\n      ? css`\n          :hover {\n            cursor: pointer;\n            opacity: 0.8;\n          }\n        `\n      : null}\n`\n\nexport const ErrorText = styled(Text)<{ severity?: 0 | 1 | 2 | 3 | 4 }>`\n  color: ${({ theme, severity }) =>\n    severity === 3 || severity === 4\n      ? theme.colors.failure\n      : severity === 2\n      ? theme.colors.warning\n      : severity === 1\n      ? theme.colors.text\n      : theme.colors.success};\n`\n\nexport const StyledBalanceMaxMini = styled.button`\n  height: 22px;\n  width: 22px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: none;\n  border-radius: 50%;\n  padding: 0.2rem;\n  font-size: 0.875rem;\n  font-weight: 400;\n  margin-left: 0.4rem;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  float: right;\n\n  :hover {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n  }\n  :focus {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n    outline: none;\n  }\n`\n\nexport const TruncatedText = styled(Text).attrs({ ellipsis: true })`\n  width: 220px;\n`\n\nconst SwapCallbackErrorInner = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure33}`};\n  border-radius: 1rem;\n  display: flex;\n  align-items: center;\n  font-size: 0.825rem;\n  width: 100%;\n  padding: 3rem 1.25rem 1rem 1rem;\n  margin-top: -2rem;\n  color: ${({ theme }) => theme.colors.failure};\n  z-index: -1;\n  p {\n    padding: 0;\n    margin: 0;\n    font-weight: 500;\n  }\n`\n\nconst SwapCallbackErrorInnerAlertTriangle = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure33}`};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 12px;\n  border-radius: 12px;\n  min-width: 48px;\n  height: 48px;\n`\n\nexport function SwapCallbackError({ error }: { error: string }) {\n  return (\n    <SwapCallbackErrorInner>\n      <SwapCallbackErrorInnerAlertTriangle>\n        <ErrorIcon width=\"24px\" />\n      </SwapCallbackErrorInnerAlertTriangle>\n      <p>{error}</p>\n    </SwapCallbackErrorInner>\n  )\n}\n\nexport const SwapShowAcceptChanges = styled(AutoColumn)`\n  background-color: ${({ theme }) => `${theme.colors.warning33}`};\n  padding: 0.5rem;\n  border-radius: 12px;\n  margin-top: 8px;\n`\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M15.5 13.9996H14.71L14.43 13.7296C15.63 12.3296 16.25 10.4196 15.91 8.38965C15.44 5.60965 13.12 3.38965 10.32 3.04965C6.09001 2.52965 2.53002 6.08965 3.05002 10.3196C3.39002 13.1196 5.61002 15.4396 8.39002 15.9096C10.42 16.2496 12.33 15.6296 13.73 14.4296L14 14.7096V15.4996L18.25 19.7496C18.66 20.1596 19.33 20.1596 19.74 19.7496C20.15 19.3396 20.15 18.6696 19.74 18.2596L15.5 13.9996ZM9.50002 13.9996C7.01002 13.9996 5.00002 11.9896 5.00002 9.49965C5.00002 7.00965 7.01002 4.99965 9.50002 4.99965C11.99 4.99965 14 7.00965 14 9.49965C14 11.9896 11.99 13.9996 9.50002 13.9996Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from \"styled-components\";\nimport { Box } from \"../../components\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport function ConfirmationModalContent({\n  bottomContent,\n  topContent,\n}: {\n  topContent: () => React.ReactNode;\n  bottomContent: () => React.ReactNode;\n}) {\n  return (\n    <Wrapper>\n      <Box>{topContent()}</Box>\n      <Box>{bottomContent()}</Box>\n    </Wrapper>\n  );\n}\n","import { Percent } from \"@pancakeswap/swap-sdk-core\";\nimport { ContextApi } from \"@pancakeswap/localization\";\n\n/**\n * Given the price impact, get user confirmation.\n *\n * @param priceImpactWithoutFee price impact of the trade without the fee.\n * @param t Translation\n */\nexport function confirmPriceImpactWithoutFee(\n  priceImpactWithoutFee: Percent,\n  priceImpactWithoutFeeConfirmMin: Percent,\n  allowedPriceImpactHigh: Percent,\n  t: ContextApi[\"t\"]\n): boolean {\n  if (!priceImpactWithoutFee.lessThan(priceImpactWithoutFeeConfirmMin)) {\n    const confirmWord = \"confirm\";\n    return (\n      // eslint-disable-next-line no-alert\n      window.prompt(\n        t(\n          'This swap has a price impact of at least %amount%%. Please type the word \"%word%\" to continue with this swap.',\n          {\n            amount: priceImpactWithoutFeeConfirmMin.toFixed(0),\n            word: confirmWord,\n          }\n        )\n      ) === confirmWord\n    );\n  }\n  if (!priceImpactWithoutFee.lessThan(allowedPriceImpactHigh)) {\n    // eslint-disable-next-line no-alert\n    return window.confirm(\n      t(\n        \"This swap has a price impact of at least %amount%%. Please confirm that you would like to continue with this swap.\",\n        {\n          amount: allowedPriceImpactHigh.toFixed(0),\n        }\n      )\n    );\n  }\n  return true;\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","wrongNetworkProps","variant","disabled","children","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Trans","CommitButton","props","isWrongNetwork","useActiveChainId","switchNetworkLoading","useSwitchNetworkLoading","setHideWrongNetwork","useSetAtom","hideWrongNetworkModalAtom","Button","onClick","e","DetailsFooter","styled","param","theme","colors","text","invertedContrast","UnsupportedModal","currencies","onDismiss","chainId","t","useTranslation","tokens","map","currency","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Modal","title","jsxs","AutoColumn","gap","token","Object","keys","includes","address","AutoRow","align","CurrencyLogo","size","Text","symbol","Link","external","small","color","href","getBlockExploreLink","concat","UnsupportedCurrencyFooter","onPresentModal","useModal","WrapType","SwapCallbackState","MessageType","_obj","constants_obj","_obj1","useSwapCallback_SwapCallbackState","isSwapHotTokenDisplay","atomWithStorageWithErrorCatch","isSwapHotTokenDisplayETH","useSwapHotTokenDisplay","isMobile","useMatchBreakpoints","useAtom","ChainId","bscWarningTokens","pokemoney","ERC20Token","free","safemoon","gala","bondly","bscTokens","itam","ccar","bttold","abnbc","swapWarningTokens","values","SwapWarningTokens","SwapWarningModal_SafemoonWarning","jsx_runtime","Fragment","style","display","SwapWarningModal_ItamWarning","SwapWarningModal_BondlyWarning","SwapWarningModal_Acknowledgement","handleContinueClick","useState","isConfirmed","setIsConfirmed","Flex","justifyContent","label","htmlFor","alignItems","Checkbox","id","name","type","checked","onChange","scale","ml","userSelect","SwapWarningModal_CcarWarning","SwapWarningModal_BTTWarning","mb","LinkExternal","SwapWarningModal_RugPullWarning","SwapWarningModal_FREEWarning","SwapWarningModal_GalaWarning","SwapWarningModal_ABNBWarning","StyledModalContainer","ModalContainer","MessageContainer","Message","components_SwapWarningModal","swapCurrency","useTheme","SWAP_WARNING","TOKEN_WARNINGS","_define_property","Z","SwapWarningTokensConfig","component","SafemoonWarning","BondlyWarning","ItamWarning","CcarWarning","BTTWarning","RugPullWarning","FREEWarning","GalaWarning","ABNBWarning","$minWidth","ModalHeader","background","gradientCardHeader","Heading","p","ModalBody","Box","Acknowledgement","useWarningImport","_filter","router","useRouter","loadedUrlParams","useDefaultsFromURLSearch","useActiveWeb3React","swapWarningCurrency","setSwapWarningCurrency","_ref","useCurrency","inputCurrencyId","outputCurrencyId","loadedInputCurrency","loadedOutputCurrency","urlLoadedTokens","useMemo","filter","c","isToken","defaultTokens","useAllTokens","data","useSWRImmutable","importTokensNotInDefault","loadedTokenList","checksummedAddress","isAddress","onPresentSwapWarningModal","SwapWarningModal","onPresentImportTokenWarningModal","ImportTokenWarningModal","onCancel","useEffect","swapWarningHandler","useCallback","currencyInput","some","warningToken","equals","length","NOT_APPLICABLE","WRAP","UNWRAP","wrapType","InputPanel","backgroundAlt","ContainerRow","error","failure","InputContainer","Input","primary","textDisabled","AddressInputPanel","value","undefined","handleInput","event","input","target","replace","Boolean","RowBetween","site","getBlockExploreName","BscScanIcon","className","autoComplete","autoCorrect","autoCapitalize","spellCheck","placeholder","pattern","isDefined","x","hooks_useLast","last","setLast","filterFn","prev","FormattedPriceImpact","priceImpact","ErrorText","fontSize","severity","warningSeverity","lessThan","ONE_BIPS","toFixed","RouterBox","backgroundDisabled","mediaQueries","md","RouterPoolBox","secondary","RouterTypeText","CurrencyLogoWrapper","RouterViewer","pairs","path","inputCurrency","outputCurrency","isMM","_param_isMM","useTooltip","placement","targetRef","tooltip","tooltipVisible","ref","index","isStableSwap","isStableSwapPair","stableSwapAddress","liquidityToken","outputTargetRef","outputTooltipVisible","outputTooltip","SwapRoute","memo","flexWrap","width","i","isLastItem","unwrappedToken","mr","ChevronRightIcon","TradeSummary","slippageAdjustedAmounts","_ref1","inputAmount","outputAmount","tradeType","priceImpactWithoutFee","realizedLPFee","hasStablePair","_param_hasStablePair","isExactIn","TradeType","totalFeePercent","TOTAL_FEE","lpHoldersFeePercent","LP_HOLDERS_FEE","treasuryFeePercent","TREASURY_FEE","buyBackFeePercent","BUYBACK_FEE","padding","RowFixed","QuestionHelper","Field","toSignificant","bold","mt","amount","AdvancedSwapDetails","isModalOpen","setIsModalOpen","showRoute","span","SearchIcon","cursor","ModalV2","closeOnOverlayClick","isOpen","AdvancedDetailsFooter","show","AdvancedSwapDetailsDropdown","_param","rest","lastTrade","useLastTruthy","DisabledIcon","Svg","viewBox","stroke","fill","d","defs","clipPath","use","xlinkHref","RefreshIcon","duration","g","circle","cx","cy","r","transform","strokeWidth","strokeDasharray","strokeDashoffset","animate","attributeName","begin","repeatCount","dur","animateTransform","attributeType","from","to","SwapFeaturesContext","createContext","isChartSupported","isStableSupported","isAccessTokenSupported","isChartExpanded","isChartDisplayed","setIsChartExpanded","setIsChartDisplayed","CHART_SUPPORT_CHAIN_IDS","ACCESS_TOKEN_SUPPORT_CHAIN_IDS","STABLE_SUPPORT_CHAIN_IDS","SwapFeaturesProvider","useExchangeChartManager","userChartPreference","setUserChartPreference","Provider","shineAnimation","keyframes","IconButton","textSubtle","isDark","mobileShowOnceTokenHighlightAtom","components_CurrencyInputHeader","subtitle","hasAmount","onRefreshPrice","mobileTooltipShowOnce","setMobileTooltipShowOnce","mobileTooltipShow","setMobileTooltipShow","mobileCampaignTooltipShow","setMobileCampaignTooltipShow","_object_spread","trigger","manualVisible","avoidToStopPropagation","useContext","expertMode","useExpertModeManager","onPresentTransactionsModal","TransactionsModal","handleOnClick","mobileTooltipClickOutside","setTimeout","document","body","addEventListener","removeEventListener","titleContent","flexDirection","marginBottom","Swap","height","NotificationDot","GlobalSettings","mode","SettingsMode","HistoryIcon","SwapModalFooterContainer","radii","default","cardBorder","SwapModalFooter","trade","isEnoughInputBalance","onConfirm","swapErrorMessage","disabledConfirm","showInverted","setShowInverted","computeTradePriceBreakdown","textAlign","paddingLeft","formatExecutionPrice","StyledBalanceMaxMini","AutoRenewIcon","marginLeft","SwapCallbackError","SwapModalHeader","recipient","showAcceptChanges","onAcceptChanges","allowedSlippage","priceImpactSeverity","inputTextColor","tradeInfoText","truncatedRecipient","truncateHash","recipientInfoText","split","recipientSentToText","postSentToText","marginRight","TruncatedText","ArrowDownIcon","SwapShowAcceptChanges","justify","ErrorIcon","textTransform","basisPointsToPercent","maxWidth","b","StableSwapModalFooter","SMART_ROUTER_ADDRESS","ONE_HUNDRED_PERCENT","route","reduce","currentFee","pair","multiply","fee","INPUT_FRACTION_AFTER_FEE","priceImpactWithoutFeeFraction","Trade","subtract","Percent","numerator","denominator","CurrencyAmount","quotient","computeSlippageAdjustedAmounts","pct","components_TransactionConfirmSwapContent","originalTrade","currencyBalances","isStable","tradeA","tradeB","equalTo","isInputBalanceExist","isInputBalanceBNB","isNative","inputCurrencyAmount","maxAmountSpend","greaterThan","modalHeader","modalBottom","SwapModalF","ConfirmationModalContent","topContent","bottomContent","components_ConfirmSwapModalContainer","handleDismiss","headerBackground","SwapTransactionErrorContent","message","openSettingModal","isSlippagedErrorMsg","PancakeRouterSlippageErrorMsg","handleErrorDismiss","TransactionErrorContent","u","components_ConfirmSwapModal","customOnDismiss","attemptingTxn","txHash","confirmationContent","TransactionConfirmSwapContent","pendingText","amountA","symbolA","amountB","symbolB","ConfirmSwapModalContainer","ConfirmationPendingContent","TransactionSubmittedContent","hash","currencyToAdd","Grouping","Circle","confirmed","success","CircleRow","Connector","prevConfirmed","ProgressCircles","steps","_param_disabled","step","SettingsModalWithCustomDismiss","withCustomOnDismiss","SettingsModal","SwapCommitButton","swapIsUnsupported","account","showWrap","wrapInputError","onWrap","approval","approveCallback","approvalSubmitted","isExpertMode","swapInputError","parsedIndepentFieldAmount","onUserInput","singleHopOnly","useUserSingleHopOnly","swapCalls","useSwapCallArguments","useSwapCallback","callback","tradeToConfirm","_useState_","setSwapState","handleSwap","confirmPriceImpactWithoutFee","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","ALLOWED_PRICE_IMPACT_HIGH","swapCallback","then","catch","handleAcceptChanges","handleConfirmDismiss","indirectlyOpenConfirmModalState","setIndirectlyOpenConfirmModalState","onPresentSettingsModal","onPresentConfirmModal","ConfirmSwapModal","onSwapHandler","state","_object_spread_props","ConnectWalletButton","noRoute","userHasSpecifiedInputOutput","BIG_INT_ZERO","GreyCard","showApproveFlow","ApprovalState","isValid","CircleLoader","asset","Column","marginTop","ProgressSteps","swapCallbackError","hooks_useRefreshBlockNumber","isLoading","setFetch","refreshBlockNumber","mutate","useSWRConfig","useMMDevMode","query","MMAndAMMDealDisplay","mmTrade","v2Trade","isMMBetter","independentField","mmQuoteExpiryRemainingSec","errorMessage","_param_rfqId","rfqId","dealInANdOut","pl","pt","_param_isMMBetter","_param_errorMessage","NATIVE_CURRENCY_ADDRESS","getAddress","MM_SUPPORT_CHIAN","MM_SWAP_CONTRACT_ADDRESS","contract","MM_STABLE_TOKENS_WHITE_LIST","MM_SIGNER","stableList","isStablePair","priceImpactWithoutFeePercent","ZERO_PERCENT","feeRate","Fraction","stableFeeRate","executionPrice","Price","tryParseUnit","typedValue","decimals","parseAmountString","parseUnits","toString","toNumber","parseMMTrade","takerSideTokenAmount","makerSideTokenAmount","JSBI","output","parseMMError","Math","ceil","INVALID","LOADING","VALID","_param_isRFQReady","isRFQReady","inverted","invert","Dots","MMSlippageTolerance","tooltipOffset","InfoIcon","estimatedText","transactionRevertText","MMLinkPools_components_TransactionConfirmSwapContent","isRFQLoading","computeTradePriceBreakdownWithSmartRouter","MMLinkPools_components_ConfirmSwapModal","TransactionConfirmSwapContentWithSmartRouter","MMSwapCommitButton","deadline","mmSigner","gasPrice","addTransaction","rfq","_param_isRFQLoading","_param_mmQuoteExpiryRemainingSec","recipientAddress","useTransactionDeadline","useContract","PancakeSwapMMLinkedPoolABI","etherIn","etherOut","args","swapMethods","invariant","trader","nonce","user","baseToken","takerSideToken","quoteToken","makerSideToken","baseTokenAmount","quoteTokenAmount","expiryTimestamp","quoteExpiry","signature","methodName","parameters","useGasPrice","useTransactionAdder","onSwap","_async_to_generator","estimatedCalls","successfulEstimation","errorCalls","gasEstimate","Promise","all","call","_call_parameters","options","isZero","estimateGas","gasError","console","callStatic","result","callError","transactionErrorToUserReadableMessage","_state","sent","find","el","ix","list","gasLimit","calculateGasMargin","response","inputSymbol","outputSymbol","base","recipientAddressText","summary","translatableSummary","logSwap","logTx","code","approved","RFQ_REQUEST","RFQ_RESPONSE","ORDER_BOOK_PRICE_RESPONSE","RFQ_SUCCESS","RFQ_ERROR","zRFQResponse","z","messageType","mmId","optional","API_ENDPOINT","process","getMMOrderBook","fetch","method","headers","JSON","stringify","json","reject","sendRFQAndGetRFQId","getRFQById","Accept","RFQErrorNotFound","status","RFQInsufficientError","originMessage","MMError","Error1","_this","internalError","Error","shouldRetry","useGetRFQId","rfqUserInputPath","isRFQLive","current","networkId","enabled","useQuery","refetchInterval","retry","refetchOnWindowFocus","refetch","refreshRFQ","rfqUserInputCache","useGetRFQTrade","deferredRfqId","useDeferredValue","deferredIsMMBetter","useDebounce","staleTime","Infinity","failureCount","err","errorUpdateCount","useIsMMSupportChain","QUOTING_WHITE_LIST","PANCAKE_ETH_DEFAULT","useTokenList","url","listsByUrl","useAtomValue","selectorByUrlsAtom","forEach","toLowerCase","useIsMMQuotingPair","isMMSupportChain","useAccount","connector","isConnected","ConnectorNames","ethereum","isBlocto","IS_SUPPORT_NATIVE_TOKEN","wrapped","useMMParam","isForRFQ","isMMQuotingPair","BAD_RECIPIENT_ADDRESSES","useOrderBookQuote","request","inputPath","useRef","useMMTrade","mmQoute","inputError","_obj2","mmParam","mmRFQParam","relevantTokenBalances","useCurrencyBalances","independentCurrency","parsedAmount","tryParseAmount","bestTradeWithMM","formattedTo","indexOf","_pair_liquidityToken","balanceIn","amountIn","useIsTradeWithMMBetter","tradeWithMM","_param_isMMQuotingPair","_param_isExpertMode","isMMLinkedPoolByDefault","useMMLinkedPoolByDefault","ZERO","useMMQuoteCountDown","reFetched","countDownDate","Date","now","countDown","setCountDown","interval","setInterval","getTime","clearInterval","remainingSec","floor","toHex","currencyAmount","SmartSwap_components_TransactionConfirmSwapContent","computeSlippageAdjustedAmountsWithSmartRouter","SmartSwap_components_ConfirmSwapModal","INITIAL_ALLOWED_SLIPPAGE","PancakeSwapSmartRouterABI","amountOut","flag","feeOnTransfer","BIPS_BASE","ttl","SmartTrade","useIsSmartRouterBetter","routeType","RouteType","SmartSwapForm","singleHop","bestTradeWithStableSwap","useSmartRouter","_param_allowedSlippage","stableSwapInputError","useMMToTrade","mmSwapInputError","callWithGasPrice","wbnbContract","balance","parsedAmounts","mmRFQTrade","tokenMap","NATIVE","handleOutputSelect","isMMDev","useRefreshBlockNumberID","warningSwapHandler","combinedTokenMapFromOfficialsUrlsAtom","useUserSlippageTolerance","allowUseSmartRouter","setAllowUseSmartRouter","useSwapState","currencyId","isStableSwapByDefault","useStableSwapByDefault","useDerivedSwapInfo","useDerivedSwapInfoWithStableSwap","useWeb3React","useBestTrade","maxHops","mmOrderBookTrade","isSmartRouterBetter","tradeWithStableSwap","tradeInfo","_param_useSmartRouter","fallbackV2","computeTradePriceBreakdownForV2Trade","computeSlippageAdjustedAmountsForV2Trade","routerAddress","ROUTER_ADDRESS","SmartRouterTrade","mmTradeInfo","_param_useMMToTrade","useWrapCallback","useCallWithGasPrice","useWNativeContract","useCurrencyBalance","WNATIVE","sufficientBalance","execute","txReceipt","native","wrap","isMMLoading","isRFQIdLoading","useSwapActionHandlers","onSwitchTokens","onCurrencySelection","onChangeRecipient","dependentField","handleTypeInput","handleTypeOutput","formattedAmounts","toExact","amountToApprove","useApproveCallback","setApprovalSubmitted","maxAmountInput","handleInputSelect","newCurrencyInput","newCurrencyInputId","replaceBrowserHistory","handleMaxInput","handlePercentInput","percent","useIsTransactionUnsupported","INPUT","OUTPUT","smartRouterOn","onUseSmartRouterChecked","allowRecipient","CurrencyInputHeader","Wrapper","minHeight","CurrencyInputPanel","showMaxButton","maxAmount","showQuickInputButton","onPercentInput","onMax","onCurrencySelect","otherCurrency","showCommonBases","showUSDPrice","commonBasesType","CommonBasesType","AccessRisk","SwapUI","MessageText","ArrowWrapper","clickable","price","Skeleton","onSlippageClick","allowedSlippageSlot","MMCommitButton","SmartSwapCommitButton","StyledSwapContainer","lg","xxl","$isChartExpanded","StyledInputCurrencyWrapper","queryClient","QueryClient","isDesktop","singleTokenPrice","useSingleTokenSwapInfo","newCurrencyOutput","newCurrencyOutputId","Page","removePadding","hideFooterOnDesktop","position","PriceChartContainer","currentSwapPrice","BottomDrawer","content","isFullWidthContainer","setIsOpen","AppBody","QueryClientProvider","client","SwapPage","chains","CHAIN_IDS","swap","css","warning","dropdown","attrs","ellipsis","withConfig","SwapCallbackErrorInner","failure33","SwapCallbackErrorInnerAlertTriangle","warning33","__webpack_exports__","priceImpactWithoutFeeConfirmMin","allowedPriceImpactHigh","confirmWord","prompt","word","confirm"],"sourceRoot":""}