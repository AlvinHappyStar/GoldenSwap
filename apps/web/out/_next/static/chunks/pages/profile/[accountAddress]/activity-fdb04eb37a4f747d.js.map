{"version":3,"file":"static/chunks/pages/profile/[accountAddress]/activity-fdb04eb37a4f747d.js","mappings":"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","sources":["webpack://_N_E/?6e2b","webpack://_N_E/./src/views/Profile/utils/sortUserActivity.tsx","webpack://_N_E/./src/views/Profile/components/ActivityHistory/index.tsx","webpack://_N_E/./src/pages/profile/[accountAddress]/activity.tsx","webpack://_N_E/./src/views/Nft/market/ActivityHistory/utils/fetchActivityNftMetadata.tsx","webpack://_N_E/./src/views/Nft/market/components/BaseSubMenu.tsx","webpack://_N_E/./src/views/Profile/components/SubMenu.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/profile/[accountAddress]/activity\",\n      function () {\n        return require(\"private-next-pages/profile/[accountAddress]/activity.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/profile/[accountAddress]/activity\"])\n      });\n    }\n  ","import { Activity, AskOrder, AskOrderType, MarketEvent, Transaction, UserActivity } from 'state/nftMarket/types'\nimport orderBy from 'lodash/orderBy'\n\nexport const sortUserActivity = (account: string, userActivity: UserActivity): Activity[] => {\n  const { askOrderHistory, buyTradeHistory, sellTradeHistory } = userActivity\n\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactions: Transaction[]): Activity[] => {\n    const transformedTransactions = transactions.map((transaction) => {\n      const userSeller = transaction.seller.id === account.toLowerCase()\n      const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n      const { timestamp, nft } = transaction\n      const price = transaction.askPrice\n      const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n      const tx = transaction.id\n      return { marketEvent, price, otherParty, timestamp, nft, tx }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrders.map((askOrder) => {\n      const marketEvent = getAskOrderEvent(askOrder.orderType)\n      const { timestamp, nft } = askOrder\n      const price = askOrder.askPrice\n      const tx = askOrder.id\n      return { marketEvent, price, timestamp, nft, tx }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [\n    ...transformAskOrders(askOrderHistory),\n    ...transformTransactions(buyTradeHistory),\n    ...transformTransactions(sellTradeHistory),\n  ]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = orderBy(allActivity, (activity) => parseInt(activity.timestamp, 10), 'desc')\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import { useEffect, useState } from 'react'\nimport { useAccount } from 'wagmi'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { getUserActivity } from 'state/nftMarket/helpers'\nimport { PaginationButton, Card, Flex, Table, Text, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from '@pancakeswap/localization'\nimport TableLoader from 'components/TableLoader'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport { useRouter } from 'next/router'\nimport { sortUserActivity } from '../../utils/sortUserActivity'\nimport NoNftsImage from '../../../Nft/market/components/Activity/NoNftsImage'\nimport ActivityRow from '../../../Nft/market/components/Activity/ActivityRow'\nimport { fetchActivityNftMetadata } from '../../../Nft/market/ActivityHistory/utils/fetchActivityNftMetadata'\n\nconst MAX_PER_PAGE = 8\n\nconst ActivityHistory = () => {\n  const { address: account } = useAccount()\n  const dispatch = useAppDispatch()\n  const accountAddress = useRouter().query.accountAddress as string\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useEffect(() => {\n    const fetchAddressActivity = async () => {\n      try {\n        const addressActivity = await getUserActivity(accountAddress.toLowerCase())\n        setSortedUserActivities(sortUserActivity(accountAddress, addressActivity))\n        setIsLoading(false)\n      } catch (error) {\n        console.error('Failed to fetch address activity', error)\n      }\n    }\n\n    if (isAddress(accountAddress)) {\n      fetchAddressActivity()\n    }\n  }, [account, accountAddress, dispatch])\n\n  useEffect(() => {\n    const fetchNftMetadata = async () => {\n      const nfts = await fetchActivityNftMetadata(sortedUserActivities)\n      setNftMetadata(nfts)\n    }\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages()\n      fetchNftMetadata()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setNftMetadata([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedUserActivities])\n\n  useEffect(() => {\n    const getActivitySlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedUserActivities.length > 0) {\n      getActivitySlice()\n    }\n  }, [sortedUserActivities, currentPage])\n\n  return (\n    <Card style={{ overflowX: 'auto' }}>\n      {sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                <Th textAlign=\"right\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"center\"> {t('From/To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {isLoading ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  const nftMeta = nftMetadata.find(\n                    (metaNft) =>\n                      metaNft.tokenId === activity.nft.tokenId &&\n                      metaNft.collectionAddress.toLowerCase() === activity.nft?.collection.id.toLowerCase(),\n                  )\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nftMeta}\n                      bnbBusdPrice={bnbBusdPrice}\n                      isUserActivity\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PaginationButton\n              showMaxPageText\n              currentPage={currentPage}\n              maxPage={maxPage}\n              setCurrentPage={setCurrentPage}\n            />\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityHistory\n","import { NftProfileLayout } from 'views/Profile'\nimport ActivityHistory from 'views/Profile/components/ActivityHistory'\nimport SubMenu from 'views/Profile/components/SubMenu'\n\nconst NftProfileActivityPage = () => {\n  return (\n    <>\n      <SubMenu />\n      <ActivityHistory />\n    </>\n  )\n}\n\nNftProfileActivityPage.Layout = NftProfileLayout\n\nexport default NftProfileActivityPage\n","import { Activity, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\nimport { getNftsFromCollectionApi, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport uniqBy from 'lodash/uniqBy'\nimport partition from 'lodash/partition'\nimport { isAddress } from 'utils'\nimport { pancakeBunniesAddress } from '../../constants'\n\nexport const fetchActivityNftMetadata = async (activities: Activity[]): Promise<NftToken[]> => {\n  const [pbCollections, nonPBCollections] = partition(\n    activities,\n    (activity) => isAddress(activity.nft.collection.id) === pancakeBunniesAddress,\n  )\n\n  const activityNftTokenIds = uniqBy(\n    nonPBCollections.map((activity): TokenIdWithCollectionAddress => {\n      return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n    }),\n    (tokenWithCollectionAddress) =>\n      `${tokenWithCollectionAddress.tokenId}#${tokenWithCollectionAddress.collectionAddress}`,\n  )\n\n  const [bunniesMetadata, nfts] = await Promise.all([\n    pbCollections.length ? getNftsFromCollectionApi(pancakeBunniesAddress) : Promise.resolve(null),\n    getNftsFromDifferentCollectionsApi(activityNftTokenIds),\n  ])\n\n  const pbNfts = bunniesMetadata\n    ? pbCollections.map((activity) => {\n        const { name: collectionName } = bunniesMetadata.data[activity.nft.otherId].collection\n        return {\n          ...bunniesMetadata.data[activity.nft.otherId],\n          tokenId: activity.nft.tokenId,\n          attributes: [{ traitType: 'bunnyId', value: activity.nft.otherId }],\n          collectionAddress: activity.nft.collection.id,\n          collectionName,\n        }\n      })\n    : []\n\n  return nfts.concat(pbNfts)\n}\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n\n  > div {\n    background-color: transparent;\n  }\n`\n\nexport default BaseSubMenu\n","import { useTranslation } from '@pancakeswap/localization'\nimport { useRouter } from 'next/router'\nimport BaseSubMenu from '../../Nft/market/components/BaseSubMenu'\n\nconst SubMenuComponent: React.FC<React.PropsWithChildren> = () => {\n  const { t } = useTranslation()\n  const router = useRouter()\n  const accountAddress = router.query.accountAddress as string\n  const { asPath } = router\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={asPath} justifyContent=\"flex-start\" mb=\"18px\" />\n}\n\nexport default SubMenuComponent\n"],"names":["window","__NEXT_P","push","__webpack_require__","sortUserActivity","account","userActivity","askOrderHistory","buyTradeHistory","sellTradeHistory","getAskOrderEvent","orderType","AskOrderType","MarketEvent","transformTransactions","transactions","map","transaction","userSeller","seller","id","toLowerCase","marketEvent","timestamp","nft","price","askPrice","otherParty","buyer","tx","allActivity","_to_consumable_array","Z","askOrders","askOrder","length","orderBy","activity","parseInt","components_ActivityHistory","address","useAccount","dispatch","useAppDispatch","accountAddress","useRouter","query","theme","useTheme","t","useTranslation","useState","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","sortedUserActivities","setSortedUserActivities","isLoading","setIsLoading","bnbBusdPrice","useBNBBusdPrice","useMatchBreakpoints","isXs","isSm","useEffect","fetchAddressActivity","_async_to_generator","getUserActivity","_state","sent","console","error","isAddress","fetchNftMetadata","fetchActivityNftMetadata","Math","ceil","slice","MAX_PER_PAGE","jsx_runtime","jsx","Card","style","overflowX","jsxs","Fragment","Table","thead","tr","Th","textAlign","tbody","TableLoader","nftMeta","find","metaNft","tokenId","collectionAddress","collection","ActivityRow","isUserActivity","concat","Flex","borderTop","colors","cardBorder","pt","flexDirection","justifyContent","height","PaginationButton","showMaxPageText","p","alignItems","NoNftsImage","Text","bold","NftProfileActivityPage","SubMenu","ActivityHistory","Layout","NftProfileLayout","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__","activities","partition","pbCollections","nonPBCollections","activityNftTokenIds","_ref","bunniesMetadata","nfts","pbNfts","pancakeBunniesAddress","uniqBy","tokenWithCollectionAddress","Promise","all","getNftsFromCollectionApi","resolve","getNftsFromDifferentCollectionsApi","_swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_7__","apply","name","data","otherId","_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_8__","_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_9__","attributes","traitType","value","collectionName","BaseSubMenu","styled","SubMenuItems","param","__webpack_exports__","router","asPath","ItemsConfig","label","href","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","items","activeItem","mb"],"sourceRoot":""}