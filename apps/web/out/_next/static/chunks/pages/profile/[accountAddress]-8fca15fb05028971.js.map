{"version":3,"file":"static/chunks/pages/profile/[accountAddress]-8fca15fb05028971.js","mappings":"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","sources":["webpack://_N_E/?af64","webpack://_N_E/./src/views/Profile/components/UnconnectedProfileNfts.tsx","webpack://_N_E/./src/views/Profile/components/UserNfts.tsx","webpack://_N_E/./src/pages/profile/[accountAddress].tsx","webpack://_N_E/./src/views/Nft/market/components/BaseSubMenu.tsx","webpack://_N_E/./src/views/Nft/market/components/GridPlaceholder.tsx","webpack://_N_E/./src/views/Profile/components/SubMenu.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/profile/[accountAddress]\",\n      function () {\n        return require(\"private-next-pages/profile/[accountAddress].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/profile/[accountAddress]\"])\n      });\n    }\n  ","import { Grid, Text, Flex } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { CollectibleLinkCard } from '../../Nft/market/components/CollectibleCard'\nimport GridPlaceholder from '../../Nft/market/components/GridPlaceholder'\nimport NoNftsImage from '../../Nft/market/components/Activity/NoNftsImage'\n\nconst UserNfts: React.FC<React.PropsWithChildren<{ nfts: NftToken[]; isLoading: boolean }>> = ({ nfts, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData } = nft\n\n            return (\n              <CollectibleLinkCard\n                key={`${nft?.tokenId}-${nft?.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData?.currentAskPrice)\n                }\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { CollectibleActionCard } from '../../Nft/market/components/CollectibleCard'\nimport GridPlaceholder from '../../Nft/market/components/GridPlaceholder'\nimport ProfileNftModal from '../../Nft/market/components/ProfileNftModal'\nimport NoNftsImage from '../../Nft/market/components/Activity/NoNftsImage'\nimport SellModal from '../../Nft/market/components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts: React.FC<\n  React.PropsWithChildren<{\n    nfts: NftToken[]\n    isLoading: boolean\n    onSuccessSale: () => void\n    onSuccessEditProfile: () => void\n  }>\n> = ({ nfts, isLoading, onSuccessSale, onSuccessEditProfile }) => {\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(\n    <ProfileNftModal nft={clickedProfileNft.nft} onSuccess={onSuccessEditProfile} />,\n  )\n  const [onPresentSellModal] = useModal(\n    <SellModal\n      variant={clickedSellNft.variant}\n      nftToSell={clickedSellNft.nft}\n      onSuccessSale={onSuccessSale}\n      onSuccessEditProfile={onSuccessEditProfile}\n    />,\n  )\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft?.tokenId}-${nft?.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData?.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import { useAccount } from 'wagmi'\nimport { useRouter } from 'next/router'\nimport { useProfileForAddress } from 'state/profile/hooks'\nimport { NftProfileLayout } from 'views/Profile'\nimport SubMenu from 'views/Profile/components/SubMenu'\nimport UnconnectedProfileNfts from 'views/Profile/components/UnconnectedProfileNfts'\nimport UserNfts from 'views/Profile/components/UserNfts'\nimport { useNftsForAddress } from 'views/Nft/market/hooks/useNftsForAddress'\n\nconst NftProfilePage = () => {\n  const { address: account } = useAccount()\n  const accountAddress = useRouter().query.accountAddress as string\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\n  const {\n    profile,\n    isValidating: isProfileFetching,\n    refresh: refreshProfile,\n  } = useProfileForAddress(accountAddress, {\n    revalidateIfStale: true,\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n  })\n  const {\n    nfts,\n    isLoading: isNftLoading,\n    refresh: refreshUserNfts,\n  } = useNftsForAddress(accountAddress, profile, isProfileFetching)\n\n  return (\n    <>\n      <SubMenu />\n      {isConnectedProfile ? (\n        <UserNfts\n          nfts={nfts}\n          isLoading={isNftLoading}\n          onSuccessSale={refreshUserNfts}\n          onSuccessEditProfile={async () => {\n            await refreshProfile()\n            refreshUserNfts()\n          }}\n        />\n      ) : (\n        <UnconnectedProfileNfts nfts={nfts} isLoading={isNftLoading} />\n      )}\n    </>\n  )\n}\n\nNftProfilePage.Layout = NftProfileLayout\n\nexport default NftProfilePage\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n\n  > div {\n    background-color: transparent;\n  }\n`\n\nexport default BaseSubMenu\n","import { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<React.PropsWithChildren<BoxProps>> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"258px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<React.PropsWithChildren<GridPlaceholderProps>> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import { useTranslation } from '@pancakeswap/localization'\nimport { useRouter } from 'next/router'\nimport BaseSubMenu from '../../Nft/market/components/BaseSubMenu'\n\nconst SubMenuComponent: React.FC<React.PropsWithChildren> = () => {\n  const { t } = useTranslation()\n  const router = useRouter()\n  const accountAddress = router.query.accountAddress as string\n  const { asPath } = router\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={asPath} justifyContent=\"flex-start\" mb=\"18px\" />\n}\n\nexport default SubMenuComponent\n"],"names":["window","__NEXT_P","push","__webpack_require__","UnconnectedProfileNfts","param","nfts","isLoading","t","useTranslation","jsx_runtime","jsx","Fragment","length","Grid","gridGap","gridTemplateColumns","alignItems","map","nft","marketData","CollectibleLinkCard","currentAskPrice","isTradable","parseFloat","tokenId","concat","collectionName","GridPlaceholder","jsxs","Flex","p","flexDirection","NoNftsImage","Text","pt","bold","components_UserNfts","onSuccessSale","onSuccessEditProfile","useState","location","clickedProfileNft","setClickedProfileNft","variant","clickedSellNft","setClickedSellNft","onPresentProfileNftModal","useModal","ProfileNftModal","onSuccess","onPresentSellModal","SellModal","nftToSell","handleCollectibleClick","NftLocation","useEffect","CollectibleActionCard","isUserNft","onClick","nftLocation","NftProfilePage","address","useAccount","accountAddress","useRouter","query","isConnectedProfile","account","toLowerCase","useProfileForAddress","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","profile","isValidating","refresh","useNftsForAddress","isProfileFetching","SubMenu","UserNfts","isNftLoading","refreshUserNfts","_async_to_generator","Z","refreshProfile","_state","sent","Layout","NftProfileLayout","_accountAddress_","BaseSubMenu","styled","SubMenuItems","theme","colors","cardBorder","__webpack_exports__","GridPlaceholderItem","props","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Box","Skeleton","height","mb","width","_param","numItems","times","_param_numItems","itemKey","router","asPath","ItemsConfig","label","href","items","activeItem","justifyContent"],"sourceRoot":""}