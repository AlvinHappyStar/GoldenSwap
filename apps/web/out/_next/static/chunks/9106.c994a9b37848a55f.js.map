{"version":3,"file":"static/chunks/9106.c994a9b37848a55f.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/qrcode.react/lib/esm/index.js","webpack://_N_E/../../packages/ui-wallets/src/components/QRCode.tsx","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n","import { QRCodeSVG } from 'qrcode.react'\n\nconst QRCode = ({ url, image }: { url: string; image?: string }) => (\n  <QRCodeSVG\n    value={url}\n    size={288}\n    level=\"H\"\n    includeMargin\n    imageSettings={\n      image\n        ? {\n            src: image,\n            x: undefined,\n            y: undefined,\n            height: 72,\n            width: 72,\n            excavate: true,\n          }\n        : undefined\n    }\n  />\n)\n\nexport default QRCode\n"],"names":["qrcodegen2","qrcodegen","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","assert","length","dataCapacityBits","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","upward","invert","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","QrCode","val","len","cond","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substr","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","_Ecc","LOW","QrCode2","_Mode","numBitsCharCount","KANJI","QrSegment2","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","QRCodeSVG","props","level","bgColor","fgColor","includeMargin","imageSettings","otherProps","cells","margin","numCells","calculatedImageSettings","getImageSettings","defaultSize","scale","w","width","h","height","excavation","excavate","floorX","floorY","image","cell","react","createElement","xlinkHref","src","preserveAspectRatio","fgPath","generatePath","ops","start","join","viewBox","fill","d","shapeRendering","Path2D","addPath","e","components_QRCode","param","url","jsx_runtime","jsx","undefined"],"sourceRoot":""}